
STM32F4-Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067a4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800692c  0800692c  0001692c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006a6c  08006a6c  00016a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006a74  08006a74  00016a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006a78  08006a78  00016a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000005ec  20000000  08006a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000205ec  2**0
                  CONTENTS
  8 .bss          0001c464  200005ec  200005ec  000205ec  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2001ca50  2001ca50  000205ec  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000205ec  2**0
                  CONTENTS, READONLY
 11 .debug_info   00014538  00000000  00000000  0002061c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003a30  00000000  00000000  00034b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    0000a940  00000000  00000000  00038584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  00042ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d0  00000000  00000000  00043b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022c21  00000000  00000000  00044e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018cf1  00000000  00000000  00067a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca9d8  00000000  00000000  0008073a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cf  00000000  00000000  0014b112  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027bc  00000000  00000000  0014b1e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200005ec 	.word	0x200005ec
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006914 	.word	0x08006914

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200005f0 	.word	0x200005f0
 80001c4:	08006914 	.word	0x08006914

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <cs43l22_SetFrequency>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
  return 0;
}
 80004cc:	2000      	movs	r0, #0
 80004ce:	4770      	bx	lr

080004d0 <cs43l22_Reset>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
  return 0;
}
 80004d0:	2000      	movs	r0, #0
 80004d2:	4770      	bx	lr

080004d4 <cs43l22_SetVolume>:
{
 80004d4:	b507      	push	{r0, r1, r2, lr}
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80004d6:	2964      	cmp	r1, #100	; 0x64
 80004d8:	bf9b      	ittet	ls
 80004da:	2264      	movls	r2, #100	; 0x64
 80004dc:	ebc1 2101 	rsbls	r1, r1, r1, lsl #8
 80004e0:	22ff      	movhi	r2, #255	; 0xff
 80004e2:	fbb1 f2f2 	udivls	r2, r1, r2
 80004e6:	bf98      	it	ls
 80004e8:	b2d2      	uxtbls	r2, r2
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80004ea:	3219      	adds	r2, #25
 80004ec:	b2c0      	uxtb	r0, r0
 80004ee:	b2d2      	uxtb	r2, r2
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
  uint32_t result = 0;
  
  AUDIO_IO_Write(Addr, Reg, Value);
 80004f0:	2120      	movs	r1, #32
 80004f2:	9201      	str	r2, [sp, #4]
 80004f4:	9000      	str	r0, [sp, #0]
 80004f6:	f000 fdc1 	bl	800107c <AUDIO_IO_Write>
 80004fa:	9800      	ldr	r0, [sp, #0]
 80004fc:	9a01      	ldr	r2, [sp, #4]
 80004fe:	2121      	movs	r1, #33	; 0x21
 8000500:	f000 fdbc 	bl	800107c <AUDIO_IO_Write>
}
 8000504:	2000      	movs	r0, #0
 8000506:	b003      	add	sp, #12
 8000508:	f85d fb04 	ldr.w	pc, [sp], #4

0800050c <cs43l22_Init>:
{
 800050c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050e:	4606      	mov	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000510:	b2f4      	uxtb	r4, r6
{
 8000512:	460d      	mov	r5, r1
 8000514:	4617      	mov	r7, r2
  AUDIO_IO_Init();     
 8000516:	f000 fd7d 	bl	8001014 <AUDIO_IO_Init>
  AUDIO_IO_Write(Addr, Reg, Value);
 800051a:	2201      	movs	r2, #1
 800051c:	2102      	movs	r1, #2
 800051e:	4620      	mov	r0, r4
 8000520:	f000 fdac 	bl	800107c <AUDIO_IO_Write>
  switch (OutputDevice)
 8000524:	1e6a      	subs	r2, r5, #1
 8000526:	4b2a      	ldr	r3, [pc, #168]	; (80005d0 <cs43l22_Init+0xc4>)
 8000528:	2a03      	cmp	r2, #3
 800052a:	d84e      	bhi.n	80005ca <cs43l22_Init+0xbe>
 800052c:	e8df f002 	tbb	[pc, r2]
 8000530:	4d4b4902 	.word	0x4d4b4902
    OutputDev = 0xFA;
 8000534:	22fa      	movs	r2, #250	; 0xfa
    OutputDev = 0x05;
 8000536:	701a      	strb	r2, [r3, #0]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000538:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 800053a:	2104      	movs	r1, #4
 800053c:	4620      	mov	r0, r4
 800053e:	f000 fd9d 	bl	800107c <AUDIO_IO_Write>
 8000542:	2281      	movs	r2, #129	; 0x81
 8000544:	2105      	movs	r1, #5
 8000546:	4620      	mov	r0, r4
 8000548:	f000 fd98 	bl	800107c <AUDIO_IO_Write>
 800054c:	2204      	movs	r2, #4
 800054e:	2106      	movs	r1, #6
 8000550:	4620      	mov	r0, r4
 8000552:	f000 fd93 	bl	800107c <AUDIO_IO_Write>
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000556:	4630      	mov	r0, r6
 8000558:	4639      	mov	r1, r7
 800055a:	f7ff ffbb 	bl	80004d4 <cs43l22_SetVolume>
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 800055e:	2d02      	cmp	r5, #2
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000560:	4606      	mov	r6, r0
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000562:	d00e      	beq.n	8000582 <cs43l22_Init+0x76>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000564:	2206      	movs	r2, #6
 8000566:	210f      	movs	r1, #15
 8000568:	4620      	mov	r0, r4
 800056a:	f000 fd87 	bl	800107c <AUDIO_IO_Write>
 800056e:	2200      	movs	r2, #0
 8000570:	2124      	movs	r1, #36	; 0x24
 8000572:	4620      	mov	r0, r4
 8000574:	f000 fd82 	bl	800107c <AUDIO_IO_Write>
 8000578:	2200      	movs	r2, #0
 800057a:	2125      	movs	r1, #37	; 0x25
 800057c:	4620      	mov	r0, r4
 800057e:	f000 fd7d 	bl	800107c <AUDIO_IO_Write>
 8000582:	4620      	mov	r0, r4
 8000584:	2200      	movs	r2, #0
 8000586:	210a      	movs	r1, #10
 8000588:	f000 fd78 	bl	800107c <AUDIO_IO_Write>
 800058c:	4620      	mov	r0, r4
 800058e:	2204      	movs	r2, #4
 8000590:	210e      	movs	r1, #14
 8000592:	f000 fd73 	bl	800107c <AUDIO_IO_Write>
 8000596:	4620      	mov	r0, r4
 8000598:	2200      	movs	r2, #0
 800059a:	2127      	movs	r1, #39	; 0x27
 800059c:	f000 fd6e 	bl	800107c <AUDIO_IO_Write>
 80005a0:	4620      	mov	r0, r4
 80005a2:	220f      	movs	r2, #15
 80005a4:	211f      	movs	r1, #31
 80005a6:	f000 fd69 	bl	800107c <AUDIO_IO_Write>
 80005aa:	4620      	mov	r0, r4
 80005ac:	220a      	movs	r2, #10
 80005ae:	211a      	movs	r1, #26
 80005b0:	f000 fd64 	bl	800107c <AUDIO_IO_Write>
 80005b4:	4620      	mov	r0, r4
 80005b6:	220a      	movs	r2, #10
 80005b8:	211b      	movs	r1, #27
 80005ba:	f000 fd5f 	bl	800107c <AUDIO_IO_Write>
}
 80005be:	4630      	mov	r0, r6
 80005c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    OutputDev = 0xAF;
 80005c2:	22af      	movs	r2, #175	; 0xaf
 80005c4:	e7b7      	b.n	8000536 <cs43l22_Init+0x2a>
    OutputDev = 0xAA;
 80005c6:	22aa      	movs	r2, #170	; 0xaa
 80005c8:	e7b5      	b.n	8000536 <cs43l22_Init+0x2a>
    OutputDev = 0x05;
 80005ca:	2205      	movs	r2, #5
 80005cc:	e7b3      	b.n	8000536 <cs43l22_Init+0x2a>
 80005ce:	bf00      	nop
 80005d0:	20000608 	.word	0x20000608

080005d4 <cs43l22_SetOutputMode>:
  switch (Output) 
 80005d4:	3901      	subs	r1, #1
{
 80005d6:	b510      	push	{r4, lr}
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 80005d8:	b2c0      	uxtb	r0, r0
 80005da:	4c10      	ldr	r4, [pc, #64]	; (800061c <cs43l22_SetOutputMode+0x48>)
  switch (Output) 
 80005dc:	2903      	cmp	r1, #3
 80005de:	d817      	bhi.n	8000610 <cs43l22_SetOutputMode+0x3c>
 80005e0:	e8df f001 	tbb	[pc, r1]
 80005e4:	16100a02 	.word	0x16100a02
  AUDIO_IO_Write(Addr, Reg, Value);
 80005e8:	22fa      	movs	r2, #250	; 0xfa
 80005ea:	2104      	movs	r1, #4
 80005ec:	f000 fd46 	bl	800107c <AUDIO_IO_Write>
      OutputDev = 0xFA;
 80005f0:	23fa      	movs	r3, #250	; 0xfa
      OutputDev = 0x05;
 80005f2:	7023      	strb	r3, [r4, #0]
}
 80005f4:	2000      	movs	r0, #0
 80005f6:	bd10      	pop	{r4, pc}
  AUDIO_IO_Write(Addr, Reg, Value);
 80005f8:	22af      	movs	r2, #175	; 0xaf
 80005fa:	2104      	movs	r1, #4
 80005fc:	f000 fd3e 	bl	800107c <AUDIO_IO_Write>
      OutputDev = 0xAF;
 8000600:	23af      	movs	r3, #175	; 0xaf
 8000602:	e7f6      	b.n	80005f2 <cs43l22_SetOutputMode+0x1e>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000604:	22aa      	movs	r2, #170	; 0xaa
 8000606:	2104      	movs	r1, #4
 8000608:	f000 fd38 	bl	800107c <AUDIO_IO_Write>
      OutputDev = 0xAA;
 800060c:	23aa      	movs	r3, #170	; 0xaa
 800060e:	e7f0      	b.n	80005f2 <cs43l22_SetOutputMode+0x1e>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000610:	2205      	movs	r2, #5
 8000612:	2104      	movs	r1, #4
 8000614:	f000 fd32 	bl	800107c <AUDIO_IO_Write>
      OutputDev = 0x05;
 8000618:	2305      	movs	r3, #5
 800061a:	e7ea      	b.n	80005f2 <cs43l22_SetOutputMode+0x1e>
 800061c:	20000608 	.word	0x20000608

08000620 <cs43l22_DeInit>:
  AUDIO_IO_DeInit();
 8000620:	f000 bd2a 	b.w	8001078 <AUDIO_IO_DeInit>

08000624 <cs43l22_ReadID>:
{
 8000624:	b510      	push	{r4, lr}
 8000626:	4604      	mov	r4, r0
  AUDIO_IO_Init(); 
 8000628:	f000 fcf4 	bl	8001014 <AUDIO_IO_Init>
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 800062c:	2101      	movs	r1, #1
 800062e:	b2e0      	uxtb	r0, r4
 8000630:	f000 fd42 	bl	80010b8 <AUDIO_IO_Read>
}
 8000634:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8000638:	bd10      	pop	{r4, pc}

0800063a <cs43l22_SetMute.part.0>:
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
 800063a:	b507      	push	{r0, r1, r2, lr}
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 800063c:	b2c0      	uxtb	r0, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 800063e:	22ff      	movs	r2, #255	; 0xff
 8000640:	2104      	movs	r1, #4
 8000642:	9001      	str	r0, [sp, #4]
 8000644:	f000 fd1a 	bl	800107c <AUDIO_IO_Write>
 8000648:	9801      	ldr	r0, [sp, #4]
 800064a:	2201      	movs	r2, #1
 800064c:	2122      	movs	r1, #34	; 0x22
 800064e:	f000 fd15 	bl	800107c <AUDIO_IO_Write>
 8000652:	9801      	ldr	r0, [sp, #4]
 8000654:	2201      	movs	r2, #1
 8000656:	2123      	movs	r1, #35	; 0x23
}
 8000658:	b003      	add	sp, #12
 800065a:	f85d eb04 	ldr.w	lr, [sp], #4
  AUDIO_IO_Write(Addr, Reg, Value);
 800065e:	f000 bd0d 	b.w	800107c <AUDIO_IO_Write>
	...

08000664 <cs43l22_SetMute>:
  if(Cmd == AUDIO_MUTE_ON)
 8000664:	2901      	cmp	r1, #1
{
 8000666:	b507      	push	{r0, r1, r2, lr}
  if(Cmd == AUDIO_MUTE_ON)
 8000668:	d105      	bne.n	8000676 <cs43l22_SetMute+0x12>
 800066a:	f7ff ffe6 	bl	800063a <cs43l22_SetMute.part.0>
}
 800066e:	2000      	movs	r0, #0
 8000670:	b003      	add	sp, #12
 8000672:	f85d fb04 	ldr.w	pc, [sp], #4
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8000676:	b2c0      	uxtb	r0, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8000678:	2200      	movs	r2, #0
 800067a:	2122      	movs	r1, #34	; 0x22
 800067c:	9001      	str	r0, [sp, #4]
 800067e:	f000 fcfd 	bl	800107c <AUDIO_IO_Write>
 8000682:	9801      	ldr	r0, [sp, #4]
 8000684:	2200      	movs	r2, #0
 8000686:	2123      	movs	r1, #35	; 0x23
 8000688:	f000 fcf8 	bl	800107c <AUDIO_IO_Write>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800068c:	4b03      	ldr	r3, [pc, #12]	; (800069c <cs43l22_SetMute+0x38>)
  AUDIO_IO_Write(Addr, Reg, Value);
 800068e:	9801      	ldr	r0, [sp, #4]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000690:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8000692:	2104      	movs	r1, #4
 8000694:	f000 fcf2 	bl	800107c <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8000698:	e7e9      	b.n	800066e <cs43l22_SetMute+0xa>
 800069a:	bf00      	nop
 800069c:	20000608 	.word	0x20000608

080006a0 <cs43l22_Resume>:
{
 80006a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  volatile uint32_t index = 0x00;
 80006a2:	2600      	movs	r6, #0
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80006a4:	4631      	mov	r1, r6
{
 80006a6:	4604      	mov	r4, r0
  volatile uint32_t index = 0x00;
 80006a8:	9603      	str	r6, [sp, #12]
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80006aa:	f7ff ffdb 	bl	8000664 <cs43l22_SetMute>
  for(index = 0x00; index < 0xFF; index++);
 80006ae:	9603      	str	r6, [sp, #12]
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80006b0:	4605      	mov	r5, r0
  for(index = 0x00; index < 0xFF; index++);
 80006b2:	9b03      	ldr	r3, [sp, #12]
 80006b4:	2bfe      	cmp	r3, #254	; 0xfe
 80006b6:	d90e      	bls.n	80006d6 <cs43l22_Resume+0x36>
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <cs43l22_Resume+0x40>)
 80006ba:	b2e0      	uxtb	r0, r4
 80006bc:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 80006be:	9001      	str	r0, [sp, #4]
 80006c0:	2104      	movs	r1, #4
 80006c2:	f000 fcdb 	bl	800107c <AUDIO_IO_Write>
 80006c6:	9801      	ldr	r0, [sp, #4]
 80006c8:	229e      	movs	r2, #158	; 0x9e
 80006ca:	2102      	movs	r1, #2
 80006cc:	f000 fcd6 	bl	800107c <AUDIO_IO_Write>
}
 80006d0:	4628      	mov	r0, r5
 80006d2:	b004      	add	sp, #16
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
  for(index = 0x00; index < 0xFF; index++);
 80006d6:	9b03      	ldr	r3, [sp, #12]
 80006d8:	3301      	adds	r3, #1
 80006da:	9303      	str	r3, [sp, #12]
 80006dc:	e7e9      	b.n	80006b2 <cs43l22_Resume+0x12>
 80006de:	bf00      	nop
 80006e0:	20000608 	.word	0x20000608

080006e4 <cs43l22_Pause>:
{  
 80006e4:	b510      	push	{r4, lr}
 80006e6:	4604      	mov	r4, r0
  if(Cmd == AUDIO_MUTE_ON)
 80006e8:	f7ff ffa7 	bl	800063a <cs43l22_SetMute.part.0>
  AUDIO_IO_Write(Addr, Reg, Value);
 80006ec:	b2e0      	uxtb	r0, r4
 80006ee:	2201      	movs	r2, #1
 80006f0:	2102      	movs	r1, #2
 80006f2:	f000 fcc3 	bl	800107c <AUDIO_IO_Write>
}
 80006f6:	2000      	movs	r0, #0
 80006f8:	bd10      	pop	{r4, pc}
	...

080006fc <cs43l22_Stop>:
{
 80006fc:	b513      	push	{r0, r1, r4, lr}
 80006fe:	4604      	mov	r4, r0
  if(Cmd == AUDIO_MUTE_ON)
 8000700:	f7ff ff9b 	bl	800063a <cs43l22_SetMute.part.0>
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000704:	b2e0      	uxtb	r0, r4
  AUDIO_IO_Write(Addr, Reg, Value);
 8000706:	2204      	movs	r2, #4
 8000708:	210e      	movs	r1, #14
 800070a:	9001      	str	r0, [sp, #4]
 800070c:	f000 fcb6 	bl	800107c <AUDIO_IO_Write>
 8000710:	9801      	ldr	r0, [sp, #4]
 8000712:	229f      	movs	r2, #159	; 0x9f
 8000714:	2102      	movs	r1, #2
 8000716:	f000 fcb1 	bl	800107c <AUDIO_IO_Write>
  Is_cs43l22_Stop = 1;
 800071a:	4b03      	ldr	r3, [pc, #12]	; (8000728 <cs43l22_Stop+0x2c>)
 800071c:	2201      	movs	r2, #1
}
 800071e:	2000      	movs	r0, #0
  Is_cs43l22_Stop = 1;
 8000720:	701a      	strb	r2, [r3, #0]
}
 8000722:	b002      	add	sp, #8
 8000724:	bd10      	pop	{r4, pc}
 8000726:	bf00      	nop
 8000728:	20000000 	.word	0x20000000

0800072c <cs43l22_Play>:
{
 800072c:	b570      	push	{r4, r5, r6, lr}
  if(Is_cs43l22_Stop == 1)
 800072e:	4d0d      	ldr	r5, [pc, #52]	; (8000764 <cs43l22_Play+0x38>)
 8000730:	782b      	ldrb	r3, [r5, #0]
 8000732:	2b01      	cmp	r3, #1
{
 8000734:	4604      	mov	r4, r0
  if(Is_cs43l22_Stop == 1)
 8000736:	d113      	bne.n	8000760 <cs43l22_Play+0x34>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8000738:	b2c6      	uxtb	r6, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 800073a:	2206      	movs	r2, #6
 800073c:	210e      	movs	r1, #14
 800073e:	4630      	mov	r0, r6
 8000740:	f000 fc9c 	bl	800107c <AUDIO_IO_Write>
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000744:	2100      	movs	r1, #0
 8000746:	4620      	mov	r0, r4
 8000748:	f7ff ff8c 	bl	8000664 <cs43l22_SetMute>
  AUDIO_IO_Write(Addr, Reg, Value);
 800074c:	229e      	movs	r2, #158	; 0x9e
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800074e:	4604      	mov	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8000750:	2102      	movs	r1, #2
 8000752:	4630      	mov	r0, r6
 8000754:	f000 fc92 	bl	800107c <AUDIO_IO_Write>
    Is_cs43l22_Stop = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	702b      	strb	r3, [r5, #0]
}
 800075c:	4620      	mov	r0, r4
 800075e:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t counter = 0;
 8000760:	2400      	movs	r4, #0
  return counter;  
 8000762:	e7fb      	b.n	800075c <cs43l22_Play+0x30>
 8000764:	20000000 	.word	0x20000000

08000768 <LIS302DL_DeInit>:
  * @retval None.
  */
void LIS302DL_DeInit(void)
{
  
}
 8000768:	4770      	bx	lr

0800076a <LIS302DL_Init>:
{
 800076a:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl = 0x00;
 800076c:	2300      	movs	r3, #0
{
 800076e:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 8000770:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Init();
 8000774:	f000 fbba 	bl	8000eec <ACCELERO_IO_Init>
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 8000778:	2201      	movs	r2, #1
 800077a:	2120      	movs	r1, #32
 800077c:	f10d 0007 	add.w	r0, sp, #7
  ctrl = (uint8_t) InitStruct;
 8000780:	f88d 4007 	strb.w	r4, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 8000784:	f000 fc00 	bl	8000f88 <ACCELERO_IO_Write>
}
 8000788:	b002      	add	sp, #8
 800078a:	bd10      	pop	{r4, pc}

0800078c <LIS302DL_ReadID>:
  * @brief  Read LIS302DL device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS302DL_ReadID(void)
{
 800078c:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmp = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	f88d 3007 	strb.w	r3, [sp, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 8000794:	f000 fbaa 	bl	8000eec <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS302DL_WHO_AM_I_ADDR, 1);
 8000798:	f10d 0007 	add.w	r0, sp, #7
 800079c:	2201      	movs	r2, #1
 800079e:	210f      	movs	r1, #15
 80007a0:	f000 fc14 	bl	8000fcc <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
}
 80007a4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80007a8:	b003      	add	sp, #12
 80007aa:	f85d fb04 	ldr.w	pc, [sp], #4

080007ae <LIS302DL_FilterConfig>:
  * @brief  Set LIS302DL Internal High Pass Filter configuration.
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LIS302DL_FilterConfig(uint8_t FilterStruct)
{
 80007ae:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl = 0x00;
 80007b0:	2300      	movs	r3, #0
{
 80007b2:	4604      	mov	r4, r0
  
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 80007b4:	2201      	movs	r2, #1
 80007b6:	f10d 0007 	add.w	r0, sp, #7
 80007ba:	2121      	movs	r1, #33	; 0x21
  uint8_t ctrl = 0x00;
 80007bc:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Read(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 80007c0:	f000 fc04 	bl	8000fcc <ACCELERO_IO_Read>

  /* Clear high pass filter cut-off level, interrupt and data selection bits */
  ctrl &= (uint8_t)~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | \
 80007c4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80007c8:	f020 002f 	bic.w	r0, r0, #47	; 0x2f
                     LIS302DL_HIGHPASSFILTER_LEVEL_3 | \
                     LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);

  ctrl |= FilterStruct;
 80007cc:	4304      	orrs	r4, r0
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 80007ce:	2201      	movs	r2, #1
 80007d0:	2121      	movs	r1, #33	; 0x21
 80007d2:	f10d 0007 	add.w	r0, sp, #7
  ctrl |= FilterStruct;
 80007d6:	f88d 4007 	strb.w	r4, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 80007da:	f000 fbd5 	bl	8000f88 <ACCELERO_IO_Write>
}
 80007de:	b002      	add	sp, #8
 80007e0:	bd10      	pop	{r4, pc}

080007e2 <LIS302DL_Click_IntClear>:
  * @brief  Clear LIS302DL click Interrupt 
  * @param  None
  * @retval None
  */
void LIS302DL_Click_IntClear(void)
{
 80007e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[6], clickreg = 0;
 80007e4:	2300      	movs	r3, #0

  /* Read click and status registers if the available MEMS Accelerometer is LIS302DL */
  ACCELERO_IO_Read(&clickreg, LIS302DL_CLICK_SRC_REG_ADDR, 1); 
 80007e6:	f10d 0007 	add.w	r0, sp, #7
 80007ea:	2201      	movs	r2, #1
 80007ec:	2139      	movs	r1, #57	; 0x39
  uint8_t buffer[6], clickreg = 0;
 80007ee:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Read(&clickreg, LIS302DL_CLICK_SRC_REG_ADDR, 1); 
 80007f2:	f000 fbeb 	bl	8000fcc <ACCELERO_IO_Read>
  ACCELERO_IO_Read(buffer, LIS302DL_STATUS_REG_ADDR, 6);
 80007f6:	2206      	movs	r2, #6
 80007f8:	2127      	movs	r1, #39	; 0x27
 80007fa:	a802      	add	r0, sp, #8
 80007fc:	f000 fbe6 	bl	8000fcc <ACCELERO_IO_Read>
}
 8000800:	b005      	add	sp, #20
 8000802:	f85d fb04 	ldr.w	pc, [sp], #4

08000806 <LIS302DL_RebootCmd>:
  * @brief  Reboot memory content of LIS302DL.
  * @param  None
  * @retval None
  */
void LIS302DL_RebootCmd(void)
{
 8000806:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmpreg;
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 8000808:	2201      	movs	r2, #1
 800080a:	f10d 0007 	add.w	r0, sp, #7
 800080e:	2121      	movs	r1, #33	; 0x21
 8000810:	f000 fbdc 	bl	8000fcc <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS302DL_BOOT_REBOOTMEMORY;
 8000814:	f89d 3007 	ldrb.w	r3, [sp, #7]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 8000818:	2201      	movs	r2, #1
  tmpreg |= LIS302DL_BOOT_REBOOTMEMORY;
 800081a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  ACCELERO_IO_Write(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 800081e:	2121      	movs	r1, #33	; 0x21
 8000820:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= LIS302DL_BOOT_REBOOTMEMORY;
 8000824:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 8000828:	f000 fbae 	bl	8000f88 <ACCELERO_IO_Write>
}
 800082c:	b003      	add	sp, #12
 800082e:	f85d fb04 	ldr.w	pc, [sp], #4

08000832 <LIS302DL_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit rappresentation)
  * @param  pfData: Data out pointer
  * @retval None
  */
void LIS302DL_ReadACC(int16_t *pData)
{
 8000832:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000834:	4604      	mov	r4, r0
  int8_t buffer[6];
  int16_t pnRawData[3];
  uint8_t sensitivity = LIS302DL_SENSITIVITY_2_3G;
  uint8_t crtl, i = 0x00;
  
  ACCELERO_IO_Read(&crtl, LIS302DL_CTRL_REG1_ADDR, 1);
 8000836:	2201      	movs	r2, #1
 8000838:	f10d 0007 	add.w	r0, sp, #7
 800083c:	2120      	movs	r1, #32
 800083e:	f000 fbc5 	bl	8000fcc <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)buffer, LIS302DL_OUT_X_ADDR, 6);
 8000842:	a802      	add	r0, sp, #8
 8000844:	2206      	movs	r2, #6
 8000846:	2129      	movs	r1, #41	; 0x29
 8000848:	f000 fbc0 	bl	8000fcc <ACCELERO_IO_Read>
  for(i=0; i<3; i++)
  {
    pnRawData[i] = buffer[2*i];
  }
  
  switch(crtl & LIS302DL_FULLSCALE_9_2) 
 800084c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    pnRawData[i] = buffer[2*i];
 8000850:	f99d 0008 	ldrsb.w	r0, [sp, #8]
 8000854:	f99d 100a 	ldrsb.w	r1, [sp, #10]
 8000858:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    sensitivity = LIS302DL_SENSITIVITY_2_3G;
    break;
    
    /* FS bit = 1 ==> Sensitivity typical value = 72milligals/digit*/ 
  case LIS302DL_FULLSCALE_9_2:
    sensitivity = LIS302DL_SENSITIVITY_9_2G;
 800085c:	f012 0f20 	tst.w	r2, #32
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8000860:	bf0c      	ite	eq
 8000862:	2212      	moveq	r2, #18
 8000864:	2248      	movne	r2, #72	; 0x48
 8000866:	fb10 f002 	smulbb	r0, r0, r2
 800086a:	fb11 f102 	smulbb	r1, r1, r2
 800086e:	fb13 f302 	smulbb	r3, r3, r2
 8000872:	8020      	strh	r0, [r4, #0]
 8000874:	8061      	strh	r1, [r4, #2]
 8000876:	80a3      	strh	r3, [r4, #4]
  }
}
 8000878:	b004      	add	sp, #16
 800087a:	bd10      	pop	{r4, pc}

0800087c <LIS302DL_InterruptConfig>:
{
 800087c:	b513      	push	{r0, r1, r4, lr}
 800087e:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 8000880:	2300      	movs	r3, #0
  ACCELERO_IO_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 8000882:	f10d 0007 	add.w	r0, sp, #7
 8000886:	2201      	movs	r2, #1
 8000888:	2138      	movs	r1, #56	; 0x38
  uint8_t ctrl = 0x00;
 800088a:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 800088e:	f000 fb9d 	bl	8000fcc <ACCELERO_IO_Read>
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 8000892:	7862      	ldrb	r2, [r4, #1]
 8000894:	7823      	ldrb	r3, [r4, #0]
 8000896:	4313      	orrs	r3, r2
 8000898:	78a2      	ldrb	r2, [r4, #2]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 800089a:	2138      	movs	r1, #56	; 0x38
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 800089c:	4313      	orrs	r3, r2
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 800089e:	f10d 0007 	add.w	r0, sp, #7
 80008a2:	2201      	movs	r2, #1
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 80008a4:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 80008a8:	f000 fb6e 	bl	8000f88 <ACCELERO_IO_Write>
}
 80008ac:	b002      	add	sp, #8
 80008ae:	bd10      	pop	{r4, pc}

080008b0 <LIS302DL_Click_IntConfig>:
{
 80008b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t ctrl = 0x00;
 80008b2:	2300      	movs	r3, #0
 80008b4:	f88d 3003 	strb.w	r3, [sp, #3]
  ACCELERO_IO_ITConfig();
 80008b8:	f000 fb3e 	bl	8000f38 <ACCELERO_IO_ITConfig>
  LIS302DL_InterruptStruct.Latch_Request = LIS302DL_INTERRUPTREQUEST_LATCHED;
 80008bc:	2340      	movs	r3, #64	; 0x40
 80008be:	f88d 3004 	strb.w	r3, [sp, #4]
  LIS302DL_InterruptStruct.SingleClick_Axes = LIS302DL_CLICKINTERRUPT_Z_ENABLE;
 80008c2:	2310      	movs	r3, #16
 80008c4:	f88d 3005 	strb.w	r3, [sp, #5]
  LIS302DL_InterruptConfig(&LIS302DL_InterruptStruct);
 80008c8:	a801      	add	r0, sp, #4
  LIS302DL_InterruptStruct.DoubleClick_Axes = LIS302DL_DOUBLECLICKINTERRUPT_Z_ENABLE;
 80008ca:	2320      	movs	r3, #32
 80008cc:	f88d 3006 	strb.w	r3, [sp, #6]
  ctrl = 0x3F;
 80008d0:	243f      	movs	r4, #63	; 0x3f
  LIS302DL_InterruptConfig(&LIS302DL_InterruptStruct);
 80008d2:	f7ff ffd3 	bl	800087c <LIS302DL_InterruptConfig>
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG3_ADDR, 1);
 80008d6:	f10d 0003 	add.w	r0, sp, #3
 80008da:	2201      	movs	r2, #1
 80008dc:	2122      	movs	r1, #34	; 0x22
  ctrl = 0x3F;
 80008de:	f88d 4003 	strb.w	r4, [sp, #3]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG3_ADDR, 1);
 80008e2:	f000 fb51 	bl	8000f88 <ACCELERO_IO_Write>
  ctrl = 0x50;
 80008e6:	2350      	movs	r3, #80	; 0x50
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 80008e8:	f10d 0003 	add.w	r0, sp, #3
 80008ec:	2201      	movs	r2, #1
 80008ee:	2138      	movs	r1, #56	; 0x38
  ctrl = 0x50;
 80008f0:	f88d 3003 	strb.w	r3, [sp, #3]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 80008f4:	f000 fb48 	bl	8000f88 <ACCELERO_IO_Write>
  ctrl = 0xAA;
 80008f8:	23aa      	movs	r3, #170	; 0xaa
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSY_X_REG_ADDR, 1);
 80008fa:	f10d 0003 	add.w	r0, sp, #3
 80008fe:	2201      	movs	r2, #1
 8000900:	213b      	movs	r1, #59	; 0x3b
  ctrl = 0xAA;
 8000902:	f88d 3003 	strb.w	r3, [sp, #3]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSY_X_REG_ADDR, 1);
 8000906:	f000 fb3f 	bl	8000f88 <ACCELERO_IO_Write>
  ctrl = 0x0A;
 800090a:	230a      	movs	r3, #10
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSZ_REG_ADDR, 1);
 800090c:	f10d 0003 	add.w	r0, sp, #3
 8000910:	2201      	movs	r2, #1
 8000912:	213c      	movs	r1, #60	; 0x3c
  ctrl = 0x0A;
 8000914:	f88d 3003 	strb.w	r3, [sp, #3]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSZ_REG_ADDR, 1);
 8000918:	f000 fb36 	bl	8000f88 <ACCELERO_IO_Write>
  ctrl = 0x4C;
 800091c:	234c      	movs	r3, #76	; 0x4c
  ACCELERO_IO_Write(&ctrl, LIS302DL_FF_WU_CFG1_REG_ADDR, 1);
 800091e:	f10d 0003 	add.w	r0, sp, #3
 8000922:	2201      	movs	r2, #1
 8000924:	2130      	movs	r1, #48	; 0x30
  ctrl = 0x4C;
 8000926:	f88d 3003 	strb.w	r3, [sp, #3]
  ACCELERO_IO_Write(&ctrl, LIS302DL_FF_WU_CFG1_REG_ADDR, 1);
 800092a:	f000 fb2d 	bl	8000f88 <ACCELERO_IO_Write>
  ctrl = 0x03;
 800092e:	2303      	movs	r3, #3
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_TIMELIMIT_REG_ADDR, 1);
 8000930:	eb0d 0003 	add.w	r0, sp, r3
 8000934:	2201      	movs	r2, #1
 8000936:	213d      	movs	r1, #61	; 0x3d
  ctrl = 0x03;
 8000938:	f88d 3003 	strb.w	r3, [sp, #3]
  ctrl = 0x7F;
 800093c:	257f      	movs	r5, #127	; 0x7f
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_TIMELIMIT_REG_ADDR, 1);
 800093e:	f000 fb23 	bl	8000f88 <ACCELERO_IO_Write>
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_LATENCY_REG_ADDR, 1);
 8000942:	f10d 0003 	add.w	r0, sp, #3
 8000946:	2201      	movs	r2, #1
 8000948:	213e      	movs	r1, #62	; 0x3e
  ctrl = 0x7F;
 800094a:	f88d 5003 	strb.w	r5, [sp, #3]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_LATENCY_REG_ADDR, 1);
 800094e:	f000 fb1b 	bl	8000f88 <ACCELERO_IO_Write>
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_WINDOW_REG_ADDR, 1);
 8000952:	2201      	movs	r2, #1
 8000954:	4621      	mov	r1, r4
 8000956:	f10d 0003 	add.w	r0, sp, #3
  ctrl = 0x7F;
 800095a:	f88d 5003 	strb.w	r5, [sp, #3]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_WINDOW_REG_ADDR, 1);
 800095e:	f000 fb13 	bl	8000f88 <ACCELERO_IO_Write>
}
 8000962:	b003      	add	sp, #12
 8000964:	bd30      	pop	{r4, r5, pc}

08000966 <LIS3DSH_DeInit>:
  * @retval None.
  */
void LIS3DSH_DeInit(void)
{
  
}
 8000966:	4770      	bx	lr

08000968 <LIS3DSH_Init>:
{
 8000968:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl = 0x00;
 800096a:	2300      	movs	r3, #0
{
 800096c:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 800096e:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Init();
 8000972:	f000 fabb 	bl	8000eec <ACCELERO_IO_Init>
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG4_ADDR, 1);
 8000976:	f10d 0007 	add.w	r0, sp, #7
 800097a:	2201      	movs	r2, #1
 800097c:	2120      	movs	r1, #32
  ctrl = (uint8_t) (InitStruct);
 800097e:	f88d 4007 	strb.w	r4, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG4_ADDR, 1);
 8000982:	f000 fb01 	bl	8000f88 <ACCELERO_IO_Write>
  ctrl = (uint8_t) (InitStruct >> 8);
 8000986:	0a24      	lsrs	r4, r4, #8
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG5_ADDR, 1);
 8000988:	2201      	movs	r2, #1
 800098a:	2124      	movs	r1, #36	; 0x24
 800098c:	f10d 0007 	add.w	r0, sp, #7
  ctrl = (uint8_t) (InitStruct >> 8);
 8000990:	f88d 4007 	strb.w	r4, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG5_ADDR, 1);
 8000994:	f000 faf8 	bl	8000f88 <ACCELERO_IO_Write>
}
 8000998:	b002      	add	sp, #8
 800099a:	bd10      	pop	{r4, pc}

0800099c <LIS3DSH_ReadID>:
  * @brief  Read LIS3DSH device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS3DSH_ReadID(void)
{
 800099c:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmp = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	f88d 3007 	strb.w	r3, [sp, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 80009a4:	f000 faa2 	bl	8000eec <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS3DSH_WHO_AM_I_ADDR, 1);
 80009a8:	f10d 0007 	add.w	r0, sp, #7
 80009ac:	2201      	movs	r2, #1
 80009ae:	210f      	movs	r1, #15
 80009b0:	f000 fb0c 	bl	8000fcc <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
}
 80009b4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80009b8:	b003      	add	sp, #12
 80009ba:	f85d fb04 	ldr.w	pc, [sp], #4

080009be <LIS3DSH_RebootCmd>:
  * @brief  Reboot memory content of LIS3DSH.
  * @param  None
  * @retval None
  */
void LIS3DSH_RebootCmd(void)
{
 80009be:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmpreg;
  /* Read CTRL_REG6 register */
  ACCELERO_IO_Read(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 80009c0:	2201      	movs	r2, #1
 80009c2:	f10d 0007 	add.w	r0, sp, #7
 80009c6:	2125      	movs	r1, #37	; 0x25
 80009c8:	f000 fb00 	bl	8000fcc <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS3DSH_BOOT_FORCED;
 80009cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
  
  /* Write value to MEMS CTRL_REG6 register */
  ACCELERO_IO_Write(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 80009d0:	2201      	movs	r2, #1
  tmpreg |= LIS3DSH_BOOT_FORCED;
 80009d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
  ACCELERO_IO_Write(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 80009d6:	2125      	movs	r1, #37	; 0x25
 80009d8:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= LIS3DSH_BOOT_FORCED;
 80009dc:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 80009e0:	f000 fad2 	bl	8000f88 <ACCELERO_IO_Write>
}
 80009e4:	b003      	add	sp, #12
 80009e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080009ec <LIS3DSH_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit representation).
  * @param  pointer on floating buffer.
  * @retval None
  */
void LIS3DSH_ReadACC(int16_t *pData)
{
 80009ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80009ee:	4604      	mov	r4, r0
  int8_t buffer[6];
  uint8_t crtl, i = 0x00;
  float sensitivity = LIS3DSH_SENSITIVITY_0_06G;
  float valueinfloat = 0;
  
  ACCELERO_IO_Read(&crtl, LIS3DSH_CTRL_REG5_ADDR, 1);  
 80009f0:	2201      	movs	r2, #1
 80009f2:	2124      	movs	r1, #36	; 0x24
 80009f4:	f10d 0007 	add.w	r0, sp, #7
 80009f8:	f000 fae8 	bl	8000fcc <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 80009fc:	2201      	movs	r2, #1
 80009fe:	2128      	movs	r1, #40	; 0x28
 8000a00:	a802      	add	r0, sp, #8
 8000a02:	f000 fae3 	bl	8000fcc <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 8000a06:	2201      	movs	r2, #1
 8000a08:	2129      	movs	r1, #41	; 0x29
 8000a0a:	f10d 0009 	add.w	r0, sp, #9
 8000a0e:	f000 fadd 	bl	8000fcc <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 8000a12:	2201      	movs	r2, #1
 8000a14:	212a      	movs	r1, #42	; 0x2a
 8000a16:	f10d 000a 	add.w	r0, sp, #10
 8000a1a:	f000 fad7 	bl	8000fcc <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	212b      	movs	r1, #43	; 0x2b
 8000a22:	f10d 000b 	add.w	r0, sp, #11
 8000a26:	f000 fad1 	bl	8000fcc <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	212c      	movs	r1, #44	; 0x2c
 8000a2e:	a803      	add	r0, sp, #12
 8000a30:	f000 facc 	bl	8000fcc <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 8000a34:	2201      	movs	r2, #1
 8000a36:	212d      	movs	r1, #45	; 0x2d
 8000a38:	f10d 000d 	add.w	r0, sp, #13
 8000a3c:	f000 fac6 	bl	8000fcc <ACCELERO_IO_Read>
  
  switch(crtl & LIS3DSH__FULLSCALE_SELECTION) 
 8000a40:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000a44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000a48:	3b08      	subs	r3, #8
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	2b18      	cmp	r3, #24
 8000a4e:	bf97      	itett	ls
 8000a50:	4a0f      	ldrls	r2, [pc, #60]	; (8000a90 <LIS3DSH_ReadACC+0xa4>)
 8000a52:	ed9f 7a10 	vldrhi	s14, [pc, #64]	; 8000a94 <LIS3DSH_ReadACC+0xa8>
 8000a56:	eb02 0383 	addls.w	r3, r2, r3, lsl #2
 8000a5a:	ed93 7a00 	vldrls	s14, [r3]
  default:
    break;
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000a5e:	1ea1      	subs	r1, r4, #2
 8000a60:	aa02      	add	r2, sp, #8
 8000a62:	3404      	adds	r4, #4
  {
    valueinfloat = ((buffer[2*i+1] << 8) + buffer[2*i]) * sensitivity;
 8000a64:	f992 0001 	ldrsb.w	r0, [r2, #1]
 8000a68:	f912 3b02 	ldrsb.w	r3, [r2], #2
 8000a6c:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 8000a70:	ee07 3a90 	vmov	s15, r3
 8000a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a78:	ee67 7a87 	vmul.f32	s15, s15, s14
    pData[i] = (int16_t)valueinfloat;
 8000a7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a80:	ee17 3a90 	vmov	r3, s15
 8000a84:	f821 3f02 	strh.w	r3, [r1, #2]!
  for(i=0; i<3; i++)
 8000a88:	428c      	cmp	r4, r1
 8000a8a:	d1eb      	bne.n	8000a64 <LIS3DSH_ReadACC+0x78>
  }
}
 8000a8c:	b004      	add	sp, #16
 8000a8e:	bd10      	pop	{r4, pc}
 8000a90:	0800692c 	.word	0x0800692c
 8000a94:	3d75c28f 	.word	0x3d75c28f

08000a98 <LIS3DSH_InterruptConfig>:
{
 8000a98:	b513      	push	{r0, r1, r4, lr}
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 8000a9a:	7802      	ldrb	r2, [r0, #0]
 8000a9c:	7843      	ldrb	r3, [r0, #1]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	7882      	ldrb	r2, [r0, #2]
{
 8000aa2:	4604      	mov	r4, r0
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 8000aa4:	4313      	orrs	r3, r2
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG3_ADDR, 1);
 8000aa6:	f10d 0007 	add.w	r0, sp, #7
 8000aaa:	2201      	movs	r2, #1
 8000aac:	2123      	movs	r1, #35	; 0x23
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 8000aae:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG3_ADDR, 1);
 8000ab2:	f000 fa69 	bl	8000f88 <ACCELERO_IO_Write>
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 8000ab6:	7922      	ldrb	r2, [r4, #4]
 8000ab8:	78e3      	ldrb	r3, [r4, #3]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);
 8000aba:	f10d 0007 	add.w	r0, sp, #7
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 8000abe:	4313      	orrs	r3, r2
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);
 8000ac0:	2121      	movs	r1, #33	; 0x21
 8000ac2:	2201      	movs	r2, #1
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 8000ac4:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);
 8000ac8:	f000 fa5e 	bl	8000f88 <ACCELERO_IO_Write>
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 8000acc:	79a2      	ldrb	r2, [r4, #6]
 8000ace:	7963      	ldrb	r3, [r4, #5]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG2_ADDR, 1);
 8000ad0:	2122      	movs	r1, #34	; 0x22
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 8000ad2:	4313      	orrs	r3, r2
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG2_ADDR, 1);
 8000ad4:	f10d 0007 	add.w	r0, sp, #7
 8000ad8:	2201      	movs	r2, #1
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 8000ada:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG2_ADDR, 1);
 8000ade:	f000 fa53 	bl	8000f88 <ACCELERO_IO_Write>
}
 8000ae2:	b002      	add	sp, #8
 8000ae4:	bd10      	pop	{r4, pc}

08000ae6 <LIS3DSH_Click_IntConfig>:
{
 8000ae6:	b530      	push	{r4, r5, lr}
 8000ae8:	b085      	sub	sp, #20
  uint8_t ctrl = 0x00;
 8000aea:	2500      	movs	r5, #0
  LIS3DSH_InterruptStruct.State_Machine2_Enable = LIS3DSH_SM_ENABLE;
 8000aec:	2401      	movs	r4, #1
  uint8_t ctrl = 0x00;
 8000aee:	f88d 5007 	strb.w	r5, [sp, #7]
  ACCELERO_IO_ITConfig();
 8000af2:	f000 fa21 	bl	8000f38 <ACCELERO_IO_ITConfig>
  LIS3DSH_InterruptStruct.Interrupt_Signal = LIS3DSH_INTERRUPT_SIGNAL_HIGH;
 8000af6:	2340      	movs	r3, #64	; 0x40
  LIS3DSH_InterruptConfig(&LIS3DSH_InterruptStruct);
 8000af8:	a802      	add	r0, sp, #8
  LIS3DSH_InterruptStruct.Interrupt_Signal = LIS3DSH_INTERRUPT_SIGNAL_HIGH;
 8000afa:	f88d 300a 	strb.w	r3, [sp, #10]
  LIS3DSH_InterruptStruct.Interrupt_Selection_Enable = LIS3DSH_INTERRUPT_2_ENABLE;
 8000afe:	f88d 5009 	strb.w	r5, [sp, #9]
  LIS3DSH_InterruptStruct.Interrupt_Request = LIS3DSH_INTERRUPT_REQUEST_LATCHED;
 8000b02:	f88d 5008 	strb.w	r5, [sp, #8]
  LIS3DSH_InterruptStruct.State_Machine1_Enable = LIS3DSH_SM_DISABLE;
 8000b06:	f88d 500b 	strb.w	r5, [sp, #11]
  LIS3DSH_InterruptStruct.State_Machine2_Enable = LIS3DSH_SM_ENABLE;
 8000b0a:	f88d 400d 	strb.w	r4, [sp, #13]
  LIS3DSH_InterruptStruct.State_Machine2_Interrupt = LIS3DSH_SM_INT1;
 8000b0e:	f88d 500e 	strb.w	r5, [sp, #14]
  LIS3DSH_InterruptConfig(&LIS3DSH_InterruptStruct);
 8000b12:	f7ff ffc1 	bl	8000a98 <LIS3DSH_InterruptConfig>
  ctrl=0x03; 
 8000b16:	2303      	movs	r3, #3
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM2_1_L_ADDR,1);
 8000b18:	4622      	mov	r2, r4
 8000b1a:	f10d 0007 	add.w	r0, sp, #7
 8000b1e:	2152      	movs	r1, #82	; 0x52
  ctrl=0x03; 
 8000b20:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM2_1_L_ADDR,1);
 8000b24:	f000 fa30 	bl	8000f88 <ACCELERO_IO_Write>
  ctrl=0xC8; 
 8000b28:	23c8      	movs	r3, #200	; 0xc8
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM1_1_L_ADDR,1);
 8000b2a:	4622      	mov	r2, r4
 8000b2c:	f10d 0007 	add.w	r0, sp, #7
 8000b30:	2154      	movs	r1, #84	; 0x54
  ctrl=0xC8; 
 8000b32:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM1_1_L_ADDR,1);
 8000b36:	f000 fa27 	bl	8000f88 <ACCELERO_IO_Write>
  ctrl=0x45; 
 8000b3a:	2345      	movs	r3, #69	; 0x45
  ACCELERO_IO_Write(&ctrl, LIS3DSH_THRS2_1_ADDR,1);
 8000b3c:	4622      	mov	r2, r4
 8000b3e:	f10d 0007 	add.w	r0, sp, #7
 8000b42:	2156      	movs	r1, #86	; 0x56
  ctrl=0x45; 
 8000b44:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_THRS2_1_ADDR,1);
 8000b48:	f000 fa1e 	bl	8000f88 <ACCELERO_IO_Write>
  ctrl=0xFC; 
 8000b4c:	23fc      	movs	r3, #252	; 0xfc
  ACCELERO_IO_Write(&ctrl, LIS3DSH_MASK1_A_ADDR,1);
 8000b4e:	4622      	mov	r2, r4
 8000b50:	f10d 0007 	add.w	r0, sp, #7
 8000b54:	215a      	movs	r1, #90	; 0x5a
  ctrl=0xFC; 
 8000b56:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_MASK1_A_ADDR,1);
 8000b5a:	f000 fa15 	bl	8000f88 <ACCELERO_IO_Write>
  ctrl=0xA1; 
 8000b5e:	23a1      	movs	r3, #161	; 0xa1
  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT1_ADDR,1);
 8000b60:	4622      	mov	r2, r4
 8000b62:	f10d 0007 	add.w	r0, sp, #7
 8000b66:	215b      	movs	r1, #91	; 0x5b
  ctrl=0xA1; 
 8000b68:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT1_ADDR,1);
 8000b6c:	f000 fa0c 	bl	8000f88 <ACCELERO_IO_Write>
  ACCELERO_IO_Write(&ctrl, LIS3DSH_PR1_ADDR,1);
 8000b70:	4622      	mov	r2, r4
 8000b72:	f10d 0007 	add.w	r0, sp, #7
 8000b76:	215c      	movs	r1, #92	; 0x5c
  ctrl=0x01; 
 8000b78:	f88d 4007 	strb.w	r4, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_PR1_ADDR,1);
 8000b7c:	f000 fa04 	bl	8000f88 <ACCELERO_IO_Write>
  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT2_ADDR,1);
 8000b80:	4622      	mov	r2, r4
 8000b82:	f10d 0007 	add.w	r0, sp, #7
 8000b86:	217b      	movs	r1, #123	; 0x7b
 8000b88:	f000 f9fe 	bl	8000f88 <ACCELERO_IO_Write>
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_1_ADDR,1);
 8000b8c:	4622      	mov	r2, r4
 8000b8e:	f10d 0007 	add.w	r0, sp, #7
 8000b92:	2160      	movs	r1, #96	; 0x60
 8000b94:	f000 f9f8 	bl	8000f88 <ACCELERO_IO_Write>
  ctrl=0x06; 
 8000b98:	2306      	movs	r3, #6
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_2_ADDR,1);
 8000b9a:	4622      	mov	r2, r4
 8000b9c:	f10d 0007 	add.w	r0, sp, #7
 8000ba0:	2161      	movs	r1, #97	; 0x61
  ctrl=0x06; 
 8000ba2:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_2_ADDR,1);
 8000ba6:	f000 f9ef 	bl	8000f88 <ACCELERO_IO_Write>
  ctrl=0x28; 
 8000baa:	2328      	movs	r3, #40	; 0x28
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_3_ADDR,1);
 8000bac:	4622      	mov	r2, r4
 8000bae:	f10d 0007 	add.w	r0, sp, #7
 8000bb2:	2162      	movs	r1, #98	; 0x62
  ctrl=0x28; 
 8000bb4:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_3_ADDR,1);
 8000bb8:	f000 f9e6 	bl	8000f88 <ACCELERO_IO_Write>
  ctrl=0x11; 
 8000bbc:	2311      	movs	r3, #17
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_4_ADDR,1);
 8000bbe:	4622      	mov	r2, r4
 8000bc0:	2163      	movs	r1, #99	; 0x63
 8000bc2:	f10d 0007 	add.w	r0, sp, #7
  ctrl=0x11; 
 8000bc6:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_4_ADDR,1);
 8000bca:	f000 f9dd 	bl	8000f88 <ACCELERO_IO_Write>
}
 8000bce:	b005      	add	sp, #20
 8000bd0:	bd30      	pop	{r4, r5, pc}
	...

08000bd4 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8000bd4:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000bd6:	4c22      	ldr	r4, [pc, #136]	; (8000c60 <SPIx_Init+0x8c>)
{
 8000bd8:	b088      	sub	sp, #32
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000bda:	4620      	mov	r0, r4
 8000bdc:	f003 f882 	bl	8003ce4 <HAL_SPI_GetState>
 8000be0:	2800      	cmp	r0, #0
 8000be2:	d13a      	bne.n	8000c5a <SPIx_Init+0x86>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8000be4:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <SPIx_Init+0x90>)
 8000be6:	6023      	str	r3, [r4, #0]
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000be8:	2318      	movs	r3, #24
 8000bea:	61e3      	str	r3, [r4, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial = 7;
 8000bec:	2307      	movs	r3, #7
 8000bee:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8000bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bf4:	e9c4 0004 	strd	r0, r0, [r4, #16]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8000bf8:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8000bfa:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000bfe:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(void)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable the SPI peripheral */
  DISCOVERY_SPIx_CLK_ENABLE();
 8000c00:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <SPIx_Init+0x94>)
 8000c02:	9001      	str	r0, [sp, #4]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 8000c04:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000c06:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c08:	60e0      	str	r0, [r4, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c0a:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 8000c0c:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLK_ENABLE();
 8000c0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000c14:	645a      	str	r2, [r3, #68]	; 0x44
 8000c16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c18:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000c1c:	9201      	str	r2, [sp, #4]
 8000c1e:	9a01      	ldr	r2, [sp, #4]
  
  /* Enable SCK, MOSI and MISO GPIO clocks */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8000c20:	9002      	str	r0, [sp, #8]
 8000c22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c24:	f042 0201 	orr.w	r2, r2, #1
 8000c28:	631a      	str	r2, [r3, #48]	; 0x30
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	9302      	str	r3, [sp, #8]
 8000c32:	9b02      	ldr	r3, [sp, #8]
  
  /* SPI SCK, MOSI, MISO pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MISO_PIN | DISCOVERY_SPIx_MOSI_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000c34:	21e0      	movs	r1, #224	; 0xe0
 8000c36:	2302      	movs	r3, #2
 8000c38:	e9cd 1303 	strd	r1, r3, [sp, #12]
  GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
 8000c3c:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8000c3e:	2001      	movs	r0, #1
 8000c40:	2305      	movs	r3, #5
 8000c42:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8000c46:	a903      	add	r1, sp, #12
 8000c48:	4808      	ldr	r0, [pc, #32]	; (8000c6c <SPIx_Init+0x98>)
 8000c4a:	f001 f883 	bl	8001d54 <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 8000c4e:	4620      	mov	r0, r4
}
 8000c50:	b008      	add	sp, #32
 8000c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_SPI_Init(&SpiHandle);
 8000c56:	f002 be82 	b.w	800395e <HAL_SPI_Init>
}
 8000c5a:	b008      	add	sp, #32
 8000c5c:	bd10      	pop	{r4, pc}
 8000c5e:	bf00      	nop
 8000c60:	2000060c 	.word	0x2000060c
 8000c64:	40013000 	.word	0x40013000
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020000 	.word	0x40020000

08000c70 <SPIx_WriteRead>:
{
 8000c70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t receivedbyte = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	f88d 3017 	strb.w	r3, [sp, #23]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <SPIx_WriteRead+0x38>)
{
 8000c7a:	f88d 000f 	strb.w	r0, [sp, #15]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	9300      	str	r3, [sp, #0]
 8000c82:	480a      	ldr	r0, [pc, #40]	; (8000cac <SPIx_WriteRead+0x3c>)
 8000c84:	2301      	movs	r3, #1
 8000c86:	f10d 0217 	add.w	r2, sp, #23
 8000c8a:	f10d 010f 	add.w	r1, sp, #15
 8000c8e:	f002 fede 	bl	8003a4e <HAL_SPI_TransmitReceive>
 8000c92:	b120      	cbz	r0, 8000c9e <SPIx_WriteRead+0x2e>
  HAL_SPI_DeInit(&SpiHandle);
 8000c94:	4805      	ldr	r0, [pc, #20]	; (8000cac <SPIx_WriteRead+0x3c>)
 8000c96:	f002 fec4 	bl	8003a22 <HAL_SPI_DeInit>
  SPIx_Init();
 8000c9a:	f7ff ff9b 	bl	8000bd4 <SPIx_Init>
}
 8000c9e:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8000ca2:	b007      	add	sp, #28
 8000ca4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ca8:	2000009c 	.word	0x2000009c
 8000cac:	2000060c 	.word	0x2000060c

08000cb0 <I2Cx_Init>:
/******************************* I2C Routines**********************************/
/**
  * @brief  Configures I2C interface.
  */
static void I2Cx_Init(void)
{
 8000cb0:	b570      	push	{r4, r5, r6, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8000cb2:	4e2b      	ldr	r6, [pc, #172]	; (8000d60 <I2Cx_Init+0xb0>)
{
 8000cb4:	b088      	sub	sp, #32
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8000cb6:	f106 0058 	add.w	r0, r6, #88	; 0x58
 8000cba:	f001 fd75 	bl	80027a8 <HAL_I2C_GetState>
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	2800      	cmp	r0, #0
 8000cc2:	d14b      	bne.n	8000d5c <I2Cx_Init+0xac>
  {
    /* DISCOVERY_I2Cx peripheral configuration */
    I2cHandle.Init.ClockSpeed = BSP_I2C_SPEED;
 8000cc4:	4b27      	ldr	r3, [pc, #156]	; (8000d64 <I2Cx_Init+0xb4>)
static void I2Cx_MspInit(void)
{
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2C GPIO clocks */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000cc6:	4d28      	ldr	r5, [pc, #160]	; (8000d68 <I2Cx_Init+0xb8>)
 8000cc8:	9001      	str	r0, [sp, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cca:	e9c6 3017 	strd	r3, r0, [r6, #92]	; 0x5c
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cce:	2233      	movs	r2, #51	; 0x33
 8000cd0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cd4:	e9c6 2319 	strd	r2, r3, [r6, #100]	; 0x64
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8000cd8:	4b24      	ldr	r3, [pc, #144]	; (8000d6c <I2Cx_Init+0xbc>)
 8000cda:	65b3      	str	r3, [r6, #88]	; 0x58
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000cdc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000cde:	f043 0302 	orr.w	r3, r3, #2
 8000ce2:	632b      	str	r3, [r5, #48]	; 0x30
 8000ce4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	9301      	str	r3, [sp, #4]
 8000cec:	9b01      	ldr	r3, [sp, #4]

  /* DISCOVERY_I2Cx SCL and SDA pins configuration ---------------------------*/
  GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN; 
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cee:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000cf2:	2312      	movs	r3, #18
 8000cf4:	e9cd 1303 	strd	r1, r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000cf8:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000cfa:	e9cd 0305 	strd	r0, r3, [sp, #20]
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 8000cfe:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000d00:	2304      	movs	r3, #4
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 8000d02:	481b      	ldr	r0, [pc, #108]	; (8000d70 <I2Cx_Init+0xc0>)
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000d04:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 8000d06:	f001 f825 	bl	8001d54 <HAL_GPIO_Init>

  /* Enable the DISCOVERY_I2Cx peripheral clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8000d0a:	9402      	str	r4, [sp, #8]
 8000d0c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000d0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d12:	642b      	str	r3, [r5, #64]	; 0x40
 8000d14:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000d16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d1a:	9302      	str	r3, [sp, #8]
 8000d1c:	9b02      	ldr	r3, [sp, #8]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8000d1e:	6a2b      	ldr	r3, [r5, #32]
 8000d20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d24:	622b      	str	r3, [r5, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8000d26:	6a2b      	ldr	r3, [r5, #32]
 8000d28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000d2c:	622b      	str	r3, [r5, #32]

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0, 0);
 8000d2e:	4622      	mov	r2, r4
 8000d30:	4621      	mov	r1, r4
 8000d32:	201f      	movs	r0, #31
 8000d34:	f000 fdbe 	bl	80018b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000d38:	201f      	movs	r0, #31
 8000d3a:	f000 fded 	bl	8001918 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0, 0);
 8000d3e:	4622      	mov	r2, r4
 8000d40:	4621      	mov	r1, r4
 8000d42:	2020      	movs	r0, #32
 8000d44:	f000 fdb6 	bl	80018b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8000d48:	2020      	movs	r0, #32
 8000d4a:	f000 fde5 	bl	8001918 <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init(&I2cHandle);
 8000d4e:	f106 0058 	add.w	r0, r6, #88	; 0x58
}
 8000d52:	b008      	add	sp, #32
 8000d54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_I2C_Init(&I2cHandle);
 8000d58:	f001 bacc 	b.w	80022f4 <HAL_I2C_Init>
}
 8000d5c:	b008      	add	sp, #32
 8000d5e:	bd70      	pop	{r4, r5, r6, pc}
 8000d60:	2000060c 	.word	0x2000060c
 8000d64:	000186a0 	.word	0x000186a0
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40005400 	.word	0x40005400
 8000d70:	40020400 	.word	0x40020400

08000d74 <BSP_LED_Init>:
{
 8000d74:	b530      	push	{r4, r5, lr}
 8000d76:	b08b      	sub	sp, #44	; 0x2c
  LEDx_GPIO_CLK_ENABLE(Led);
 8000d78:	bb08      	cbnz	r0, 8000dbe <BSP_LED_Init+0x4a>
 8000d7a:	4b27      	ldr	r3, [pc, #156]	; (8000e18 <BSP_LED_Init+0xa4>)
 8000d7c:	9001      	str	r0, [sp, #4]
 8000d7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d80:	f042 0208 	orr.w	r2, r2, #8
 8000d84:	631a      	str	r2, [r3, #48]	; 0x30
 8000d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d88:	f003 0308 	and.w	r3, r3, #8
 8000d8c:	9301      	str	r3, [sp, #4]
 8000d8e:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000d90:	4c22      	ldr	r4, [pc, #136]	; (8000e1c <BSP_LED_Init+0xa8>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000d92:	4b23      	ldr	r3, [pc, #140]	; (8000e20 <BSP_LED_Init+0xac>)
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000d94:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000d98:	f833 5010 	ldrh.w	r5, [r3, r0, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000d9c:	6860      	ldr	r0, [r4, #4]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000d9e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da0:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da2:	e9cd 3306 	strd	r3, r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000da6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000da8:	2302      	movs	r3, #2
 8000daa:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000dac:	f000 ffd2 	bl	8001d54 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000db0:	6860      	ldr	r0, [r4, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	4629      	mov	r1, r5
 8000db6:	f001 f8ad 	bl	8001f14 <HAL_GPIO_WritePin>
}
 8000dba:	b00b      	add	sp, #44	; 0x2c
 8000dbc:	bd30      	pop	{r4, r5, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8000dbe:	2801      	cmp	r0, #1
 8000dc0:	d10c      	bne.n	8000ddc <BSP_LED_Init+0x68>
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	9302      	str	r3, [sp, #8]
 8000dc6:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <BSP_LED_Init+0xa4>)
 8000dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dca:	f042 0208 	orr.w	r2, r2, #8
 8000dce:	631a      	str	r2, [r3, #48]	; 0x30
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	9302      	str	r3, [sp, #8]
 8000dd8:	9b02      	ldr	r3, [sp, #8]
 8000dda:	e7d9      	b.n	8000d90 <BSP_LED_Init+0x1c>
 8000ddc:	2802      	cmp	r0, #2
 8000dde:	d10c      	bne.n	8000dfa <BSP_LED_Init+0x86>
 8000de0:	2300      	movs	r3, #0
 8000de2:	9303      	str	r3, [sp, #12]
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <BSP_LED_Init+0xa4>)
 8000de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000de8:	f042 0208 	orr.w	r2, r2, #8
 8000dec:	631a      	str	r2, [r3, #48]	; 0x30
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	f003 0308 	and.w	r3, r3, #8
 8000df4:	9303      	str	r3, [sp, #12]
 8000df6:	9b03      	ldr	r3, [sp, #12]
 8000df8:	e7ca      	b.n	8000d90 <BSP_LED_Init+0x1c>
 8000dfa:	2803      	cmp	r0, #3
 8000dfc:	d1c8      	bne.n	8000d90 <BSP_LED_Init+0x1c>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	9304      	str	r3, [sp, #16]
 8000e02:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <BSP_LED_Init+0xa4>)
 8000e04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e06:	f042 0208 	orr.w	r2, r2, #8
 8000e0a:	631a      	str	r2, [r3, #48]	; 0x30
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0308 	and.w	r3, r3, #8
 8000e12:	9304      	str	r3, [sp, #16]
 8000e14:	9b04      	ldr	r3, [sp, #16]
 8000e16:	e7bb      	b.n	8000d90 <BSP_LED_Init+0x1c>
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	2000009c 	.word	0x2000009c
 8000e20:	08006990 	.word	0x08006990

08000e24 <BSP_LED_On>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <BSP_LED_On+0x14>)
 8000e26:	4905      	ldr	r1, [pc, #20]	; (8000e3c <BSP_LED_On+0x18>)
 8000e28:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000e2c:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 8000e30:	6858      	ldr	r0, [r3, #4]
 8000e32:	2201      	movs	r2, #1
 8000e34:	f001 b86e 	b.w	8001f14 <HAL_GPIO_WritePin>
 8000e38:	2000009c 	.word	0x2000009c
 8000e3c:	08006990 	.word	0x08006990

08000e40 <BSP_LED_Off>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <BSP_LED_Off+0x14>)
 8000e42:	4905      	ldr	r1, [pc, #20]	; (8000e58 <BSP_LED_Off+0x18>)
 8000e44:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000e48:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 8000e4c:	6858      	ldr	r0, [r3, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f001 b860 	b.w	8001f14 <HAL_GPIO_WritePin>
 8000e54:	2000009c 	.word	0x2000009c
 8000e58:	08006990 	.word	0x08006990

08000e5c <BSP_PB_Init>:
{
 8000e5c:	b510      	push	{r4, lr}
 8000e5e:	b086      	sub	sp, #24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000e60:	b950      	cbnz	r0, 8000e78 <BSP_PB_Init+0x1c>
 8000e62:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <BSP_PB_Init+0x70>)
 8000e64:	9000      	str	r0, [sp, #0]
 8000e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e68:	f042 0201 	orr.w	r2, r2, #1
 8000e6c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	9b00      	ldr	r3, [sp, #0]
  if (Mode == BUTTON_MODE_GPIO)
 8000e78:	b971      	cbnz	r1, 8000e98 <BSP_PB_Init+0x3c>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000e7a:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7c:	e9cd 3101 	strd	r3, r1, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000e80:	2302      	movs	r3, #2
 8000e82:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <BSP_PB_Init+0x74>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000e88:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000e8c:	a901      	add	r1, sp, #4
 8000e8e:	6940      	ldr	r0, [r0, #20]
 8000e90:	f000 ff60 	bl	8001d54 <HAL_GPIO_Init>
}
 8000e94:	b006      	add	sp, #24
 8000e96:	bd10      	pop	{r4, pc}
  if (Mode == BUTTON_MODE_EXTI)
 8000e98:	2901      	cmp	r1, #1
 8000e9a:	d1fb      	bne.n	8000e94 <BSP_PB_Init+0x38>
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000e9c:	2400      	movs	r4, #0
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	e9cd 4303 	strd	r4, r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8000ea4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ea8:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <BSP_PB_Init+0x74>)
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000eac:	9101      	str	r1, [sp, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000eae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000eb2:	a901      	add	r1, sp, #4
 8000eb4:	6940      	ldr	r0, [r0, #20]
 8000eb6:	f000 ff4d 	bl	8001d54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0);
 8000eba:	4622      	mov	r2, r4
 8000ebc:	210f      	movs	r1, #15
 8000ebe:	2006      	movs	r0, #6
 8000ec0:	f000 fcf8 	bl	80018b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000ec4:	2006      	movs	r0, #6
 8000ec6:	f000 fd27 	bl	8001918 <HAL_NVIC_EnableIRQ>
}
 8000eca:	e7e3      	b.n	8000e94 <BSP_PB_Init+0x38>
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	2000009c 	.word	0x2000009c

08000ed4 <BSP_PB_GetState>:
{
 8000ed4:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000ed6:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <BSP_PB_GetState+0x14>)
 8000ed8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000edc:	2101      	movs	r1, #1
 8000ede:	6940      	ldr	r0, [r0, #20]
 8000ee0:	f001 f812 	bl	8001f08 <HAL_GPIO_ReadPin>
}
 8000ee4:	bd08      	pop	{r3, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2000009c 	.word	0x2000009c

08000eec <ACCELERO_IO_Init>:

/**
  * @brief  Configures the Accelerometer SPI interface.
  */
void ACCELERO_IO_Init(void)
{
 8000eec:	b530      	push	{r4, r5, lr}
 8000eee:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Accelerometer Control pins --------------------------------*/
  /* Enable CS GPIO clock and configure GPIO pin for Accelerometer Chip select */  
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <ACCELERO_IO_Init+0x44>)
  /* Configure GPIO PIN for LIS Chip select */
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 8000ef2:	4810      	ldr	r0, [pc, #64]	; (8000f34 <ACCELERO_IO_Init+0x48>)
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	9100      	str	r1, [sp, #0]
 8000ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000efa:	f042 0210 	orr.w	r2, r2, #16
 8000efe:	631a      	str	r2, [r3, #48]	; 0x30
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	2401      	movs	r4, #1
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8000f04:	f003 0310 	and.w	r3, r3, #16
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8000f08:	e9cd 1403 	strd	r1, r4, [sp, #12]
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8000f0c:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0e:	2508      	movs	r5, #8
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 8000f10:	a901      	add	r1, sp, #4
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8000f12:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000f14:	e9cd 5401 	strd	r5, r4, [sp, #4]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 8000f18:	f000 ff1c 	bl	8001d54 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  ACCELERO_CS_HIGH();
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <ACCELERO_IO_Init+0x48>)
 8000f1e:	4622      	mov	r2, r4
 8000f20:	4629      	mov	r1, r5
 8000f22:	f000 fff7 	bl	8001f14 <HAL_GPIO_WritePin>
  
  SPIx_Init();
 8000f26:	f7ff fe55 	bl	8000bd4 <SPIx_Init>
}
 8000f2a:	b007      	add	sp, #28
 8000f2c:	bd30      	pop	{r4, r5, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40021000 	.word	0x40021000

08000f38 <ACCELERO_IO_ITConfig>:
/**
  * @brief  Configures the Accelerometer INT2.
  *         EXTI0 is already used by user button so INT1 is not configured here.
  */
void ACCELERO_IO_ITConfig(void)
{
 8000f38:	b510      	push	{r4, lr}
 8000f3a:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT2 GPIO clock and configure GPIO PINs to detect Interrupts */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8000f3c:	2400      	movs	r4, #0
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <ACCELERO_IO_ITConfig+0x48>)
 8000f40:	9400      	str	r4, [sp, #0]
 8000f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
  GPIO_InitStructure.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8000f44:	480f      	ldr	r0, [pc, #60]	; (8000f84 <ACCELERO_IO_ITConfig+0x4c>)
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8000f46:	f042 0210 	orr.w	r2, r2, #16
 8000f4a:	631a      	str	r2, [r3, #48]	; 0x30
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0310 	and.w	r3, r3, #16
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8000f56:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 8000f5a:	2302      	movs	r3, #2
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8000f5c:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8000f5e:	e9cd 3201 	strd	r3, r2, [sp, #4]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000f62:	e9cd 4303 	strd	r4, r3, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8000f66:	f000 fef5 	bl	8001d54 <HAL_GPIO_Init>
  
  /* Enable and set Accelerometer INT2 to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)ACCELERO_INT2_EXTI_IRQn, 0x0F, 0);
 8000f6a:	4622      	mov	r2, r4
 8000f6c:	210f      	movs	r1, #15
 8000f6e:	2007      	movs	r0, #7
 8000f70:	f000 fca0 	bl	80018b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)ACCELERO_INT2_EXTI_IRQn);
 8000f74:	2007      	movs	r0, #7
 8000f76:	f000 fccf 	bl	8001918 <HAL_NVIC_EnableIRQ>
}
 8000f7a:	b006      	add	sp, #24
 8000f7c:	bd10      	pop	{r4, pc}
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40021000 	.word	0x40021000

08000f88 <ACCELERO_IO_Write>:
{
  /* Configure the MS bit: 
     - When 0, the address will remain unchanged in multiple read/write commands.
     - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8000f88:	2a01      	cmp	r2, #1
{
 8000f8a:	b570      	push	{r4, r5, r6, lr}
 8000f8c:	460e      	mov	r6, r1
 8000f8e:	4605      	mov	r5, r0
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8000f90:	bf88      	it	hi
 8000f92:	f041 0640 	orrhi.w	r6, r1, #64	; 0x40
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 8000f96:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <ACCELERO_IO_Write+0x40>)
{
 8000f98:	4614      	mov	r4, r2
  ACCELERO_CS_LOW();
 8000f9a:	2108      	movs	r1, #8
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f000 ffb9 	bl	8001f14 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8000fa2:	4630      	mov	r0, r6
 8000fa4:	f7ff fe64 	bl	8000c70 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8000fa8:	442c      	add	r4, r5
 8000faa:	42a5      	cmp	r5, r4
 8000fac:	d106      	bne.n	8000fbc <ACCELERO_IO_Write+0x34>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
}
 8000fae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ACCELERO_CS_HIGH();
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <ACCELERO_IO_Write+0x40>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	2108      	movs	r1, #8
 8000fb8:	f000 bfac 	b.w	8001f14 <HAL_GPIO_WritePin>
    SPIx_WriteRead(*pBuffer);
 8000fbc:	f815 0b01 	ldrb.w	r0, [r5], #1
 8000fc0:	f7ff fe56 	bl	8000c70 <SPIx_WriteRead>
    pBuffer++;
 8000fc4:	e7f1      	b.n	8000faa <ACCELERO_IO_Write+0x22>
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000

08000fcc <ACCELERO_IO_Read>:
  * @param  ReadAddr: Accelerometer's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the Accelerometer.
  */
void ACCELERO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
  if(NumByteToRead > 0x01)
 8000fcc:	2a01      	cmp	r2, #1
{  
 8000fce:	b570      	push	{r4, r5, r6, lr}
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8000fd0:	bf8c      	ite	hi
 8000fd2:	f041 04c0 	orrhi.w	r4, r1, #192	; 0xc0
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8000fd6:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
{  
 8000fda:	4606      	mov	r6, r0
 8000fdc:	4615      	mov	r5, r2
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 8000fde:	480c      	ldr	r0, [pc, #48]	; (8001010 <ACCELERO_IO_Read+0x44>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2108      	movs	r1, #8
 8000fe4:	f000 ff96 	bl	8001f14 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8000fe8:	4620      	mov	r0, r4
 8000fea:	f7ff fe41 	bl	8000c70 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8000fee:	4435      	add	r5, r6
 8000ff0:	42ae      	cmp	r6, r5
 8000ff2:	d106      	bne.n	8001002 <ACCELERO_IO_Read+0x36>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
}
 8000ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ACCELERO_CS_HIGH();
 8000ff8:	4805      	ldr	r0, [pc, #20]	; (8001010 <ACCELERO_IO_Read+0x44>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	2108      	movs	r1, #8
 8000ffe:	f000 bf89 	b.w	8001f14 <HAL_GPIO_WritePin>
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff fe34 	bl	8000c70 <SPIx_WriteRead>
 8001008:	f806 0b01 	strb.w	r0, [r6], #1
    pBuffer++;
 800100c:	e7f0      	b.n	8000ff0 <ACCELERO_IO_Read+0x24>
 800100e:	bf00      	nop
 8001010:	40021000 	.word	0x40021000

08001014 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8001014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001016:	b087      	sub	sp, #28
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8001018:	2600      	movs	r6, #0
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <AUDIO_IO_Init+0x5c>)
 800101c:	9600      	str	r6, [sp, #0]
 800101e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 8001020:	4c14      	ldr	r4, [pc, #80]	; (8001074 <AUDIO_IO_Init+0x60>)
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8001022:	f042 0208 	orr.w	r2, r2, #8
 8001026:	631a      	str	r2, [r3, #48]	; 0x30
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0308 	and.w	r3, r3, #8
 800102e:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2510      	movs	r5, #16
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 8001032:	a901      	add	r1, sp, #4
 8001034:	4620      	mov	r0, r4
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8001036:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001038:	2701      	movs	r7, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800103a:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800103c:	e9cd 6303 	strd	r6, r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001040:	e9cd 5701 	strd	r5, r7, [sp, #4]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 8001044:	f000 fe86 	bl	8001d54 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8001048:	f7ff fe32 	bl	8000cb0 <I2Cx_Init>
  
  /* Power Down the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 800104c:	4632      	mov	r2, r6
 800104e:	4629      	mov	r1, r5
 8001050:	4620      	mov	r0, r4
 8001052:	f000 ff5f 	bl	8001f14 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8001056:	2005      	movs	r0, #5
 8001058:	f000 fc00 	bl	800185c <HAL_Delay>
  
  /* Power on the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_SET);
 800105c:	463a      	mov	r2, r7
 800105e:	4629      	mov	r1, r5
 8001060:	4620      	mov	r0, r4
 8001062:	f000 ff57 	bl	8001f14 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8001066:	2005      	movs	r0, #5
 8001068:	f000 fbf8 	bl	800185c <HAL_Delay>
}
 800106c:	b007      	add	sp, #28
 800106e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001070:	40023800 	.word	0x40023800
 8001074:	40020c00 	.word	0x40020c00

08001078 <AUDIO_IO_DeInit>:
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{
  
}
 8001078:	4770      	bx	lr
	...

0800107c <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800107c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <AUDIO_IO_Write+0x34>)
 8001080:	f88d 2017 	strb.w	r2, [sp, #23]
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	9302      	str	r3, [sp, #8]
 8001088:	f10d 0217 	add.w	r2, sp, #23
 800108c:	2301      	movs	r3, #1
 800108e:	9200      	str	r2, [sp, #0]
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	460a      	mov	r2, r1
 8001094:	4601      	mov	r1, r0
 8001096:	4807      	ldr	r0, [pc, #28]	; (80010b4 <AUDIO_IO_Write+0x38>)
 8001098:	f001 f9ee 	bl	8002478 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 800109c:	b120      	cbz	r0, 80010a8 <AUDIO_IO_Write+0x2c>
  HAL_I2C_DeInit(&I2cHandle);
 800109e:	4805      	ldr	r0, [pc, #20]	; (80010b4 <AUDIO_IO_Write+0x38>)
 80010a0:	f001 f9d1 	bl	8002446 <HAL_I2C_DeInit>
  I2Cx_Init();
 80010a4:	f7ff fe04 	bl	8000cb0 <I2Cx_Init>
  I2Cx_WriteData(Addr, Reg, Value);
}
 80010a8:	b007      	add	sp, #28
 80010aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80010ae:	bf00      	nop
 80010b0:	2000009c 	.word	0x2000009c
 80010b4:	20000664 	.word	0x20000664

080010b8 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80010b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &value, 1,I2cxTimeout);
 80010c0:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <AUDIO_IO_Read+0x38>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	9302      	str	r3, [sp, #8]
{
 80010c6:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &value, 1,I2cxTimeout);
 80010c8:	2301      	movs	r3, #1
 80010ca:	f10d 0117 	add.w	r1, sp, #23
 80010ce:	9100      	str	r1, [sp, #0]
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	4601      	mov	r1, r0
 80010d4:	4807      	ldr	r0, [pc, #28]	; (80010f4 <AUDIO_IO_Read+0x3c>)
 80010d6:	f001 fa5f 	bl	8002598 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80010da:	b120      	cbz	r0, 80010e6 <AUDIO_IO_Read+0x2e>
  HAL_I2C_DeInit(&I2cHandle);
 80010dc:	4805      	ldr	r0, [pc, #20]	; (80010f4 <AUDIO_IO_Read+0x3c>)
 80010de:	f001 f9b2 	bl	8002446 <HAL_I2C_DeInit>
  I2Cx_Init();
 80010e2:	f7ff fde5 	bl	8000cb0 <I2Cx_Init>
  return I2Cx_ReadData(Addr, Reg);
}
 80010e6:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80010ea:	b007      	add	sp, #28
 80010ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80010f0:	2000009c 	.word	0x2000009c
 80010f4:	20000664 	.word	0x20000664

080010f8 <BSP_ACCELERO_Init>:
/**
  * @brief  Setx Accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{ 
 80010f8:	b538      	push	{r3, r4, r5, lr}
  uint16_t ctrl = 0x0000;
  LIS302DL_InitTypeDef         lis302dl_initstruct;
  LIS302DL_FilterConfigTypeDef lis302dl_filter = {0,0,0};
  LIS3DSH_InitTypeDef          l1s3dsh_InitStruct;

  if(Lis302dlDrv.ReadID() == I_AM_LIS302DL)
 80010fa:	4c0e      	ldr	r4, [pc, #56]	; (8001134 <BSP_ACCELERO_Init+0x3c>)
 80010fc:	68a3      	ldr	r3, [r4, #8]
 80010fe:	4798      	blx	r3
 8001100:	283b      	cmp	r0, #59	; 0x3b
 8001102:	d10a      	bne.n	800111a <BSP_ACCELERO_Init+0x22>
  {
    /* Initialize the accelerometer driver structure */
    AcceleroDrv = &Lis302dlDrv;
 8001104:	4d0c      	ldr	r5, [pc, #48]	; (8001138 <BSP_ACCELERO_Init+0x40>)
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
                       lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test | \
                       lis302dl_initstruct.Axes_Enable);
    
    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
 8001106:	6823      	ldr	r3, [r4, #0]
    AcceleroDrv = &Lis302dlDrv;
 8001108:	602c      	str	r4, [r5, #0]
    AcceleroDrv->Init(ctrl);
 800110a:	2047      	movs	r0, #71	; 0x47
 800110c:	4798      	blx	r3
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
                     lis302dl_filter.HighPassFilter_CutOff_Frequency | \
                     lis302dl_filter.HighPassFilter_Interrupt);

    /* Configure the accelerometer LPF main parameters */
    AcceleroDrv->FilterConfig(ctrl);
 800110e:	682b      	ldr	r3, [r5, #0]
 8001110:	202d      	movs	r0, #45	; 0x2d
 8001112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001114:	4798      	blx	r3
                         l1s3dsh_InitStruct.Filter_BW) << 8);

    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
    
    ret = ACCELERO_OK;
 8001116:	2000      	movs	r0, #0
  else
  {
    ret = ACCELERO_ERROR;
  }
  return ret;
}
 8001118:	bd38      	pop	{r3, r4, r5, pc}
  else if(Lis3dshDrv.ReadID() == I_AM_LIS3DSH)
 800111a:	4c08      	ldr	r4, [pc, #32]	; (800113c <BSP_ACCELERO_Init+0x44>)
 800111c:	68a3      	ldr	r3, [r4, #8]
 800111e:	4798      	blx	r3
 8001120:	283f      	cmp	r0, #63	; 0x3f
 8001122:	d105      	bne.n	8001130 <BSP_ACCELERO_Init+0x38>
    AcceleroDrv = &Lis3dshDrv;
 8001124:	4b04      	ldr	r3, [pc, #16]	; (8001138 <BSP_ACCELERO_Init+0x40>)
    AcceleroDrv->Init(ctrl);
 8001126:	2067      	movs	r0, #103	; 0x67
    AcceleroDrv = &Lis3dshDrv;
 8001128:	601c      	str	r4, [r3, #0]
    AcceleroDrv->Init(ctrl);
 800112a:	6823      	ldr	r3, [r4, #0]
 800112c:	4798      	blx	r3
 800112e:	e7f2      	b.n	8001116 <BSP_ACCELERO_Init+0x1e>
    ret = ACCELERO_ERROR;
 8001130:	2001      	movs	r0, #1
 8001132:	e7f1      	b.n	8001118 <BSP_ACCELERO_Init+0x20>
 8001134:	20000034 	.word	0x20000034
 8001138:	200006b8 	.word	0x200006b8
 800113c:	20000068 	.word	0x20000068

08001140 <BSP_ACCELERO_ReadID>:
  */
uint8_t BSP_ACCELERO_ReadID(void)
{
  uint8_t id = 0x00;

  if(AcceleroDrv->ReadID != NULL)
 8001140:	4b02      	ldr	r3, [pc, #8]	; (800114c <BSP_ACCELERO_ReadID+0xc>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6898      	ldr	r0, [r3, #8]
 8001146:	b100      	cbz	r0, 800114a <BSP_ACCELERO_ReadID+0xa>
  {
    id = AcceleroDrv->ReadID();
 8001148:	4700      	bx	r0
  }  
  return id;
}
 800114a:	4770      	bx	lr
 800114c:	200006b8 	.word	0x200006b8

08001150 <BSP_ACCELERO_Click_ITConfig>:
/**
  * @brief  Configure Accelerometer click IT. 
  */
void BSP_ACCELERO_Click_ITConfig(void)
{
  if(AcceleroDrv->ConfigIT != NULL)
 8001150:	4b02      	ldr	r3, [pc, #8]	; (800115c <BSP_ACCELERO_Click_ITConfig+0xc>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	b103      	cbz	r3, 800115a <BSP_ACCELERO_Click_ITConfig+0xa>
  {
    AcceleroDrv->ConfigIT();
 8001158:	4718      	bx	r3
  }
}
 800115a:	4770      	bx	lr
 800115c:	200006b8 	.word	0x200006b8

08001160 <BSP_ACCELERO_Click_ITClear>:
/**
  * @brief  Clear Accelerometer click IT.
  */
void BSP_ACCELERO_Click_ITClear(void)
{
  if(AcceleroDrv->ClearIT != NULL)
 8001160:	4b02      	ldr	r3, [pc, #8]	; (800116c <BSP_ACCELERO_Click_ITClear+0xc>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001166:	b103      	cbz	r3, 800116a <BSP_ACCELERO_Click_ITClear+0xa>
  {
    AcceleroDrv->ClearIT();
 8001168:	4718      	bx	r3
  }
}
 800116a:	4770      	bx	lr
 800116c:	200006b8 	.word	0x200006b8

08001170 <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.  
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8001170:	b538      	push	{r3, r4, r5, lr}
  int16_t SwitchXY = 0;
  
  if(AcceleroDrv->GetXYZ != NULL)
 8001172:	4d08      	ldr	r5, [pc, #32]	; (8001194 <BSP_ACCELERO_GetXYZ+0x24>)
 8001174:	682b      	ldr	r3, [r5, #0]
 8001176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
{
 8001178:	4604      	mov	r4, r0
  if(AcceleroDrv->GetXYZ != NULL)
 800117a:	b153      	cbz	r3, 8001192 <BSP_ACCELERO_GetXYZ+0x22>
  {   
    AcceleroDrv->GetXYZ(pDataXYZ);
 800117c:	4798      	blx	r3
    
    /* Switch X and Y Axes in case of LIS302DL MEMS */
    if(AcceleroDrv == &Lis302dlDrv)
 800117e:	682a      	ldr	r2, [r5, #0]
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <BSP_ACCELERO_GetXYZ+0x28>)
 8001182:	429a      	cmp	r2, r3
 8001184:	d105      	bne.n	8001192 <BSP_ACCELERO_GetXYZ+0x22>
    { 
      SwitchXY  = pDataXYZ[0];
 8001186:	f9b4 3000 	ldrsh.w	r3, [r4]
      pDataXYZ[0] = pDataXYZ[1];
 800118a:	8862      	ldrh	r2, [r4, #2]
 800118c:	8022      	strh	r2, [r4, #0]
      /* Invert Y Axis to be compliant with LIS3DSH MEMS */
      pDataXYZ[1] = -SwitchXY;
 800118e:	425b      	negs	r3, r3
 8001190:	8063      	strh	r3, [r4, #2]
    } 
  }
}
 8001192:	bd38      	pop	{r3, r4, r5, pc}
 8001194:	200006b8 	.word	0x200006b8
 8001198:	20000034 	.word	0x20000034

0800119c <I2S3_Init>:
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 800119c:	4a0c      	ldr	r2, [pc, #48]	; (80011d0 <I2S3_Init+0x34>)

 /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 800119e:	69d1      	ldr	r1, [r2, #28]
{
 80011a0:	b508      	push	{r3, lr}
  hAudioOutI2s.Instance         = I2S3;
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <I2S3_Init+0x38>)
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 80011a4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  hAudioOutI2s.Instance         = I2S3;
 80011a8:	601a      	str	r2, [r3, #0]
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 80011aa:	61d1      	str	r1, [r2, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 80011ac:	2200      	movs	r2, #0
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 80011ae:	f44f 7100 	mov.w	r1, #512	; 0x200
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 80011b2:	6158      	str	r0, [r3, #20]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
  /* Initialize the I2S peripheral with the structure above */  
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 80011b4:	4618      	mov	r0, r3
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 80011b6:	e9c3 2206 	strd	r2, r2, [r3, #24]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 80011ba:	e9c3 1201 	strd	r1, r2, [r3, #4]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 80011be:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 80011c0:	6119      	str	r1, [r3, #16]
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 80011c2:	f001 fb1b 	bl	80027fc <HAL_I2S_Init>
  }
  else
  {
    return AUDIO_OK;
  }
}
 80011c6:	3800      	subs	r0, #0
 80011c8:	bf18      	it	ne
 80011ca:	2001      	movne	r0, #1
 80011cc:	bd08      	pop	{r3, pc}
 80011ce:	bf00      	nop
 80011d0:	40003c00 	.word	0x40003c00
 80011d4:	200006bc 	.word	0x200006bc

080011d8 <BSP_AUDIO_OUT_Play>:
{
 80011d8:	b538      	push	{r3, r4, r5, lr}
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <BSP_AUDIO_OUT_Play+0x34>)
 80011dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
{
 80011de:	4605      	mov	r5, r0
 80011e0:	460c      	mov	r4, r1
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 80011e2:	b28a      	uxth	r2, r1
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	4601      	mov	r1, r0
 80011e8:	2094      	movs	r0, #148	; 0x94
 80011ea:	4798      	blx	r3
 80011ec:	b960      	cbnz	r0, 8001208 <BSP_AUDIO_OUT_Play+0x30>
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 80011ee:	f5b4 3f00 	cmp.w	r4, #131072	; 0x20000
 80011f2:	4806      	ldr	r0, [pc, #24]	; (800120c <BSP_AUDIO_OUT_Play+0x34>)
 80011f4:	bf34      	ite	cc
 80011f6:	f3c4 024f 	ubfxcc	r2, r4, #1, #16
 80011fa:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
 80011fe:	4629      	mov	r1, r5
 8001200:	f001 fb96 	bl	8002930 <HAL_I2S_Transmit_DMA>
    return AUDIO_OK;
 8001204:	2000      	movs	r0, #0
}
 8001206:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 8001208:	2001      	movs	r0, #1
 800120a:	e7fc      	b.n	8001206 <BSP_AUDIO_OUT_Play+0x2e>
 800120c:	200006bc 	.word	0x200006bc

08001210 <BSP_AUDIO_OUT_ChangeBuffer>:
{
 8001210:	460a      	mov	r2, r1
  HAL_I2S_Transmit_DMA(&hAudioOutI2s, pData, Size); 
 8001212:	4601      	mov	r1, r0
 8001214:	4801      	ldr	r0, [pc, #4]	; (800121c <BSP_AUDIO_OUT_ChangeBuffer+0xc>)
 8001216:	f001 bb8b 	b.w	8002930 <HAL_I2S_Transmit_DMA>
 800121a:	bf00      	nop
 800121c:	200006bc 	.word	0x200006bc

08001220 <BSP_AUDIO_OUT_Pause>:
{    
 8001220:	b538      	push	{r3, r4, r5, lr}
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 8001222:	4d07      	ldr	r5, [pc, #28]	; (8001240 <BSP_AUDIO_OUT_Pause+0x20>)
 8001224:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001226:	2094      	movs	r0, #148	; 0x94
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	4798      	blx	r3
 800122c:	4604      	mov	r4, r0
 800122e:	b920      	cbnz	r0, 800123a <BSP_AUDIO_OUT_Pause+0x1a>
    HAL_I2S_DMAPause(&hAudioOutI2s);
 8001230:	4628      	mov	r0, r5
 8001232:	f001 fc51 	bl	8002ad8 <HAL_I2S_DMAPause>
    return AUDIO_OK;
 8001236:	4620      	mov	r0, r4
}
 8001238:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 800123a:	2001      	movs	r0, #1
 800123c:	e7fc      	b.n	8001238 <BSP_AUDIO_OUT_Pause+0x18>
 800123e:	bf00      	nop
 8001240:	200006bc 	.word	0x200006bc

08001244 <BSP_AUDIO_OUT_Resume>:
{    
 8001244:	b538      	push	{r3, r4, r5, lr}
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 8001246:	4d07      	ldr	r5, [pc, #28]	; (8001264 <BSP_AUDIO_OUT_Resume+0x20>)
 8001248:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800124a:	2094      	movs	r0, #148	; 0x94
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	4798      	blx	r3
 8001250:	4604      	mov	r4, r0
 8001252:	b920      	cbnz	r0, 800125e <BSP_AUDIO_OUT_Resume+0x1a>
    HAL_I2S_DMAResume(&hAudioOutI2s);
 8001254:	4628      	mov	r0, r5
 8001256:	f001 fc77 	bl	8002b48 <HAL_I2S_DMAResume>
    return AUDIO_OK;
 800125a:	4620      	mov	r0, r4
}
 800125c:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 800125e:	2001      	movs	r0, #1
 8001260:	e7fc      	b.n	800125c <BSP_AUDIO_OUT_Resume+0x18>
 8001262:	bf00      	nop
 8001264:	200006bc 	.word	0x200006bc

08001268 <BSP_AUDIO_OUT_Stop>:
{
 8001268:	b538      	push	{r3, r4, r5, lr}
  HAL_I2S_DMAStop(&hAudioOutI2s);
 800126a:	4c0d      	ldr	r4, [pc, #52]	; (80012a0 <BSP_AUDIO_OUT_Stop+0x38>)
{
 800126c:	4605      	mov	r5, r0
  HAL_I2S_DMAStop(&hAudioOutI2s);
 800126e:	4620      	mov	r0, r4
 8001270:	f001 fcae 	bl	8002bd0 <HAL_I2S_DMAStop>
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8001274:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001276:	4629      	mov	r1, r5
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	2094      	movs	r0, #148	; 0x94
 800127c:	4798      	blx	r3
 800127e:	4604      	mov	r4, r0
 8001280:	b958      	cbnz	r0, 800129a <BSP_AUDIO_OUT_Stop+0x32>
    if(Option == CODEC_PDWN_HW)
 8001282:	2d01      	cmp	r5, #1
 8001284:	d107      	bne.n	8001296 <BSP_AUDIO_OUT_Stop+0x2e>
      HAL_Delay(1);
 8001286:	4628      	mov	r0, r5
 8001288:	f000 fae8 	bl	800185c <HAL_Delay>
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <BSP_AUDIO_OUT_Stop+0x3c>)
 800128e:	4622      	mov	r2, r4
 8001290:	2110      	movs	r1, #16
 8001292:	f000 fe3f 	bl	8001f14 <HAL_GPIO_WritePin>
    return AUDIO_OK;
 8001296:	4620      	mov	r0, r4
 8001298:	e000      	b.n	800129c <BSP_AUDIO_OUT_Stop+0x34>
    return AUDIO_ERROR;
 800129a:	2001      	movs	r0, #1
}
 800129c:	bd38      	pop	{r3, r4, r5, pc}
 800129e:	bf00      	nop
 80012a0:	200006bc 	.word	0x200006bc
 80012a4:	40020c00 	.word	0x40020c00

080012a8 <BSP_AUDIO_OUT_ClockConfig>:
{ 
 80012a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80012aa:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <BSP_AUDIO_OUT_ClockConfig+0x4c>)
 80012ac:	2300      	movs	r3, #0
  uint8_t index = 0, freqindex = 0xFF;
 80012ae:	25ff      	movs	r5, #255	; 0xff
 80012b0:	4614      	mov	r4, r2
    if(I2SFreq[index] == AudioFreq)
 80012b2:	f852 6b04 	ldr.w	r6, [r2], #4
 80012b6:	b2d8      	uxtb	r0, r3
  for(index = 0; index < 8; index++)
 80012b8:	3301      	adds	r3, #1
    if(I2SFreq[index] == AudioFreq)
 80012ba:	428e      	cmp	r6, r1
 80012bc:	bf08      	it	eq
 80012be:	4605      	moveq	r5, r0
  for(index = 0; index < 8; index++)
 80012c0:	2b08      	cmp	r3, #8
 80012c2:	d1f6      	bne.n	80012b2 <BSP_AUDIO_OUT_ClockConfig+0xa>
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 80012c4:	4668      	mov	r0, sp
 80012c6:	f002 fa81 	bl	80037cc <HAL_RCCEx_GetPeriphCLKConfig>
  if ((freqindex & 0x7) == 0)
 80012ca:	2301      	movs	r3, #1
 80012cc:	f015 0f07 	tst.w	r5, #7
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80012d0:	9300      	str	r3, [sp, #0]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80012d2:	bf0b      	itete	eq
 80012d4:	eb04 0385 	addeq.w	r3, r4, r5, lsl #2
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80012d8:	f44f 7381 	movne.w	r3, #258	; 0x102
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80012dc:	6a1a      	ldreq	r2, [r3, #32]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80012de:	9301      	strne	r3, [sp, #4]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 80012e0:	bf06      	itte	eq
 80012e2:	6c1b      	ldreq	r3, [r3, #64]	; 0x40
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80012e4:	9201      	streq	r2, [sp, #4]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 80012e6:	2303      	movne	r3, #3
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80012e8:	4668      	mov	r0, sp
    rccclkinit.PLLI2S.PLLI2SR = 3;
 80012ea:	9302      	str	r3, [sp, #8]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80012ec:	f002 f9d6 	bl	800369c <HAL_RCCEx_PeriphCLKConfig>
}
 80012f0:	b004      	add	sp, #16
 80012f2:	bd70      	pop	{r4, r5, r6, pc}
 80012f4:	0800699c 	.word	0x0800699c

080012f8 <BSP_AUDIO_OUT_MspInit>:
{
 80012f8:	b570      	push	{r4, r5, r6, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
  I2S3_CLK_ENABLE();
 80012fc:	4c40      	ldr	r4, [pc, #256]	; (8001400 <BSP_AUDIO_OUT_MspInit+0x108>)
 80012fe:	2500      	movs	r5, #0
 8001300:	9500      	str	r5, [sp, #0]
 8001302:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001308:	6423      	str	r3, [r4, #64]	; 0x40
 800130a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800130c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	9b00      	ldr	r3, [sp, #0]
  I2S3_SCK_SD_CLK_ENABLE();
 8001314:	9501      	str	r5, [sp, #4]
 8001316:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	6323      	str	r3, [r4, #48]	; 0x30
 800131e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	9301      	str	r3, [sp, #4]
 8001326:	9b01      	ldr	r3, [sp, #4]
  I2S3_WS_CLK_ENABLE();
 8001328:	9502      	str	r5, [sp, #8]
 800132a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6323      	str	r3, [r4, #48]	; 0x30
 8001332:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 800133a:	f44f 5ca0 	mov.w	ip, #5120	; 0x1400
  I2S3_WS_CLK_ENABLE();
 800133e:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	e9cd c305 	strd	ip, r3, [sp, #20]
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 8001346:	e9cd 5307 	strd	r5, r3, [sp, #28]
{
 800134a:	4606      	mov	r6, r0
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 800134c:	2306      	movs	r3, #6
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 800134e:	482d      	ldr	r0, [pc, #180]	; (8001404 <BSP_AUDIO_OUT_MspInit+0x10c>)
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 8001350:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8001352:	a905      	add	r1, sp, #20
 8001354:	f000 fcfe 	bl	8001d54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8001358:	2310      	movs	r3, #16
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 800135a:	482b      	ldr	r0, [pc, #172]	; (8001408 <BSP_AUDIO_OUT_MspInit+0x110>)
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 800135c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 800135e:	a905      	add	r1, sp, #20
 8001360:	f000 fcf8 	bl	8001d54 <HAL_GPIO_Init>
  I2S3_MCK_CLK_ENABLE();
 8001364:	9503      	str	r5, [sp, #12]
 8001366:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8001368:	4826      	ldr	r0, [pc, #152]	; (8001404 <BSP_AUDIO_OUT_MspInit+0x10c>)
  I2S3_MCK_CLK_ENABLE();
 800136a:	f043 0304 	orr.w	r3, r3, #4
 800136e:	6323      	str	r3, [r4, #48]	; 0x30
 8001370:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	9303      	str	r3, [sp, #12]
 8001378:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 800137a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8001380:	f000 fce8 	bl	8001d54 <HAL_GPIO_Init>
  I2S3_DMAx_CLK_ENABLE(); 
 8001384:	9504      	str	r5, [sp, #16]
 8001386:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if(hi2s->Instance == I2S3)
 8001388:	6832      	ldr	r2, [r6, #0]
  I2S3_DMAx_CLK_ENABLE(); 
 800138a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800138e:	6323      	str	r3, [r4, #48]	; 0x30
 8001390:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001396:	9304      	str	r3, [sp, #16]
 8001398:	9b04      	ldr	r3, [sp, #16]
  if(hi2s->Instance == I2S3)
 800139a:	4b1c      	ldr	r3, [pc, #112]	; (800140c <BSP_AUDIO_OUT_MspInit+0x114>)
 800139c:	429a      	cmp	r2, r3
 800139e:	d124      	bne.n	80013ea <BSP_AUDIO_OUT_MspInit+0xf2>
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <BSP_AUDIO_OUT_MspInit+0x118>)
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80013a2:	2240      	movs	r2, #64	; 0x40
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80013a4:	e9c3 2515 	strd	r2, r5, [r3, #84]	; 0x54
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 80013a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013b0:	e9c3 1217 	strd	r1, r2, [r3, #92]	; 0x5c
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 80013b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 80013b8:	e9c3 2519 	strd	r2, r5, [r3, #100]	; 0x64
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80013bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80013c0:	2204      	movs	r2, #4
    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80013c2:	461c      	mov	r4, r3
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80013c4:	e9c3 021b 	strd	r0, r2, [r3, #108]	; 0x6c
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80013c8:	2203      	movs	r2, #3
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80013ca:	e9c3 251d 	strd	r2, r5, [r3, #116]	; 0x74
    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80013ce:	4a11      	ldr	r2, [pc, #68]	; (8001414 <BSP_AUDIO_OUT_MspInit+0x11c>)
 80013d0:	f844 2f4c 	str.w	r2, [r4, #76]!
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80013d4:	63b4      	str	r4, [r6, #56]	; 0x38
    HAL_DMA_DeInit(&hdma_i2sTx);
 80013d6:	4620      	mov	r0, r4
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 80013d8:	651d      	str	r5, [r3, #80]	; 0x50
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80013da:	67dd      	str	r5, [r3, #124]	; 0x7c
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80013dc:	f8c3 6084 	str.w	r6, [r3, #132]	; 0x84
    HAL_DMA_DeInit(&hdma_i2sTx);
 80013e0:	f000 fb52 	bl	8001a88 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_i2sTx);
 80013e4:	4620      	mov	r0, r4
 80013e6:	f000 facf 	bl	8001988 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	210e      	movs	r1, #14
 80013ee:	202f      	movs	r0, #47	; 0x2f
 80013f0:	f000 fa60 	bl	80018b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ); 
 80013f4:	202f      	movs	r0, #47	; 0x2f
 80013f6:	f000 fa8f 	bl	8001918 <HAL_NVIC_EnableIRQ>
}
 80013fa:	b00a      	add	sp, #40	; 0x28
 80013fc:	bd70      	pop	{r4, r5, r6, pc}
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800
 8001404:	40020800 	.word	0x40020800
 8001408:	40020000 	.word	0x40020000
 800140c:	40003c00 	.word	0x40003c00
 8001410:	200006bc 	.word	0x200006bc
 8001414:	400260b8 	.word	0x400260b8

08001418 <BSP_AUDIO_OUT_Init>:
{    
 8001418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 800141c:	4e17      	ldr	r6, [pc, #92]	; (800147c <BSP_AUDIO_OUT_Init+0x64>)
{    
 800141e:	4615      	mov	r5, r2
 8001420:	4607      	mov	r7, r0
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8001422:	2200      	movs	r2, #0
 8001424:	4630      	mov	r0, r6
{    
 8001426:	4688      	mov	r8, r1
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8001428:	4629      	mov	r1, r5
 800142a:	f7ff ff3d 	bl	80012a8 <BSP_AUDIO_OUT_ClockConfig>
  hAudioOutI2s.Instance = I2S3;
 800142e:	4b14      	ldr	r3, [pc, #80]	; (8001480 <BSP_AUDIO_OUT_Init+0x68>)
 8001430:	6033      	str	r3, [r6, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 8001432:	4630      	mov	r0, r6
 8001434:	f001 fd7f 	bl	8002f36 <HAL_I2S_GetState>
 8001438:	4601      	mov	r1, r0
 800143a:	b910      	cbnz	r0, 8001442 <BSP_AUDIO_OUT_Init+0x2a>
    BSP_AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 800143c:	4630      	mov	r0, r6
 800143e:	f7ff ff5b 	bl	80012f8 <BSP_AUDIO_OUT_MspInit>
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 8001442:	4628      	mov	r0, r5
 8001444:	f7ff feaa 	bl	800119c <I2S3_Init>
 8001448:	4604      	mov	r4, r0
 800144a:	b118      	cbz	r0, 8001454 <BSP_AUDIO_OUT_Init+0x3c>
    ret = AUDIO_ERROR;
 800144c:	2401      	movs	r4, #1
}
 800144e:	4620      	mov	r0, r4
 8001450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 8001454:	f8df 902c 	ldr.w	r9, [pc, #44]	; 8001484 <BSP_AUDIO_OUT_Init+0x6c>
 8001458:	2094      	movs	r0, #148	; 0x94
 800145a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800145e:	4798      	blx	r3
 8001460:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8001464:	28e0      	cmp	r0, #224	; 0xe0
 8001466:	d1f1      	bne.n	800144c <BSP_AUDIO_OUT_Init+0x34>
      pAudioDrv = &cs43l22_drv; 
 8001468:	f8c6 9048 	str.w	r9, [r6, #72]	; 0x48
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 800146c:	462b      	mov	r3, r5
 800146e:	f8d9 6000 	ldr.w	r6, [r9]
 8001472:	4642      	mov	r2, r8
 8001474:	4639      	mov	r1, r7
 8001476:	2094      	movs	r0, #148	; 0x94
 8001478:	47b0      	blx	r6
 800147a:	e7e8      	b.n	800144e <BSP_AUDIO_OUT_Init+0x36>
 800147c:	200006bc 	.word	0x200006bc
 8001480:	40003c00 	.word	0x40003c00
 8001484:	20000004 	.word	0x20000004

08001488 <HAL_I2S_TxCpltCallback>:
{
 8001488:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 800148a:	6802      	ldr	r2, [r0, #0]
 800148c:	4b02      	ldr	r3, [pc, #8]	; (8001498 <HAL_I2S_TxCpltCallback+0x10>)
 800148e:	429a      	cmp	r2, r3
 8001490:	d101      	bne.n	8001496 <HAL_I2S_TxCpltCallback+0xe>
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 8001492:	f002 fcc1 	bl	8003e18 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8001496:	bd08      	pop	{r3, pc}
 8001498:	40003c00 	.word	0x40003c00

0800149c <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
 800149c:	4770      	bx	lr
	...

080014a0 <HAL_I2S_TxHalfCpltCallback>:
{
 80014a0:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 80014a2:	6802      	ldr	r2, [r0, #0]
 80014a4:	4b02      	ldr	r3, [pc, #8]	; (80014b0 <HAL_I2S_TxHalfCpltCallback+0x10>)
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d101      	bne.n	80014ae <HAL_I2S_TxHalfCpltCallback+0xe>
    BSP_AUDIO_OUT_HalfTransfer_CallBack();
 80014aa:	f7ff fff7 	bl	800149c <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 80014ae:	bd08      	pop	{r3, pc}
 80014b0:	40003c00 	.word	0x40003c00

080014b4 <BSP_AUDIO_IN_Record>:
  * @param  pbuf: Main buffer pointer for the recorded data storing  
  * @param  size: Current size of the recorded buffer
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 80014b4:	b508      	push	{r3, lr}
  uint32_t ret = AUDIO_ERROR;
  
  /* Start the process receive DMA */
  HAL_I2S_Receive_DMA(&hAudioInI2s, pbuf, size);
 80014b6:	b28a      	uxth	r2, r1
 80014b8:	4601      	mov	r1, r0
 80014ba:	4802      	ldr	r0, [pc, #8]	; (80014c4 <BSP_AUDIO_IN_Record+0x10>)
 80014bc:	f001 fa9c 	bl	80029f8 <HAL_I2S_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
  
  return ret;
}
 80014c0:	2000      	movs	r0, #0
 80014c2:	bd08      	pop	{r3, pc}
 80014c4:	20000768 	.word	0x20000768

080014c8 <BSP_AUDIO_IN_Stop>:
/**
  * @brief  Stops audio recording.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Stop(void)
{
 80014c8:	b508      	push	{r3, lr}
  uint32_t ret = AUDIO_ERROR;
  
  /* Call the Media layer pause function */
  HAL_I2S_DMAStop(&hAudioInI2s);  
 80014ca:	4802      	ldr	r0, [pc, #8]	; (80014d4 <BSP_AUDIO_IN_Stop+0xc>)
 80014cc:	f001 fb80 	bl	8002bd0 <HAL_I2S_DMAStop>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
  
  return ret;
}
 80014d0:	2000      	movs	r0, #0
 80014d2:	bd08      	pop	{r3, pc}
 80014d4:	20000768 	.word	0x20000768

080014d8 <BSP_AUDIO_IN_PDMToPCM>:
  * @param  PDMBuf: Pointer to data PDM buffer
  * @param  PCMBuf: Pointer to data PCM buffer
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_PDMToPCM(uint16_t *PDMBuf, uint16_t *PCMBuf)
{
 80014d8:	b530      	push	{r4, r5, lr}
 80014da:	b0a1      	sub	sp, #132	; 0x84
 80014dc:	460c      	mov	r4, r1
 80014de:	4669      	mov	r1, sp
 80014e0:	1e82      	subs	r2, r0, #2
 80014e2:	f100 037e 	add.w	r3, r0, #126	; 0x7e
 80014e6:	4608      	mov	r0, r1
  uint32_t index = 0; 
  
  /* PDM Demux */
  for(index = 0; index<INTERNAL_BUFF_SIZE/2; index++)
  {
    AppPDM[index] = HTONS(PDMBuf[index]);
 80014e8:	f832 5f02 	ldrh.w	r5, [r2, #2]!
 80014ec:	ba6d      	rev16	r5, r5
  for(index = 0; index<INTERNAL_BUFF_SIZE/2; index++)
 80014ee:	4293      	cmp	r3, r2
    AppPDM[index] = HTONS(PDMBuf[index]);
 80014f0:	f821 5b02 	strh.w	r5, [r1], #2
  for(index = 0; index<INTERNAL_BUFF_SIZE/2; index++)
 80014f4:	d1f8      	bne.n	80014e8 <BSP_AUDIO_IN_PDMToPCM+0x10>
  }
  
  for(index = 0; index < DEFAULT_AUDIO_IN_CHANNEL_NBR; index++)
  {
    /* PDM to PCM filter */
	PDM_Filter((uint8_t*)&AppPDM[index], (uint16_t*)&(PCMBuf[index]), &PDM_FilterHandler[index]);
 80014f6:	4a08      	ldr	r2, [pc, #32]	; (8001518 <BSP_AUDIO_IN_PDMToPCM+0x40>)
 80014f8:	4621      	mov	r1, r4
 80014fa:	f004 fd89 	bl	8006010 <PDM_Filter>
  }
  /* Duplicate samples since a single microphone in mounted on STM32F4-Discovery */
  for(index = 0; index < PCM_OUT_SIZE; index++)
 80014fe:	2300      	movs	r3, #0
  {
    PCMBuf[(index<<1)+1] = PCMBuf[index<<1];
 8001500:	1ca2      	adds	r2, r4, #2
 8001502:	f834 1023 	ldrh.w	r1, [r4, r3, lsl #2]
 8001506:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  for(index = 0; index < PCM_OUT_SIZE; index++)
 800150a:	3301      	adds	r3, #1
 800150c:	2b10      	cmp	r3, #16
 800150e:	d1f8      	bne.n	8001502 <BSP_AUDIO_IN_PDMToPCM+0x2a>
  }
  
  /* Return AUDIO_OK when all operations are correctly done */
  return AUDIO_OK; 
}
 8001510:	2000      	movs	r0, #0
 8001512:	b021      	add	sp, #132	; 0x84
 8001514:	bd30      	pop	{r4, r5, pc}
 8001516:	bf00      	nop
 8001518:	200007b0 	.word	0x200007b0

0800151c <BSP_AUDIO_IN_ClockConfig>:
  * @param  Params : pointer on additional configuration parameters, can be NULL.   
  * @note   This API is called by BSP_AUDIO_IN_Init()
  *         Being __weak it can be overwritten by the application
  */
__weak void BSP_AUDIO_IN_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{
 800151c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800151e:	460c      	mov	r4, r1
  RCC_PeriphCLKInitTypeDef rccclkinit;

  /*Enable PLLI2S clock*/
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8001520:	4668      	mov	r0, sp
 8001522:	f002 f953 	bl	80037cc <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((AudioFreq & 0x7) == 0)
 8001526:	2301      	movs	r3, #1
 8001528:	f014 0f07 	tst.w	r4, #7
  {
    /* Audio frequency multiple of 8 (8/16/32/48/96/192)*/
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN = 192 Mhz */
    /* I2SCLK = PLLI2S_VCO Output/PLLI2SR = 192/6 = 32 Mhz */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800152c:	9300      	str	r3, [sp, #0]
    rccclkinit.PLLI2S.PLLI2SN = 192;
 800152e:	bf0b      	itete	eq
 8001530:	23c0      	moveq	r3, #192	; 0xc0
  {
    /* Other Frequency (11.025/22.500/44.100) */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN = 290 Mhz */
    /* I2SCLK = PLLI2S_VCO Output/PLLI2SR = 290/2 = 145 Mhz */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 290;
 8001532:	f44f 7391 	movne.w	r3, #290	; 0x122
    rccclkinit.PLLI2S.PLLI2SN = 192;
 8001536:	9301      	streq	r3, [sp, #4]
    rccclkinit.PLLI2S.PLLI2SN = 290;
 8001538:	9301      	strne	r3, [sp, #4]
    rccclkinit.PLLI2S.PLLI2SR = 6;
 800153a:	bf0c      	ite	eq
 800153c:	2306      	moveq	r3, #6
    rccclkinit.PLLI2S.PLLI2SR = 2;
 800153e:	2302      	movne	r3, #2
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8001540:	4668      	mov	r0, sp
    rccclkinit.PLLI2S.PLLI2SR = 2;
 8001542:	9302      	str	r3, [sp, #8]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8001544:	f002 f8aa 	bl	800369c <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8001548:	b004      	add	sp, #16
 800154a:	bd10      	pop	{r4, pc}

0800154c <BSP_AUDIO_IN_MspInit>:
  * @brief  BSP AUDIO IN MSP Init.
  * @param  hi2s: I2S handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_AUDIO_IN_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 800154c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001550:	b08a      	sub	sp, #40	; 0x28
  static DMA_HandleTypeDef hdma_i2sRx;
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the I2S2 peripheral clock */
  I2S2_CLK_ENABLE();
 8001552:	4c3b      	ldr	r4, [pc, #236]	; (8001640 <BSP_AUDIO_IN_MspInit+0xf4>)
 8001554:	2500      	movs	r5, #0
 8001556:	9501      	str	r5, [sp, #4]
 8001558:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800155a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800155e:	6423      	str	r3, [r4, #64]	; 0x40
 8001560:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001566:	9301      	str	r3, [sp, #4]
 8001568:	9b01      	ldr	r3, [sp, #4]

  /* Enable I2S GPIO clocks */
  I2S2_SCK_GPIO_CLK_ENABLE();
 800156a:	9502      	str	r5, [sp, #8]
 800156c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800156e:	f043 0302 	orr.w	r3, r3, #2
 8001572:	6323      	str	r3, [r4, #48]	; 0x30
 8001574:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	9302      	str	r3, [sp, #8]
 800157c:	9b02      	ldr	r3, [sp, #8]
  I2S2_MOSI_GPIO_CLK_ENABLE();
 800157e:	9503      	str	r5, [sp, #12]
 8001580:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001582:	f043 0304 	orr.w	r3, r3, #4
 8001586:	6323      	str	r3, [r4, #48]	; 0x30
 8001588:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	9303      	str	r3, [sp, #12]
 8001590:	9b03      	ldr	r3, [sp, #12]
{
 8001592:	4606      	mov	r6, r0
  
  /* I2S2 pins configuration: SCK and MOSI pins ------------------------------*/
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;

  GPIO_InitStruct.Pin       = I2S2_SCK_PIN; 
  GPIO_InitStruct.Alternate = I2S2_SCK_AF;
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001596:	482b      	ldr	r0, [pc, #172]	; (8001644 <BSP_AUDIO_IN_MspInit+0xf8>)
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8001598:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Alternate = I2S2_SCK_AF;
 800159a:	f04f 0805 	mov.w	r8, #5
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 800159e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = I2S2_SCK_PIN; 
 80015a0:	f44f 6780 	mov.w	r7, #1024	; 0x400
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80015a4:	e9cd 3506 	strd	r3, r5, [sp, #24]
  GPIO_InitStruct.Pin       = I2S2_SCK_PIN; 
 80015a8:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Alternate = I2S2_SCK_AF;
 80015aa:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 80015ae:	f000 fbd1 	bl	8001d54 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin       = I2S2_MOSI_PIN ;
 80015b2:	2308      	movs	r3, #8
  GPIO_InitStruct.Alternate = I2S2_MOSI_AF;
  HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct); 
 80015b4:	4824      	ldr	r0, [pc, #144]	; (8001648 <BSP_AUDIO_IN_MspInit+0xfc>)
  GPIO_InitStruct.Pin       = I2S2_MOSI_PIN ;
 80015b6:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct); 
 80015b8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = I2S2_MOSI_AF;
 80015ba:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct); 
 80015be:	f000 fbc9 	bl	8001d54 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  I2S2_DMAx_CLK_ENABLE();
 80015c2:	9504      	str	r5, [sp, #16]
 80015c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    
  if(hi2s->Instance == I2S2)
 80015c6:	6832      	ldr	r2, [r6, #0]
  I2S2_DMAx_CLK_ENABLE();
 80015c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015cc:	6323      	str	r3, [r4, #48]	; 0x30
 80015ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80015d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d4:	9304      	str	r3, [sp, #16]
 80015d6:	9b04      	ldr	r3, [sp, #16]
  if(hi2s->Instance == I2S2)
 80015d8:	4b1c      	ldr	r3, [pc, #112]	; (800164c <BSP_AUDIO_IN_MspInit+0x100>)
 80015da:	429a      	cmp	r2, r3
 80015dc:	d125      	bne.n	800162a <BSP_AUDIO_IN_MspInit+0xde>
  {
    /* Configure the hdma_i2sRx handle parameters */   
    hdma_i2sRx.Init.Channel             = I2S2_DMAx_CHANNEL;
 80015de:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <BSP_AUDIO_IN_MspInit+0x104>)
    hdma_i2sRx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
    hdma_i2sRx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_i2sRx.Init.MemInc              = DMA_MINC_ENABLE;
    hdma_i2sRx.Init.PeriphDataAlignment = I2S2_DMAx_PERIPH_DATA_SIZE;
    hdma_i2sRx.Init.MemDataAlignment    = I2S2_DMAx_MEM_DATA_SIZE;
 80015e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015e8:	e9c3 1268 	strd	r1, r2, [r3, #416]	; 0x1a0
    hdma_i2sRx.Init.Mode                = DMA_CIRCULAR;
    hdma_i2sRx.Init.Priority            = DMA_PRIORITY_HIGH;
 80015ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 80015f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_i2sRx.Init.PeriphBurst         = DMA_MBURST_SINGLE; 
    
    hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 80015f4:	f503 74c6 	add.w	r4, r3, #396	; 0x18c
    hdma_i2sRx.Init.Priority            = DMA_PRIORITY_HIGH;
 80015f8:	e9c3 026a 	strd	r0, r2, [r3, #424]	; 0x1a8
    hdma_i2sRx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80015fc:	2203      	movs	r2, #3
    hdma_i2sRx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80015fe:	e9c3 256d 	strd	r2, r5, [r3, #436]	; 0x1b4
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 8001602:	63f4      	str	r4, [r6, #60]	; 0x3c
    hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
 8001604:	4a13      	ldr	r2, [pc, #76]	; (8001654 <BSP_AUDIO_IN_MspInit+0x108>)
    hdma_i2sRx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8001606:	f8c3 51b0 	str.w	r5, [r3, #432]	; 0x1b0
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sRx);
 800160a:	4620      	mov	r0, r4
    hdma_i2sRx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800160c:	e9c3 5564 	strd	r5, r5, [r3, #400]	; 0x190
    hdma_i2sRx.Init.MemInc              = DMA_MINC_ENABLE;
 8001610:	e9c3 5766 	strd	r5, r7, [r3, #408]	; 0x198
    hdma_i2sRx.Init.PeriphBurst         = DMA_MBURST_SINGLE; 
 8001614:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
    hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
 8001618:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 800161c:	f8c3 61c4 	str.w	r6, [r3, #452]	; 0x1c4
    HAL_DMA_DeInit(&hdma_i2sRx);
 8001620:	f000 fa32 	bl	8001a88 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sRx);      
 8001624:	4620      	mov	r0, r4
 8001626:	f000 f9af 	bl	8001988 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S2_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	210f      	movs	r1, #15
 800162e:	200e      	movs	r0, #14
 8001630:	f000 f940 	bl	80018b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S2_DMAx_IRQ); 
 8001634:	200e      	movs	r0, #14
 8001636:	f000 f96f 	bl	8001918 <HAL_NVIC_EnableIRQ>
}
 800163a:	b00a      	add	sp, #40	; 0x28
 800163c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001640:	40023800 	.word	0x40023800
 8001644:	40020400 	.word	0x40020400
 8001648:	40020800 	.word	0x40020800
 800164c:	40003800 	.word	0x40003800
 8001650:	200006bc 	.word	0x200006bc
 8001654:	40026058 	.word	0x40026058

08001658 <BSP_AUDIO_IN_Init>:
{
 8001658:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800165c:	4605      	mov	r5, r0
  BSP_AUDIO_IN_ClockConfig(&hAudioInI2s, AudioFreq, NULL);
 800165e:	4601      	mov	r1, r0
{
 8001660:	4691      	mov	r9, r2
  BSP_AUDIO_IN_ClockConfig(&hAudioInI2s, AudioFreq, NULL);
 8001662:	4831      	ldr	r0, [pc, #196]	; (8001728 <BSP_AUDIO_IN_Init+0xd0>)
 8001664:	4c31      	ldr	r4, [pc, #196]	; (800172c <BSP_AUDIO_IN_Init+0xd4>)
 8001666:	2200      	movs	r2, #0
 8001668:	f7ff ff58 	bl	800151c <BSP_AUDIO_IN_ClockConfig>
static void PDMDecoder_Init(uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
  uint32_t index = 0;

  /* Enable CRC peripheral to unlock the PDM library */
  __HAL_RCC_CRC_CLK_ENABLE();
 800166c:	2600      	movs	r6, #0
 800166e:	4b30      	ldr	r3, [pc, #192]	; (8001730 <BSP_AUDIO_IN_Init+0xd8>)
 8001670:	9601      	str	r6, [sp, #4]
 8001672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001674:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001678:	631a      	str	r2, [r3, #48]	; 0x30
 800167a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001680:	9301      	str	r3, [sp, #4]
 8001682:	9b01      	ldr	r3, [sp, #4]
  for(index = 0; index < ChnlNbrIn; index++)
  {
    /* Init PDM filters */
    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
    PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
    PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8001684:	4b2b      	ldr	r3, [pc, #172]	; (8001734 <BSP_AUDIO_IN_Init+0xdc>)
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
    PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));

    /* PDM lib config phase */
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8001686:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 800168a:	f104 07f8 	add.w	r7, r4, #248	; 0xf8
 800168e:	fbb5 f8f8 	udiv	r8, r5, r8
    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
 8001692:	46b2      	mov	sl, r6
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8001694:	fa1f f888 	uxth.w	r8, r8
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 8001698:	f04f 0b02 	mov.w	fp, #2
  for(index = 0; index < ChnlNbrIn; index++)
 800169c:	45b1      	cmp	r9, r6
 800169e:	d127      	bne.n	80016f0 <BSP_AUDIO_IN_Init+0x98>
  hAudioInI2s.Instance = I2S2;
 80016a0:	4c25      	ldr	r4, [pc, #148]	; (8001738 <BSP_AUDIO_IN_Init+0xe0>)
 80016a2:	4f26      	ldr	r7, [pc, #152]	; (800173c <BSP_AUDIO_IN_Init+0xe4>)
 80016a4:	4626      	mov	r6, r4
 80016a6:	f846 7fac 	str.w	r7, [r6, #172]!
  if(HAL_I2S_GetState(&hAudioInI2s) == HAL_I2S_STATE_RESET)
 80016aa:	4630      	mov	r0, r6
 80016ac:	f001 fc43 	bl	8002f36 <HAL_I2S_GetState>
 80016b0:	4601      	mov	r1, r0
 80016b2:	b910      	cbnz	r0, 80016ba <BSP_AUDIO_IN_Init+0x62>
    BSP_AUDIO_IN_MspInit(&hAudioInI2s, NULL);
 80016b4:	4630      	mov	r0, r6
 80016b6:	f7ff ff49 	bl	800154c <BSP_AUDIO_IN_MspInit>
{
  /* Initialize the hAudioInI2s Instance parameter */
  hAudioInI2s.Instance          = I2S2;
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioInI2s);
 80016ba:	69fb      	ldr	r3, [r7, #28]
  hAudioInI2s.Instance          = I2S2;
 80016bc:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
  __HAL_I2S_DISABLE(&hAudioInI2s);
 80016c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  
  /* I2S2 peripheral configuration */
  hAudioInI2s.Init.AudioFreq    = 2 * AudioFreq;
 80016c4:	006d      	lsls	r5, r5, #1
  __HAL_I2S_DISABLE(&hAudioInI2s);
 80016c6:	61fb      	str	r3, [r7, #28]
  hAudioInI2s.Init.AudioFreq    = 2 * AudioFreq;
 80016c8:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
  hAudioInI2s.Init.ClockSource  = I2S_CLOCK_PLL;
  hAudioInI2s.Init.CPOL         = I2S_CPOL_HIGH;
 80016cc:	2308      	movs	r3, #8
 80016ce:	2500      	movs	r5, #0
 80016d0:	e9c4 3531 	strd	r3, r5, [r4, #196]	; 0xc4
  hAudioInI2s.Init.DataFormat   = I2S_DATAFORMAT_16B;
  hAudioInI2s.Init.MCLKOutput   = I2S_MCLKOUTPUT_DISABLE;
  hAudioInI2s.Init.Mode         = I2S_MODE_MASTER_RX;
  hAudioInI2s.Init.Standard     = I2S_STANDARD_LSB;
 80016d4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80016d8:	2320      	movs	r3, #32

  /* Initialize the I2S peripheral with the structure above */  
  if(HAL_I2S_Init(&hAudioInI2s) != HAL_OK)
 80016da:	4630      	mov	r0, r6
  hAudioInI2s.Init.MCLKOutput   = I2S_MCLKOUTPUT_DISABLE;
 80016dc:	e9c4 552e 	strd	r5, r5, [r4, #184]	; 0xb8
  hAudioInI2s.Init.Standard     = I2S_STANDARD_LSB;
 80016e0:	e9c4 232c 	strd	r2, r3, [r4, #176]	; 0xb0
  if(HAL_I2S_Init(&hAudioInI2s) != HAL_OK)
 80016e4:	f001 f88a 	bl	80027fc <HAL_I2S_Init>
}
 80016e8:	4628      	mov	r0, r5
 80016ea:	b003      	add	sp, #12
 80016ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 80016f0:	4620      	mov	r0, r4
    PDM_FilterHandler[index].high_pass_tap = 2122358088;
 80016f2:	6063      	str	r3, [r4, #4]
    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
 80016f4:	f8a4 a000 	strh.w	sl, [r4]
    PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 80016f8:	f8a4 a002 	strh.w	sl, [r4, #2]
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 80016fc:	f8a4 b00a 	strh.w	fp, [r4, #10]
    PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 8001700:	f8a4 9008 	strh.w	r9, [r4, #8]
    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 8001704:	f004 fb08 	bl	8005d18 <PDM_Filter_Init>
    PDM_FilterConfig[index].mic_gain = 24;
 8001708:	2218      	movs	r2, #24
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 800170a:	f8a7 8002 	strh.w	r8, [r7, #2]
    PDM_FilterConfig[index].mic_gain = 24;
 800170e:	80ba      	strh	r2, [r7, #4]
    PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8001710:	f8a7 b000 	strh.w	fp, [r7]
    PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8001714:	4639      	mov	r1, r7
 8001716:	4620      	mov	r0, r4
 8001718:	f004 fb88 	bl	8005e2c <PDM_Filter_setConfig>
  for(index = 0; index < ChnlNbrIn; index++)
 800171c:	3601      	adds	r6, #1
 800171e:	4b05      	ldr	r3, [pc, #20]	; (8001734 <BSP_AUDIO_IN_Init+0xdc>)
 8001720:	344c      	adds	r4, #76	; 0x4c
 8001722:	3706      	adds	r7, #6
 8001724:	e7ba      	b.n	800169c <BSP_AUDIO_IN_Init+0x44>
 8001726:	bf00      	nop
 8001728:	20000768 	.word	0x20000768
 800172c:	200007b0 	.word	0x200007b0
 8001730:	40023800 	.word	0x40023800
 8001734:	7e809d48 	.word	0x7e809d48
 8001738:	200006bc 	.word	0x200006bc
 800173c:	40003800 	.word	0x40003800

08001740 <HAL_I2S_RxCpltCallback>:
{
 8001740:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8001742:	f002 fc91 	bl	8004068 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001746:	bd08      	pop	{r3, pc}

08001748 <HAL_I2S_RxHalfCpltCallback>:
{
 8001748:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 800174a:	f002 fc93 	bl	8004074 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 800174e:	bd08      	pop	{r3, pc}

08001750 <HAL_I2S_ErrorCallback>:
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  if(hi2s->Instance == I2S3)
 8001750:	6802      	ldr	r2, [r0, #0]
 8001752:	4b07      	ldr	r3, [pc, #28]	; (8001770 <HAL_I2S_ErrorCallback+0x20>)
 8001754:	429a      	cmp	r2, r3
{
 8001756:	b510      	push	{r4, lr}
 8001758:	4604      	mov	r4, r0
  if(hi2s->Instance == I2S3)
 800175a:	d101      	bne.n	8001760 <HAL_I2S_ErrorCallback+0x10>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 800175c:	f002 fbb0 	bl	8003ec0 <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 8001760:	6822      	ldr	r2, [r4, #0]
 8001762:	4b04      	ldr	r3, [pc, #16]	; (8001774 <HAL_I2S_ErrorCallback+0x24>)
 8001764:	429a      	cmp	r2, r3
 8001766:	d101      	bne.n	800176c <HAL_I2S_ErrorCallback+0x1c>
  {
    BSP_AUDIO_IN_Error_Callback();
 8001768:	f002 fc8a 	bl	8004080 <BSP_AUDIO_IN_Error_Callback>
  }
}
 800176c:	bd10      	pop	{r4, pc}
 800176e:	bf00      	nop
 8001770:	40003c00 	.word	0x40003c00
 8001774:	40003800 	.word	0x40003800

08001778 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001778:	490f      	ldr	r1, [pc, #60]	; (80017b8 <SystemInit+0x40>)
 800177a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800177e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001786:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <SystemInit+0x44>)
 8001788:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800178a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800178c:	f042 0201 	orr.w	r2, r2, #1
 8001790:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001792:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800179a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800179e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80017a0:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <SystemInit+0x48>)
 80017a2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017aa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80017ac:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80017b2:	608b      	str	r3, [r1, #8]
#endif
}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00
 80017bc:	40023800 	.word	0x40023800
 80017c0:	24003010 	.word	0x24003010

080017c4 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80017c4:	4770      	bx	lr
	...

080017c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c8:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017ca:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <HAL_InitTick+0x3c>)
 80017cc:	4e0e      	ldr	r6, [pc, #56]	; (8001808 <HAL_InitTick+0x40>)
{
 80017ce:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d4:	7830      	ldrb	r0, [r6, #0]
 80017d6:	fbb3 f3f0 	udiv	r3, r3, r0
 80017da:	6810      	ldr	r0, [r2, #0]
 80017dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80017e0:	f000 f8a8 	bl	8001934 <HAL_SYSTICK_Config>
 80017e4:	4604      	mov	r4, r0
 80017e6:	b950      	cbnz	r0, 80017fe <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e8:	2d0f      	cmp	r5, #15
 80017ea:	d808      	bhi.n	80017fe <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ec:	4602      	mov	r2, r0
 80017ee:	4629      	mov	r1, r5
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f000 f85e 	bl	80018b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f8:	6075      	str	r5, [r6, #4]
 80017fa:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80017fc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80017fe:	2001      	movs	r0, #1
 8001800:	e7fc      	b.n	80017fc <HAL_InitTick+0x34>
 8001802:	bf00      	nop
 8001804:	200000b8 	.word	0x200000b8
 8001808:	200000bc 	.word	0x200000bc

0800180c <HAL_Init>:
{
 800180c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_Init+0x28>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001816:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800181e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001820:	2003      	movs	r0, #3
 8001822:	f000 f835 	bl	8001890 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001826:	200f      	movs	r0, #15
 8001828:	f7ff ffce 	bl	80017c8 <HAL_InitTick>
  HAL_MspInit();
 800182c:	f7ff ffca 	bl	80017c4 <HAL_MspInit>
}
 8001830:	2000      	movs	r0, #0
 8001832:	bd08      	pop	{r3, pc}
 8001834:	40023c00 	.word	0x40023c00

08001838 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001838:	4a03      	ldr	r2, [pc, #12]	; (8001848 <HAL_IncTick+0x10>)
 800183a:	4b04      	ldr	r3, [pc, #16]	; (800184c <HAL_IncTick+0x14>)
 800183c:	6811      	ldr	r1, [r2, #0]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	440b      	add	r3, r1
 8001842:	6013      	str	r3, [r2, #0]
}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	200008b4 	.word	0x200008b4
 800184c:	200000bc 	.word	0x200000bc

08001850 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001850:	4b01      	ldr	r3, [pc, #4]	; (8001858 <HAL_GetTick+0x8>)
 8001852:	6818      	ldr	r0, [r3, #0]
}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	200008b4 	.word	0x200008b4

0800185c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800185c:	b538      	push	{r3, r4, r5, lr}
 800185e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001860:	f7ff fff6 	bl	8001850 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001864:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001866:	bf1c      	itt	ne
 8001868:	4b05      	ldrne	r3, [pc, #20]	; (8001880 <HAL_Delay+0x24>)
 800186a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800186c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800186e:	bf18      	it	ne
 8001870:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001872:	f7ff ffed 	bl	8001850 <HAL_GetTick>
 8001876:	1b43      	subs	r3, r0, r5
 8001878:	42a3      	cmp	r3, r4
 800187a:	d3fa      	bcc.n	8001872 <HAL_Delay+0x16>
  {
  }
}
 800187c:	bd38      	pop	{r3, r4, r5, pc}
 800187e:	bf00      	nop
 8001880:	200000bc 	.word	0x200000bc

08001884 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE) >> 16U);
 8001884:	4b01      	ldr	r3, [pc, #4]	; (800188c <HAL_GetREVID+0x8>)
 8001886:	6818      	ldr	r0, [r3, #0]
}
 8001888:	0c00      	lsrs	r0, r0, #16
 800188a:	4770      	bx	lr
 800188c:	e0042000 	.word	0xe0042000

08001890 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001890:	4907      	ldr	r1, [pc, #28]	; (80018b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001892:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001894:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001898:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800189c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80018ac:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b4:	4b16      	ldr	r3, [pc, #88]	; (8001910 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018b6:	b530      	push	{r4, r5, lr}
 80018b8:	68dc      	ldr	r4, [r3, #12]
 80018ba:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018be:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c2:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c4:	2d04      	cmp	r5, #4
 80018c6:	bf28      	it	cs
 80018c8:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ca:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d0:	bf8c      	ite	hi
 80018d2:	3c03      	subhi	r4, #3
 80018d4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d6:	fa03 f505 	lsl.w	r5, r3, r5
 80018da:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018de:	40a3      	lsls	r3, r4
 80018e0:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80018e6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ec:	bfac      	ite	ge
 80018ee:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f2:	4a08      	ldrlt	r2, [pc, #32]	; (8001914 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f4:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f8:	bfb8      	it	lt
 80018fa:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	bfaa      	itet	ge
 8001902:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001906:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001908:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800190c:	bd30      	pop	{r4, r5, pc}
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00
 8001914:	e000ed14 	.word	0xe000ed14

08001918 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001918:	2800      	cmp	r0, #0
 800191a:	db08      	blt.n	800192e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191c:	0942      	lsrs	r2, r0, #5
 800191e:	2301      	movs	r3, #1
 8001920:	f000 001f 	and.w	r0, r0, #31
 8001924:	fa03 f000 	lsl.w	r0, r3, r0
 8001928:	4b01      	ldr	r3, [pc, #4]	; (8001930 <HAL_NVIC_EnableIRQ+0x18>)
 800192a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800192e:	4770      	bx	lr
 8001930:	e000e100 	.word	0xe000e100

08001934 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001934:	3801      	subs	r0, #1
 8001936:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800193a:	d20b      	bcs.n	8001954 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001940:	4a05      	ldr	r2, [pc, #20]	; (8001958 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001942:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001944:	21f0      	movs	r1, #240	; 0xf0
 8001946:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800194a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800194e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001950:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001952:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001954:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001956:	4770      	bx	lr
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800195c:	6803      	ldr	r3, [r0, #0]
{
 800195e:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001960:	4c08      	ldr	r4, [pc, #32]	; (8001984 <DMA_CalcBaseAndBitshift+0x28>)
{
 8001962:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001964:	b2d9      	uxtb	r1, r3
 8001966:	3910      	subs	r1, #16
 8001968:	2018      	movs	r0, #24
 800196a:	fbb1 f0f0 	udiv	r0, r1, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800196e:	5c20      	ldrb	r0, [r4, r0]
 8001970:	65d0      	str	r0, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001972:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8001976:	f020 0003 	bic.w	r0, r0, #3
  if (stream_number > 3U)
 800197a:	295f      	cmp	r1, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800197c:	bf88      	it	hi
 800197e:	3004      	addhi	r0, #4
 8001980:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001982:	bd10      	pop	{r4, pc}
 8001984:	08006a14 	.word	0x08006a14

08001988 <HAL_DMA_Init>:
{
 8001988:	b570      	push	{r4, r5, r6, lr}
 800198a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800198c:	f7ff ff60 	bl	8001850 <HAL_GetTick>
 8001990:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001992:	2c00      	cmp	r4, #0
 8001994:	d073      	beq.n	8001a7e <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 8001996:	2302      	movs	r3, #2
 8001998:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800199c:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 800199e:	2300      	movs	r3, #0
 80019a0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80019a4:	6813      	ldr	r3, [r2, #0]
 80019a6:	f023 0301 	bic.w	r3, r3, #1
 80019aa:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ac:	6821      	ldr	r1, [r4, #0]
 80019ae:	680b      	ldr	r3, [r1, #0]
 80019b0:	07d8      	lsls	r0, r3, #31
 80019b2:	d42f      	bmi.n	8001a14 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 80019b4:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019b6:	4d33      	ldr	r5, [pc, #204]	; (8001a84 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b8:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019ba:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019bc:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	68e2      	ldr	r2, [r4, #12]
 80019c4:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019c6:	6922      	ldr	r2, [r4, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	6962      	ldr	r2, [r4, #20]
 80019cc:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ce:	69e2      	ldr	r2, [r4, #28]
 80019d0:	4303      	orrs	r3, r0
 80019d2:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80019d4:	6a22      	ldr	r2, [r4, #32]
 80019d6:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019da:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019dc:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019e0:	bf02      	ittt	eq
 80019e2:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 80019e6:	4335      	orreq	r5, r6
 80019e8:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80019ea:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80019ec:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019ee:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019f0:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80019f4:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019f8:	d133      	bne.n	8001a62 <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 80019fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019fc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80019fe:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a00:	b37d      	cbz	r5, 8001a62 <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a02:	b990      	cbnz	r0, 8001a2a <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8001a04:	2a01      	cmp	r2, #1
 8001a06:	d021      	beq.n	8001a4c <HAL_DMA_Init+0xc4>
 8001a08:	f032 0202 	bics.w	r2, r2, #2
 8001a0c:	d129      	bne.n	8001a62 <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a0e:	01ea      	lsls	r2, r5, #7
 8001a10:	d527      	bpl.n	8001a62 <HAL_DMA_Init+0xda>
 8001a12:	e01e      	b.n	8001a52 <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a14:	f7ff ff1c 	bl	8001850 <HAL_GetTick>
 8001a18:	1b40      	subs	r0, r0, r5
 8001a1a:	2805      	cmp	r0, #5
 8001a1c:	d9c6      	bls.n	80019ac <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a1e:	2320      	movs	r3, #32
 8001a20:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a22:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8001a24:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001a28:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a2a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001a2e:	d114      	bne.n	8001a5a <HAL_DMA_Init+0xd2>
    switch (tmp)
 8001a30:	2a03      	cmp	r2, #3
 8001a32:	d816      	bhi.n	8001a62 <HAL_DMA_Init+0xda>
 8001a34:	a001      	add	r0, pc, #4	; (adr r0, 8001a3c <HAL_DMA_Init+0xb4>)
 8001a36:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001a3a:	bf00      	nop
 8001a3c:	08001a53 	.word	0x08001a53
 8001a40:	08001a0f 	.word	0x08001a0f
 8001a44:	08001a53 	.word	0x08001a53
 8001a48:	08001a4d 	.word	0x08001a4d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a4c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001a50:	d107      	bne.n	8001a62 <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a52:	2340      	movs	r3, #64	; 0x40
 8001a54:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001a56:	2001      	movs	r0, #1
 8001a58:	e7e4      	b.n	8001a24 <HAL_DMA_Init+0x9c>
    switch (tmp)
 8001a5a:	2a02      	cmp	r2, #2
 8001a5c:	d9f9      	bls.n	8001a52 <HAL_DMA_Init+0xca>
 8001a5e:	2a03      	cmp	r2, #3
 8001a60:	d0d5      	beq.n	8001a0e <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 8001a62:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a64:	4620      	mov	r0, r4
 8001a66:	f7ff ff79 	bl	800195c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a6a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001a6c:	233f      	movs	r3, #63	; 0x3f
 8001a6e:	4093      	lsls	r3, r2
 8001a70:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a72:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001a74:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a76:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001a78:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001a7c:	e7d4      	b.n	8001a28 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 8001a7e:	2001      	movs	r0, #1
 8001a80:	e7d2      	b.n	8001a28 <HAL_DMA_Init+0xa0>
 8001a82:	bf00      	nop
 8001a84:	f010803f 	.word	0xf010803f

08001a88 <HAL_DMA_DeInit>:
{
 8001a88:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8001a8a:	4605      	mov	r5, r0
 8001a8c:	b320      	cbz	r0, 8001ad8 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001a8e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	b2dc      	uxtb	r4, r3
 8001a96:	d01d      	beq.n	8001ad4 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8001a98:	6803      	ldr	r3, [r0, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 8001aa0:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8001aa2:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 8001aa4:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8001aa6:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8001aa8:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8001aaa:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8001aac:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8001aae:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8001ab0:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ab2:	f7ff ff53 	bl	800195c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ab6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001ab8:	233f      	movs	r3, #63	; 0x3f
 8001aba:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 8001abc:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8001ac0:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 8001ac4:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ac8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aca:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8001acc:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8001ad0:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
}
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001ad8:	2401      	movs	r4, #1
 8001ada:	e7fb      	b.n	8001ad4 <HAL_DMA_DeInit+0x4c>

08001adc <HAL_DMA_Start_IT>:
{
 8001adc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8001ade:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ae2:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8001ae4:	2c01      	cmp	r4, #1
 8001ae6:	d031      	beq.n	8001b4c <HAL_DMA_Start_IT+0x70>
 8001ae8:	2401      	movs	r4, #1
 8001aea:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001aee:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8001af2:	2c01      	cmp	r4, #1
 8001af4:	f04f 0500 	mov.w	r5, #0
 8001af8:	f04f 0402 	mov.w	r4, #2
 8001afc:	d124      	bne.n	8001b48 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001afe:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b02:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b04:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b06:	6825      	ldr	r5, [r4, #0]
 8001b08:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001b0c:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8001b0e:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b10:	6883      	ldr	r3, [r0, #8]
 8001b12:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8001b14:	bf0e      	itee	eq
 8001b16:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8001b18:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b1a:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b1c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8001b1e:	bf08      	it	eq
 8001b20:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b22:	233f      	movs	r3, #63	; 0x3f
 8001b24:	4093      	lsls	r3, r2
 8001b26:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b28:	6823      	ldr	r3, [r4, #0]
 8001b2a:	f043 0316 	orr.w	r3, r3, #22
 8001b2e:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001b30:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b32:	b11b      	cbz	r3, 8001b3c <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b34:	6823      	ldr	r3, [r4, #0]
 8001b36:	f043 0308 	orr.w	r3, r3, #8
 8001b3a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001b3c:	6823      	ldr	r3, [r4, #0]
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b44:	2000      	movs	r0, #0
}
 8001b46:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8001b48:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8001b4c:	2002      	movs	r0, #2
 8001b4e:	e7fa      	b.n	8001b46 <HAL_DMA_Start_IT+0x6a>

08001b50 <HAL_DMA_Abort>:
{
 8001b50:	b570      	push	{r4, r5, r6, lr}
 8001b52:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b54:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8001b56:	f7ff fe7b 	bl	8001850 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b5a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001b5e:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 8001b60:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b62:	d006      	beq.n	8001b72 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8001b6e:	2001      	movs	r0, #1
}
 8001b70:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b72:	6823      	ldr	r3, [r4, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	f022 0216 	bic.w	r2, r2, #22
 8001b7a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b7c:	695a      	ldr	r2, [r3, #20]
 8001b7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b82:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b84:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001b86:	b90a      	cbnz	r2, 8001b8c <HAL_DMA_Abort+0x3c>
 8001b88:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001b8a:	b11a      	cbz	r2, 8001b94 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	f022 0208 	bic.w	r2, r2, #8
 8001b92:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	f022 0201 	bic.w	r2, r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b9c:	6823      	ldr	r3, [r4, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f013 0301 	ands.w	r3, r3, #1
 8001ba4:	d10a      	bne.n	8001bbc <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ba6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001ba8:	223f      	movs	r2, #63	; 0x3f
 8001baa:	408a      	lsls	r2, r1
 8001bac:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8001bb4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8001bb8:	4618      	mov	r0, r3
 8001bba:	e7d9      	b.n	8001b70 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bbc:	f7ff fe48 	bl	8001850 <HAL_GetTick>
 8001bc0:	1b40      	subs	r0, r0, r5
 8001bc2:	2805      	cmp	r0, #5
 8001bc4:	d9ea      	bls.n	8001b9c <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bc6:	2320      	movs	r3, #32
 8001bc8:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bca:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 8001bcc:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bce:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8001bd2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8001bd6:	e7cb      	b.n	8001b70 <HAL_DMA_Abort+0x20>

08001bd8 <HAL_DMA_IRQHandler>:
{
 8001bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bde:	4b5c      	ldr	r3, [pc, #368]	; (8001d50 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001be0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8001be2:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001be4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001be6:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001be8:	2208      	movs	r2, #8
 8001bea:	409a      	lsls	r2, r3
 8001bec:	4232      	tst	r2, r6
{
 8001bee:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bf0:	d00c      	beq.n	8001c0c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bf2:	6801      	ldr	r1, [r0, #0]
 8001bf4:	6808      	ldr	r0, [r1, #0]
 8001bf6:	0740      	lsls	r0, r0, #29
 8001bf8:	d508      	bpl.n	8001c0c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001bfa:	6808      	ldr	r0, [r1, #0]
 8001bfc:	f020 0004 	bic.w	r0, r0, #4
 8001c00:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c02:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c04:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001c06:	f042 0201 	orr.w	r2, r2, #1
 8001c0a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	409a      	lsls	r2, r3
 8001c10:	4232      	tst	r2, r6
 8001c12:	d008      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c14:	6821      	ldr	r1, [r4, #0]
 8001c16:	6949      	ldr	r1, [r1, #20]
 8001c18:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c1a:	bf41      	itttt	mi
 8001c1c:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c1e:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8001c20:	f042 0202 	orrmi.w	r2, r2, #2
 8001c24:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c26:	2204      	movs	r2, #4
 8001c28:	409a      	lsls	r2, r3
 8001c2a:	4232      	tst	r2, r6
 8001c2c:	d008      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c2e:	6821      	ldr	r1, [r4, #0]
 8001c30:	6809      	ldr	r1, [r1, #0]
 8001c32:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c34:	bf41      	itttt	mi
 8001c36:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c38:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8001c3a:	f042 0204 	orrmi.w	r2, r2, #4
 8001c3e:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c40:	2210      	movs	r2, #16
 8001c42:	409a      	lsls	r2, r3
 8001c44:	4232      	tst	r2, r6
 8001c46:	d010      	beq.n	8001c6a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c48:	6823      	ldr	r3, [r4, #0]
 8001c4a:	6819      	ldr	r1, [r3, #0]
 8001c4c:	0709      	lsls	r1, r1, #28
 8001c4e:	d50c      	bpl.n	8001c6a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c50:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	0350      	lsls	r0, r2, #13
 8001c56:	d537      	bpl.n	8001cc8 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	0319      	lsls	r1, r3, #12
 8001c5c:	d401      	bmi.n	8001c62 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8001c5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c60:	e000      	b.n	8001c64 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c62:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001c64:	b10b      	cbz	r3, 8001c6a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8001c66:	4620      	mov	r0, r4
 8001c68:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c6a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	408a      	lsls	r2, r1
 8001c70:	4232      	tst	r2, r6
 8001c72:	d03a      	beq.n	8001cea <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c74:	6823      	ldr	r3, [r4, #0]
 8001c76:	6818      	ldr	r0, [r3, #0]
 8001c78:	06c6      	lsls	r6, r0, #27
 8001c7a:	d536      	bpl.n	8001cea <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c7c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c7e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001c82:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c84:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c86:	d127      	bne.n	8001cd8 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c88:	f022 0216 	bic.w	r2, r2, #22
 8001c8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c8e:	695a      	ldr	r2, [r3, #20]
 8001c90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c94:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c96:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001c98:	b90a      	cbnz	r2, 8001c9e <HAL_DMA_IRQHandler+0xc6>
 8001c9a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001c9c:	b11a      	cbz	r2, 8001ca6 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	f022 0208 	bic.w	r2, r2, #8
 8001ca4:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ca6:	233f      	movs	r3, #63	; 0x3f
 8001ca8:	408b      	lsls	r3, r1
 8001caa:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001cac:	2301      	movs	r3, #1
 8001cae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8001cb8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d045      	beq.n	8001d4a <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8001cbe:	4620      	mov	r0, r4
}
 8001cc0:	b003      	add	sp, #12
 8001cc2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8001cc6:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ccc:	bf5e      	ittt	pl
 8001cce:	681a      	ldrpl	r2, [r3, #0]
 8001cd0:	f022 0208 	bicpl.w	r2, r2, #8
 8001cd4:	601a      	strpl	r2, [r3, #0]
 8001cd6:	e7c2      	b.n	8001c5e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cd8:	0350      	lsls	r0, r2, #13
 8001cda:	d527      	bpl.n	8001d2c <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	0319      	lsls	r1, r3, #12
 8001ce0:	d431      	bmi.n	8001d46 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8001ce2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001ce4:	b10b      	cbz	r3, 8001cea <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001cea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001cec:	b36b      	cbz	r3, 8001d4a <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001cee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001cf0:	07da      	lsls	r2, r3, #31
 8001cf2:	d519      	bpl.n	8001d28 <HAL_DMA_IRQHandler+0x150>
      __HAL_DMA_DISABLE(hdma);
 8001cf4:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cf6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001cfa:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cfe:	2305      	movs	r3, #5
 8001d00:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001d04:	6813      	ldr	r3, [r2, #0]
 8001d06:	f023 0301 	bic.w	r3, r3, #1
 8001d0a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001d0c:	9b01      	ldr	r3, [sp, #4]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	42bb      	cmp	r3, r7
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	d802      	bhi.n	8001d1c <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d16:	6813      	ldr	r3, [r2, #0]
 8001d18:	07db      	lsls	r3, r3, #31
 8001d1a:	d4f7      	bmi.n	8001d0c <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8001d22:	2300      	movs	r3, #0
 8001d24:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8001d28:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001d2a:	e7c6      	b.n	8001cba <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001d32:	d108      	bne.n	8001d46 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d34:	6819      	ldr	r1, [r3, #0]
 8001d36:	f021 0110 	bic.w	r1, r1, #16
 8001d3a:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8001d42:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8001d46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d48:	e7cc      	b.n	8001ce4 <HAL_DMA_IRQHandler+0x10c>
}
 8001d4a:	b003      	add	sp, #12
 8001d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200000b8 	.word	0x200000b8

08001d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d58:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8001f04 <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d5c:	4a67      	ldr	r2, [pc, #412]	; (8001efc <HAL_GPIO_Init+0x1a8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5e:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d60:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8001d62:	2401      	movs	r4, #1
 8001d64:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d66:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8001d6a:	43ac      	bics	r4, r5
 8001d6c:	f040 80b1 	bne.w	8001ed2 <HAL_GPIO_Init+0x17e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d70:	684d      	ldr	r5, [r1, #4]
 8001d72:	f005 0403 	and.w	r4, r5, #3
 8001d76:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d7a:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d7c:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d7e:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d82:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d84:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d88:	d834      	bhi.n	8001df4 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8001d8a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d8c:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d90:	68cf      	ldr	r7, [r1, #12]
 8001d92:	fa07 f708 	lsl.w	r7, r7, r8
 8001d96:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001d9a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001d9c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d9e:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da2:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001da6:	409f      	lsls	r7, r3
 8001da8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001dac:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001dae:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001db0:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db4:	688f      	ldr	r7, [r1, #8]
 8001db6:	fa07 f708 	lsl.w	r7, r7, r8
 8001dba:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dbe:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8001dc0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc2:	d119      	bne.n	8001df8 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8001dc4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001dc8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dcc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001dd0:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dd4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001dd8:	f04f 0e0f 	mov.w	lr, #15
 8001ddc:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001de0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001de4:	690f      	ldr	r7, [r1, #16]
 8001de6:	fa07 f70b 	lsl.w	r7, r7, fp
 8001dea:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001dee:	f8ca 7020 	str.w	r7, [sl, #32]
 8001df2:	e001      	b.n	8001df8 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df4:	2c03      	cmp	r4, #3
 8001df6:	d1da      	bne.n	8001dae <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8001df8:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dfa:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dfe:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e00:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e02:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001e06:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e08:	d063      	beq.n	8001ed2 <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0a:	f04f 0a00 	mov.w	sl, #0
 8001e0e:	f8cd a004 	str.w	sl, [sp, #4]
 8001e12:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e16:	4c3a      	ldr	r4, [pc, #232]	; (8001f00 <HAL_GPIO_Init+0x1ac>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e18:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001e1c:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8001e20:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8001e24:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8001e28:	9601      	str	r6, [sp, #4]
 8001e2a:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001e2c:	f023 0603 	bic.w	r6, r3, #3
 8001e30:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001e34:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e38:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001e3c:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e40:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001e44:	270f      	movs	r7, #15
 8001e46:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e4a:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e4c:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e50:	d046      	beq.n	8001ee0 <HAL_GPIO_Init+0x18c>
 8001e52:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e56:	42a0      	cmp	r0, r4
 8001e58:	d044      	beq.n	8001ee4 <HAL_GPIO_Init+0x190>
 8001e5a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e5e:	42a0      	cmp	r0, r4
 8001e60:	d042      	beq.n	8001ee8 <HAL_GPIO_Init+0x194>
 8001e62:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e66:	42a0      	cmp	r0, r4
 8001e68:	d040      	beq.n	8001eec <HAL_GPIO_Init+0x198>
 8001e6a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e6e:	42a0      	cmp	r0, r4
 8001e70:	d03e      	beq.n	8001ef0 <HAL_GPIO_Init+0x19c>
 8001e72:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e76:	42a0      	cmp	r0, r4
 8001e78:	d03c      	beq.n	8001ef4 <HAL_GPIO_Init+0x1a0>
 8001e7a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e7e:	42a0      	cmp	r0, r4
 8001e80:	d03a      	beq.n	8001ef8 <HAL_GPIO_Init+0x1a4>
 8001e82:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e86:	42a0      	cmp	r0, r4
 8001e88:	bf0c      	ite	eq
 8001e8a:	2407      	moveq	r4, #7
 8001e8c:	2408      	movne	r4, #8
 8001e8e:	fa04 f40e 	lsl.w	r4, r4, lr
 8001e92:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e94:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 8001e96:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001e98:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e9c:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8001e9e:	bf54      	ite	pl
 8001ea0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001ea2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8001ea6:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8001ea8:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eaa:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8001eac:	bf54      	ite	pl
 8001eae:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001eb0:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8001eb4:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8001eb6:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eb8:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8001eba:	bf54      	ite	pl
 8001ebc:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001ebe:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8001ec2:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ec4:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ec6:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8001ec8:	bf54      	ite	pl
 8001eca:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001ecc:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8001ed0:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	2b10      	cmp	r3, #16
 8001ed6:	f47f af43 	bne.w	8001d60 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8001eda:	b003      	add	sp, #12
 8001edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ee0:	4654      	mov	r4, sl
 8001ee2:	e7d4      	b.n	8001e8e <HAL_GPIO_Init+0x13a>
 8001ee4:	2401      	movs	r4, #1
 8001ee6:	e7d2      	b.n	8001e8e <HAL_GPIO_Init+0x13a>
 8001ee8:	2402      	movs	r4, #2
 8001eea:	e7d0      	b.n	8001e8e <HAL_GPIO_Init+0x13a>
 8001eec:	2403      	movs	r4, #3
 8001eee:	e7ce      	b.n	8001e8e <HAL_GPIO_Init+0x13a>
 8001ef0:	2404      	movs	r4, #4
 8001ef2:	e7cc      	b.n	8001e8e <HAL_GPIO_Init+0x13a>
 8001ef4:	2405      	movs	r4, #5
 8001ef6:	e7ca      	b.n	8001e8e <HAL_GPIO_Init+0x13a>
 8001ef8:	2406      	movs	r4, #6
 8001efa:	e7c8      	b.n	8001e8e <HAL_GPIO_Init+0x13a>
 8001efc:	40013c00 	.word	0x40013c00
 8001f00:	40020000 	.word	0x40020000
 8001f04:	40023800 	.word	0x40023800

08001f08 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f08:	6903      	ldr	r3, [r0, #16]
 8001f0a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001f0c:	bf14      	ite	ne
 8001f0e:	2001      	movne	r0, #1
 8001f10:	2000      	moveq	r0, #0
 8001f12:	4770      	bx	lr

08001f14 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f14:	b10a      	cbz	r2, 8001f1a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f16:	6181      	str	r1, [r0, #24]
  }
}
 8001f18:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f1a:	0409      	lsls	r1, r1, #16
 8001f1c:	e7fb      	b.n	8001f16 <HAL_GPIO_WritePin+0x2>
	...

08001f20 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f20:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001f22:	6951      	ldr	r1, [r2, #20]
 8001f24:	4201      	tst	r1, r0
{
 8001f26:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f28:	d002      	beq.n	8001f30 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f2a:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f2c:	f002 f90c 	bl	8004148 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f30:	bd08      	pop	{r3, pc}
 8001f32:	bf00      	nop
 8001f34:	40013c00 	.word	0x40013c00

08001f38 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f38:	6801      	ldr	r1, [r0, #0]
 8001f3a:	694b      	ldr	r3, [r1, #20]
 8001f3c:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	d010      	beq.n	8001f68 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f46:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001f4a:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f4c:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f4e:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f50:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f54:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f58:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f5a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f5e:	f043 0304 	orr.w	r3, r3, #4
 8001f62:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8001f64:	2001      	movs	r0, #1
 8001f66:	4770      	bx	lr
  }
  return HAL_OK;
 8001f68:	4618      	mov	r0, r3
}
 8001f6a:	4770      	bx	lr

08001f6c <I2C_WaitOnFlagUntilTimeout>:
{
 8001f6c:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8001f70:	4606      	mov	r6, r0
 8001f72:	460f      	mov	r7, r1
 8001f74:	4691      	mov	r9, r2
 8001f76:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f78:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8001f7c:	6833      	ldr	r3, [r6, #0]
 8001f7e:	f1ba 0f01 	cmp.w	sl, #1
 8001f82:	bf0c      	ite	eq
 8001f84:	695c      	ldreq	r4, [r3, #20]
 8001f86:	699c      	ldrne	r4, [r3, #24]
 8001f88:	ea27 0404 	bic.w	r4, r7, r4
 8001f8c:	b2a4      	uxth	r4, r4
 8001f8e:	fab4 f484 	clz	r4, r4
 8001f92:	0964      	lsrs	r4, r4, #5
 8001f94:	45a1      	cmp	r9, r4
 8001f96:	d001      	beq.n	8001f9c <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8001f98:	2000      	movs	r0, #0
 8001f9a:	e017      	b.n	8001fcc <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8001f9c:	1c6a      	adds	r2, r5, #1
 8001f9e:	d0ee      	beq.n	8001f7e <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa0:	f7ff fc56 	bl	8001850 <HAL_GetTick>
 8001fa4:	9b08      	ldr	r3, [sp, #32]
 8001fa6:	1ac0      	subs	r0, r0, r3
 8001fa8:	42a8      	cmp	r0, r5
 8001faa:	d801      	bhi.n	8001fb0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001fac:	2d00      	cmp	r5, #0
 8001fae:	d1e5      	bne.n	8001f7c <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001fb0:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001fb2:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001fb4:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001fb6:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001fba:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fbe:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001fc0:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fc4:	f042 0220 	orr.w	r2, r2, #32
 8001fc8:	6432      	str	r2, [r6, #64]	; 0x40
        return HAL_ERROR;
 8001fca:	2001      	movs	r0, #1
}
 8001fcc:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08001fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fd4:	4604      	mov	r4, r0
 8001fd6:	460f      	mov	r7, r1
 8001fd8:	4616      	mov	r6, r2
 8001fda:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fdc:	6825      	ldr	r5, [r4, #0]
 8001fde:	6968      	ldr	r0, [r5, #20]
 8001fe0:	ea27 0000 	bic.w	r0, r7, r0
 8001fe4:	b280      	uxth	r0, r0
 8001fe6:	b1b8      	cbz	r0, 8002018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fe8:	696b      	ldr	r3, [r5, #20]
 8001fea:	055a      	lsls	r2, r3, #21
 8001fec:	d516      	bpl.n	800201c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fee:	682b      	ldr	r3, [r5, #0]
 8001ff0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ff4:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ff6:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001ffa:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ffc:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002002:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002006:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800200a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800200c:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002010:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002012:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002016:	2001      	movs	r0, #1
}
 8002018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800201c:	1c73      	adds	r3, r6, #1
 800201e:	d0de      	beq.n	8001fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002020:	f7ff fc16 	bl	8001850 <HAL_GetTick>
 8002024:	eba0 0008 	sub.w	r0, r0, r8
 8002028:	42b0      	cmp	r0, r6
 800202a:	d801      	bhi.n	8002030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 800202c:	2e00      	cmp	r6, #0
 800202e:	d1d5      	bne.n	8001fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002030:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002032:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002034:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002036:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800203a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800203e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002040:	f042 0220 	orr.w	r2, r2, #32
 8002044:	e7e4      	b.n	8002010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08002046 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8002046:	b570      	push	{r4, r5, r6, lr}
 8002048:	4604      	mov	r4, r0
 800204a:	460d      	mov	r5, r1
 800204c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800204e:	6821      	ldr	r1, [r4, #0]
 8002050:	694b      	ldr	r3, [r1, #20]
 8002052:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8002056:	d001      	beq.n	800205c <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8002058:	2000      	movs	r0, #0
 800205a:	e010      	b.n	800207e <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800205c:	694a      	ldr	r2, [r1, #20]
 800205e:	06d2      	lsls	r2, r2, #27
 8002060:	d50e      	bpl.n	8002080 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002062:	f06f 0210 	mvn.w	r2, #16
 8002066:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8002068:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800206a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800206c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002070:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002074:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002076:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002078:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 800207c:	2001      	movs	r0, #1
}
 800207e:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002080:	f7ff fbe6 	bl	8001850 <HAL_GetTick>
 8002084:	1b80      	subs	r0, r0, r6
 8002086:	42a8      	cmp	r0, r5
 8002088:	d801      	bhi.n	800208e <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 800208a:	2d00      	cmp	r5, #0
 800208c:	d1df      	bne.n	800204e <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800208e:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8002090:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002092:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002094:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002098:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800209c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800209e:	f042 0220 	orr.w	r2, r2, #32
 80020a2:	e7e8      	b.n	8002076 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

080020a4 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80020a4:	b570      	push	{r4, r5, r6, lr}
 80020a6:	4604      	mov	r4, r0
 80020a8:	460d      	mov	r5, r1
 80020aa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020ac:	6823      	ldr	r3, [r4, #0]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	075b      	lsls	r3, r3, #29
 80020b2:	d501      	bpl.n	80020b8 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80020b4:	2000      	movs	r0, #0
}
 80020b6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020b8:	4620      	mov	r0, r4
 80020ba:	f7ff ff3d 	bl	8001f38 <I2C_IsAcknowledgeFailed>
 80020be:	b9a8      	cbnz	r0, 80020ec <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80020c0:	1c6a      	adds	r2, r5, #1
 80020c2:	d0f3      	beq.n	80020ac <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c4:	f7ff fbc4 	bl	8001850 <HAL_GetTick>
 80020c8:	1b80      	subs	r0, r0, r6
 80020ca:	42a8      	cmp	r0, r5
 80020cc:	d801      	bhi.n	80020d2 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80020ce:	2d00      	cmp	r5, #0
 80020d0:	d1ec      	bne.n	80020ac <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020d2:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80020d4:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020d6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020d8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020dc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80020e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020e6:	f042 0220 	orr.w	r2, r2, #32
 80020ea:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80020ec:	2001      	movs	r0, #1
 80020ee:	e7e2      	b.n	80020b6 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

080020f0 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80020f0:	b570      	push	{r4, r5, r6, lr}
 80020f2:	4604      	mov	r4, r0
 80020f4:	460d      	mov	r5, r1
 80020f6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020f8:	6823      	ldr	r3, [r4, #0]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	061b      	lsls	r3, r3, #24
 80020fe:	d501      	bpl.n	8002104 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8002100:	2000      	movs	r0, #0
}
 8002102:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002104:	4620      	mov	r0, r4
 8002106:	f7ff ff17 	bl	8001f38 <I2C_IsAcknowledgeFailed>
 800210a:	b9a8      	cbnz	r0, 8002138 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800210c:	1c6a      	adds	r2, r5, #1
 800210e:	d0f3      	beq.n	80020f8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002110:	f7ff fb9e 	bl	8001850 <HAL_GetTick>
 8002114:	1b80      	subs	r0, r0, r6
 8002116:	42a8      	cmp	r0, r5
 8002118:	d801      	bhi.n	800211e <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800211a:	2d00      	cmp	r5, #0
 800211c:	d1ec      	bne.n	80020f8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800211e:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002120:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002122:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002124:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002128:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800212c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800212e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002132:	f042 0220 	orr.w	r2, r2, #32
 8002136:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002138:	2001      	movs	r0, #1
 800213a:	e7e2      	b.n	8002102 <I2C_WaitOnTXEFlagUntilTimeout+0x12>

0800213c <I2C_RequestMemoryWrite>:
{
 800213c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002140:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002142:	6802      	ldr	r2, [r0, #0]
{
 8002144:	b085      	sub	sp, #20
 8002146:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800214a:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800214c:	6813      	ldr	r3, [r2, #0]
 800214e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002152:	6013      	str	r3, [r2, #0]
{
 8002154:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002156:	463b      	mov	r3, r7
 8002158:	f8cd 8000 	str.w	r8, [sp]
 800215c:	2200      	movs	r2, #0
 800215e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8002162:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002164:	f7ff ff02 	bl	8001f6c <I2C_WaitOnFlagUntilTimeout>
 8002168:	6823      	ldr	r3, [r4, #0]
 800216a:	b138      	cbz	r0, 800217c <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	05db      	lsls	r3, r3, #23
 8002170:	d502      	bpl.n	8002178 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002172:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002176:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8002178:	2003      	movs	r0, #3
 800217a:	e00a      	b.n	8002192 <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800217c:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8002180:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002182:	4919      	ldr	r1, [pc, #100]	; (80021e8 <I2C_RequestMemoryWrite+0xac>)
 8002184:	4643      	mov	r3, r8
 8002186:	463a      	mov	r2, r7
 8002188:	4620      	mov	r0, r4
 800218a:	f7ff ff21 	bl	8001fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800218e:	b118      	cbz	r0, 8002198 <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 8002190:	2001      	movs	r0, #1
}
 8002192:	b005      	add	sp, #20
 8002194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002198:	6823      	ldr	r3, [r4, #0]
 800219a:	9003      	str	r0, [sp, #12]
 800219c:	695a      	ldr	r2, [r3, #20]
 800219e:	9203      	str	r2, [sp, #12]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021a4:	4642      	mov	r2, r8
 80021a6:	4639      	mov	r1, r7
 80021a8:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021aa:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ac:	f7ff ffa0 	bl	80020f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80021b0:	b140      	cbz	r0, 80021c4 <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021b4:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b6:	bf01      	itttt	eq
 80021b8:	6822      	ldreq	r2, [r4, #0]
 80021ba:	6813      	ldreq	r3, [r2, #0]
 80021bc:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80021c0:	6013      	streq	r3, [r2, #0]
 80021c2:	e7e5      	b.n	8002190 <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021c4:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c8:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021ca:	d102      	bne.n	80021d2 <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021cc:	b2ed      	uxtb	r5, r5
 80021ce:	611d      	str	r5, [r3, #16]
 80021d0:	e7df      	b.n	8002192 <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80021d2:	0a2a      	lsrs	r2, r5, #8
 80021d4:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021d6:	4639      	mov	r1, r7
 80021d8:	4642      	mov	r2, r8
 80021da:	4620      	mov	r0, r4
 80021dc:	f7ff ff88 	bl	80020f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80021e0:	2800      	cmp	r0, #0
 80021e2:	d1e6      	bne.n	80021b2 <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021e4:	6823      	ldr	r3, [r4, #0]
 80021e6:	e7f1      	b.n	80021cc <I2C_RequestMemoryWrite+0x90>
 80021e8:	00010002 	.word	0x00010002

080021ec <I2C_RequestMemoryRead>:
{
 80021ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80021f0:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021f2:	6803      	ldr	r3, [r0, #0]
{
 80021f4:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021fc:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021fe:	681a      	ldr	r2, [r3, #0]
{
 8002200:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002208:	601a      	str	r2, [r3, #0]
{
 800220a:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800220c:	463b      	mov	r3, r7
 800220e:	f8cd 8000 	str.w	r8, [sp]
 8002212:	2200      	movs	r2, #0
 8002214:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8002218:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800221a:	f7ff fea7 	bl	8001f6c <I2C_WaitOnFlagUntilTimeout>
 800221e:	6823      	ldr	r3, [r4, #0]
 8002220:	b148      	cbz	r0, 8002236 <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002222:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002224:	05db      	lsls	r3, r3, #23
 8002226:	d502      	bpl.n	800222e <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002228:	f44f 7300 	mov.w	r3, #512	; 0x200
 800222c:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800222e:	2003      	movs	r0, #3
}
 8002230:	b004      	add	sp, #16
 8002232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002236:	fa5f f986 	uxtb.w	r9, r6
 800223a:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 800223e:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002240:	492a      	ldr	r1, [pc, #168]	; (80022ec <I2C_RequestMemoryRead+0x100>)
 8002242:	4643      	mov	r3, r8
 8002244:	463a      	mov	r2, r7
 8002246:	4620      	mov	r0, r4
 8002248:	f7ff fec2 	bl	8001fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800224c:	b108      	cbz	r0, 8002252 <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 800224e:	2001      	movs	r0, #1
 8002250:	e7ee      	b.n	8002230 <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002252:	6823      	ldr	r3, [r4, #0]
 8002254:	9003      	str	r0, [sp, #12]
 8002256:	695a      	ldr	r2, [r3, #20]
 8002258:	9203      	str	r2, [sp, #12]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800225e:	4642      	mov	r2, r8
 8002260:	4639      	mov	r1, r7
 8002262:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002264:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002266:	f7ff ff43 	bl	80020f0 <I2C_WaitOnTXEFlagUntilTimeout>
 800226a:	b140      	cbz	r0, 800227e <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800226c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800226e:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002270:	bf01      	itttt	eq
 8002272:	6822      	ldreq	r2, [r4, #0]
 8002274:	6813      	ldreq	r3, [r2, #0]
 8002276:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800227a:	6013      	streq	r3, [r2, #0]
 800227c:	e7e7      	b.n	800224e <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800227e:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002282:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002284:	d11a      	bne.n	80022bc <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002286:	b2ed      	uxtb	r5, r5
 8002288:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800228a:	4642      	mov	r2, r8
 800228c:	4639      	mov	r1, r7
 800228e:	4620      	mov	r0, r4
 8002290:	f7ff ff2e 	bl	80020f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002294:	2800      	cmp	r0, #0
 8002296:	d1e9      	bne.n	800226c <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002298:	6822      	ldr	r2, [r4, #0]
 800229a:	6813      	ldr	r3, [r2, #0]
 800229c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a0:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022a6:	4602      	mov	r2, r0
 80022a8:	f8cd 8000 	str.w	r8, [sp]
 80022ac:	463b      	mov	r3, r7
 80022ae:	4620      	mov	r0, r4
 80022b0:	f7ff fe5c 	bl	8001f6c <I2C_WaitOnFlagUntilTimeout>
 80022b4:	6822      	ldr	r2, [r4, #0]
 80022b6:	b160      	cbz	r0, 80022d2 <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022b8:	6813      	ldr	r3, [r2, #0]
 80022ba:	e7b3      	b.n	8002224 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80022bc:	0a2a      	lsrs	r2, r5, #8
 80022be:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022c0:	4639      	mov	r1, r7
 80022c2:	4642      	mov	r2, r8
 80022c4:	4620      	mov	r0, r4
 80022c6:	f7ff ff13 	bl	80020f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80022ca:	2800      	cmp	r0, #0
 80022cc:	d1ce      	bne.n	800226c <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022ce:	6823      	ldr	r3, [r4, #0]
 80022d0:	e7d9      	b.n	8002286 <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80022d2:	f049 0301 	orr.w	r3, r9, #1
 80022d6:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022d8:	4904      	ldr	r1, [pc, #16]	; (80022ec <I2C_RequestMemoryRead+0x100>)
 80022da:	4643      	mov	r3, r8
 80022dc:	463a      	mov	r2, r7
 80022de:	4620      	mov	r0, r4
 80022e0:	f7ff fe76 	bl	8001fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 80022e4:	3800      	subs	r0, #0
 80022e6:	bf18      	it	ne
 80022e8:	2001      	movne	r0, #1
 80022ea:	e7a1      	b.n	8002230 <I2C_RequestMemoryRead+0x44>
 80022ec:	00010002 	.word	0x00010002

080022f0 <HAL_I2C_MspInit>:
}
 80022f0:	4770      	bx	lr
	...

080022f4 <HAL_I2C_Init>:
{
 80022f4:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 80022f6:	4604      	mov	r4, r0
 80022f8:	b908      	cbnz	r0, 80022fe <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80022fa:	2001      	movs	r0, #1
}
 80022fc:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002302:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002306:	b91b      	cbnz	r3, 8002310 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8002308:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800230c:	f7ff fff0 	bl	80022f0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002310:	2324      	movs	r3, #36	; 0x24
 8002312:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002316:	6823      	ldr	r3, [r4, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	f022 0201 	bic.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002326:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800232e:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002330:	f001 f9a4 	bl	800367c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002334:	4b3f      	ldr	r3, [pc, #252]	; (8002434 <HAL_I2C_Init+0x140>)
 8002336:	6865      	ldr	r5, [r4, #4]
 8002338:	429d      	cmp	r5, r3
 800233a:	bf94      	ite	ls
 800233c:	4b3e      	ldrls	r3, [pc, #248]	; (8002438 <HAL_I2C_Init+0x144>)
 800233e:	4b3f      	ldrhi	r3, [pc, #252]	; (800243c <HAL_I2C_Init+0x148>)
 8002340:	4298      	cmp	r0, r3
 8002342:	bf8c      	ite	hi
 8002344:	2300      	movhi	r3, #0
 8002346:	2301      	movls	r3, #1
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1d6      	bne.n	80022fa <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800234c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800234e:	4e39      	ldr	r6, [pc, #228]	; (8002434 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002350:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002352:	493b      	ldr	r1, [pc, #236]	; (8002440 <HAL_I2C_Init+0x14c>)
 8002354:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002358:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800235c:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800235e:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002360:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002362:	bf88      	it	hi
 8002364:	f44f 7696 	movhi.w	r6, #300	; 0x12c
 8002368:	6a13      	ldr	r3, [r2, #32]
 800236a:	bf88      	it	hi
 800236c:	4371      	mulhi	r1, r6
 800236e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002372:	bf84      	itt	hi
 8002374:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8002378:	fbb1 f1f6 	udivhi	r1, r1, r6
 800237c:	3101      	adds	r1, #1
 800237e:	4319      	orrs	r1, r3
 8002380:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002382:	69d1      	ldr	r1, [r2, #28]
 8002384:	1e43      	subs	r3, r0, #1
 8002386:	482b      	ldr	r0, [pc, #172]	; (8002434 <HAL_I2C_Init+0x140>)
 8002388:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800238c:	4285      	cmp	r5, r0
 800238e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002392:	d832      	bhi.n	80023fa <HAL_I2C_Init+0x106>
 8002394:	006d      	lsls	r5, r5, #1
 8002396:	f640 70fc 	movw	r0, #4092	; 0xffc
 800239a:	fbb3 f3f5 	udiv	r3, r3, r5
 800239e:	3301      	adds	r3, #1
 80023a0:	4203      	tst	r3, r0
 80023a2:	d042      	beq.n	800242a <HAL_I2C_Init+0x136>
 80023a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a8:	430b      	orrs	r3, r1
 80023aa:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023ac:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80023b0:	6811      	ldr	r1, [r2, #0]
 80023b2:	4303      	orrs	r3, r0
 80023b4:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80023b8:	430b      	orrs	r3, r1
 80023ba:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023bc:	6891      	ldr	r1, [r2, #8]
 80023be:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80023c2:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80023c6:	4303      	orrs	r3, r0
 80023c8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80023cc:	430b      	orrs	r3, r1
 80023ce:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023d0:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80023d4:	68d1      	ldr	r1, [r2, #12]
 80023d6:	4303      	orrs	r3, r0
 80023d8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80023dc:	430b      	orrs	r3, r1
 80023de:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80023e0:	6813      	ldr	r3, [r2, #0]
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e8:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80023ea:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ec:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023f2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80023f8:	e780      	b.n	80022fc <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023fa:	68a0      	ldr	r0, [r4, #8]
 80023fc:	b950      	cbnz	r0, 8002414 <HAL_I2C_Init+0x120>
 80023fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002402:	fbb3 f3f5 	udiv	r3, r3, r5
 8002406:	3301      	adds	r3, #1
 8002408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800240c:	b17b      	cbz	r3, 800242e <HAL_I2C_Init+0x13a>
 800240e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002412:	e7c9      	b.n	80023a8 <HAL_I2C_Init+0xb4>
 8002414:	2019      	movs	r0, #25
 8002416:	4345      	muls	r5, r0
 8002418:	fbb3 f3f5 	udiv	r3, r3, r5
 800241c:	3301      	adds	r3, #1
 800241e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002422:	b123      	cbz	r3, 800242e <HAL_I2C_Init+0x13a>
 8002424:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002428:	e7be      	b.n	80023a8 <HAL_I2C_Init+0xb4>
 800242a:	2304      	movs	r3, #4
 800242c:	e7bc      	b.n	80023a8 <HAL_I2C_Init+0xb4>
 800242e:	2301      	movs	r3, #1
 8002430:	e7ba      	b.n	80023a8 <HAL_I2C_Init+0xb4>
 8002432:	bf00      	nop
 8002434:	000186a0 	.word	0x000186a0
 8002438:	001e847f 	.word	0x001e847f
 800243c:	003d08ff 	.word	0x003d08ff
 8002440:	000f4240 	.word	0x000f4240

08002444 <HAL_I2C_MspDeInit>:
 8002444:	4770      	bx	lr

08002446 <HAL_I2C_DeInit>:
{
 8002446:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8002448:	4604      	mov	r4, r0
 800244a:	b198      	cbz	r0, 8002474 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800244c:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800244e:	2324      	movs	r3, #36	; 0x24
 8002450:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002454:	6813      	ldr	r3, [r2, #0]
 8002456:	f023 0301 	bic.w	r3, r3, #1
 800245a:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800245c:	f7ff fff2 	bl	8002444 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002460:	2000      	movs	r0, #0
 8002462:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 8002464:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002468:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800246c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800246e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8002472:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002474:	2001      	movs	r0, #1
 8002476:	e7fc      	b.n	8002472 <HAL_I2C_DeInit+0x2c>

08002478 <HAL_I2C_Mem_Write>:
{
 8002478:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800247c:	4604      	mov	r4, r0
 800247e:	4699      	mov	r9, r3
 8002480:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8002482:	460f      	mov	r7, r1
 8002484:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8002486:	f7ff f9e3 	bl	8001850 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800248a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800248e:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8002490:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002492:	d003      	beq.n	800249c <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8002494:	2002      	movs	r0, #2
}
 8002496:	b003      	add	sp, #12
 8002498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800249c:	9000      	str	r0, [sp, #0]
 800249e:	493c      	ldr	r1, [pc, #240]	; (8002590 <HAL_I2C_Mem_Write+0x118>)
 80024a0:	2319      	movs	r3, #25
 80024a2:	2201      	movs	r2, #1
 80024a4:	4620      	mov	r0, r4
 80024a6:	f7ff fd61 	bl	8001f6c <I2C_WaitOnFlagUntilTimeout>
 80024aa:	2800      	cmp	r0, #0
 80024ac:	d1f2      	bne.n	8002494 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80024ae:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d0ee      	beq.n	8002494 <HAL_I2C_Mem_Write+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024b6:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 80024b8:	2301      	movs	r3, #1
 80024ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024be:	6803      	ldr	r3, [r0, #0]
 80024c0:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80024c2:	bf5e      	ittt	pl
 80024c4:	6803      	ldrpl	r3, [r0, #0]
 80024c6:	f043 0301 	orrpl.w	r3, r3, #1
 80024ca:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024cc:	6803      	ldr	r3, [r0, #0]
 80024ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024d2:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024d4:	2321      	movs	r3, #33	; 0x21
 80024d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024da:	2340      	movs	r3, #64	; 0x40
 80024dc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80024e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80024e6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024e8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80024ec:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80024f0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024f2:	4b28      	ldr	r3, [pc, #160]	; (8002594 <HAL_I2C_Mem_Write+0x11c>)
 80024f4:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024f6:	e9cd 6500 	strd	r6, r5, [sp]
 80024fa:	464b      	mov	r3, r9
 80024fc:	4642      	mov	r2, r8
 80024fe:	4639      	mov	r1, r7
 8002500:	4620      	mov	r0, r4
 8002502:	f7ff fe1b 	bl	800213c <I2C_RequestMemoryWrite>
 8002506:	2800      	cmp	r0, #0
 8002508:	d02a      	beq.n	8002560 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 800250a:	2001      	movs	r0, #1
 800250c:	e7c3      	b.n	8002496 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800250e:	f7ff fdef 	bl	80020f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002512:	b140      	cbz	r0, 8002526 <HAL_I2C_Mem_Write+0xae>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002514:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002516:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002518:	bf01      	itttt	eq
 800251a:	6822      	ldreq	r2, [r4, #0]
 800251c:	6813      	ldreq	r3, [r2, #0]
 800251e:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8002522:	6013      	streq	r3, [r2, #0]
 8002524:	e7f1      	b.n	800250a <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002526:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002528:	6827      	ldr	r7, [r4, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002530:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8002532:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002534:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002536:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002538:	3a01      	subs	r2, #1
 800253a:	b292      	uxth	r2, r2
 800253c:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800253e:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8002540:	1e48      	subs	r0, r1, #1
 8002542:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002544:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8002546:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002548:	d50a      	bpl.n	8002560 <HAL_I2C_Mem_Write+0xe8>
 800254a:	b148      	cbz	r0, 8002560 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800254c:	785a      	ldrb	r2, [r3, #1]
 800254e:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8002550:	3302      	adds	r3, #2
 8002552:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002554:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002556:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8002558:	3902      	subs	r1, #2
        hi2c->XferCount--;
 800255a:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 800255c:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800255e:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002560:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002562:	462a      	mov	r2, r5
 8002564:	4631      	mov	r1, r6
 8002566:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1d0      	bne.n	800250e <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800256c:	f7ff fd9a 	bl	80020a4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002570:	2800      	cmp	r0, #0
 8002572:	d1cf      	bne.n	8002514 <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002574:	6822      	ldr	r2, [r4, #0]
 8002576:	6813      	ldr	r3, [r2, #0]
 8002578:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800257c:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800257e:	2320      	movs	r3, #32
 8002580:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002584:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002588:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 800258c:	e783      	b.n	8002496 <HAL_I2C_Mem_Write+0x1e>
 800258e:	bf00      	nop
 8002590:	00100002 	.word	0x00100002
 8002594:	ffff0000 	.word	0xffff0000

08002598 <HAL_I2C_Mem_Read>:
{
 8002598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800259c:	4604      	mov	r4, r0
 800259e:	b087      	sub	sp, #28
 80025a0:	4699      	mov	r9, r3
 80025a2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80025a4:	460d      	mov	r5, r1
 80025a6:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80025a8:	f7ff f952 	bl	8001850 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ac:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80025b0:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80025b2:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80025b4:	d004      	beq.n	80025c0 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 80025b6:	2502      	movs	r5, #2
}
 80025b8:	4628      	mov	r0, r5
 80025ba:	b007      	add	sp, #28
 80025bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025c0:	9000      	str	r0, [sp, #0]
 80025c2:	4976      	ldr	r1, [pc, #472]	; (800279c <HAL_I2C_Mem_Read+0x204>)
 80025c4:	2319      	movs	r3, #25
 80025c6:	2201      	movs	r2, #1
 80025c8:	4620      	mov	r0, r4
 80025ca:	f7ff fccf 	bl	8001f6c <I2C_WaitOnFlagUntilTimeout>
 80025ce:	2800      	cmp	r0, #0
 80025d0:	d1f1      	bne.n	80025b6 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 80025d2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d0ed      	beq.n	80025b6 <HAL_I2C_Mem_Read+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025da:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 80025dc:	2301      	movs	r3, #1
 80025de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025e2:	6803      	ldr	r3, [r0, #0]
 80025e4:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80025e6:	bf5e      	ittt	pl
 80025e8:	6803      	ldrpl	r3, [r0, #0]
 80025ea:	f043 0301 	orrpl.w	r3, r3, #1
 80025ee:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025f0:	6803      	ldr	r3, [r0, #0]
 80025f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025f6:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025f8:	2322      	movs	r3, #34	; 0x22
 80025fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025fe:	2340      	movs	r3, #64	; 0x40
 8002600:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002604:	2300      	movs	r3, #0
 8002606:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8002608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800260a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800260c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8002610:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002612:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002614:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002616:	4b62      	ldr	r3, [pc, #392]	; (80027a0 <HAL_I2C_Mem_Read+0x208>)
 8002618:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800261a:	4629      	mov	r1, r5
 800261c:	e9cd 7600 	strd	r7, r6, [sp]
 8002620:	464b      	mov	r3, r9
 8002622:	4642      	mov	r2, r8
 8002624:	4620      	mov	r0, r4
 8002626:	f7ff fde1 	bl	80021ec <I2C_RequestMemoryRead>
 800262a:	4605      	mov	r5, r0
 800262c:	b108      	cbz	r0, 8002632 <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 800262e:	2501      	movs	r5, #1
 8002630:	e7c2      	b.n	80025b8 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 8002632:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002634:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 8002636:	b9b2      	cbnz	r2, 8002666 <HAL_I2C_Mem_Read+0xce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002638:	9002      	str	r0, [sp, #8]
 800263a:	695a      	ldr	r2, [r3, #20]
 800263c:	9202      	str	r2, [sp, #8]
 800263e:	699a      	ldr	r2, [r3, #24]
 8002640:	9202      	str	r2, [sp, #8]
 8002642:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800264a:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800264c:	f8df 8154 	ldr.w	r8, [pc, #340]	; 80027a4 <HAL_I2C_Mem_Read+0x20c>
    while (hi2c->XferSize > 0U)
 8002650:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002652:	2b00      	cmp	r3, #0
 8002654:	d12c      	bne.n	80026b0 <HAL_I2C_Mem_Read+0x118>
    hi2c->State = HAL_I2C_STATE_READY;
 8002656:	2220      	movs	r2, #32
 8002658:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800265c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002660:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8002664:	e7a8      	b.n	80025b8 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8002666:	2a01      	cmp	r2, #1
 8002668:	d10a      	bne.n	8002680 <HAL_I2C_Mem_Read+0xe8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002670:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002672:	9003      	str	r0, [sp, #12]
 8002674:	695a      	ldr	r2, [r3, #20]
 8002676:	9203      	str	r2, [sp, #12]
 8002678:	699a      	ldr	r2, [r3, #24]
 800267a:	9203      	str	r2, [sp, #12]
 800267c:	9a03      	ldr	r2, [sp, #12]
 800267e:	e7e1      	b.n	8002644 <HAL_I2C_Mem_Read+0xac>
    else if (hi2c->XferSize == 2U)
 8002680:	2a02      	cmp	r2, #2
 8002682:	d10e      	bne.n	80026a2 <HAL_I2C_Mem_Read+0x10a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800268a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002692:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002694:	9004      	str	r0, [sp, #16]
 8002696:	695a      	ldr	r2, [r3, #20]
 8002698:	9204      	str	r2, [sp, #16]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	9304      	str	r3, [sp, #16]
 800269e:	9b04      	ldr	r3, [sp, #16]
 80026a0:	e7d4      	b.n	800264c <HAL_I2C_Mem_Read+0xb4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026a2:	9005      	str	r0, [sp, #20]
 80026a4:	695a      	ldr	r2, [r3, #20]
 80026a6:	9205      	str	r2, [sp, #20]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	9305      	str	r3, [sp, #20]
 80026ac:	9b05      	ldr	r3, [sp, #20]
 80026ae:	e7cd      	b.n	800264c <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	d856      	bhi.n	8002762 <HAL_I2C_Mem_Read+0x1ca>
        if (hi2c->XferSize == 1U)
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d115      	bne.n	80026e4 <HAL_I2C_Mem_Read+0x14c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b8:	4632      	mov	r2, r6
 80026ba:	4639      	mov	r1, r7
 80026bc:	4620      	mov	r0, r4
 80026be:	f7ff fcc2 	bl	8002046 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026c2:	2800      	cmp	r0, #0
 80026c4:	d1b3      	bne.n	800262e <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c6:	6823      	ldr	r3, [r4, #0]
 80026c8:	691a      	ldr	r2, [r3, #16]
 80026ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026cc:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80026ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026d0:	3301      	adds	r3, #1
 80026d2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80026d4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80026d6:	3b01      	subs	r3, #1
 80026d8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80026da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29b      	uxth	r3, r3
 80026e0:	8563      	strh	r3, [r4, #42]	; 0x2a
 80026e2:	e7b5      	b.n	8002650 <HAL_I2C_Mem_Read+0xb8>
        else if (hi2c->XferSize == 2U)
 80026e4:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026e6:	9600      	str	r6, [sp, #0]
 80026e8:	463b      	mov	r3, r7
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	4641      	mov	r1, r8
 80026f0:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 80026f2:	d119      	bne.n	8002728 <HAL_I2C_Mem_Read+0x190>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026f4:	f7ff fc3a 	bl	8001f6c <I2C_WaitOnFlagUntilTimeout>
 80026f8:	2800      	cmp	r0, #0
 80026fa:	d198      	bne.n	800262e <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026fc:	6823      	ldr	r3, [r4, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002704:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800270a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800270c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800270e:	1c53      	adds	r3, r2, #1
 8002710:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002712:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002714:	3b01      	subs	r3, #1
 8002716:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002718:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800271a:	3b01      	subs	r3, #1
 800271c:	b29b      	uxth	r3, r3
 800271e:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002720:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	7053      	strb	r3, [r2, #1]
 8002726:	e7d2      	b.n	80026ce <HAL_I2C_Mem_Read+0x136>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002728:	f7ff fc20 	bl	8001f6c <I2C_WaitOnFlagUntilTimeout>
 800272c:	2800      	cmp	r0, #0
 800272e:	f47f af7e 	bne.w	800262e <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002732:	6823      	ldr	r3, [r4, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800273a:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800273c:	691a      	ldr	r2, [r3, #16]
 800273e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002740:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002742:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002744:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 8002746:	3301      	adds	r3, #1
 8002748:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800274a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800274c:	3b01      	subs	r3, #1
 800274e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002750:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002752:	3b01      	subs	r3, #1
 8002754:	b29b      	uxth	r3, r3
 8002756:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002758:	4602      	mov	r2, r0
 800275a:	463b      	mov	r3, r7
 800275c:	4641      	mov	r1, r8
 800275e:	4620      	mov	r0, r4
 8002760:	e7c8      	b.n	80026f4 <HAL_I2C_Mem_Read+0x15c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002762:	4632      	mov	r2, r6
 8002764:	4639      	mov	r1, r7
 8002766:	4620      	mov	r0, r4
 8002768:	f7ff fc6d 	bl	8002046 <I2C_WaitOnRXNEFlagUntilTimeout>
 800276c:	2800      	cmp	r0, #0
 800276e:	f47f af5e 	bne.w	800262e <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002772:	6823      	ldr	r3, [r4, #0]
 8002774:	691a      	ldr	r2, [r3, #16]
 8002776:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002778:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800277a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800277c:	1c53      	adds	r3, r2, #1
 800277e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8002780:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002782:	3b01      	subs	r3, #1
 8002784:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002786:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002788:	3b01      	subs	r3, #1
 800278a:	b29b      	uxth	r3, r3
 800278c:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800278e:	6823      	ldr	r3, [r4, #0]
 8002790:	6959      	ldr	r1, [r3, #20]
 8002792:	0749      	lsls	r1, r1, #29
 8002794:	f57f af5c 	bpl.w	8002650 <HAL_I2C_Mem_Read+0xb8>
 8002798:	e7c3      	b.n	8002722 <HAL_I2C_Mem_Read+0x18a>
 800279a:	bf00      	nop
 800279c:	00100002 	.word	0x00100002
 80027a0:	ffff0000 	.word	0xffff0000
 80027a4:	00010004 	.word	0x00010004

080027a8 <HAL_I2C_GetState>:
  return hi2c->State;
 80027a8:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 80027ac:	4770      	bx	lr

080027ae <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80027ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027b2:	4604      	mov	r4, r0
 80027b4:	460f      	mov	r7, r1
 80027b6:	4616      	mov	r6, r2
 80027b8:	461d      	mov	r5, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80027ba:	f7ff f849 	bl	8001850 <HAL_GetTick>
 80027be:	4680      	mov	r8, r0

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80027c0:	6822      	ldr	r2, [r4, #0]
 80027c2:	6893      	ldr	r3, [r2, #8]
 80027c4:	ea37 0303 	bics.w	r3, r7, r3
 80027c8:	bf0c      	ite	eq
 80027ca:	2301      	moveq	r3, #1
 80027cc:	2300      	movne	r3, #0
 80027ce:	42b3      	cmp	r3, r6
 80027d0:	d101      	bne.n	80027d6 <I2S_WaitFlagStateUntilTimeout+0x28>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80027d2:	2000      	movs	r0, #0
 80027d4:	e00e      	b.n	80027f4 <I2S_WaitFlagStateUntilTimeout+0x46>
    if (Timeout != HAL_MAX_DELAY)
 80027d6:	1c6b      	adds	r3, r5, #1
 80027d8:	d0f3      	beq.n	80027c2 <I2S_WaitFlagStateUntilTimeout+0x14>
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80027da:	f7ff f839 	bl	8001850 <HAL_GetTick>
 80027de:	eba0 0008 	sub.w	r0, r0, r8
 80027e2:	42a8      	cmp	r0, r5
 80027e4:	d3ec      	bcc.n	80027c0 <I2S_WaitFlagStateUntilTimeout+0x12>
        hi2s->State = HAL_I2S_STATE_READY;
 80027e6:	2301      	movs	r3, #1
 80027e8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2s);
 80027ec:	2300      	movs	r3, #0
 80027ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 80027f2:	2003      	movs	r0, #3
}
 80027f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080027f8 <HAL_I2S_MspInit>:
}
 80027f8:	4770      	bx	lr
	...

080027fc <HAL_I2S_Init>:
{
 80027fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2s == NULL)
 80027fe:	4604      	mov	r4, r0
 8002800:	2800      	cmp	r0, #0
 8002802:	f000 8086 	beq.w	8002912 <HAL_I2S_Init+0x116>
  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002806:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800280a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800280e:	b92b      	cbnz	r3, 800281c <HAL_I2S_Init+0x20>
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002810:	4b42      	ldr	r3, [pc, #264]	; (800291c <HAL_I2S_Init+0x120>)
    hi2s->Lock = HAL_UNLOCKED;
 8002812:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002816:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 8002818:	f7ff ffee 	bl	80027f8 <HAL_I2S_MspInit>
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800281c:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 800281e:	2102      	movs	r1, #2
 8002820:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002824:	69d3      	ldr	r3, [r2, #28]
 8002826:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800282a:	f023 030f 	bic.w	r3, r3, #15
 800282e:	61d3      	str	r3, [r2, #28]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002830:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 8002832:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002834:	428b      	cmp	r3, r1
 8002836:	d06e      	beq.n	8002916 <HAL_I2S_Init+0x11a>
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002838:	68e3      	ldr	r3, [r4, #12]
      packetlength = 32U;
 800283a:	2b00      	cmp	r3, #0
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800283c:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
 800283e:	bf0c      	ite	eq
 8002840:	2510      	moveq	r5, #16
 8002842:	2520      	movne	r5, #32
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002844:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002846:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 8002848:	bf98      	it	ls
 800284a:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800284c:	f000 ffd6 	bl	80037fc <HAL_RCCEx_GetPeriphCLKFreq>
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002850:	6923      	ldr	r3, [r4, #16]
 8002852:	6962      	ldr	r2, [r4, #20]
 8002854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002858:	d153      	bne.n	8002902 <HAL_I2S_Init+0x106>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800285a:	68e1      	ldr	r1, [r4, #12]
 800285c:	230a      	movs	r3, #10
 800285e:	2900      	cmp	r1, #0
 8002860:	d04d      	beq.n	80028fe <HAL_I2S_Init+0x102>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002862:	00ad      	lsls	r5, r5, #2
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002864:	fbb0 f0f5 	udiv	r0, r0, r5
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002868:	4343      	muls	r3, r0
 800286a:	fbb3 f3f2 	udiv	r3, r3, r2
    tmp = tmp / 10U;
 800286e:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002870:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8002872:	fbb3 f3f2 	udiv	r3, r3, r2
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002876:	f003 0201 	and.w	r2, r3, #1
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800287a:	085b      	lsrs	r3, r3, #1
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800287c:	1e99      	subs	r1, r3, #2
 800287e:	29fd      	cmp	r1, #253	; 0xfd
 8002880:	d843      	bhi.n	800290a <HAL_I2S_Init+0x10e>
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002882:	0212      	lsls	r2, r2, #8
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002884:	4313      	orrs	r3, r2
 8002886:	6922      	ldr	r2, [r4, #16]
 8002888:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800288a:	4f25      	ldr	r7, [pc, #148]	; (8002920 <HAL_I2S_Init+0x124>)
 800288c:	68e5      	ldr	r5, [r4, #12]
 800288e:	69a0      	ldr	r0, [r4, #24]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002890:	4313      	orrs	r3, r2
 8002892:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002894:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
 8002898:	69ca      	ldr	r2, [r1, #28]
 800289a:	ea46 0c03 	orr.w	ip, r6, r3
 800289e:	403a      	ands	r2, r7
 80028a0:	ea42 020c 	orr.w	r2, r2, ip
 80028a4:	432a      	orrs	r2, r5
 80028a6:	4302      	orrs	r2, r0
 80028a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028ac:	61ca      	str	r2, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80028ae:	6a22      	ldr	r2, [r4, #32]
 80028b0:	2a01      	cmp	r2, #1
 80028b2:	d11e      	bne.n	80028f2 <HAL_I2S_Init+0xf6>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80028b4:	4a1b      	ldr	r2, [pc, #108]	; (8002924 <HAL_I2S_Init+0x128>)
 80028b6:	6362      	str	r2, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80028b8:	f8df c070 	ldr.w	ip, [pc, #112]	; 800292c <HAL_I2S_Init+0x130>
 80028bc:	4a1a      	ldr	r2, [pc, #104]	; (8002928 <HAL_I2S_Init+0x12c>)
 80028be:	4561      	cmp	r1, ip
 80028c0:	bf18      	it	ne
 80028c2:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      tmp = I2S_MODE_SLAVE_TX;
 80028c6:	f436 7600 	bics.w	r6, r6, #512	; 0x200
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80028ca:	69d1      	ldr	r1, [r2, #28]
 80028cc:	ea01 0107 	and.w	r1, r1, r7
 80028d0:	61d1      	str	r1, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80028d2:	f04f 0102 	mov.w	r1, #2
 80028d6:	6211      	str	r1, [r2, #32]
      tmp = I2S_MODE_SLAVE_TX;
 80028d8:	bf0c      	ite	eq
 80028da:	f44f 7680 	moveq.w	r6, #256	; 0x100
 80028de:	2600      	movne	r6, #0
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80028e0:	432b      	orrs	r3, r5
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80028e2:	69d1      	ldr	r1, [r2, #28]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80028e4:	4333      	orrs	r3, r6
 80028e6:	4303      	orrs	r3, r0
 80028e8:	430b      	orrs	r3, r1
 80028ea:	b29b      	uxth	r3, r3
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80028ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028f0:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80028f2:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 80028f4:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80028f6:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80028f8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 80028fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80028fe:	00ed      	lsls	r5, r5, #3
 8002900:	e7b0      	b.n	8002864 <HAL_I2S_Init+0x68>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002902:	fbb0 f3f5 	udiv	r3, r0, r5
 8002906:	200a      	movs	r0, #10
 8002908:	e7ae      	b.n	8002868 <HAL_I2S_Init+0x6c>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800290a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800290c:	f043 0310 	orr.w	r3, r3, #16
 8002910:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8002912:	2001      	movs	r0, #1
 8002914:	e7f2      	b.n	80028fc <HAL_I2S_Init+0x100>
    i2sodd = 0U;
 8002916:	2200      	movs	r2, #0
 8002918:	e7b4      	b.n	8002884 <HAL_I2S_Init+0x88>
 800291a:	bf00      	nop
 800291c:	08002e15 	.word	0x08002e15
 8002920:	fffff040 	.word	0xfffff040
 8002924:	08002f41 	.word	0x08002f41
 8002928:	40003400 	.word	0x40003400
 800292c:	40003800 	.word	0x40003800

08002930 <HAL_I2S_Transmit_DMA>:
{
 8002930:	b570      	push	{r4, r5, r6, lr}
 8002932:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 8002934:	2900      	cmp	r1, #0
 8002936:	d056      	beq.n	80029e6 <HAL_I2S_Transmit_DMA+0xb6>
 8002938:	2a00      	cmp	r2, #0
 800293a:	d054      	beq.n	80029e6 <HAL_I2S_Transmit_DMA+0xb6>
  __HAL_LOCK(hi2s);
 800293c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002940:	2b01      	cmp	r3, #1
 8002942:	d00b      	beq.n	800295c <HAL_I2S_Transmit_DMA+0x2c>
 8002944:	2301      	movs	r3, #1
 8002946:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (hi2s->State != HAL_I2S_STATE_READY)
 800294a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800294e:	2b01      	cmp	r3, #1
 8002950:	b2dd      	uxtb	r5, r3
 8002952:	f04f 0300 	mov.w	r3, #0
 8002956:	d003      	beq.n	8002960 <HAL_I2S_Transmit_DMA+0x30>
    __HAL_UNLOCK(hi2s);
 8002958:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  __HAL_LOCK(hi2s);
 800295c:	2502      	movs	r5, #2
 800295e:	e028      	b.n	80029b2 <HAL_I2S_Transmit_DMA+0x82>
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002960:	2003      	movs	r0, #3
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002962:	6826      	ldr	r6, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002964:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002968:	6463      	str	r3, [r4, #68]	; 0x44
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800296a:	69f3      	ldr	r3, [r6, #28]
  hi2s->pTxBuffPtr = pData;
 800296c:	6261      	str	r1, [r4, #36]	; 0x24
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800296e:	f003 0307 	and.w	r3, r3, #7
  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002972:	4283      	cmp	r3, r0
 8002974:	d001      	beq.n	800297a <HAL_I2S_Transmit_DMA+0x4a>
 8002976:	2b05      	cmp	r3, #5
 8002978:	d11d      	bne.n	80029b6 <HAL_I2S_Transmit_DMA+0x86>
    hi2s->TxXferSize = (Size << 1U);
 800297a:	0053      	lsls	r3, r2, #1
 800297c:	b29b      	uxth	r3, r3
 800297e:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002980:	8563      	strh	r3, [r4, #42]	; 0x2a
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002982:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002984:	4b19      	ldr	r3, [pc, #100]	; (80029ec <HAL_I2S_Transmit_DMA+0xbc>)
 8002986:	6403      	str	r3, [r0, #64]	; 0x40
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002988:	4b19      	ldr	r3, [pc, #100]	; (80029f0 <HAL_I2S_Transmit_DMA+0xc0>)
 800298a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800298c:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <HAL_I2S_Transmit_DMA+0xc4>)
 800298e:	64c3      	str	r3, [r0, #76]	; 0x4c
                                 hi2s->TxXferSize))
 8002990:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002992:	f106 020c 	add.w	r2, r6, #12
 8002996:	b29b      	uxth	r3, r3
 8002998:	f7ff f8a0 	bl	8001adc <HAL_DMA_Start_IT>
 800299c:	b170      	cbz	r0, 80029bc <HAL_I2S_Transmit_DMA+0x8c>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800299e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80029a0:	f043 0308 	orr.w	r3, r3, #8
 80029a4:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80029a6:	2301      	movs	r3, #1
 80029a8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 80029ac:	2300      	movs	r3, #0
 80029ae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80029b2:	4628      	mov	r0, r5
 80029b4:	bd70      	pop	{r4, r5, r6, pc}
    hi2s->TxXferSize = Size;
 80029b6:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80029b8:	8562      	strh	r2, [r4, #42]	; 0x2a
 80029ba:	e7e2      	b.n	8002982 <HAL_I2S_Transmit_DMA+0x52>
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80029bc:	6823      	ldr	r3, [r4, #0]
 80029be:	69da      	ldr	r2, [r3, #28]
 80029c0:	0551      	lsls	r1, r2, #21
    __HAL_I2S_ENABLE(hi2s);
 80029c2:	bf5e      	ittt	pl
 80029c4:	69da      	ldrpl	r2, [r3, #28]
 80029c6:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 80029ca:	61da      	strpl	r2, [r3, #28]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	0792      	lsls	r2, r2, #30
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80029d0:	bf58      	it	pl
 80029d2:	685a      	ldrpl	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 80029d4:	f04f 0500 	mov.w	r5, #0
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80029d8:	bf5c      	itt	pl
 80029da:	f042 0202 	orrpl.w	r2, r2, #2
 80029de:	605a      	strpl	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 80029e0:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  return HAL_OK;
 80029e4:	e7e5      	b.n	80029b2 <HAL_I2S_Transmit_DMA+0x82>
    return  HAL_ERROR;
 80029e6:	2501      	movs	r5, #1
 80029e8:	e7e3      	b.n	80029b2 <HAL_I2S_Transmit_DMA+0x82>
 80029ea:	bf00      	nop
 80029ec:	08002dbd 	.word	0x08002dbd
 80029f0:	08002dc7 	.word	0x08002dc7
 80029f4:	08002f0f 	.word	0x08002f0f

080029f8 <HAL_I2S_Receive_DMA>:
{
 80029f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80029fa:	4613      	mov	r3, r2
 80029fc:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 80029fe:	2900      	cmp	r1, #0
 8002a00:	d062      	beq.n	8002ac8 <HAL_I2S_Receive_DMA+0xd0>
 8002a02:	2a00      	cmp	r2, #0
 8002a04:	d060      	beq.n	8002ac8 <HAL_I2S_Receive_DMA+0xd0>
  __HAL_LOCK(hi2s);
 8002a06:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8002a0a:	2a01      	cmp	r2, #1
 8002a0c:	d00b      	beq.n	8002a26 <HAL_I2S_Receive_DMA+0x2e>
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if (hi2s->State != HAL_I2S_STATE_READY)
 8002a14:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002a18:	2a01      	cmp	r2, #1
 8002a1a:	b2d5      	uxtb	r5, r2
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_I2S_Receive_DMA+0x32>
    __HAL_UNLOCK(hi2s);
 8002a22:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  __HAL_LOCK(hi2s);
 8002a26:	2502      	movs	r5, #2
 8002a28:	e036      	b.n	8002a98 <HAL_I2S_Receive_DMA+0xa0>
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002a2a:	6826      	ldr	r6, [r4, #0]
  hi2s->pRxBuffPtr = pData;
 8002a2c:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002a2e:	2004      	movs	r0, #4
 8002a30:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002a34:	6462      	str	r2, [r4, #68]	; 0x44
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002a36:	69f2      	ldr	r2, [r6, #28]
 8002a38:	f002 0207 	and.w	r2, r2, #7
  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002a3c:	2a03      	cmp	r2, #3
 8002a3e:	d001      	beq.n	8002a44 <HAL_I2S_Receive_DMA+0x4c>
 8002a40:	2a05      	cmp	r2, #5
 8002a42:	d101      	bne.n	8002a48 <HAL_I2S_Receive_DMA+0x50>
    hi2s->RxXferSize = (Size << 1U);
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	b29b      	uxth	r3, r3
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002a48:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2s->RxXferSize = Size;
 8002a4a:	8623      	strh	r3, [r4, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002a4c:	8663      	strh	r3, [r4, #50]	; 0x32
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002a4e:	4b1f      	ldr	r3, [pc, #124]	; (8002acc <HAL_I2S_Receive_DMA+0xd4>)
 8002a50:	6403      	str	r3, [r0, #64]	; 0x40
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002a52:	4b1f      	ldr	r3, [pc, #124]	; (8002ad0 <HAL_I2S_Receive_DMA+0xd8>)
 8002a54:	63c3      	str	r3, [r0, #60]	; 0x3c
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002a56:	4b1f      	ldr	r3, [pc, #124]	; (8002ad4 <HAL_I2S_Receive_DMA+0xdc>)
 8002a58:	64c3      	str	r3, [r0, #76]	; 0x4c
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002a5a:	69f3      	ldr	r3, [r6, #28]
 8002a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a64:	d106      	bne.n	8002a74 <HAL_I2S_Receive_DMA+0x7c>
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002a66:	2300      	movs	r3, #0
 8002a68:	9301      	str	r3, [sp, #4]
 8002a6a:	68f3      	ldr	r3, [r6, #12]
 8002a6c:	9301      	str	r3, [sp, #4]
 8002a6e:	68b3      	ldr	r3, [r6, #8]
 8002a70:	9301      	str	r3, [sp, #4]
 8002a72:	9b01      	ldr	r3, [sp, #4]
                                 hi2s->RxXferSize))
 8002a74:	8e23      	ldrh	r3, [r4, #48]	; 0x30
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002a76:	460a      	mov	r2, r1
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	f106 010c 	add.w	r1, r6, #12
 8002a7e:	f7ff f82d 	bl	8001adc <HAL_DMA_Start_IT>
 8002a82:	b160      	cbz	r0, 8002a9e <HAL_I2S_Receive_DMA+0xa6>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002a84:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a86:	f043 0308 	orr.w	r3, r3, #8
 8002a8a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 8002a92:	2300      	movs	r3, #0
 8002a94:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8002a98:	4628      	mov	r0, r5
 8002a9a:	b002      	add	sp, #8
 8002a9c:	bd70      	pop	{r4, r5, r6, pc}
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	69da      	ldr	r2, [r3, #28]
 8002aa2:	0551      	lsls	r1, r2, #21
    __HAL_I2S_ENABLE(hi2s);
 8002aa4:	bf5e      	ittt	pl
 8002aa6:	69da      	ldrpl	r2, [r3, #28]
 8002aa8:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8002aac:	61da      	strpl	r2, [r3, #28]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	07d2      	lsls	r2, r2, #31
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002ab2:	bf58      	it	pl
 8002ab4:	685a      	ldrpl	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 8002ab6:	f04f 0500 	mov.w	r5, #0
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002aba:	bf5c      	itt	pl
 8002abc:	f042 0201 	orrpl.w	r2, r2, #1
 8002ac0:	605a      	strpl	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 8002ac2:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  return HAL_OK;
 8002ac6:	e7e7      	b.n	8002a98 <HAL_I2S_Receive_DMA+0xa0>
    return  HAL_ERROR;
 8002ac8:	2501      	movs	r5, #1
 8002aca:	e7e5      	b.n	8002a98 <HAL_I2S_Receive_DMA+0xa0>
 8002acc:	08002de9 	.word	0x08002de9
 8002ad0:	08002df3 	.word	0x08002df3
 8002ad4:	08002f0f 	.word	0x08002f0f

08002ad8 <HAL_I2S_DMAPause>:
  __HAL_LOCK(hi2s);
 8002ad8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d02d      	beq.n	8002b3c <HAL_I2S_DMAPause+0x64>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002ae6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	d109      	bne.n	8002b02 <HAL_I2S_DMAPause+0x2a>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002aee:	6802      	ldr	r2, [r0, #0]
 8002af0:	6853      	ldr	r3, [r2, #4]
 8002af2:	f023 0302 	bic.w	r3, r3, #2
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002af6:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hi2s);
 8002af8:	2300      	movs	r3, #0
 8002afa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  return HAL_OK;
 8002afe:	4618      	mov	r0, r3
 8002b00:	4770      	bx	lr
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002b02:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d104      	bne.n	8002b14 <HAL_I2S_DMAPause+0x3c>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002b0a:	6802      	ldr	r2, [r0, #0]
 8002b0c:	6853      	ldr	r3, [r2, #4]
 8002b0e:	f023 0301 	bic.w	r3, r3, #1
 8002b12:	e7f0      	b.n	8002af6 <HAL_I2S_DMAPause+0x1e>
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002b14:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002b18:	2b05      	cmp	r3, #5
 8002b1a:	d1ed      	bne.n	8002af8 <HAL_I2S_DMAPause+0x20>
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002b1c:	6802      	ldr	r2, [r0, #0]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002b1e:	4908      	ldr	r1, [pc, #32]	; (8002b40 <HAL_I2S_DMAPause+0x68>)
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002b20:	6853      	ldr	r3, [r2, #4]
 8002b22:	f023 0303 	bic.w	r3, r3, #3
 8002b26:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002b28:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <HAL_I2S_DMAPause+0x6c>)
 8002b2a:	428a      	cmp	r2, r1
 8002b2c:	bf18      	it	ne
 8002b2e:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	f022 0203 	bic.w	r2, r2, #3
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	e7dd      	b.n	8002af8 <HAL_I2S_DMAPause+0x20>
  __HAL_LOCK(hi2s);
 8002b3c:	2002      	movs	r0, #2
}
 8002b3e:	4770      	bx	lr
 8002b40:	40003800 	.word	0x40003800
 8002b44:	40003400 	.word	0x40003400

08002b48 <HAL_I2S_DMAResume>:
  __HAL_LOCK(hi2s);
 8002b48:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d039      	beq.n	8002bc4 <HAL_I2S_DMAResume+0x7c>
 8002b50:	2301      	movs	r3, #1
 8002b52:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002b56:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002b5a:	6803      	ldr	r3, [r0, #0]
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002b5c:	2a03      	cmp	r2, #3
 8002b5e:	d10f      	bne.n	8002b80 <HAL_I2S_DMAResume+0x38>
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	f042 0202 	orr.w	r2, r2, #2
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002b66:	605a      	str	r2, [r3, #4]
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002b68:	69da      	ldr	r2, [r3, #28]
 8002b6a:	0552      	lsls	r2, r2, #21
    __HAL_I2S_ENABLE(hi2s);
 8002b6c:	bf5e      	ittt	pl
 8002b6e:	69da      	ldrpl	r2, [r3, #28]
 8002b70:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8002b74:	61da      	strpl	r2, [r3, #28]
  __HAL_UNLOCK(hi2s);
 8002b76:	2300      	movs	r3, #0
 8002b78:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  return HAL_OK;
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	4770      	bx	lr
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002b80:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002b84:	2a04      	cmp	r2, #4
 8002b86:	d103      	bne.n	8002b90 <HAL_I2S_DMAResume+0x48>
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	f042 0201 	orr.w	r2, r2, #1
 8002b8e:	e7ea      	b.n	8002b66 <HAL_I2S_DMAResume+0x1e>
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002b90:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002b94:	2a05      	cmp	r2, #5
 8002b96:	d1e7      	bne.n	8002b68 <HAL_I2S_DMAResume+0x20>
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002b98:	685a      	ldr	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002b9a:	490b      	ldr	r1, [pc, #44]	; (8002bc8 <HAL_I2S_DMAResume+0x80>)
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002b9c:	f042 0203 	orr.w	r2, r2, #3
 8002ba0:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002ba2:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <HAL_I2S_DMAResume+0x84>)
 8002ba4:	428b      	cmp	r3, r1
 8002ba6:	bf18      	it	ne
 8002ba8:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8002bac:	6851      	ldr	r1, [r2, #4]
 8002bae:	f041 0103 	orr.w	r1, r1, #3
 8002bb2:	6051      	str	r1, [r2, #4]
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8002bb4:	69d1      	ldr	r1, [r2, #28]
 8002bb6:	0549      	lsls	r1, r1, #21
      __HAL_I2SEXT_ENABLE(hi2s);
 8002bb8:	bf5e      	ittt	pl
 8002bba:	69d1      	ldrpl	r1, [r2, #28]
 8002bbc:	f441 6180 	orrpl.w	r1, r1, #1024	; 0x400
 8002bc0:	61d1      	strpl	r1, [r2, #28]
 8002bc2:	e7d1      	b.n	8002b68 <HAL_I2S_DMAResume+0x20>
  __HAL_LOCK(hi2s);
 8002bc4:	2002      	movs	r0, #2
}
 8002bc6:	4770      	bx	lr
 8002bc8:	40003800 	.word	0x40003800
 8002bcc:	40003400 	.word	0x40003400

08002bd0 <HAL_I2S_DMAStop>:
{
 8002bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002bd4:	6843      	ldr	r3, [r0, #4]
 8002bd6:	f433 7300 	bics.w	r3, r3, #512	; 0x200
{
 8002bda:	b085      	sub	sp, #20
 8002bdc:	4604      	mov	r4, r0
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002bde:	d16c      	bne.n	8002cba <HAL_I2S_DMAStop+0xea>
    if (hi2s->hdmatx != NULL)
 8002be0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002be2:	2800      	cmp	r0, #0
 8002be4:	d15f      	bne.n	8002ca6 <HAL_I2S_DMAStop+0xd6>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002be6:	2500      	movs	r5, #0
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002be8:	2364      	movs	r3, #100	; 0x64
 8002bea:	2201      	movs	r2, #1
 8002bec:	2102      	movs	r1, #2
 8002bee:	4620      	mov	r0, r4
 8002bf0:	f7ff fddd 	bl	80027ae <I2S_WaitFlagStateUntilTimeout>
 8002bf4:	b130      	cbz	r0, 8002c04 <HAL_I2S_DMAStop+0x34>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002bf6:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002bf8:	2501      	movs	r5, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	6463      	str	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002c00:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002c04:	2364      	movs	r3, #100	; 0x64
 8002c06:	2200      	movs	r2, #0
 8002c08:	2180      	movs	r1, #128	; 0x80
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	f7ff fdcf 	bl	80027ae <I2S_WaitFlagStateUntilTimeout>
 8002c10:	b130      	cbz	r0, 8002c20 <HAL_I2S_DMAStop+0x50>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002c12:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002c14:	2501      	movs	r5, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002c1c:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_I2S_DISABLE(hi2s);
 8002c20:	6823      	ldr	r3, [r4, #0]
 8002c22:	69da      	ldr	r2, [r3, #28]
 8002c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c28:	61da      	str	r2, [r3, #28]
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	9200      	str	r2, [sp, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	9200      	str	r2, [sp, #0]
 8002c32:	9a00      	ldr	r2, [sp, #0]
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	f022 0202 	bic.w	r2, r2, #2
 8002c3a:	605a      	str	r2, [r3, #4]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002c3c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002c40:	2b05      	cmp	r3, #5
 8002c42:	d129      	bne.n	8002c98 <HAL_I2S_DMAStop+0xc8>
      if (hi2s->hdmarx != NULL)
 8002c44:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002c46:	b138      	cbz	r0, 8002c58 <HAL_I2S_DMAStop+0x88>
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002c48:	f7fe ff82 	bl	8001b50 <HAL_DMA_Abort>
 8002c4c:	b120      	cbz	r0, 8002c58 <HAL_I2S_DMAStop+0x88>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002c4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002c50:	f043 0308 	orr.w	r3, r3, #8
 8002c54:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode = HAL_ERROR;
 8002c56:	2501      	movs	r5, #1
      __HAL_I2SEXT_DISABLE(hi2s);
 8002c58:	6821      	ldr	r1, [r4, #0]
 8002c5a:	4a56      	ldr	r2, [pc, #344]	; (8002db4 <HAL_I2S_DMAStop+0x1e4>)
 8002c5c:	4b56      	ldr	r3, [pc, #344]	; (8002db8 <HAL_I2S_DMAStop+0x1e8>)
 8002c5e:	4291      	cmp	r1, r2
 8002c60:	bf18      	it	ne
 8002c62:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8002c66:	69da      	ldr	r2, [r3, #28]
 8002c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c6c:	61da      	str	r2, [r3, #28]
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8002c6e:	2200      	movs	r2, #0
 8002c70:	9201      	str	r2, [sp, #4]
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	9201      	str	r2, [sp, #4]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	9201      	str	r2, [sp, #4]
 8002c7a:	9a01      	ldr	r2, [sp, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	f022 0201 	bic.w	r2, r2, #1
 8002c82:	605a      	str	r2, [r3, #4]
      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8002c84:	6862      	ldr	r2, [r4, #4]
 8002c86:	2a00      	cmp	r2, #0
 8002c88:	d16c      	bne.n	8002d64 <HAL_I2S_DMAStop+0x194>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002c8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002c8c:	2501      	movs	r5, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c92:	6463      	str	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002c94:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  hi2s->State = HAL_I2S_STATE_READY;
 8002c98:	2301      	movs	r3, #1
}
 8002c9a:	4628      	mov	r0, r5
  hi2s->State = HAL_I2S_STATE_READY;
 8002c9c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8002ca0:	b005      	add	sp, #20
 8002ca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002ca6:	f7fe ff53 	bl	8001b50 <HAL_DMA_Abort>
 8002caa:	2800      	cmp	r0, #0
 8002cac:	d09b      	beq.n	8002be6 <HAL_I2S_DMAStop+0x16>
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002cae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002cb0:	f043 0308 	orr.w	r3, r3, #8
 8002cb4:	6463      	str	r3, [r4, #68]	; 0x44
        errorcode = HAL_ERROR;
 8002cb6:	2501      	movs	r5, #1
 8002cb8:	e796      	b.n	8002be8 <HAL_I2S_DMAStop+0x18>
  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8002cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cbe:	d177      	bne.n	8002db0 <HAL_I2S_DMAStop+0x1e0>
    if (hi2s->hdmarx != NULL)
 8002cc0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8002cc2:	2800      	cmp	r0, #0
 8002cc4:	d150      	bne.n	8002d68 <HAL_I2S_DMAStop+0x198>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002cc6:	2500      	movs	r5, #0
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002cc8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002ccc:	2b05      	cmp	r3, #5
 8002cce:	d135      	bne.n	8002d3c <HAL_I2S_DMAStop+0x16c>
      if (hi2s->hdmatx != NULL)
 8002cd0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002cd2:	b138      	cbz	r0, 8002ce4 <HAL_I2S_DMAStop+0x114>
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002cd4:	f7fe ff3c 	bl	8001b50 <HAL_DMA_Abort>
 8002cd8:	b120      	cbz	r0, 8002ce4 <HAL_I2S_DMAStop+0x114>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002cda:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002cdc:	f043 0308 	orr.w	r3, r3, #8
 8002ce0:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode = HAL_ERROR;
 8002ce2:	2501      	movs	r5, #1
      tickstart = HAL_GetTick();
 8002ce4:	f7fe fdb4 	bl	8001850 <HAL_GetTick>
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002ce8:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8002db4 <HAL_I2S_DMAStop+0x1e4>
 8002cec:	4f32      	ldr	r7, [pc, #200]	; (8002db8 <HAL_I2S_DMAStop+0x1e8>)
      tickstart = HAL_GetTick();
 8002cee:	4606      	mov	r6, r0
          hi2s->State = HAL_I2S_STATE_READY;
 8002cf0:	f04f 0901 	mov.w	r9, #1
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8002cf4:	6822      	ldr	r2, [r4, #0]
 8002cf6:	4542      	cmp	r2, r8
 8002cf8:	bf0c      	ite	eq
 8002cfa:	463b      	moveq	r3, r7
 8002cfc:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	079b      	lsls	r3, r3, #30
 8002d04:	d53a      	bpl.n	8002d7c <HAL_I2S_DMAStop+0x1ac>
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002d06:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8002db4 <HAL_I2S_DMAStop+0x1e4>
 8002d0a:	4f2b      	ldr	r7, [pc, #172]	; (8002db8 <HAL_I2S_DMAStop+0x1e8>)
          hi2s->State = HAL_I2S_STATE_READY;
 8002d0c:	f04f 0901 	mov.w	r9, #1
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002d10:	6822      	ldr	r2, [r4, #0]
 8002d12:	4542      	cmp	r2, r8
 8002d14:	bf0c      	ite	eq
 8002d16:	463b      	moveq	r3, r7
 8002d18:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 8002d22:	d138      	bne.n	8002d96 <HAL_I2S_DMAStop+0x1c6>
      __HAL_I2SEXT_DISABLE(hi2s);
 8002d24:	69d9      	ldr	r1, [r3, #28]
 8002d26:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002d2a:	61d9      	str	r1, [r3, #28]
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8002d2c:	9202      	str	r2, [sp, #8]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	9202      	str	r2, [sp, #8]
 8002d32:	9a02      	ldr	r2, [sp, #8]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	f022 0202 	bic.w	r2, r2, #2
 8002d3a:	605a      	str	r2, [r3, #4]
    __HAL_I2S_DISABLE(hi2s);
 8002d3c:	6823      	ldr	r3, [r4, #0]
 8002d3e:	69da      	ldr	r2, [r3, #28]
 8002d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d44:	61da      	str	r2, [r3, #28]
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002d46:	2200      	movs	r2, #0
 8002d48:	9203      	str	r2, [sp, #12]
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	9203      	str	r2, [sp, #12]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	9203      	str	r2, [sp, #12]
 8002d52:	9a03      	ldr	r2, [sp, #12]
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	f022 0201 	bic.w	r2, r2, #1
 8002d5a:	605a      	str	r2, [r3, #4]
    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8002d5c:	6862      	ldr	r2, [r4, #4]
 8002d5e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002d62:	d092      	beq.n	8002c8a <HAL_I2S_DMAStop+0xba>
      READ_REG((hi2s->Instance)->DR);
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	e797      	b.n	8002c98 <HAL_I2S_DMAStop+0xc8>
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002d68:	f7fe fef2 	bl	8001b50 <HAL_DMA_Abort>
 8002d6c:	2800      	cmp	r0, #0
 8002d6e:	d0aa      	beq.n	8002cc6 <HAL_I2S_DMAStop+0xf6>
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002d70:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002d72:	f043 0308 	orr.w	r3, r3, #8
 8002d76:	6463      	str	r3, [r4, #68]	; 0x44
        errorcode = HAL_ERROR;
 8002d78:	2501      	movs	r5, #1
 8002d7a:	e7a5      	b.n	8002cc8 <HAL_I2S_DMAStop+0xf8>
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8002d7c:	f7fe fd68 	bl	8001850 <HAL_GetTick>
 8002d80:	1b80      	subs	r0, r0, r6
 8002d82:	2864      	cmp	r0, #100	; 0x64
 8002d84:	d9b6      	bls.n	8002cf4 <HAL_I2S_DMAStop+0x124>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002d86:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode   = HAL_ERROR;
 8002d8e:	2501      	movs	r5, #1
          hi2s->State = HAL_I2S_STATE_READY;
 8002d90:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8002d94:	e7ae      	b.n	8002cf4 <HAL_I2S_DMAStop+0x124>
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8002d96:	f7fe fd5b 	bl	8001850 <HAL_GetTick>
 8002d9a:	1b80      	subs	r0, r0, r6
 8002d9c:	2864      	cmp	r0, #100	; 0x64
 8002d9e:	d9b7      	bls.n	8002d10 <HAL_I2S_DMAStop+0x140>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002da0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode   = HAL_ERROR;
 8002da8:	2501      	movs	r5, #1
          hi2s->State = HAL_I2S_STATE_READY;
 8002daa:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8002dae:	e7af      	b.n	8002d10 <HAL_I2S_DMAStop+0x140>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002db0:	2500      	movs	r5, #0
 8002db2:	e771      	b.n	8002c98 <HAL_I2S_DMAStop+0xc8>
 8002db4:	40003800 	.word	0x40003800
 8002db8:	40003400 	.word	0x40003400

08002dbc <I2S_DMATxHalfCplt>:
{
 8002dbc:	b508      	push	{r3, lr}
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002dbe:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002dc0:	f7fe fb6e 	bl	80014a0 <HAL_I2S_TxHalfCpltCallback>
}
 8002dc4:	bd08      	pop	{r3, pc}

08002dc6 <I2S_DMATxCplt>:
{
 8002dc6:	b508      	push	{r3, lr}
 8002dc8:	4603      	mov	r3, r0
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002dca:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8002dcc:	69da      	ldr	r2, [r3, #28]
 8002dce:	b942      	cbnz	r2, 8002de2 <I2S_DMATxCplt+0x1c>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002dd0:	6801      	ldr	r1, [r0, #0]
 8002dd2:	684b      	ldr	r3, [r1, #4]
 8002dd4:	f023 0302 	bic.w	r3, r3, #2
 8002dd8:	604b      	str	r3, [r1, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002dda:	2301      	movs	r3, #1
    hi2s->TxXferCount = 0U;
 8002ddc:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002dde:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 8002de2:	f7fe fb51 	bl	8001488 <HAL_I2S_TxCpltCallback>
}
 8002de6:	bd08      	pop	{r3, pc}

08002de8 <I2S_DMARxHalfCplt>:
{
 8002de8:	b508      	push	{r3, lr}
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002dea:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002dec:	f7fe fcac 	bl	8001748 <HAL_I2S_RxHalfCpltCallback>
}
 8002df0:	bd08      	pop	{r3, pc}

08002df2 <I2S_DMARxCplt>:
{
 8002df2:	b508      	push	{r3, lr}
 8002df4:	4603      	mov	r3, r0
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002df6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8002df8:	69da      	ldr	r2, [r3, #28]
 8002dfa:	b942      	cbnz	r2, 8002e0e <I2S_DMARxCplt+0x1c>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002dfc:	6801      	ldr	r1, [r0, #0]
 8002dfe:	684b      	ldr	r3, [r1, #4]
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 8002e04:	604b      	str	r3, [r1, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002e06:	2301      	movs	r3, #1
    hi2s->RxXferCount = 0U;
 8002e08:	8642      	strh	r2, [r0, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8002e0a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  HAL_I2S_RxCpltCallback(hi2s);
 8002e0e:	f7fe fc97 	bl	8001740 <HAL_I2S_RxCpltCallback>
}
 8002e12:	bd08      	pop	{r3, pc}

08002e14 <I2S_IRQHandler>:
{
 8002e14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002e16:	6803      	ldr	r3, [r0, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	9201      	str	r2, [sp, #4]
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002e1c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002e20:	2a04      	cmp	r2, #4
{
 8002e22:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002e24:	d136      	bne.n	8002e94 <I2S_IRQHandler+0x80>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002e26:	9a01      	ldr	r2, [sp, #4]
 8002e28:	07d1      	lsls	r1, r2, #31
 8002e2a:	d517      	bpl.n	8002e5c <I2S_IRQHandler+0x48>
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	0652      	lsls	r2, r2, #25
 8002e30:	d514      	bpl.n	8002e5c <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002e32:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002e34:	68d9      	ldr	r1, [r3, #12]
 8002e36:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 8002e3a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002e3c:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8002e3e:	3a01      	subs	r2, #1
 8002e40:	b292      	uxth	r2, r2
 8002e42:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8002e44:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8002e46:	b292      	uxth	r2, r2
 8002e48:	b942      	cbnz	r2, 8002e5c <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e50:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002e52:	2301      	movs	r3, #1
 8002e54:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8002e58:	f7fe fc72 	bl	8001740 <HAL_I2S_RxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002e5c:	9b01      	ldr	r3, [sp, #4]
 8002e5e:	0659      	lsls	r1, r3, #25
 8002e60:	d518      	bpl.n	8002e94 <I2S_IRQHandler+0x80>
 8002e62:	6823      	ldr	r3, [r4, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	0692      	lsls	r2, r2, #26
 8002e68:	d514      	bpl.n	8002e94 <I2S_IRQHandler+0x80>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e70:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002e72:	2200      	movs	r2, #0
 8002e74:	9202      	str	r2, [sp, #8]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	9202      	str	r2, [sp, #8]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	9302      	str	r3, [sp, #8]
 8002e7e:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8002e80:	2301      	movs	r3, #1
 8002e82:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e86:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002e88:	f043 0302 	orr.w	r3, r3, #2
 8002e8c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002e8e:	4620      	mov	r0, r4
 8002e90:	f7fe fc5e 	bl	8001750 <HAL_I2S_ErrorCallback>
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002e94:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d136      	bne.n	8002f0a <I2S_IRQHandler+0xf6>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002e9c:	9b01      	ldr	r3, [sp, #4]
 8002e9e:	079b      	lsls	r3, r3, #30
 8002ea0:	d519      	bpl.n	8002ed6 <I2S_IRQHandler+0xc2>
 8002ea2:	6822      	ldr	r2, [r4, #0]
 8002ea4:	6853      	ldr	r3, [r2, #4]
 8002ea6:	0618      	lsls	r0, r3, #24
 8002ea8:	d515      	bpl.n	8002ed6 <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002eaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002eac:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002eb0:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 8002eb2:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 8002eb4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8002ebc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	b94b      	cbnz	r3, 8002ed6 <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ec2:	6853      	ldr	r3, [r2, #4]
 8002ec4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ec8:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	f7fe fad9 	bl	8001488 <HAL_I2S_TxCpltCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002ed6:	9b01      	ldr	r3, [sp, #4]
 8002ed8:	0719      	lsls	r1, r3, #28
 8002eda:	d516      	bpl.n	8002f0a <I2S_IRQHandler+0xf6>
 8002edc:	6823      	ldr	r3, [r4, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	0692      	lsls	r2, r2, #26
 8002ee2:	d512      	bpl.n	8002f0a <I2S_IRQHandler+0xf6>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002eea:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002eec:	2200      	movs	r2, #0
 8002eee:	9203      	str	r2, [sp, #12]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	9303      	str	r3, [sp, #12]
 8002ef4:	9b03      	ldr	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002efc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002efe:	f043 0304 	orr.w	r3, r3, #4
 8002f02:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002f04:	4620      	mov	r0, r4
 8002f06:	f7fe fc23 	bl	8001750 <HAL_I2S_ErrorCallback>
}
 8002f0a:	b004      	add	sp, #16
 8002f0c:	bd10      	pop	{r4, pc}

08002f0e <I2S_DMAError>:
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002f0e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002f10:	6802      	ldr	r2, [r0, #0]
{
 8002f12:	b508      	push	{r3, lr}
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002f14:	6853      	ldr	r3, [r2, #4]
 8002f16:	f023 0303 	bic.w	r3, r3, #3
 8002f1a:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002f20:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 8002f22:	2301      	movs	r3, #1
 8002f24:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002f28:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002f2a:	f043 0308 	orr.w	r3, r3, #8
 8002f2e:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8002f30:	f7fe fc0e 	bl	8001750 <HAL_I2S_ErrorCallback>
}
 8002f34:	bd08      	pop	{r3, pc}

08002f36 <HAL_I2S_GetState>:
  return hi2s->State;
 8002f36:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8002f3a:	4770      	bx	lr

08002f3c <HAL_I2SEx_TxRxCpltCallback>:
 8002f3c:	4770      	bx	lr
	...

08002f40 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002f40:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002f42:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002f44:	498e      	ldr	r1, [pc, #568]	; (8003180 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002f46:	6893      	ldr	r3, [r2, #8]
{
 8002f48:	b086      	sub	sp, #24
 8002f4a:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002f4c:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002f4e:	4b8d      	ldr	r3, [pc, #564]	; (8003184 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8002f50:	428a      	cmp	r2, r1
 8002f52:	bf18      	it	ne
 8002f54:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8002f58:	6899      	ldr	r1, [r3, #8]
 8002f5a:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002f5c:	6851      	ldr	r1, [r2, #4]
 8002f5e:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002f60:	6859      	ldr	r1, [r3, #4]
 8002f62:	9103      	str	r1, [sp, #12]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002f64:	6841      	ldr	r1, [r0, #4]
 8002f66:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 8002f6a:	f040 8093 	bne.w	8003094 <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002f6e:	9b00      	ldr	r3, [sp, #0]
 8002f70:	0799      	lsls	r1, r3, #30
 8002f72:	d51a      	bpl.n	8002faa <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
 8002f74:	9b02      	ldr	r3, [sp, #8]
 8002f76:	061b      	lsls	r3, r3, #24
 8002f78:	d517      	bpl.n	8002faa <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002f7a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002f7c:	1c99      	adds	r1, r3, #2
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	6241      	str	r1, [r0, #36]	; 0x24
 8002f82:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8002f84:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f8c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	b95b      	cbnz	r3, 8002faa <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f92:	6853      	ldr	r3, [r2, #4]
 8002f94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f98:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8002f9a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	b923      	cbnz	r3, 8002faa <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002fa6:	f7ff ffc9 	bl	8002f3c <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002faa:	9b01      	ldr	r3, [sp, #4]
 8002fac:	07d8      	lsls	r0, r3, #31
 8002fae:	d522      	bpl.n	8002ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 8002fb0:	9b03      	ldr	r3, [sp, #12]
 8002fb2:	0659      	lsls	r1, r3, #25
 8002fb4:	d51f      	bpl.n	8002ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002fb6:	6821      	ldr	r1, [r4, #0]
 8002fb8:	4a71      	ldr	r2, [pc, #452]	; (8003180 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 8002fba:	4b72      	ldr	r3, [pc, #456]	; (8003184 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8002fbc:	4291      	cmp	r1, r2
 8002fbe:	bf18      	it	ne
 8002fc0:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8002fc4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002fc6:	68d9      	ldr	r1, [r3, #12]
 8002fc8:	1c90      	adds	r0, r2, #2
 8002fca:	62e0      	str	r0, [r4, #44]	; 0x2c
 8002fcc:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8002fce:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8002fd0:	3a01      	subs	r2, #1
 8002fd2:	b292      	uxth	r2, r2
 8002fd4:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002fd6:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8002fd8:	b292      	uxth	r2, r2
 8002fda:	b962      	cbnz	r2, 8002ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fe2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002fe4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	b92b      	cbnz	r3, 8002ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002fea:	2301      	movs	r3, #1
 8002fec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ff0:	4620      	mov	r0, r4
 8002ff2:	f7ff ffa3 	bl	8002f3c <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002ff6:	9b01      	ldr	r3, [sp, #4]
 8002ff8:	065a      	lsls	r2, r3, #25
 8002ffa:	d522      	bpl.n	8003042 <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
 8002ffc:	9b03      	ldr	r3, [sp, #12]
 8002ffe:	069b      	lsls	r3, r3, #26
 8003000:	d51f      	bpl.n	8003042 <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003002:	6823      	ldr	r3, [r4, #0]
 8003004:	495e      	ldr	r1, [pc, #376]	; (8003180 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 8003006:	4a5f      	ldr	r2, [pc, #380]	; (8003184 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8003008:	428b      	cmp	r3, r1
 800300a:	bf18      	it	ne
 800300c:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8003010:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003012:	6851      	ldr	r1, [r2, #4]
 8003014:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8003018:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003020:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003022:	2200      	movs	r2, #0
 8003024:	9204      	str	r2, [sp, #16]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	9204      	str	r2, [sp, #16]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	9304      	str	r3, [sp, #16]
 800302e:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8003030:	2301      	movs	r3, #1
 8003032:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003036:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003038:	f043 0302 	orr.w	r3, r3, #2
 800303c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800303e:	f7fe fb87 	bl	8001750 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003042:	9b00      	ldr	r3, [sp, #0]
 8003044:	0718      	lsls	r0, r3, #28
 8003046:	f140 8098 	bpl.w	800317a <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 800304a:	9b02      	ldr	r3, [sp, #8]
 800304c:	0699      	lsls	r1, r3, #26
 800304e:	f140 8094 	bpl.w	800317a <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003052:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003054:	494a      	ldr	r1, [pc, #296]	; (8003180 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800305c:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800305e:	4a49      	ldr	r2, [pc, #292]	; (8003184 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8003060:	428b      	cmp	r3, r1
 8003062:	bf18      	it	ne
 8003064:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8003068:	6851      	ldr	r1, [r2, #4]
 800306a:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 800306e:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003070:	2200      	movs	r2, #0
 8003072:	9205      	str	r2, [sp, #20]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	9305      	str	r3, [sp, #20]
 8003078:	9b05      	ldr	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 800307a:	2301      	movs	r3, #1
 800307c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003080:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8003082:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003084:	f043 0304 	orr.w	r3, r3, #4
 8003088:	6463      	str	r3, [r4, #68]	; 0x44
}
 800308a:	b006      	add	sp, #24
 800308c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_I2S_ErrorCallback(hi2s);
 8003090:	f7fe bb5e 	b.w	8001750 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003094:	9a01      	ldr	r2, [sp, #4]
 8003096:	0792      	lsls	r2, r2, #30
 8003098:	d51a      	bpl.n	80030d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
 800309a:	9a03      	ldr	r2, [sp, #12]
 800309c:	0611      	lsls	r1, r2, #24
 800309e:	d517      	bpl.n	80030d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80030a0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80030a2:	1c91      	adds	r1, r2, #2
 80030a4:	8812      	ldrh	r2, [r2, #0]
 80030a6:	6241      	str	r1, [r0, #36]	; 0x24
 80030a8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80030aa:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80030ac:	3a01      	subs	r2, #1
 80030ae:	b292      	uxth	r2, r2
 80030b0:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 80030b2:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80030b4:	b292      	uxth	r2, r2
 80030b6:	b95a      	cbnz	r2, 80030d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030be:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 80030c0:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	b923      	cbnz	r3, 80030d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
      hi2s->State = HAL_I2S_STATE_READY;
 80030c6:	2301      	movs	r3, #1
 80030c8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80030cc:	f7ff ff36 	bl	8002f3c <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80030d0:	9b00      	ldr	r3, [sp, #0]
 80030d2:	07da      	lsls	r2, r3, #31
 80030d4:	d51c      	bpl.n	8003110 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
 80030d6:	9b02      	ldr	r3, [sp, #8]
 80030d8:	065b      	lsls	r3, r3, #25
 80030da:	d519      	bpl.n	8003110 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80030dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80030de:	6822      	ldr	r2, [r4, #0]
 80030e0:	1c98      	adds	r0, r3, #2
 80030e2:	68d1      	ldr	r1, [r2, #12]
 80030e4:	62e0      	str	r0, [r4, #44]	; 0x2c
 80030e6:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 80030e8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 80030f0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	b963      	cbnz	r3, 8003110 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030f6:	6853      	ldr	r3, [r2, #4]
 80030f8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80030fc:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 80030fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003100:	b29b      	uxth	r3, r3
 8003102:	b92b      	cbnz	r3, 8003110 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
      hi2s->State = HAL_I2S_STATE_READY;
 8003104:	2301      	movs	r3, #1
 8003106:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800310a:	4620      	mov	r0, r4
 800310c:	f7ff ff16 	bl	8002f3c <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003110:	9b00      	ldr	r3, [sp, #0]
 8003112:	0658      	lsls	r0, r3, #25
 8003114:	d51b      	bpl.n	800314e <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
 8003116:	9b02      	ldr	r3, [sp, #8]
 8003118:	0699      	lsls	r1, r3, #26
 800311a:	d518      	bpl.n	800314e <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800311c:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800311e:	4918      	ldr	r1, [pc, #96]	; (8003180 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003120:	6853      	ldr	r3, [r2, #4]
 8003122:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003126:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003128:	4b16      	ldr	r3, [pc, #88]	; (8003184 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 800312a:	428a      	cmp	r2, r1
 800312c:	bf18      	it	ne
 800312e:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8003132:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800313a:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 800313c:	2301      	movs	r3, #1
 800313e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003142:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003144:	f043 0302 	orr.w	r3, r3, #2
 8003148:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800314a:	f7fe fb01 	bl	8001750 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800314e:	9b01      	ldr	r3, [sp, #4]
 8003150:	071a      	lsls	r2, r3, #28
 8003152:	d512      	bpl.n	800317a <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 8003154:	9b03      	ldr	r3, [sp, #12]
 8003156:	069b      	lsls	r3, r3, #26
 8003158:	d50f      	bpl.n	800317a <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800315a:	6822      	ldr	r2, [r4, #0]
 800315c:	4908      	ldr	r1, [pc, #32]	; (8003180 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 800315e:	4b09      	ldr	r3, [pc, #36]	; (8003184 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8003160:	428a      	cmp	r2, r1
 8003162:	bf18      	it	ne
 8003164:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003168:	6859      	ldr	r1, [r3, #4]
 800316a:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 800316e:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003170:	6853      	ldr	r3, [r2, #4]
 8003172:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003176:	6053      	str	r3, [r2, #4]
 8003178:	e77f      	b.n	800307a <HAL_I2SEx_FullDuplex_IRQHandler+0x13a>
}
 800317a:	b006      	add	sp, #24
 800317c:	bd10      	pop	{r4, pc}
 800317e:	bf00      	nop
 8003180:	40003800 	.word	0x40003800
 8003184:	40003400 	.word	0x40003400

08003188 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003188:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800318c:	4604      	mov	r4, r0
 800318e:	b340      	cbz	r0, 80031e2 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003190:	6803      	ldr	r3, [r0, #0]
 8003192:	07dd      	lsls	r5, r3, #31
 8003194:	d410      	bmi.n	80031b8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003196:	6823      	ldr	r3, [r4, #0]
 8003198:	0798      	lsls	r0, r3, #30
 800319a:	d45e      	bmi.n	800325a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800319c:	6823      	ldr	r3, [r4, #0]
 800319e:	071a      	lsls	r2, r3, #28
 80031a0:	f100 80a0 	bmi.w	80032e4 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a4:	6823      	ldr	r3, [r4, #0]
 80031a6:	075b      	lsls	r3, r3, #29
 80031a8:	f100 80c0 	bmi.w	800332c <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ac:	69a0      	ldr	r0, [r4, #24]
 80031ae:	2800      	cmp	r0, #0
 80031b0:	f040 8128 	bne.w	8003404 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80031b4:	2000      	movs	r0, #0
 80031b6:	e02b      	b.n	8003210 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031b8:	4b8f      	ldr	r3, [pc, #572]	; (80033f8 <HAL_RCC_OscConfig+0x270>)
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	f002 020c 	and.w	r2, r2, #12
 80031c0:	2a04      	cmp	r2, #4
 80031c2:	d007      	beq.n	80031d4 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ca:	2a08      	cmp	r2, #8
 80031cc:	d10b      	bne.n	80031e6 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	0251      	lsls	r1, r2, #9
 80031d2:	d508      	bpl.n	80031e6 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d4:	4b88      	ldr	r3, [pc, #544]	; (80033f8 <HAL_RCC_OscConfig+0x270>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	039a      	lsls	r2, r3, #14
 80031da:	d5dc      	bpl.n	8003196 <HAL_RCC_OscConfig+0xe>
 80031dc:	6863      	ldr	r3, [r4, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1d9      	bne.n	8003196 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80031e2:	2001      	movs	r0, #1
 80031e4:	e014      	b.n	8003210 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e6:	6862      	ldr	r2, [r4, #4]
 80031e8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80031ec:	d113      	bne.n	8003216 <HAL_RCC_OscConfig+0x8e>
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80031f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80031f6:	f7fe fb2b 	bl	8001850 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fa:	4e7f      	ldr	r6, [pc, #508]	; (80033f8 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80031fc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fe:	6833      	ldr	r3, [r6, #0]
 8003200:	039b      	lsls	r3, r3, #14
 8003202:	d4c8      	bmi.n	8003196 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003204:	f7fe fb24 	bl	8001850 <HAL_GetTick>
 8003208:	1b40      	subs	r0, r0, r5
 800320a:	2864      	cmp	r0, #100	; 0x64
 800320c:	d9f7      	bls.n	80031fe <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 800320e:	2003      	movs	r0, #3
}
 8003210:	b002      	add	sp, #8
 8003212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003216:	4d78      	ldr	r5, [pc, #480]	; (80033f8 <HAL_RCC_OscConfig+0x270>)
 8003218:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800321c:	682b      	ldr	r3, [r5, #0]
 800321e:	d107      	bne.n	8003230 <HAL_RCC_OscConfig+0xa8>
 8003220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003224:	602b      	str	r3, [r5, #0]
 8003226:	682b      	ldr	r3, [r5, #0]
 8003228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800322e:	e7e2      	b.n	80031f6 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003234:	602b      	str	r3, [r5, #0]
 8003236:	682b      	ldr	r3, [r5, #0]
 8003238:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800323c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800323e:	2a00      	cmp	r2, #0
 8003240:	d1d9      	bne.n	80031f6 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8003242:	f7fe fb05 	bl	8001850 <HAL_GetTick>
 8003246:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003248:	682b      	ldr	r3, [r5, #0]
 800324a:	039f      	lsls	r7, r3, #14
 800324c:	d5a3      	bpl.n	8003196 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800324e:	f7fe faff 	bl	8001850 <HAL_GetTick>
 8003252:	1b80      	subs	r0, r0, r6
 8003254:	2864      	cmp	r0, #100	; 0x64
 8003256:	d9f7      	bls.n	8003248 <HAL_RCC_OscConfig+0xc0>
 8003258:	e7d9      	b.n	800320e <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800325a:	4b67      	ldr	r3, [pc, #412]	; (80033f8 <HAL_RCC_OscConfig+0x270>)
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	f012 0f0c 	tst.w	r2, #12
 8003262:	d007      	beq.n	8003274 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800326a:	2a08      	cmp	r2, #8
 800326c:	d111      	bne.n	8003292 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	025e      	lsls	r6, r3, #9
 8003272:	d40e      	bmi.n	8003292 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003274:	4a60      	ldr	r2, [pc, #384]	; (80033f8 <HAL_RCC_OscConfig+0x270>)
 8003276:	6813      	ldr	r3, [r2, #0]
 8003278:	079d      	lsls	r5, r3, #30
 800327a:	d502      	bpl.n	8003282 <HAL_RCC_OscConfig+0xfa>
 800327c:	68e3      	ldr	r3, [r4, #12]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d1af      	bne.n	80031e2 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003282:	6813      	ldr	r3, [r2, #0]
 8003284:	6921      	ldr	r1, [r4, #16]
 8003286:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800328a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800328e:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003290:	e784      	b.n	800319c <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003292:	68e2      	ldr	r2, [r4, #12]
 8003294:	4b59      	ldr	r3, [pc, #356]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 8003296:	b1b2      	cbz	r2, 80032c6 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8003298:	2201      	movs	r2, #1
 800329a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800329c:	f7fe fad8 	bl	8001850 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a0:	4d55      	ldr	r5, [pc, #340]	; (80033f8 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80032a2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a4:	682b      	ldr	r3, [r5, #0]
 80032a6:	0798      	lsls	r0, r3, #30
 80032a8:	d507      	bpl.n	80032ba <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032aa:	682b      	ldr	r3, [r5, #0]
 80032ac:	6922      	ldr	r2, [r4, #16]
 80032ae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80032b2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80032b6:	602b      	str	r3, [r5, #0]
 80032b8:	e770      	b.n	800319c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ba:	f7fe fac9 	bl	8001850 <HAL_GetTick>
 80032be:	1b80      	subs	r0, r0, r6
 80032c0:	2802      	cmp	r0, #2
 80032c2:	d9ef      	bls.n	80032a4 <HAL_RCC_OscConfig+0x11c>
 80032c4:	e7a3      	b.n	800320e <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 80032c6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80032c8:	f7fe fac2 	bl	8001850 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032cc:	4e4a      	ldr	r6, [pc, #296]	; (80033f8 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80032ce:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032d0:	6833      	ldr	r3, [r6, #0]
 80032d2:	0799      	lsls	r1, r3, #30
 80032d4:	f57f af62 	bpl.w	800319c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032d8:	f7fe faba 	bl	8001850 <HAL_GetTick>
 80032dc:	1b40      	subs	r0, r0, r5
 80032de:	2802      	cmp	r0, #2
 80032e0:	d9f6      	bls.n	80032d0 <HAL_RCC_OscConfig+0x148>
 80032e2:	e794      	b.n	800320e <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032e4:	6962      	ldr	r2, [r4, #20]
 80032e6:	4b45      	ldr	r3, [pc, #276]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 80032e8:	b182      	cbz	r2, 800330c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80032ea:	2201      	movs	r2, #1
 80032ec:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80032f0:	f7fe faae 	bl	8001850 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f4:	4e40      	ldr	r6, [pc, #256]	; (80033f8 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 80032f6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f8:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80032fa:	079f      	lsls	r7, r3, #30
 80032fc:	f53f af52 	bmi.w	80031a4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003300:	f7fe faa6 	bl	8001850 <HAL_GetTick>
 8003304:	1b40      	subs	r0, r0, r5
 8003306:	2802      	cmp	r0, #2
 8003308:	d9f6      	bls.n	80032f8 <HAL_RCC_OscConfig+0x170>
 800330a:	e780      	b.n	800320e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 800330c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8003310:	f7fe fa9e 	bl	8001850 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003314:	4e38      	ldr	r6, [pc, #224]	; (80033f8 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8003316:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003318:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800331a:	0798      	lsls	r0, r3, #30
 800331c:	f57f af42 	bpl.w	80031a4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003320:	f7fe fa96 	bl	8001850 <HAL_GetTick>
 8003324:	1b40      	subs	r0, r0, r5
 8003326:	2802      	cmp	r0, #2
 8003328:	d9f6      	bls.n	8003318 <HAL_RCC_OscConfig+0x190>
 800332a:	e770      	b.n	800320e <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800332c:	4b32      	ldr	r3, [pc, #200]	; (80033f8 <HAL_RCC_OscConfig+0x270>)
 800332e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003330:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8003334:	d128      	bne.n	8003388 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003336:	9201      	str	r2, [sp, #4]
 8003338:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800333a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800333e:	641a      	str	r2, [r3, #64]	; 0x40
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003346:	9301      	str	r3, [sp, #4]
 8003348:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800334a:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334c:	4d2c      	ldr	r5, [pc, #176]	; (8003400 <HAL_RCC_OscConfig+0x278>)
 800334e:	682b      	ldr	r3, [r5, #0]
 8003350:	05d9      	lsls	r1, r3, #23
 8003352:	d51b      	bpl.n	800338c <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003354:	68a3      	ldr	r3, [r4, #8]
 8003356:	4d28      	ldr	r5, [pc, #160]	; (80033f8 <HAL_RCC_OscConfig+0x270>)
 8003358:	2b01      	cmp	r3, #1
 800335a:	d127      	bne.n	80033ac <HAL_RCC_OscConfig+0x224>
 800335c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003364:	f7fe fa74 	bl	8001850 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003368:	4e23      	ldr	r6, [pc, #140]	; (80033f8 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 800336a:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800336c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003370:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003372:	079b      	lsls	r3, r3, #30
 8003374:	d539      	bpl.n	80033ea <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8003376:	2f00      	cmp	r7, #0
 8003378:	f43f af18 	beq.w	80031ac <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800337c:	4a1e      	ldr	r2, [pc, #120]	; (80033f8 <HAL_RCC_OscConfig+0x270>)
 800337e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003380:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003384:	6413      	str	r3, [r2, #64]	; 0x40
 8003386:	e711      	b.n	80031ac <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8003388:	2700      	movs	r7, #0
 800338a:	e7df      	b.n	800334c <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800338c:	682b      	ldr	r3, [r5, #0]
 800338e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003392:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003394:	f7fe fa5c 	bl	8001850 <HAL_GetTick>
 8003398:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339a:	682b      	ldr	r3, [r5, #0]
 800339c:	05da      	lsls	r2, r3, #23
 800339e:	d4d9      	bmi.n	8003354 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a0:	f7fe fa56 	bl	8001850 <HAL_GetTick>
 80033a4:	1b80      	subs	r0, r0, r6
 80033a6:	2802      	cmp	r0, #2
 80033a8:	d9f7      	bls.n	800339a <HAL_RCC_OscConfig+0x212>
 80033aa:	e730      	b.n	800320e <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ac:	2b05      	cmp	r3, #5
 80033ae:	d104      	bne.n	80033ba <HAL_RCC_OscConfig+0x232>
 80033b0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80033b2:	f043 0304 	orr.w	r3, r3, #4
 80033b6:	672b      	str	r3, [r5, #112]	; 0x70
 80033b8:	e7d0      	b.n	800335c <HAL_RCC_OscConfig+0x1d4>
 80033ba:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80033bc:	f022 0201 	bic.w	r2, r2, #1
 80033c0:	672a      	str	r2, [r5, #112]	; 0x70
 80033c2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80033c4:	f022 0204 	bic.w	r2, r2, #4
 80033c8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1ca      	bne.n	8003364 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 80033ce:	f7fe fa3f 	bl	8001850 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80033d6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80033da:	0798      	lsls	r0, r3, #30
 80033dc:	d5cb      	bpl.n	8003376 <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033de:	f7fe fa37 	bl	8001850 <HAL_GetTick>
 80033e2:	1b80      	subs	r0, r0, r6
 80033e4:	4540      	cmp	r0, r8
 80033e6:	d9f7      	bls.n	80033d8 <HAL_RCC_OscConfig+0x250>
 80033e8:	e711      	b.n	800320e <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ea:	f7fe fa31 	bl	8001850 <HAL_GetTick>
 80033ee:	1b40      	subs	r0, r0, r5
 80033f0:	4540      	cmp	r0, r8
 80033f2:	d9bd      	bls.n	8003370 <HAL_RCC_OscConfig+0x1e8>
 80033f4:	e70b      	b.n	800320e <HAL_RCC_OscConfig+0x86>
 80033f6:	bf00      	nop
 80033f8:	40023800 	.word	0x40023800
 80033fc:	42470000 	.word	0x42470000
 8003400:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003404:	4d36      	ldr	r5, [pc, #216]	; (80034e0 <HAL_RCC_OscConfig+0x358>)
 8003406:	68ab      	ldr	r3, [r5, #8]
 8003408:	f003 030c 	and.w	r3, r3, #12
 800340c:	2b08      	cmp	r3, #8
 800340e:	d03d      	beq.n	800348c <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003410:	4b34      	ldr	r3, [pc, #208]	; (80034e4 <HAL_RCC_OscConfig+0x35c>)
 8003412:	2200      	movs	r2, #0
 8003414:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003416:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003418:	d12b      	bne.n	8003472 <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 800341a:	f7fe fa19 	bl	8001850 <HAL_GetTick>
 800341e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003420:	682b      	ldr	r3, [r5, #0]
 8003422:	0199      	lsls	r1, r3, #6
 8003424:	d41f      	bmi.n	8003466 <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003426:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800342a:	4313      	orrs	r3, r2
 800342c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800342e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003432:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003434:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003438:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800343a:	0852      	lsrs	r2, r2, #1
 800343c:	3a01      	subs	r2, #1
 800343e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003442:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003444:	4b27      	ldr	r3, [pc, #156]	; (80034e4 <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003446:	4d26      	ldr	r5, [pc, #152]	; (80034e0 <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 8003448:	2201      	movs	r2, #1
 800344a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800344c:	f7fe fa00 	bl	8001850 <HAL_GetTick>
 8003450:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003452:	682b      	ldr	r3, [r5, #0]
 8003454:	019a      	lsls	r2, r3, #6
 8003456:	f53f aead 	bmi.w	80031b4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800345a:	f7fe f9f9 	bl	8001850 <HAL_GetTick>
 800345e:	1b00      	subs	r0, r0, r4
 8003460:	2802      	cmp	r0, #2
 8003462:	d9f6      	bls.n	8003452 <HAL_RCC_OscConfig+0x2ca>
 8003464:	e6d3      	b.n	800320e <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003466:	f7fe f9f3 	bl	8001850 <HAL_GetTick>
 800346a:	1b80      	subs	r0, r0, r6
 800346c:	2802      	cmp	r0, #2
 800346e:	d9d7      	bls.n	8003420 <HAL_RCC_OscConfig+0x298>
 8003470:	e6cd      	b.n	800320e <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8003472:	f7fe f9ed 	bl	8001850 <HAL_GetTick>
 8003476:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003478:	682b      	ldr	r3, [r5, #0]
 800347a:	019b      	lsls	r3, r3, #6
 800347c:	f57f ae9a 	bpl.w	80031b4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003480:	f7fe f9e6 	bl	8001850 <HAL_GetTick>
 8003484:	1b00      	subs	r0, r0, r4
 8003486:	2802      	cmp	r0, #2
 8003488:	d9f6      	bls.n	8003478 <HAL_RCC_OscConfig+0x2f0>
 800348a:	e6c0      	b.n	800320e <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800348c:	2801      	cmp	r0, #1
 800348e:	f43f aebf 	beq.w	8003210 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8003492:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003494:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003496:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800349a:	4291      	cmp	r1, r2
 800349c:	f47f aea1 	bne.w	80031e2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a0:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a6:	428a      	cmp	r2, r1
 80034a8:	f47f ae9b 	bne.w	80031e2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034ae:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80034b2:	401a      	ands	r2, r3
 80034b4:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80034b8:	f47f ae93 	bne.w	80031e2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80034be:	0852      	lsrs	r2, r2, #1
 80034c0:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80034c4:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034c6:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80034ca:	f47f ae8a 	bne.w	80031e2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80034d0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034d4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80034d8:	f43f ae6c 	beq.w	80031b4 <HAL_RCC_OscConfig+0x2c>
 80034dc:	e681      	b.n	80031e2 <HAL_RCC_OscConfig+0x5a>
 80034de:	bf00      	nop
 80034e0:	40023800 	.word	0x40023800
 80034e4:	42470000 	.word	0x42470000

080034e8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034e8:	4913      	ldr	r1, [pc, #76]	; (8003538 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80034ea:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034ec:	688b      	ldr	r3, [r1, #8]
 80034ee:	f003 030c 	and.w	r3, r3, #12
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d01c      	beq.n	8003530 <HAL_RCC_GetSysClockFreq+0x48>
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d11c      	bne.n	8003534 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034fa:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034fc:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034fe:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003500:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003504:	bf14      	ite	ne
 8003506:	480d      	ldrne	r0, [pc, #52]	; (800353c <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003508:	480d      	ldreq	r0, [pc, #52]	; (8003540 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800350a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800350e:	bf18      	it	ne
 8003510:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003512:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003516:	fba1 0100 	umull	r0, r1, r1, r0
 800351a:	f7fc fe55 	bl	80001c8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800351e:	4b06      	ldr	r3, [pc, #24]	; (8003538 <HAL_RCC_GetSysClockFreq+0x50>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003526:	3301      	adds	r3, #1
 8003528:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800352a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800352e:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003530:	4802      	ldr	r0, [pc, #8]	; (800353c <HAL_RCC_GetSysClockFreq+0x54>)
 8003532:	e7fc      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8003534:	4802      	ldr	r0, [pc, #8]	; (8003540 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8003536:	e7fa      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x46>
 8003538:	40023800 	.word	0x40023800
 800353c:	007a1200 	.word	0x007a1200
 8003540:	00f42400 	.word	0x00f42400

08003544 <HAL_RCC_ClockConfig>:
{
 8003544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003548:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800354a:	4604      	mov	r4, r0
 800354c:	b910      	cbnz	r0, 8003554 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800354e:	2001      	movs	r0, #1
}
 8003550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003554:	4b44      	ldr	r3, [pc, #272]	; (8003668 <HAL_RCC_ClockConfig+0x124>)
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	f002 0207 	and.w	r2, r2, #7
 800355c:	428a      	cmp	r2, r1
 800355e:	d328      	bcc.n	80035b2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003560:	6822      	ldr	r2, [r4, #0]
 8003562:	0797      	lsls	r7, r2, #30
 8003564:	d42d      	bmi.n	80035c2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003566:	07d0      	lsls	r0, r2, #31
 8003568:	d441      	bmi.n	80035ee <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800356a:	4b3f      	ldr	r3, [pc, #252]	; (8003668 <HAL_RCC_ClockConfig+0x124>)
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	f002 0207 	and.w	r2, r2, #7
 8003572:	42aa      	cmp	r2, r5
 8003574:	d866      	bhi.n	8003644 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003576:	6822      	ldr	r2, [r4, #0]
 8003578:	0751      	lsls	r1, r2, #29
 800357a:	d46c      	bmi.n	8003656 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800357c:	0713      	lsls	r3, r2, #28
 800357e:	d507      	bpl.n	8003590 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003580:	4a3a      	ldr	r2, [pc, #232]	; (800366c <HAL_RCC_ClockConfig+0x128>)
 8003582:	6921      	ldr	r1, [r4, #16]
 8003584:	6893      	ldr	r3, [r2, #8]
 8003586:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800358a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800358e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003590:	f7ff ffaa 	bl	80034e8 <HAL_RCC_GetSysClockFreq>
 8003594:	4b35      	ldr	r3, [pc, #212]	; (800366c <HAL_RCC_ClockConfig+0x128>)
 8003596:	4a36      	ldr	r2, [pc, #216]	; (8003670 <HAL_RCC_ClockConfig+0x12c>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800359e:	5cd3      	ldrb	r3, [r2, r3]
 80035a0:	40d8      	lsrs	r0, r3
 80035a2:	4b34      	ldr	r3, [pc, #208]	; (8003674 <HAL_RCC_ClockConfig+0x130>)
 80035a4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80035a6:	4b34      	ldr	r3, [pc, #208]	; (8003678 <HAL_RCC_ClockConfig+0x134>)
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	f7fe f90d 	bl	80017c8 <HAL_InitTick>
  return HAL_OK;
 80035ae:	2000      	movs	r0, #0
 80035b0:	e7ce      	b.n	8003550 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b2:	b2ca      	uxtb	r2, r1
 80035b4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	428b      	cmp	r3, r1
 80035be:	d1c6      	bne.n	800354e <HAL_RCC_ClockConfig+0xa>
 80035c0:	e7ce      	b.n	8003560 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c2:	4b2a      	ldr	r3, [pc, #168]	; (800366c <HAL_RCC_ClockConfig+0x128>)
 80035c4:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035c8:	bf1e      	ittt	ne
 80035ca:	6899      	ldrne	r1, [r3, #8]
 80035cc:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 80035d0:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d2:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035d4:	bf42      	ittt	mi
 80035d6:	6899      	ldrmi	r1, [r3, #8]
 80035d8:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 80035dc:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035de:	4923      	ldr	r1, [pc, #140]	; (800366c <HAL_RCC_ClockConfig+0x128>)
 80035e0:	68a0      	ldr	r0, [r4, #8]
 80035e2:	688b      	ldr	r3, [r1, #8]
 80035e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035e8:	4303      	orrs	r3, r0
 80035ea:	608b      	str	r3, [r1, #8]
 80035ec:	e7bb      	b.n	8003566 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ee:	6862      	ldr	r2, [r4, #4]
 80035f0:	4b1e      	ldr	r3, [pc, #120]	; (800366c <HAL_RCC_ClockConfig+0x128>)
 80035f2:	2a01      	cmp	r2, #1
 80035f4:	d11c      	bne.n	8003630 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fc:	d0a7      	beq.n	800354e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035fe:	4e1b      	ldr	r6, [pc, #108]	; (800366c <HAL_RCC_ClockConfig+0x128>)
 8003600:	68b3      	ldr	r3, [r6, #8]
 8003602:	f023 0303 	bic.w	r3, r3, #3
 8003606:	4313      	orrs	r3, r2
 8003608:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800360a:	f7fe f921 	bl	8001850 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800360e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003612:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003614:	68b3      	ldr	r3, [r6, #8]
 8003616:	6862      	ldr	r2, [r4, #4]
 8003618:	f003 030c 	and.w	r3, r3, #12
 800361c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003620:	d0a3      	beq.n	800356a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003622:	f7fe f915 	bl	8001850 <HAL_GetTick>
 8003626:	1bc0      	subs	r0, r0, r7
 8003628:	4540      	cmp	r0, r8
 800362a:	d9f3      	bls.n	8003614 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 800362c:	2003      	movs	r0, #3
 800362e:	e78f      	b.n	8003550 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003630:	1e91      	subs	r1, r2, #2
 8003632:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003634:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003636:	d802      	bhi.n	800363e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003638:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800363c:	e7de      	b.n	80035fc <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363e:	f013 0f02 	tst.w	r3, #2
 8003642:	e7db      	b.n	80035fc <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003644:	b2ea      	uxtb	r2, r5
 8003646:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	42ab      	cmp	r3, r5
 8003650:	f47f af7d 	bne.w	800354e <HAL_RCC_ClockConfig+0xa>
 8003654:	e78f      	b.n	8003576 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003656:	4905      	ldr	r1, [pc, #20]	; (800366c <HAL_RCC_ClockConfig+0x128>)
 8003658:	68e0      	ldr	r0, [r4, #12]
 800365a:	688b      	ldr	r3, [r1, #8]
 800365c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003660:	4303      	orrs	r3, r0
 8003662:	608b      	str	r3, [r1, #8]
 8003664:	e78a      	b.n	800357c <HAL_RCC_ClockConfig+0x38>
 8003666:	bf00      	nop
 8003668:	40023c00 	.word	0x40023c00
 800366c:	40023800 	.word	0x40023800
 8003670:	080069fc 	.word	0x080069fc
 8003674:	200000b8 	.word	0x200000b8
 8003678:	200000c0 	.word	0x200000c0

0800367c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800367c:	4b04      	ldr	r3, [pc, #16]	; (8003690 <HAL_RCC_GetPCLK1Freq+0x14>)
 800367e:	4a05      	ldr	r2, [pc, #20]	; (8003694 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003686:	5cd3      	ldrb	r3, [r2, r3]
 8003688:	4a03      	ldr	r2, [pc, #12]	; (8003698 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800368a:	6810      	ldr	r0, [r2, #0]
}
 800368c:	40d8      	lsrs	r0, r3
 800368e:	4770      	bx	lr
 8003690:	40023800 	.word	0x40023800
 8003694:	08006a0c 	.word	0x08006a0c
 8003698:	200000b8 	.word	0x200000b8

0800369c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800369c:	6803      	ldr	r3, [r0, #0]
 800369e:	f013 0f05 	tst.w	r3, #5
{
 80036a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036a4:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80036a6:	d105      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036a8:	6823      	ldr	r3, [r4, #0]
 80036aa:	f013 0302 	ands.w	r3, r3, #2
 80036ae:	d12a      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x6a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80036b0:	2000      	movs	r0, #0
 80036b2:	e026      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x66>
    __HAL_RCC_PLLI2S_DISABLE();
 80036b4:	4b42      	ldr	r3, [pc, #264]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036b6:	4e43      	ldr	r6, [pc, #268]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PLLI2S_DISABLE();
 80036b8:	2200      	movs	r2, #0
 80036ba:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 80036bc:	f7fe f8c8 	bl	8001850 <HAL_GetTick>
 80036c0:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036c2:	6833      	ldr	r3, [r6, #0]
 80036c4:	011f      	lsls	r7, r3, #4
 80036c6:	d416      	bmi.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80036c8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80036cc:	071b      	lsls	r3, r3, #28
 80036ce:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80036d2:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80036d6:	4b3a      	ldr	r3, [pc, #232]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036d8:	4e3a      	ldr	r6, [pc, #232]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PLLI2S_ENABLE();
 80036da:	2201      	movs	r2, #1
 80036dc:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 80036de:	f7fe f8b7 	bl	8001850 <HAL_GetTick>
 80036e2:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036e4:	6833      	ldr	r3, [r6, #0]
 80036e6:	0118      	lsls	r0, r3, #4
 80036e8:	d4de      	bmi.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80036ea:	f7fe f8b1 	bl	8001850 <HAL_GetTick>
 80036ee:	1b40      	subs	r0, r0, r5
 80036f0:	2802      	cmp	r0, #2
 80036f2:	d9f7      	bls.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
 80036f4:	e004      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x64>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80036f6:	f7fe f8ab 	bl	8001850 <HAL_GetTick>
 80036fa:	1b40      	subs	r0, r0, r5
 80036fc:	2802      	cmp	r0, #2
 80036fe:	d9e0      	bls.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 8003700:	2003      	movs	r0, #3
}
 8003702:	b003      	add	sp, #12
 8003704:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	9301      	str	r3, [sp, #4]
 800370a:	4b2e      	ldr	r3, [pc, #184]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    PWR->CR |= PWR_CR_DBP;
 800370c:	4d2e      	ldr	r5, [pc, #184]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800370e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003710:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003714:	641a      	str	r2, [r3, #64]	; 0x40
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371c:	9301      	str	r3, [sp, #4]
 800371e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8003720:	682b      	ldr	r3, [r5, #0]
 8003722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003726:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003728:	f7fe f892 	bl	8001850 <HAL_GetTick>
 800372c:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800372e:	682b      	ldr	r3, [r5, #0]
 8003730:	05d9      	lsls	r1, r3, #23
 8003732:	d51a      	bpl.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xce>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003734:	4d23      	ldr	r5, [pc, #140]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8003736:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003738:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800373c:	d11b      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0xda>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800373e:	68e3      	ldr	r3, [r4, #12]
 8003740:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003744:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003748:	4a1e      	ldr	r2, [pc, #120]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 800374a:	d135      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800374c:	6891      	ldr	r1, [r2, #8]
 800374e:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8003752:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8003756:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800375a:	4301      	orrs	r1, r0
 800375c:	6091      	str	r1, [r2, #8]
 800375e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003764:	430b      	orrs	r3, r1
 8003766:	6713      	str	r3, [r2, #112]	; 0x70
 8003768:	e7a2      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800376a:	f7fe f871 	bl	8001850 <HAL_GetTick>
 800376e:	1b80      	subs	r0, r0, r6
 8003770:	2802      	cmp	r0, #2
 8003772:	d9dc      	bls.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x92>
 8003774:	e7c4      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x64>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003776:	68e2      	ldr	r2, [r4, #12]
 8003778:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800377c:	4293      	cmp	r3, r2
 800377e:	d0de      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xa2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003780:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8003782:	4a0f      	ldr	r2, [pc, #60]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8003784:	2101      	movs	r1, #1
 8003786:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800378a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800378e:	2100      	movs	r1, #0
 8003790:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 8003794:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003796:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003798:	07da      	lsls	r2, r3, #31
 800379a:	d5d0      	bpl.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xa2>
        tickstart = HAL_GetTick();
 800379c:	f7fe f858 	bl	8001850 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037a0:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80037a4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80037a8:	079b      	lsls	r3, r3, #30
 80037aa:	d4c8      	bmi.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037ac:	f7fe f850 	bl	8001850 <HAL_GetTick>
 80037b0:	1b80      	subs	r0, r0, r6
 80037b2:	42b8      	cmp	r0, r7
 80037b4:	d9f7      	bls.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 80037b6:	e7a3      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x64>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037b8:	6891      	ldr	r1, [r2, #8]
 80037ba:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80037be:	e7cd      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80037c0:	42470000 	.word	0x42470000
 80037c4:	40023800 	.word	0x40023800
 80037c8:	40007000 	.word	0x40007000

080037cc <HAL_RCCEx_GetPeriphCLKConfig>:

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80037cc:	4a0a      	ldr	r2, [pc, #40]	; (80037f8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c>)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 80037ce:	2303      	movs	r3, #3
 80037d0:	6003      	str	r3, [r0, #0]
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80037d2:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 80037d6:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80037da:	6043      	str	r3, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037dc:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 80037e0:	f3c3 7302 	ubfx	r3, r3, #28, #3
 80037e4:	6083      	str	r3, [r0, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80037e6:	6891      	ldr	r1, [r2, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80037e8:	6f13      	ldr	r3, [r2, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80037ea:	f401 12f8 	and.w	r2, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80037ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60c3      	str	r3, [r0, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 80037f6:	4770      	bx	lr
 80037f8:	40023800 	.word	0x40023800

080037fc <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 80037fc:	2801      	cmp	r0, #1
 80037fe:	d11a      	bne.n	8003836 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003800:	4b0e      	ldr	r3, [pc, #56]	; (800383c <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8003802:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8003804:	0211      	lsls	r1, r2, #8
 8003806:	d416      	bmi.n	8003836 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003808:	685a      	ldr	r2, [r3, #4]
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800380a:	685b      	ldr	r3, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800380c:	0252      	lsls	r2, r2, #9
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800380e:	4a0b      	ldr	r2, [pc, #44]	; (800383c <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003810:	bf4c      	ite	mi
 8003812:	480b      	ldrmi	r0, [pc, #44]	; (8003840 <HAL_RCCEx_GetPeriphCLKFreq+0x44>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003814:	480b      	ldrpl	r0, [pc, #44]	; (8003844 <HAL_RCCEx_GetPeriphCLKFreq+0x48>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003816:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800381a:	fbb0 f3f3 	udiv	r3, r0, r3
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800381e:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003822:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003826:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800382a:	4358      	muls	r0, r3
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800382c:	f3c2 7302 	ubfx	r3, r2, #28, #3
 8003830:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 8003834:	4770      	bx	lr
 8003836:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	40023800 	.word	0x40023800
 8003840:	007a1200 	.word	0x007a1200
 8003844:	00f42400 	.word	0x00f42400

08003848 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003848:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800384c:	461f      	mov	r7, r3
 800384e:	4689      	mov	r9, r1
 8003850:	4690      	mov	r8, r2
 8003852:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003854:	f7fd fffc 	bl	8001850 <HAL_GetTick>
 8003858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800385a:	443b      	add	r3, r7
 800385c:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 800385e:	f7fd fff7 	bl	8001850 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003862:	4b26      	ldr	r3, [pc, #152]	; (80038fc <SPI_WaitFlagStateUntilTimeout+0xb4>)
 8003864:	681e      	ldr	r6, [r3, #0]
 8003866:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 800386a:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 800386c:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800386e:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003870:	6822      	ldr	r2, [r4, #0]
 8003872:	6893      	ldr	r3, [r2, #8]
 8003874:	ea39 0303 	bics.w	r3, r9, r3
 8003878:	bf0c      	ite	eq
 800387a:	2301      	moveq	r3, #1
 800387c:	2300      	movne	r3, #0
 800387e:	4543      	cmp	r3, r8
 8003880:	d101      	bne.n	8003886 <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 8003882:	2000      	movs	r0, #0
 8003884:	e02e      	b.n	80038e4 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 8003886:	1c7b      	adds	r3, r7, #1
 8003888:	d0f3      	beq.n	8003872 <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800388a:	f7fd ffe1 	bl	8001850 <HAL_GetTick>
 800388e:	eba0 000a 	sub.w	r0, r0, sl
 8003892:	42a8      	cmp	r0, r5
 8003894:	d329      	bcc.n	80038ea <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800389e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038a0:	6862      	ldr	r2, [r4, #4]
 80038a2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80038a6:	d10a      	bne.n	80038be <SPI_WaitFlagStateUntilTimeout+0x76>
 80038a8:	68a2      	ldr	r2, [r4, #8]
 80038aa:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80038ae:	d002      	beq.n	80038b6 <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038b0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80038b4:	d103      	bne.n	80038be <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038bc:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038be:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80038c0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80038c4:	d107      	bne.n	80038d6 <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038d4:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80038d6:	2301      	movs	r3, #1
 80038d8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80038dc:	2300      	movs	r3, #0
 80038de:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_TIMEOUT;
 80038e2:	2003      	movs	r0, #3
}
 80038e4:	b002      	add	sp, #8
 80038e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (count == 0U)
 80038ea:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80038ec:	2b00      	cmp	r3, #0
      count--;
 80038ee:	9b01      	ldr	r3, [sp, #4]
 80038f0:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80038f4:	bf08      	it	eq
 80038f6:	2500      	moveq	r5, #0
      count--;
 80038f8:	9301      	str	r3, [sp, #4]
 80038fa:	e7b9      	b.n	8003870 <SPI_WaitFlagStateUntilTimeout+0x28>
 80038fc:	200000b8 	.word	0x200000b8

08003900 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003900:	b530      	push	{r4, r5, lr}
 8003902:	460b      	mov	r3, r1
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003904:	4913      	ldr	r1, [pc, #76]	; (8003954 <SPI_EndRxTxTransaction+0x54>)
 8003906:	680d      	ldr	r5, [r1, #0]
 8003908:	4913      	ldr	r1, [pc, #76]	; (8003958 <SPI_EndRxTxTransaction+0x58>)
 800390a:	fbb5 f5f1 	udiv	r5, r5, r1
 800390e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003912:	434d      	muls	r5, r1
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003914:	6841      	ldr	r1, [r0, #4]
{
 8003916:	b085      	sub	sp, #20
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003918:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
{
 800391c:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800391e:	9503      	str	r5, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003920:	d10c      	bne.n	800393c <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003922:	9200      	str	r2, [sp, #0]
 8003924:	2180      	movs	r1, #128	; 0x80
 8003926:	2200      	movs	r2, #0
 8003928:	f7ff ff8e 	bl	8003848 <SPI_WaitFlagStateUntilTimeout>
 800392c:	b178      	cbz	r0, 800394e <SPI_EndRxTxTransaction+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800392e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003930:	f043 0320 	orr.w	r3, r3, #32
 8003934:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8003936:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8003938:	b005      	add	sp, #20
 800393a:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 800393c:	9b03      	ldr	r3, [sp, #12]
 800393e:	b133      	cbz	r3, 800394e <SPI_EndRxTxTransaction+0x4e>
      count--;
 8003940:	9b03      	ldr	r3, [sp, #12]
 8003942:	3b01      	subs	r3, #1
 8003944:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003946:	6823      	ldr	r3, [r4, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	061b      	lsls	r3, r3, #24
 800394c:	d4f6      	bmi.n	800393c <SPI_EndRxTxTransaction+0x3c>
  return HAL_OK;
 800394e:	2000      	movs	r0, #0
 8003950:	e7f2      	b.n	8003938 <SPI_EndRxTxTransaction+0x38>
 8003952:	bf00      	nop
 8003954:	200000b8 	.word	0x200000b8
 8003958:	016e3600 	.word	0x016e3600

0800395c <HAL_SPI_MspInit>:
}
 800395c:	4770      	bx	lr

0800395e <HAL_SPI_Init>:
{
 800395e:	b538      	push	{r3, r4, r5, lr}
  if (hspi == NULL)
 8003960:	4604      	mov	r4, r0
 8003962:	2800      	cmp	r0, #0
 8003964:	d05a      	beq.n	8003a1c <HAL_SPI_Init+0xbe>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003966:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003968:	2b00      	cmp	r3, #0
 800396a:	d153      	bne.n	8003a14 <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800396c:	6842      	ldr	r2, [r0, #4]
 800396e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003972:	d000      	beq.n	8003976 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003974:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003976:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800397a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800397e:	b923      	cbnz	r3, 800398a <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 8003980:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8003984:	4620      	mov	r0, r4
 8003986:	f7ff ffe9 	bl	800395c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800398a:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800398c:	68a5      	ldr	r5, [r4, #8]
 800398e:	69a2      	ldr	r2, [r4, #24]
 8003990:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hspi->State = HAL_SPI_STATE_BUSY;
 8003992:	2302      	movs	r3, #2
 8003994:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003998:	680b      	ldr	r3, [r1, #0]
 800399a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800399e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039a0:	6863      	ldr	r3, [r4, #4]
 80039a2:	f405 4504 	and.w	r5, r5, #33792	; 0x8400
 80039a6:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80039aa:	432b      	orrs	r3, r5
 80039ac:	68e5      	ldr	r5, [r4, #12]
 80039ae:	f405 6500 	and.w	r5, r5, #2048	; 0x800
 80039b2:	432b      	orrs	r3, r5
 80039b4:	6925      	ldr	r5, [r4, #16]
 80039b6:	f005 0502 	and.w	r5, r5, #2
 80039ba:	432b      	orrs	r3, r5
 80039bc:	6965      	ldr	r5, [r4, #20]
 80039be:	f005 0501 	and.w	r5, r5, #1
 80039c2:	432b      	orrs	r3, r5
 80039c4:	f402 7500 	and.w	r5, r2, #512	; 0x200
 80039c8:	432b      	orrs	r3, r5
 80039ca:	69e5      	ldr	r5, [r4, #28]
 80039cc:	f005 0538 	and.w	r5, r5, #56	; 0x38
 80039d0:	432b      	orrs	r3, r5
 80039d2:	6a25      	ldr	r5, [r4, #32]
 80039d4:	f005 0580 	and.w	r5, r5, #128	; 0x80
 80039d8:	432b      	orrs	r3, r5
 80039da:	f400 5500 	and.w	r5, r0, #8192	; 0x2000
 80039de:	432b      	orrs	r3, r5
 80039e0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80039e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039e4:	0c12      	lsrs	r2, r2, #16
 80039e6:	f003 0310 	and.w	r3, r3, #16
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039ea:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80039ee:	f002 0204 	and.w	r2, r2, #4
 80039f2:	ea42 0203 	orr.w	r2, r2, r3
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80039f6:	bf08      	it	eq
 80039f8:	8da3      	ldrheq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80039fa:	604a      	str	r2, [r1, #4]
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80039fc:	bf08      	it	eq
 80039fe:	610b      	streq	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a00:	69cb      	ldr	r3, [r1, #28]
 8003a02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a06:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a08:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8003a0a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a0c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a0e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8003a12:	bd38      	pop	{r3, r4, r5, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a14:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a1a:	e7ac      	b.n	8003976 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8003a1c:	2001      	movs	r0, #1
 8003a1e:	e7f8      	b.n	8003a12 <HAL_SPI_Init+0xb4>

08003a20 <HAL_SPI_MspDeInit>:
 8003a20:	4770      	bx	lr

08003a22 <HAL_SPI_DeInit>:
{
 8003a22:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8003a24:	4604      	mov	r4, r0
 8003a26:	b180      	cbz	r0, 8003a4a <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 8003a28:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003a30:	6813      	ldr	r3, [r2, #0]
 8003a32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a36:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8003a38:	f7ff fff2 	bl	8003a20 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a3c:	2000      	movs	r0, #0
 8003a3e:	6560      	str	r0, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 8003a40:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hspi->State = HAL_SPI_STATE_RESET;
 8003a44:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
}
 8003a48:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003a4a:	2001      	movs	r0, #1
 8003a4c:	e7fc      	b.n	8003a48 <HAL_SPI_DeInit+0x26>

08003a4e <HAL_SPI_TransmitReceive>:
{
 8003a4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a52:	b085      	sub	sp, #20
 8003a54:	4699      	mov	r9, r3
  __IO uint32_t tmpreg = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	9302      	str	r3, [sp, #8]
  __HAL_LOCK(hspi);
 8003a5a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8003a5e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8003a60:	2b01      	cmp	r3, #1
{
 8003a62:	4604      	mov	r4, r0
 8003a64:	4688      	mov	r8, r1
 8003a66:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
 8003a68:	f000 813a 	beq.w	8003ce0 <HAL_SPI_TransmitReceive+0x292>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8003a72:	f7fd feed 	bl	8001850 <HAL_GetTick>
  tmp_state           = hspi->State;
 8003a76:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8003a7a:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a7c:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 8003a7e:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 8003a80:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a82:	d00a      	beq.n	8003a9a <HAL_SPI_TransmitReceive+0x4c>
 8003a84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a88:	f040 8128 	bne.w	8003cdc <HAL_SPI_TransmitReceive+0x28e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a8c:	68a2      	ldr	r2, [r4, #8]
 8003a8e:	2a00      	cmp	r2, #0
 8003a90:	f040 8124 	bne.w	8003cdc <HAL_SPI_TransmitReceive+0x28e>
 8003a94:	2904      	cmp	r1, #4
 8003a96:	f040 8121 	bne.w	8003cdc <HAL_SPI_TransmitReceive+0x28e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a9a:	f1b8 0f00 	cmp.w	r8, #0
 8003a9e:	f000 810f 	beq.w	8003cc0 <HAL_SPI_TransmitReceive+0x272>
 8003aa2:	2d00      	cmp	r5, #0
 8003aa4:	f000 810c 	beq.w	8003cc0 <HAL_SPI_TransmitReceive+0x272>
 8003aa8:	f1b9 0f00 	cmp.w	r9, #0
 8003aac:	f000 8108 	beq.w	8003cc0 <HAL_SPI_TransmitReceive+0x272>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ab0:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ab4:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ab6:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ab8:	bf1c      	itt	ne
 8003aba:	2205      	movne	r2, #5
 8003abc:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8003ac4:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ac8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hspi->RxXferCount = Size;
 8003aca:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ace:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    SPI_RESET_CRC(hspi);
 8003ad2:	6825      	ldr	r5, [r4, #0]
  hspi->RxXferSize  = Size;
 8003ad4:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ad8:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003adc:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ae0:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ae4:	d107      	bne.n	8003af6 <HAL_SPI_TransmitReceive+0xa8>
    SPI_RESET_CRC(hspi);
 8003ae6:	682a      	ldr	r2, [r5, #0]
 8003ae8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aec:	602a      	str	r2, [r5, #0]
 8003aee:	682a      	ldr	r2, [r5, #0]
 8003af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003af4:	602a      	str	r2, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003af6:	682a      	ldr	r2, [r5, #0]
 8003af8:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8003afa:	bf5e      	ittt	pl
 8003afc:	682a      	ldrpl	r2, [r5, #0]
 8003afe:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8003b02:	602a      	strpl	r2, [r5, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b04:	68e2      	ldr	r2, [r4, #12]
 8003b06:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003b0a:	d169      	bne.n	8003be0 <HAL_SPI_TransmitReceive+0x192>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b0c:	b113      	cbz	r3, 8003b14 <HAL_SPI_TransmitReceive+0xc6>
 8003b0e:	f1b9 0f01 	cmp.w	r9, #1
 8003b12:	d108      	bne.n	8003b26 <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b14:	4641      	mov	r1, r8
 8003b16:	f831 3b02 	ldrh.w	r3, [r1], #2
 8003b1a:	60eb      	str	r3, [r5, #12]
      hspi->TxXferCount--;
 8003b1c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b1e:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003b20:	3b01      	subs	r3, #1
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8003b26:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b28:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	b9b3      	cbnz	r3, 8003b5c <HAL_SPI_TransmitReceive+0x10e>
 8003b2e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	b99b      	cbnz	r3, 8003b5c <HAL_SPI_TransmitReceive+0x10e>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b3a:	f040 80ac 	bne.w	8003c96 <HAL_SPI_TransmitReceive+0x248>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	9700      	str	r7, [sp, #0]
 8003b42:	4633      	mov	r3, r6
 8003b44:	4611      	mov	r1, r2
 8003b46:	4620      	mov	r0, r4
 8003b48:	f7ff fe7e 	bl	8003848 <SPI_WaitFlagStateUntilTimeout>
 8003b4c:	2800      	cmp	r0, #0
 8003b4e:	f000 809e 	beq.w	8003c8e <HAL_SPI_TransmitReceive+0x240>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003b52:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b54:	f043 0302 	orr.w	r3, r3, #2
 8003b58:	6563      	str	r3, [r4, #84]	; 0x54
 8003b5a:	e020      	b.n	8003b9e <HAL_SPI_TransmitReceive+0x150>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b5c:	6822      	ldr	r2, [r4, #0]
 8003b5e:	6893      	ldr	r3, [r2, #8]
 8003b60:	079b      	lsls	r3, r3, #30
 8003b62:	d504      	bpl.n	8003b6e <HAL_SPI_TransmitReceive+0x120>
 8003b64:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	b10b      	cbz	r3, 8003b6e <HAL_SPI_TransmitReceive+0x120>
 8003b6a:	bb1d      	cbnz	r5, 8003bb4 <HAL_SPI_TransmitReceive+0x166>
{
 8003b6c:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b6e:	6891      	ldr	r1, [r2, #8]
 8003b70:	f011 0101 	ands.w	r1, r1, #1
 8003b74:	d00c      	beq.n	8003b90 <HAL_SPI_TransmitReceive+0x142>
 8003b76:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	b14b      	cbz	r3, 8003b90 <HAL_SPI_TransmitReceive+0x142>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b7e:	68d2      	ldr	r2, [r2, #12]
 8003b80:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b84:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003b86:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003b8e:	460d      	mov	r5, r1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b90:	f7fd fe5e 	bl	8001850 <HAL_GetTick>
 8003b94:	1bc0      	subs	r0, r0, r7
 8003b96:	42b0      	cmp	r0, r6
 8003b98:	d3c6      	bcc.n	8003b28 <HAL_SPI_TransmitReceive+0xda>
 8003b9a:	1c70      	adds	r0, r6, #1
 8003b9c:	d0c4      	beq.n	8003b28 <HAL_SPI_TransmitReceive+0xda>
      errorcode = HAL_TIMEOUT;
 8003b9e:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003bac:	4628      	mov	r0, r5
 8003bae:	b005      	add	sp, #20
 8003bb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bb4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003bb6:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003bba:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bbc:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003bbe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003bc6:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8003bc8:	b2ad      	uxth	r5, r5
 8003bca:	2d00      	cmp	r5, #0
 8003bcc:	d1ce      	bne.n	8003b6c <HAL_SPI_TransmitReceive+0x11e>
 8003bce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bd4:	d1ca      	bne.n	8003b6c <HAL_SPI_TransmitReceive+0x11e>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003bd6:	6813      	ldr	r3, [r2, #0]
 8003bd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	e7c6      	b.n	8003b6e <HAL_SPI_TransmitReceive+0x120>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003be0:	b113      	cbz	r3, 8003be8 <HAL_SPI_TransmitReceive+0x19a>
 8003be2:	f1b9 0f01 	cmp.w	r9, #1
 8003be6:	d109      	bne.n	8003bfc <HAL_SPI_TransmitReceive+0x1ae>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003be8:	f898 3000 	ldrb.w	r3, [r8]
 8003bec:	732b      	strb	r3, [r5, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003bf4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8003bfc:	2501      	movs	r5, #1
 8003bfe:	e022      	b.n	8003c46 <HAL_SPI_TransmitReceive+0x1f8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c00:	6822      	ldr	r2, [r4, #0]
 8003c02:	6893      	ldr	r3, [r2, #8]
 8003c04:	0799      	lsls	r1, r3, #30
 8003c06:	d504      	bpl.n	8003c12 <HAL_SPI_TransmitReceive+0x1c4>
 8003c08:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	b10b      	cbz	r3, 8003c12 <HAL_SPI_TransmitReceive+0x1c4>
 8003c0e:	bb1d      	cbnz	r5, 8003c58 <HAL_SPI_TransmitReceive+0x20a>
        txallowed = 1U;
 8003c10:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c12:	6822      	ldr	r2, [r4, #0]
 8003c14:	6891      	ldr	r1, [r2, #8]
 8003c16:	f011 0101 	ands.w	r1, r1, #1
 8003c1a:	d00d      	beq.n	8003c38 <HAL_SPI_TransmitReceive+0x1ea>
 8003c1c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	b153      	cbz	r3, 8003c38 <HAL_SPI_TransmitReceive+0x1ea>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c24:	68d2      	ldr	r2, [r2, #12]
 8003c26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003c2e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003c36:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c38:	f7fd fe0a 	bl	8001850 <HAL_GetTick>
 8003c3c:	1bc0      	subs	r0, r0, r7
 8003c3e:	42b0      	cmp	r0, r6
 8003c40:	d322      	bcc.n	8003c88 <HAL_SPI_TransmitReceive+0x23a>
 8003c42:	1c73      	adds	r3, r6, #1
 8003c44:	d1ab      	bne.n	8003b9e <HAL_SPI_TransmitReceive+0x150>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c46:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1d8      	bne.n	8003c00 <HAL_SPI_TransmitReceive+0x1b2>
 8003c4e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1d4      	bne.n	8003c00 <HAL_SPI_TransmitReceive+0x1b2>
 8003c56:	e76d      	b.n	8003b34 <HAL_SPI_TransmitReceive+0xe6>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8003c5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c60:	3301      	adds	r3, #1
 8003c62:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003c64:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003c6c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8003c6e:	b2ad      	uxth	r5, r5
 8003c70:	2d00      	cmp	r5, #0
 8003c72:	d1cd      	bne.n	8003c10 <HAL_SPI_TransmitReceive+0x1c2>
 8003c74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c7a:	d1c9      	bne.n	8003c10 <HAL_SPI_TransmitReceive+0x1c2>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003c7c:	6822      	ldr	r2, [r4, #0]
 8003c7e:	6813      	ldr	r3, [r2, #0]
 8003c80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	e7c4      	b.n	8003c12 <HAL_SPI_TransmitReceive+0x1c4>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c88:	2e00      	cmp	r6, #0
 8003c8a:	d1dc      	bne.n	8003c46 <HAL_SPI_TransmitReceive+0x1f8>
 8003c8c:	e787      	b.n	8003b9e <HAL_SPI_TransmitReceive+0x150>
    tmpreg = READ_REG(hspi->Instance->DR);
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	9302      	str	r3, [sp, #8]
    UNUSED(tmpreg);
 8003c94:	9b02      	ldr	r3, [sp, #8]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8003c96:	6822      	ldr	r2, [r4, #0]
 8003c98:	6895      	ldr	r5, [r2, #8]
 8003c9a:	f015 0510 	ands.w	r5, r5, #16
 8003c9e:	d007      	beq.n	8003cb0 <HAL_SPI_TransmitReceive+0x262>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003ca0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003ca2:	f043 0302 	orr.w	r3, r3, #2
 8003ca6:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003ca8:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003cac:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 8003cae:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cb0:	463a      	mov	r2, r7
 8003cb2:	4631      	mov	r1, r6
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	f7ff fe23 	bl	8003900 <SPI_EndRxTxTransaction>
 8003cba:	b118      	cbz	r0, 8003cc4 <HAL_SPI_TransmitReceive+0x276>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cbc:	2320      	movs	r3, #32
 8003cbe:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003cc0:	2501      	movs	r5, #1
 8003cc2:	e76d      	b.n	8003ba0 <HAL_SPI_TransmitReceive+0x152>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cc4:	68a3      	ldr	r3, [r4, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f47f af6a 	bne.w	8003ba0 <HAL_SPI_TransmitReceive+0x152>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ccc:	9303      	str	r3, [sp, #12]
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	9203      	str	r2, [sp, #12]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	9303      	str	r3, [sp, #12]
 8003cd8:	9b03      	ldr	r3, [sp, #12]
 8003cda:	e761      	b.n	8003ba0 <HAL_SPI_TransmitReceive+0x152>
    errorcode = HAL_BUSY;
 8003cdc:	2502      	movs	r5, #2
 8003cde:	e75f      	b.n	8003ba0 <HAL_SPI_TransmitReceive+0x152>
  __HAL_LOCK(hspi);
 8003ce0:	2502      	movs	r5, #2
 8003ce2:	e763      	b.n	8003bac <HAL_SPI_TransmitReceive+0x15e>

08003ce4 <HAL_SPI_GetState>:
  return hspi->State;
 8003ce4:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8003ce8:	4770      	bx	lr
	...

08003cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003cec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d24 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003cf0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003cf2:	e003      	b.n	8003cfc <LoopCopyDataInit>

08003cf4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003cf4:	4b0c      	ldr	r3, [pc, #48]	; (8003d28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003cf6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003cf8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003cfa:	3104      	adds	r1, #4

08003cfc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003cfc:	480b      	ldr	r0, [pc, #44]	; (8003d2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003cfe:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003d00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d04:	d3f6      	bcc.n	8003cf4 <CopyDataInit>
  ldr  r2, =_sbss
 8003d06:	4a0b      	ldr	r2, [pc, #44]	; (8003d34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003d08:	e002      	b.n	8003d10 <LoopFillZerobss>

08003d0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d0c:	f842 3b04 	str.w	r3, [r2], #4

08003d10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d10:	4b09      	ldr	r3, [pc, #36]	; (8003d38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d14:	d3f9      	bcc.n	8003d0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003d16:	f7fd fd2f 	bl	8001778 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d1a:	f002 f9d9 	bl	80060d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d1e:	f000 f9b1 	bl	8004084 <main>
  bx  lr    
 8003d22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003d24:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003d28:	08006a7c 	.word	0x08006a7c
  ldr  r0, =_sdata
 8003d2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003d30:	200005ec 	.word	0x200005ec
  ldr  r2, =_sbss
 8003d34:	200005ec 	.word	0x200005ec
  ldr  r3, = _ebss
 8003d38:	2001ca50 	.word	0x2001ca50

08003d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d3c:	e7fe      	b.n	8003d3c <ADC_IRQHandler>
	...

08003d40 <AudioPlay_Test>:
  *   Audio peripheral.
  * @param  None
  * @retval None
  */
void AudioPlay_Test(void)
{  
 8003d40:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Initial volume level (from 0 (Mute) to 100 (Max)) */
  __IO uint8_t volume = 70;
 8003d42:	2346      	movs	r3, #70	; 0x46
 8003d44:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Initialize MEMS Accelerometer mounted on STM32F4-Discovery board */
  if(BSP_ACCELERO_Init() != ACCELERO_OK)
 8003d48:	f7fd f9d6 	bl	80010f8 <BSP_ACCELERO_Init>
 8003d4c:	b108      	cbz	r0, 8003d52 <AudioPlay_Test+0x12>
  {
    /* Initialization Error */
    Error_Handler();
 8003d4e:	f000 fa1d 	bl	800418c <Error_Handler>
  }
  
  /* Enable MEMS click feature only for STM32F4-DISCO rev B board */
  if (BSP_ACCELERO_ReadID() == I_AM_LIS302DL)
 8003d52:	f7fd f9f5 	bl	8001140 <BSP_ACCELERO_ReadID>
 8003d56:	283b      	cmp	r0, #59	; 0x3b
 8003d58:	d103      	bne.n	8003d62 <AudioPlay_Test+0x22>
  {
    /* MEMS Accelerometer configure to manage PAUSE, RESUME operations */
    BSP_ACCELERO_Click_ITConfig();
 8003d5a:	f7fd f9f9 	bl	8001150 <BSP_ACCELERO_Click_ITConfig>
    
    /* Clear MEMS click interruption */
    BSP_ACCELERO_Click_ITClear();
 8003d5e:	f7fd f9ff 	bl	8001160 <BSP_ACCELERO_Click_ITClear>
  }
  
  /* Turn ON LED6: start of Audio file play */
  BSP_LED_On(LED6);
 8003d62:	2003      	movs	r0, #3
 8003d64:	f7fd f85e 	bl	8000e24 <BSP_LED_On>
  
  /* Retrieve Wave Sample rate */
  waveformat = (WAVE_FormatTypeDef*) AUDIO_FILE_ADDRESS;
 8003d68:	4b25      	ldr	r3, [pc, #148]	; (8003e00 <AudioPlay_Test+0xc0>)
 8003d6a:	4c26      	ldr	r4, [pc, #152]	; (8003e04 <AudioPlay_Test+0xc4>)

  /* Initialize Audio Device */
  if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, volume, waveformat->SampleRate) != 0)
 8003d6c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8003d70:	699a      	ldr	r2, [r3, #24]
  waveformat = (WAVE_FormatTypeDef*) AUDIO_FILE_ADDRESS;
 8003d72:	6023      	str	r3, [r4, #0]
  if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, volume, waveformat->SampleRate) != 0)
 8003d74:	2004      	movs	r0, #4
 8003d76:	f7fd fb4f 	bl	8001418 <BSP_AUDIO_OUT_Init>
 8003d7a:	b108      	cbz	r0, 8003d80 <AudioPlay_Test+0x40>
  {
    Error_Handler();
 8003d7c:	f000 fa06 	bl	800418c <Error_Handler>
  /* Set variable used to stop player before starting */
  UserPressButton = 0;
  AudioTest = 0;
  
  /* Set the total number of data to be played */
  AudioTotalSize = AUDIO_FILE_SIZE;  
 8003d80:	4e21      	ldr	r6, [pc, #132]	; (8003e08 <AudioPlay_Test+0xc8>)
  UserPressButton = 0;
 8003d82:	4d22      	ldr	r5, [pc, #136]	; (8003e0c <AudioPlay_Test+0xcc>)
  /* Set the current audio pointer position */
  CurrentPos = (uint16_t *)(AUDIO_FILE_ADDRESS);
 8003d84:	481e      	ldr	r0, [pc, #120]	; (8003e00 <AudioPlay_Test+0xc0>)
 8003d86:	60a0      	str	r0, [r4, #8]
  UserPressButton = 0;
 8003d88:	2300      	movs	r3, #0
  AudioTotalSize = AUDIO_FILE_SIZE;  
 8003d8a:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
  UserPressButton = 0;
 8003d8e:	702b      	strb	r3, [r5, #0]
  AudioTotalSize = AUDIO_FILE_SIZE;  
 8003d90:	6031      	str	r1, [r6, #0]
  AudioTest = 0;
 8003d92:	6063      	str	r3, [r4, #4]
  /* Start the audio player */
  BSP_AUDIO_OUT_Play(CurrentPos, AudioTotalSize);  
 8003d94:	f7fd fa20 	bl	80011d8 <BSP_AUDIO_OUT_Play>
  /* Update the remaining number of data to be played */
  AudioRemSize = AudioTotalSize - AUDIODATA_SIZE * DMA_MAX(AudioTotalSize);  
 8003d98:	6833      	ldr	r3, [r6, #0]
 8003d9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	bf28      	it	cs
 8003da2:	461a      	movcs	r2, r3
 8003da4:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  /* Update the current audio pointer position */
  CurrentPos += DMA_MAX(AudioTotalSize);
 8003da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  AudioRemSize = AudioTotalSize - AUDIODATA_SIZE * DMA_MAX(AudioTotalSize);  
 8003dac:	6072      	str	r2, [r6, #4]
  CurrentPos += DMA_MAX(AudioTotalSize);
 8003dae:	bf28      	it	cs
 8003db0:	4b17      	ldrcs	r3, [pc, #92]	; (8003e10 <AudioPlay_Test+0xd0>)
 8003db2:	68a2      	ldr	r2, [r4, #8]
 8003db4:	bf38      	it	cc
 8003db6:	005b      	lslcc	r3, r3, #1
 8003db8:	4413      	add	r3, r2
 8003dba:	60a3      	str	r3, [r4, #8]
  
  /* Infinite loop */
  while(!UserPressButton)
  { 
    if (PauseResumeStatus == PAUSE_STATUS)
 8003dbc:	4c15      	ldr	r4, [pc, #84]	; (8003e14 <AudioPlay_Test+0xd4>)
      /* Turn OFF LED4: Audio play running */
      BSP_LED_Off(LED4);
      
      /* Resume playing */
      BSP_AUDIO_OUT_Resume();
      PauseResumeStatus = IDLE_STATUS;
 8003dbe:	2602      	movs	r6, #2
  while(!UserPressButton)
 8003dc0:	782b      	ldrb	r3, [r5, #0]
 8003dc2:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8003dc6:	b143      	cbz	r3, 8003dda <AudioPlay_Test+0x9a>
    }
  }
  
  /* Stop Player before close Test */
  if (BSP_AUDIO_OUT_Stop(CODEC_PDWN_HW) != AUDIO_OK)
 8003dc8:	2001      	movs	r0, #1
 8003dca:	f7fd fa4d 	bl	8001268 <BSP_AUDIO_OUT_Stop>
 8003dce:	b1a8      	cbz	r0, 8003dfc <AudioPlay_Test+0xbc>
  {
    /* Audio Stop error */
    Error_Handler();
  }
}
 8003dd0:	b002      	add	sp, #8
 8003dd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Error_Handler();
 8003dd6:	f000 b9d9 	b.w	800418c <Error_Handler>
    if (PauseResumeStatus == PAUSE_STATUS)
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	b933      	cbnz	r3, 8003dec <AudioPlay_Test+0xac>
      BSP_LED_On(LED4);
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fd f820 	bl	8000e24 <BSP_LED_On>
      BSP_AUDIO_OUT_Pause();
 8003de4:	f7fd fa1c 	bl	8001220 <BSP_AUDIO_OUT_Pause>
      PauseResumeStatus = IDLE_STATUS;
 8003de8:	6026      	str	r6, [r4, #0]
 8003dea:	e7e9      	b.n	8003dc0 <AudioPlay_Test+0x80>
    else if (PauseResumeStatus == RESUME_STATUS)
 8003dec:	6823      	ldr	r3, [r4, #0]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d1e6      	bne.n	8003dc0 <AudioPlay_Test+0x80>
      BSP_LED_Off(LED4);
 8003df2:	f7fd f825 	bl	8000e40 <BSP_LED_Off>
      BSP_AUDIO_OUT_Resume();
 8003df6:	f7fd fa25 	bl	8001244 <BSP_AUDIO_OUT_Resume>
 8003dfa:	e7f5      	b.n	8003de8 <AudioPlay_Test+0xa8>
}
 8003dfc:	b002      	add	sp, #8
 8003dfe:	bd70      	pop	{r4, r5, r6, pc}
 8003e00:	08080000 	.word	0x08080000
 8003e04:	200008b8 	.word	0x200008b8
 8003e08:	200000c4 	.word	0x200000c4
 8003e0c:	2001ca44 	.word	0x2001ca44
 8003e10:	0001fffe 	.word	0x0001fffe
 8003e14:	200000cc 	.word	0x200000cc

08003e18 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
* @brief  Calculates the remaining file size and new position of the pointer.
* @param  None
* @retval None
*/
void BSP_AUDIO_OUT_TransferComplete_CallBack()
{
 8003e18:	b570      	push	{r4, r5, r6, lr}
  uint32_t replay = 0;
  
  if (AudioRemSize > 0)
 8003e1a:	4d24      	ldr	r5, [pc, #144]	; (8003eac <BSP_AUDIO_OUT_TransferComplete_CallBack+0x94>)
 8003e1c:	4c24      	ldr	r4, [pc, #144]	; (8003eb0 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x98>)
 8003e1e:	6869      	ldr	r1, [r5, #4]
 8003e20:	2900      	cmp	r1, #0
 8003e22:	d03f      	beq.n	8003ea4 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x8c>
  {
    /* Replay from the current position */
    BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)CurrentPos, DMA_MAX(AudioRemSize/AUDIODATA_SIZE));
 8003e24:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8003e28:	bf34      	ite	cc
 8003e2a:	f3c1 014f 	ubfxcc	r1, r1, #1, #16
 8003e2e:	f64f 71ff 	movwcs	r1, #65535	; 0xffff
 8003e32:	68a0      	ldr	r0, [r4, #8]
 8003e34:	f7fd f9ec 	bl	8001210 <BSP_AUDIO_OUT_ChangeBuffer>
    
    /* Update the current pointer position */
    CurrentPos += DMA_MAX(AudioRemSize);        
 8003e38:	686b      	ldr	r3, [r5, #4]
 8003e3a:	68a2      	ldr	r2, [r4, #8]
 8003e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e40:	bf2c      	ite	cs
 8003e42:	491c      	ldrcs	r1, [pc, #112]	; (8003eb4 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x9c>)
 8003e44:	0059      	lslcc	r1, r3, #1
 8003e46:	440a      	add	r2, r1
    
    /* Update the remaining number of data to be played */
    AudioRemSize -= AUDIODATA_SIZE * DMA_MAX(AudioRemSize/AUDIODATA_SIZE);  
 8003e48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    CurrentPos += DMA_MAX(AudioRemSize);        
 8003e4c:	60a2      	str	r2, [r4, #8]
    AudioRemSize -= AUDIODATA_SIZE * DMA_MAX(AudioRemSize/AUDIODATA_SIZE);  
 8003e4e:	bf2c      	ite	cs
 8003e50:	4a18      	ldrcs	r2, [pc, #96]	; (8003eb4 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x9c>)
 8003e52:	f023 0201 	biccc.w	r2, r3, #1
 8003e56:	1a9b      	subs	r3, r3, r2
 8003e58:	606b      	str	r3, [r5, #4]
  uint32_t replay = 0;
 8003e5a:	2600      	movs	r6, #0
    /* Request to replay audio file from beginning */
    replay = 1;
  }
  
  /* Audio sample used for play */
  if((AudioTest == 0) && (replay == 1))
 8003e5c:	6863      	ldr	r3, [r4, #4]
 8003e5e:	b9bb      	cbnz	r3, 8003e90 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x78>
 8003e60:	b1b6      	cbz	r6, 8003e90 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x78>
  {
    /* Replay from the beginning */
    /* Set the current audio pointer position */
    CurrentPos = (uint16_t *)(AUDIO_FILE_ADDRESS);
 8003e62:	4815      	ldr	r0, [pc, #84]	; (8003eb8 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xa0>)
    /* Replay from the beginning */
    BSP_AUDIO_OUT_Play(CurrentPos, AudioTotalSize);
 8003e64:	6829      	ldr	r1, [r5, #0]
    CurrentPos = (uint16_t *)(AUDIO_FILE_ADDRESS);
 8003e66:	60a0      	str	r0, [r4, #8]
    BSP_AUDIO_OUT_Play(CurrentPos, AudioTotalSize);
 8003e68:	f7fd f9b6 	bl	80011d8 <BSP_AUDIO_OUT_Play>
    /* Update the remaining number of data to be played */
    AudioRemSize = AudioTotalSize - AUDIODATA_SIZE * DMA_MAX(AudioTotalSize);  
 8003e6c:	682b      	ldr	r3, [r5, #0]
 8003e6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e72:	429a      	cmp	r2, r3
 8003e74:	bf28      	it	cs
 8003e76:	461a      	movcs	r2, r3
 8003e78:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
    /* Update the current audio pointer position */
    CurrentPos += DMA_MAX(AudioTotalSize);
 8003e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e80:	bf28      	it	cs
 8003e82:	4b0c      	ldrcs	r3, [pc, #48]	; (8003eb4 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x9c>)
    AudioRemSize = AudioTotalSize - AUDIODATA_SIZE * DMA_MAX(AudioTotalSize);  
 8003e84:	606a      	str	r2, [r5, #4]
    CurrentPos += DMA_MAX(AudioTotalSize);
 8003e86:	68a2      	ldr	r2, [r4, #8]
 8003e88:	bf38      	it	cc
 8003e8a:	005b      	lslcc	r3, r3, #1
 8003e8c:	4413      	add	r3, r2
 8003e8e:	60a3      	str	r3, [r4, #8]
  }
  
  /* Audio sample saved during record */
  if((AudioTest == 1) && (replay == 1))
 8003e90:	6863      	ldr	r3, [r4, #4]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d108      	bne.n	8003ea8 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x90>
 8003e96:	b13e      	cbz	r6, 8003ea8 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x90>
  {
    /* Replay from the beginning */
    BSP_AUDIO_OUT_Play(WrBuffer, AudioTotalSize);
 8003e98:	6829      	ldr	r1, [r5, #0]
 8003e9a:	4808      	ldr	r0, [pc, #32]	; (8003ebc <BSP_AUDIO_OUT_TransferComplete_CallBack+0xa4>)
  }
}
 8003e9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    BSP_AUDIO_OUT_Play(WrBuffer, AudioTotalSize);
 8003ea0:	f7fd b99a 	b.w	80011d8 <BSP_AUDIO_OUT_Play>
    replay = 1;
 8003ea4:	2601      	movs	r6, #1
 8003ea6:	e7d9      	b.n	8003e5c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x44>
}
 8003ea8:	bd70      	pop	{r4, r5, r6, pc}
 8003eaa:	bf00      	nop
 8003eac:	200000c4 	.word	0x200000c4
 8003eb0:	200008b8 	.word	0x200008b8
 8003eb4:	0001fffe 	.word	0x0001fffe
 8003eb8:	08080000 	.word	0x08080000
 8003ebc:	20000a18 	.word	0x20000a18

08003ec0 <BSP_AUDIO_OUT_Error_CallBack>:
  * @retval None
  */
void BSP_AUDIO_OUT_Error_CallBack(void)
{
  /* Stop the program with an infinite loop */
  Error_Handler();
 8003ec0:	f000 b964 	b.w	800418c <Error_Handler>

08003ec4 <AudioRecord_Test>:
  *   Audio peripheral.
  * @param  None
  * @retval None
  */
void AudioRecord_Test(void)
{
 8003ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  BufferCtl.offset = BUFFER_OFFSET_NONE;
 8003ec6:	4c5f      	ldr	r4, [pc, #380]	; (8004044 <AudioRecord_Test+0x180>)
 8003ec8:	2300      	movs	r3, #0
  if(BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) != AUDIO_OK)
 8003eca:	2201      	movs	r2, #1
 8003ecc:	2110      	movs	r1, #16
 8003ece:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
  BufferCtl.offset = BUFFER_OFFSET_NONE;
 8003ed2:	6023      	str	r3, [r4, #0]
  if(BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) != AUDIO_OK)
 8003ed4:	f7fd fbc0 	bl	8001658 <BSP_AUDIO_IN_Init>
 8003ed8:	b108      	cbz	r0, 8003ede <AudioRecord_Test+0x1a>
  {
    /* Record Error */
    Error_Handler();
 8003eda:	f000 f957 	bl	800418c <Error_Handler>
  }  

  /* Turn ON LED3: start record */
  BSP_LED_On(LED3);
 8003ede:	2001      	movs	r0, #1
 8003ee0:	f7fc ffa0 	bl	8000e24 <BSP_LED_On>
  
  /* Start the record */
  if (BSP_AUDIO_IN_Record((uint16_t*)&InternalBuffer[0], INTERNAL_BUFF_SIZE) != AUDIO_OK)
 8003ee4:	4858      	ldr	r0, [pc, #352]	; (8004048 <AudioRecord_Test+0x184>)
 8003ee6:	2180      	movs	r1, #128	; 0x80
 8003ee8:	f7fd fae4 	bl	80014b4 <BSP_AUDIO_IN_Record>
 8003eec:	b108      	cbz	r0, 8003ef2 <AudioRecord_Test+0x2e>
  {
    /* Record Error */
    Error_Handler();
 8003eee:	f000 f94d 	bl	800418c <Error_Handler>
  }
  BufferCtl.fptr = 0;
 8003ef2:	2300      	movs	r3, #0
  while (AUDIODataReady != 2) 
  {
    if(BufferCtl.offset == BUFFER_OFFSET_HALF)
    {
      /* PDM to PCM data convert */
      BSP_AUDIO_IN_PDMToPCM((uint16_t*)&InternalBuffer[0], (uint16_t*)&RecBuf[0]);
 8003ef4:	4f55      	ldr	r7, [pc, #340]	; (800404c <AudioRecord_Test+0x188>)
      
      /* Copy PCM data in internal buffer */
      memcpy((uint16_t*)&WrBuffer[ITCounter * (PCM_OUT_SIZE*2)], RecBuf, PCM_OUT_SIZE*4);
 8003ef6:	4e56      	ldr	r6, [pc, #344]	; (8004050 <AudioRecord_Test+0x18c>)
  BufferCtl.fptr = 0;
 8003ef8:	6063      	str	r3, [r4, #4]
  AUDIODataReady = 0; 
 8003efa:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
      
      BufferCtl.offset = BUFFER_OFFSET_NONE;
 8003efe:	2500      	movs	r5, #0
 8003f00:	e034      	b.n	8003f6c <AudioRecord_Test+0xa8>
    if(BufferCtl.offset == BUFFER_OFFSET_HALF)
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d163      	bne.n	8003fd0 <AudioRecord_Test+0x10c>
      BSP_AUDIO_IN_PDMToPCM((uint16_t*)&InternalBuffer[0], (uint16_t*)&RecBuf[0]);
 8003f08:	4639      	mov	r1, r7
 8003f0a:	484f      	ldr	r0, [pc, #316]	; (8004048 <AudioRecord_Test+0x184>)
 8003f0c:	f7fd fae4 	bl	80014d8 <BSP_AUDIO_IN_PDMToPCM>
      memcpy((uint16_t*)&WrBuffer[ITCounter * (PCM_OUT_SIZE*2)], RecBuf, PCM_OUT_SIZE*4);
 8003f10:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
 8003f14:	4b4d      	ldr	r3, [pc, #308]	; (800404c <AudioRecord_Test+0x188>)
 8003f16:	eb06 1282 	add.w	r2, r6, r2, lsl #6
 8003f1a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8003f1e:	f853 0b04 	ldr.w	r0, [r3], #4
 8003f22:	f842 0b04 	str.w	r0, [r2], #4
 8003f26:	428b      	cmp	r3, r1
 8003f28:	d1f9      	bne.n	8003f1e <AudioRecord_Test+0x5a>
      
      if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*4))-1)
 8003f2a:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
      BufferCtl.offset = BUFFER_OFFSET_NONE;
 8003f2e:	6025      	str	r5, [r4, #0]
      if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*4))-1)
 8003f30:	f240 337f 	movw	r3, #895	; 0x37f
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d10a      	bne.n	8003f4e <AudioRecord_Test+0x8a>
      {
        AUDIODataReady = 1;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        AUDIOBuffOffset = 0;
 8003f3e:	f8c4 5150 	str.w	r5, [r4, #336]	; 0x150
        AUDIOBuffOffset = WR_BUFFER_SIZE/2;
        ITCounter = 0;
      }
      else
      {
        ITCounter++;
 8003f42:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 8003f46:	3301      	adds	r3, #1
 8003f48:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
 8003f4c:	e00e      	b.n	8003f6c <AudioRecord_Test+0xa8>
      else if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*2))-1)
 8003f4e:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
 8003f52:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d1f3      	bne.n	8003f42 <AudioRecord_Test+0x7e>
        AUDIODataReady = 2;
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        AUDIOBuffOffset = WR_BUFFER_SIZE/2;
 8003f60:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003f64:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
        ITCounter = 0;
 8003f68:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
  while (AUDIODataReady != 2) 
 8003f6c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d1c6      	bne.n	8003f02 <AudioRecord_Test+0x3e>
      }  
    }   
  };
  
  /* Stop audio record */
  if (BSP_AUDIO_IN_Stop() != AUDIO_OK)
 8003f74:	f7fd faa8 	bl	80014c8 <BSP_AUDIO_IN_Stop>
 8003f78:	b108      	cbz	r0, 8003f7e <AudioRecord_Test+0xba>
  {
    /* Record Error */
    Error_Handler();
 8003f7a:	f000 f907 	bl	800418c <Error_Handler>
  }

  /* Turn OFF LED3: record stopped */
  BSP_LED_Off(LED3);
 8003f7e:	2001      	movs	r0, #1
 8003f80:	f7fc ff5e 	bl	8000e40 <BSP_LED_Off>
  /* Turn ON LED6: play recorded file */
  BSP_LED_On(LED6);
 8003f84:	2003      	movs	r0, #3
 8003f86:	f7fc ff4d 	bl	8000e24 <BSP_LED_On>
  
  /* Play in the loop the recorded file */

  /* Set variable to indicate play from record buffer */ 
  AudioTest = 1;
 8003f8a:	4b32      	ldr	r3, [pc, #200]	; (8004054 <AudioRecord_Test+0x190>)
  
  /*Set variable used to stop player before starting */
  UserPressButton = 0;
 8003f8c:	4c32      	ldr	r4, [pc, #200]	; (8004058 <AudioRecord_Test+0x194>)
  AudioTest = 1;
 8003f8e:	2201      	movs	r2, #1
 8003f90:	601a      	str	r2, [r3, #0]
  UserPressButton = 0;
 8003f92:	2500      	movs	r5, #0

  /* Initialize audio IN at REC_FREQ */ 
  BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, 70, DEFAULT_AUDIO_IN_FREQ);  
 8003f94:	2146      	movs	r1, #70	; 0x46
 8003f96:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8003f9a:	2004      	movs	r0, #4
  UserPressButton = 0;
 8003f9c:	7025      	strb	r5, [r4, #0]
  BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, 70, DEFAULT_AUDIO_IN_FREQ);  
 8003f9e:	f7fd fa3b 	bl	8001418 <BSP_AUDIO_OUT_Init>
  
  /* Set the total number of data to be played */
  AudioTotalSize = AUDIODATA_SIZE * WR_BUFFER_SIZE;  
 8003fa2:	4b2e      	ldr	r3, [pc, #184]	; (800405c <AudioRecord_Test+0x198>)
  /* Update the remaining number of data to be played */
  AudioRemSize = 0;  
  /* Update the WrBuffer audio pointer position */
  CurrentPos = (uint16_t *)(WrBuffer);
 8003fa4:	482a      	ldr	r0, [pc, #168]	; (8004050 <AudioRecord_Test+0x18c>)
  AudioTotalSize = AUDIODATA_SIZE * WR_BUFFER_SIZE;  
 8003fa6:	f44f 31e0 	mov.w	r1, #114688	; 0x1c000
 8003faa:	6019      	str	r1, [r3, #0]
  AudioRemSize = 0;  
 8003fac:	4b2c      	ldr	r3, [pc, #176]	; (8004060 <AudioRecord_Test+0x19c>)
 8003fae:	601d      	str	r5, [r3, #0]
  CurrentPos = (uint16_t *)(WrBuffer);
 8003fb0:	4b2c      	ldr	r3, [pc, #176]	; (8004064 <AudioRecord_Test+0x1a0>)
 8003fb2:	6018      	str	r0, [r3, #0]
  
  /* Play the recorded buffer */
  //WR_BUFFER_SIZE  determines the duration
  BSP_AUDIO_OUT_Play(WrBuffer , AudioTotalSize);
 8003fb4:	f7fd f910 	bl	80011d8 <BSP_AUDIO_OUT_Play>
  
  while(!UserPressButton)//keep playing until pressed
 8003fb8:	7823      	ldrb	r3, [r4, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0fc      	beq.n	8003fb8 <AudioRecord_Test+0xf4>
  { 
	  //stlinkprintf ?
  }
  
  /* Stop Player before close Test */
  if (BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW) != AUDIO_OK)
 8003fbe:	2002      	movs	r0, #2
 8003fc0:	f7fd f952 	bl	8001268 <BSP_AUDIO_OUT_Stop>
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	d03c      	beq.n	8004042 <AudioRecord_Test+0x17e>
  {
    /* Audio Stop error */
    Error_Handler();
  }
}
 8003fc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 8003fcc:	f000 b8de 	b.w	800418c <Error_Handler>
    if(BufferCtl.offset == BUFFER_OFFSET_FULL)
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d1cb      	bne.n	8003f6c <AudioRecord_Test+0xa8>
      BSP_AUDIO_IN_PDMToPCM((uint16_t*)&InternalBuffer[INTERNAL_BUFF_SIZE/2], (uint16_t*)&RecBuf[0]);
 8003fd4:	4639      	mov	r1, r7
 8003fd6:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8003fda:	f7fd fa7d 	bl	80014d8 <BSP_AUDIO_IN_PDMToPCM>
      memcpy((uint16_t*)&WrBuffer[ITCounter * (PCM_OUT_SIZE*2)], RecBuf, PCM_OUT_SIZE*4);
 8003fde:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 8003fe2:	4a1a      	ldr	r2, [pc, #104]	; (800404c <AudioRecord_Test+0x188>)
 8003fe4:	eb06 1383 	add.w	r3, r6, r3, lsl #6
 8003fe8:	f504 71a6 	add.w	r1, r4, #332	; 0x14c
 8003fec:	f852 0b04 	ldr.w	r0, [r2], #4
 8003ff0:	f843 0b04 	str.w	r0, [r3], #4
 8003ff4:	428a      	cmp	r2, r1
 8003ff6:	d1f9      	bne.n	8003fec <AudioRecord_Test+0x128>
      if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*4))-1)
 8003ff8:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 8003ffc:	f240 327f 	movw	r2, #895	; 0x37f
      BufferCtl.offset = BUFFER_OFFSET_NONE;
 8004000:	2300      	movs	r3, #0
      if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*4))-1)
 8004002:	4291      	cmp	r1, r2
      BufferCtl.offset = BUFFER_OFFSET_NONE;
 8004004:	6023      	str	r3, [r4, #0]
      if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*4))-1)
 8004006:	d10a      	bne.n	800401e <AudioRecord_Test+0x15a>
        AUDIODataReady = 1;
 8004008:	2201      	movs	r2, #1
 800400a:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
        AUDIOBuffOffset = 0;
 800400e:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
        ITCounter++;
 8004012:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 8004016:	4413      	add	r3, r2
        ITCounter++;
 8004018:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
 800401c:	e76f      	b.n	8003efe <AudioRecord_Test+0x3a>
      else if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*2))-1)
 800401e:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 8004022:	f240 62ff 	movw	r2, #1791	; 0x6ff
 8004026:	4291      	cmp	r1, r2
        AUDIODataReady = 2;
 8004028:	bf09      	itett	eq
 800402a:	2202      	moveq	r2, #2
        ITCounter++;
 800402c:	f8d4 314c 	ldrne.w	r3, [r4, #332]	; 0x14c
        AUDIODataReady = 2;
 8004030:	f8c4 2108 	streq.w	r2, [r4, #264]	; 0x108
        AUDIOBuffOffset = WR_BUFFER_SIZE/2;
 8004034:	f44f 42e0 	moveq.w	r2, #28672	; 0x7000
 8004038:	bf0c      	ite	eq
 800403a:	f8c4 2150 	streq.w	r2, [r4, #336]	; 0x150
        ITCounter++;
 800403e:	3301      	addne	r3, #1
 8004040:	e7ea      	b.n	8004018 <AudioRecord_Test+0x154>
}
 8004042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004044:	200008c4 	.word	0x200008c4
 8004048:	200008cc 	.word	0x200008cc
 800404c:	200009d0 	.word	0x200009d0
 8004050:	20000a18 	.word	0x20000a18
 8004054:	200008bc 	.word	0x200008bc
 8004058:	2001ca44 	.word	0x2001ca44
 800405c:	200000c4 	.word	0x200000c4
 8004060:	200000c8 	.word	0x200000c8
 8004064:	200008c0 	.word	0x200008c0

08004068 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
  BufferCtl.offset = BUFFER_OFFSET_FULL;
 8004068:	4b01      	ldr	r3, [pc, #4]	; (8004070 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8>)
 800406a:	2202      	movs	r2, #2
 800406c:	601a      	str	r2, [r3, #0]
}
 800406e:	4770      	bx	lr
 8004070:	200008c4 	.word	0x200008c4

08004074 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
  BufferCtl.offset = BUFFER_OFFSET_HALF;
 8004074:	4b01      	ldr	r3, [pc, #4]	; (800407c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8>)
 8004076:	2201      	movs	r2, #1
 8004078:	601a      	str	r2, [r3, #0]
}
 800407a:	4770      	bx	lr
 800407c:	200008c4 	.word	0x200008c4

08004080 <BSP_AUDIO_IN_Error_Callback>:
  * @retval None
  */
void BSP_AUDIO_IN_Error_Callback(void)
{
  /* Stop the program with an infinite loop */
  Error_Handler();
 8004080:	f000 b884 	b.w	800418c <Error_Handler>

08004084 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{ 
 8004084:	b500      	push	{lr}
 8004086:	b095      	sub	sp, #84	; 0x54
       - Configure the Flash prefetch, instruction and Data caches
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */
  HAL_Init();
 8004088:	f7fd fbc0 	bl	800180c <HAL_Init>
  
  /* Configure LED3, LED4, LED5 and LED6 */
  BSP_LED_Init(LED3);
 800408c:	2001      	movs	r0, #1
 800408e:	f7fc fe71 	bl	8000d74 <BSP_LED_Init>
  BSP_LED_Init(LED4); 
 8004092:	2000      	movs	r0, #0
 8004094:	f7fc fe6e 	bl	8000d74 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 8004098:	2002      	movs	r0, #2
 800409a:	f7fc fe6b 	bl	8000d74 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 800409e:	2003      	movs	r0, #3
 80040a0:	f7fc fe68 	bl	8000d74 <BSP_LED_Init>
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80040a4:	2400      	movs	r4, #0
 80040a6:	4b25      	ldr	r3, [pc, #148]	; (800413c <main+0xb8>)
 80040a8:	9401      	str	r4, [sp, #4]
 80040aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80040b0:	641a      	str	r2, [r3, #64]	; 0x40
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b8:	9301      	str	r3, [sp, #4]
 80040ba:	9b01      	ldr	r3, [sp, #4]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80040bc:	4b20      	ldr	r3, [pc, #128]	; (8004140 <main+0xbc>)
 80040be:	9402      	str	r4, [sp, #8]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ce:	9302      	str	r3, [sp, #8]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80040d0:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80040d2:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80040d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80040dc:	2502      	movs	r5, #2
 80040de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
 80040e2:	2108      	movs	r1, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80040e4:	e9cd 530e 	strd	r5, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 336;
 80040e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80040ec:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80040f0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80040f2:	2307      	movs	r3, #7
 80040f4:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80040f6:	9512      	str	r5, [sp, #72]	; 0x48
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80040f8:	f7ff f846 	bl	8003188 <HAL_RCC_OscConfig>
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80040fc:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040fe:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8004102:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8004106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800410a:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800410e:	2105      	movs	r1, #5
 8004110:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004112:	9405      	str	r4, [sp, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8004114:	f7ff fa16 	bl	8003544 <HAL_RCC_ClockConfig>

  /* STM32F405x/407x/415x/417x Revision Z devices: prefetch is supported  */
  if (HAL_GetREVID() == 0x1001)
 8004118:	f7fd fbb4 	bl	8001884 <HAL_GetREVID>
 800411c:	f241 0301 	movw	r3, #4097	; 0x1001
 8004120:	4298      	cmp	r0, r3
  {
    /* Enable the Flash prefetch */
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004122:	bf01      	itttt	eq
 8004124:	4a07      	ldreq	r2, [pc, #28]	; (8004144 <main+0xc0>)
 8004126:	6813      	ldreq	r3, [r2, #0]
 8004128:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 800412c:	6013      	streq	r3, [r2, #0]
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800412e:	2101      	movs	r1, #1
 8004130:	2000      	movs	r0, #0
 8004132:	f7fc fe93 	bl	8000e5c <BSP_PB_Init>
	  AudioRecord_Test();
 8004136:	f7ff fec5 	bl	8003ec4 <AudioRecord_Test>
  while(1)
 800413a:	e7fc      	b.n	8004136 <main+0xb2>
 800413c:	40023800 	.word	0x40023800
 8004140:	40007000 	.word	0x40007000
 8004144:	40023c00 	.word	0x40023c00

08004148 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (KEY_BUTTON_PIN == GPIO_Pin)
 8004148:	2801      	cmp	r0, #1
{
 800414a:	b508      	push	{r3, lr}
  if (KEY_BUTTON_PIN == GPIO_Pin)
 800414c:	d108      	bne.n	8004160 <HAL_GPIO_EXTI_Callback+0x18>
  {
    while (BSP_PB_GetState(BUTTON_KEY) != RESET);
 800414e:	2000      	movs	r0, #0
 8004150:	f7fc fec0 	bl	8000ed4 <BSP_PB_GetState>
 8004154:	2800      	cmp	r0, #0
 8004156:	d1fa      	bne.n	800414e <HAL_GPIO_EXTI_Callback+0x6>
    UserPressButton = 1;
 8004158:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <HAL_GPIO_EXTI_Callback+0x3c>)
 800415a:	2201      	movs	r2, #1
 800415c:	701a      	strb	r2, [r3, #0]
      /* Pause playing Wave status */
      PauseResumeStatus = PAUSE_STATUS;
      PressCount = 1;
    }
  }
}
 800415e:	bd08      	pop	{r3, pc}
  if(ACCELERO_INT2_PIN == GPIO_Pin) 
 8004160:	2802      	cmp	r0, #2
 8004162:	d1fc      	bne.n	800415e <HAL_GPIO_EXTI_Callback+0x16>
    BSP_ACCELERO_Click_ITClear();
 8004164:	f7fc fffc 	bl	8001160 <BSP_ACCELERO_Click_ITClear>
    if (PressCount == 1)
 8004168:	4b06      	ldr	r3, [pc, #24]	; (8004184 <HAL_GPIO_EXTI_Callback+0x3c>)
 800416a:	4a07      	ldr	r2, [pc, #28]	; (8004188 <HAL_GPIO_EXTI_Callback+0x40>)
 800416c:	6858      	ldr	r0, [r3, #4]
 800416e:	2100      	movs	r1, #0
 8004170:	2801      	cmp	r0, #1
      PauseResumeStatus = PAUSE_STATUS;
 8004172:	bf1b      	ittet	ne
 8004174:	6011      	strne	r1, [r2, #0]
      PressCount = 1;
 8004176:	2201      	movne	r2, #1
      PauseResumeStatus = RESUME_STATUS;
 8004178:	6010      	streq	r0, [r2, #0]
      PressCount = 1;
 800417a:	605a      	strne	r2, [r3, #4]
      PressCount = 0;
 800417c:	bf08      	it	eq
 800417e:	6059      	streq	r1, [r3, #4]
}
 8004180:	e7ed      	b.n	800415e <HAL_GPIO_EXTI_Callback+0x16>
 8004182:	bf00      	nop
 8004184:	2001ca44 	.word	0x2001ca44
 8004188:	200000cc 	.word	0x200000cc

0800418c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 800418c:	b508      	push	{r3, lr}
  /* Turn LED5 on */
  BSP_LED_On(LED5);
 800418e:	2002      	movs	r0, #2
 8004190:	f7fc fe48 	bl	8000e24 <BSP_LED_On>
  while(1)
 8004194:	e7fe      	b.n	8004194 <Error_Handler+0x8>
	...

08004198 <ACCELERO_MEMS_Test>:
  *         The main objective of this test is to check acceleration on 2 axes X and Y
  * @param  None
  * @retval None
  */
void ACCELERO_MEMS_Test(void)
{
 8004198:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Init Accelerometer MEMS */
  if(BSP_ACCELERO_Init() != HAL_OK)
 800419a:	f7fc ffad 	bl	80010f8 <BSP_ACCELERO_Init>
 800419e:	b108      	cbz	r0, 80041a4 <ACCELERO_MEMS_Test+0xc>
  {
    /* Initialization Error */
    Error_Handler(); 
 80041a0:	f7ff fff4 	bl	800418c <Error_Handler>
  }
  
  UserPressButton = 0;
 80041a4:	4e24      	ldr	r6, [pc, #144]	; (8004238 <ACCELERO_MEMS_Test+0xa0>)
 80041a6:	4c25      	ldr	r4, [pc, #148]	; (800423c <ACCELERO_MEMS_Test+0xa4>)
 80041a8:	2300      	movs	r3, #0
 80041aa:	7033      	strb	r3, [r6, #0]
  while(!UserPressButton)
 80041ac:	7833      	ldrb	r3, [r6, #0]
 80041ae:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80041b2:	b10b      	cbz	r3, 80041b8 <ACCELERO_MEMS_Test+0x20>
  {
    ACCELERO_ReadAcc();
  }
}
 80041b4:	b002      	add	sp, #8
 80041b6:	bd70      	pop	{r4, r5, r6, pc}
  /* Accelerometer variables */
  int16_t buffer[3] = {0};
  int16_t xval, yval = 0x00;
  
  /* Read Acceleration */
  BSP_ACCELERO_GetXYZ(buffer);
 80041b8:	4668      	mov	r0, sp
  int16_t buffer[3] = {0};
 80041ba:	9500      	str	r5, [sp, #0]
 80041bc:	f8ad 5004 	strh.w	r5, [sp, #4]
  BSP_ACCELERO_GetXYZ(buffer);
 80041c0:	f7fc ffd6 	bl	8001170 <BSP_ACCELERO_GetXYZ>
  
  xval = buffer[0];
 80041c4:	f9bd 2000 	ldrsh.w	r2, [sp]
  yval = buffer[1];
 80041c8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
  
  if((ABS(xval))>(ABS(yval)))
 80041cc:	ea82 70e2 	eor.w	r0, r2, r2, asr #31
 80041d0:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80041d4:	eba0 70e2 	sub.w	r0, r0, r2, asr #31
 80041d8:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80041dc:	b280      	uxth	r0, r0
 80041de:	b289      	uxth	r1, r1
 80041e0:	4288      	cmp	r0, r1
 80041e2:	d91c      	bls.n	800421e <ACCELERO_MEMS_Test+0x86>
  {
    if(xval > ThresholdHigh)
 80041e4:	f9b4 3000 	ldrsh.w	r3, [r4]
 80041e8:	4293      	cmp	r3, r2
 80041ea:	da12      	bge.n	8004212 <ACCELERO_MEMS_Test+0x7a>
    { 
      /* LED5 On */
      BSP_LED_On(LED5);
 80041ec:	2002      	movs	r0, #2
      HAL_Delay(10);
    }
    else if(yval > ThresholdHigh)
    {
      /* LED3 On */
      BSP_LED_On(LED3);
 80041ee:	f7fc fe19 	bl	8000e24 <BSP_LED_On>
      HAL_Delay(10);
 80041f2:	200a      	movs	r0, #10
 80041f4:	f7fd fb32 	bl	800185c <HAL_Delay>
    { 
      HAL_Delay(10);
    }
  } 
  
  BSP_LED_Off(LED3);
 80041f8:	2001      	movs	r0, #1
 80041fa:	f7fc fe21 	bl	8000e40 <BSP_LED_Off>
  BSP_LED_Off(LED4);
 80041fe:	2000      	movs	r0, #0
 8004200:	f7fc fe1e 	bl	8000e40 <BSP_LED_Off>
  BSP_LED_Off(LED5);
 8004204:	2002      	movs	r0, #2
 8004206:	f7fc fe1b 	bl	8000e40 <BSP_LED_Off>
  BSP_LED_Off(LED6);
 800420a:	2003      	movs	r0, #3
 800420c:	f7fc fe18 	bl	8000e40 <BSP_LED_Off>
}
 8004210:	e7cc      	b.n	80041ac <ACCELERO_MEMS_Test+0x14>
    else if(xval < ThresholdLow)
 8004212:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8004216:	4293      	cmp	r3, r2
 8004218:	ddeb      	ble.n	80041f2 <ACCELERO_MEMS_Test+0x5a>
      BSP_LED_On(LED4);      
 800421a:	4628      	mov	r0, r5
 800421c:	e7e7      	b.n	80041ee <ACCELERO_MEMS_Test+0x56>
    if(yval < ThresholdLow)
 800421e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8004222:	429a      	cmp	r2, r3
 8004224:	dd01      	ble.n	800422a <ACCELERO_MEMS_Test+0x92>
      BSP_LED_On(LED6);
 8004226:	2003      	movs	r0, #3
 8004228:	e7e1      	b.n	80041ee <ACCELERO_MEMS_Test+0x56>
    else if(yval > ThresholdHigh)
 800422a:	f9b4 2000 	ldrsh.w	r2, [r4]
 800422e:	429a      	cmp	r2, r3
 8004230:	dadf      	bge.n	80041f2 <ACCELERO_MEMS_Test+0x5a>
      BSP_LED_On(LED3);
 8004232:	2001      	movs	r0, #1
 8004234:	e7db      	b.n	80041ee <ACCELERO_MEMS_Test+0x56>
 8004236:	bf00      	nop
 8004238:	2001ca44 	.word	0x2001ca44
 800423c:	20000184 	.word	0x20000184

08004240 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8004240:	4770      	bx	lr

08004242 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8004242:	e7fe      	b.n	8004242 <HardFault_Handler>

08004244 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8004244:	e7fe      	b.n	8004244 <MemManage_Handler>

08004246 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8004246:	e7fe      	b.n	8004246 <BusFault_Handler>

08004248 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8004248:	e7fe      	b.n	8004248 <UsageFault_Handler>

0800424a <SVC_Handler>:
 800424a:	4770      	bx	lr

0800424c <DebugMon_Handler>:
 800424c:	4770      	bx	lr

0800424e <PendSV_Handler>:
 800424e:	4770      	bx	lr

08004250 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8004250:	f7fd baf2 	b.w	8001838 <HAL_IncTick>

08004254 <EXTI0_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8004254:	2001      	movs	r0, #1
 8004256:	f7fd be63 	b.w	8001f20 <HAL_GPIO_EXTI_IRQHandler>

0800425a <EXTI1_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(ACCELERO_INT2_PIN);
 800425a:	2002      	movs	r0, #2
 800425c:	f7fd be60 	b.w	8001f20 <HAL_GPIO_EXTI_IRQHandler>

08004260 <DMA1_Stream7_IRQHandler>:
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void I2S3_IRQHandler(void)
{ 
  HAL_DMA_IRQHandler(hAudioOutI2s.hdmatx);
 8004260:	4b01      	ldr	r3, [pc, #4]	; (8004268 <DMA1_Stream7_IRQHandler+0x8>)
 8004262:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004264:	f7fd bcb8 	b.w	8001bd8 <HAL_DMA_IRQHandler>
 8004268:	200006bc 	.word	0x200006bc

0800426c <DMA1_Stream3_IRQHandler>:
  * @param  None
  * @retval None
  */
void I2S2_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hAudioInI2s.hdmarx);
 800426c:	4b01      	ldr	r3, [pc, #4]	; (8004274 <DMA1_Stream3_IRQHandler+0x8>)
 800426e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004270:	f7fd bcb2 	b.w	8001bd8 <HAL_DMA_IRQHandler>
 8004274:	20000768 	.word	0x20000768

08004278 <D16_GENERIC>:
 8004278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800427c:	b089      	sub	sp, #36	; 0x24
 800427e:	68d4      	ldr	r4, [r2, #12]
 8004280:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8004282:	6993      	ldr	r3, [r2, #24]
 8004284:	9407      	str	r4, [sp, #28]
 8004286:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8004288:	9306      	str	r3, [sp, #24]
 800428a:	9402      	str	r4, [sp, #8]
 800428c:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8004290:	f8d2 b014 	ldr.w	fp, [r2, #20]
 8004294:	69d3      	ldr	r3, [r2, #28]
 8004296:	6896      	ldr	r6, [r2, #8]
 8004298:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800429a:	9103      	str	r1, [sp, #12]
 800429c:	2d00      	cmp	r5, #0
 800429e:	d066      	beq.n	800436e <D16_GENERIC+0xf6>
 80042a0:	f004 0510 	and.w	r5, r4, #16
 80042a4:	f004 0420 	and.w	r4, r4, #32
 80042a8:	9504      	str	r5, [sp, #16]
 80042aa:	4938      	ldr	r1, [pc, #224]	; (800438c <D16_GENERIC+0x114>)
 80042ac:	9405      	str	r4, [sp, #20]
 80042ae:	f04f 0e00 	mov.w	lr, #0
 80042b2:	4635      	mov	r5, r6
 80042b4:	e04f      	b.n	8004356 <D16_GENERIC+0xde>
 80042b6:	5d87      	ldrb	r7, [r0, r6]
 80042b8:	7804      	ldrb	r4, [r0, #0]
 80042ba:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80042be:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 80042c2:	b2e6      	uxtb	r6, r4
 80042c4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80042c8:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80042cc:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80042d0:	4433      	add	r3, r6
 80042d2:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 80042d6:	f3c4 0609 	ubfx	r6, r4, #0, #10
 80042da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042de:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 80042e2:	0aa3      	lsrs	r3, r4, #10
 80042e4:	4c2a      	ldr	r4, [pc, #168]	; (8004390 <D16_GENERIC+0x118>)
 80042e6:	fb26 5404 	smlad	r4, r6, r4, r5
 80042ea:	4d2a      	ldr	r5, [pc, #168]	; (8004394 <D16_GENERIC+0x11c>)
 80042ec:	fb26 f505 	smuad	r5, r6, r5
 80042f0:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 80042f4:	eb04 080a 	add.w	r8, r4, sl
 80042f8:	eba8 080b 	sub.w	r8, r8, fp
 80042fc:	4646      	mov	r6, r8
 80042fe:	17f7      	asrs	r7, r6, #31
 8004300:	e9cd 6700 	strd	r6, r7, [sp]
 8004304:	9e04      	ldr	r6, [sp, #16]
 8004306:	f10e 0c01 	add.w	ip, lr, #1
 800430a:	b16e      	cbz	r6, 8004328 <D16_GENERIC+0xb0>
 800430c:	6a16      	ldr	r6, [r2, #32]
 800430e:	9f01      	ldr	r7, [sp, #4]
 8004310:	fba8 8906 	umull	r8, r9, r8, r6
 8004314:	fb06 9907 	mla	r9, r6, r7, r9
 8004318:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800431c:	f149 0900 	adc.w	r9, r9, #0
 8004320:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8004324:	46a3      	mov	fp, r4
 8004326:	4654      	mov	r4, sl
 8004328:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800432a:	9f02      	ldr	r7, [sp, #8]
 800432c:	0424      	lsls	r4, r4, #16
 800432e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004332:	f04f 0900 	mov.w	r9, #0
 8004336:	fb0e fe06 	mul.w	lr, lr, r6
 800433a:	fbc7 8904 	smlal	r8, r9, r7, r4
 800433e:	9e03      	ldr	r6, [sp, #12]
 8004340:	464f      	mov	r7, r9
 8004342:	10bc      	asrs	r4, r7, #2
 8004344:	f304 040f 	ssat	r4, #16, r4
 8004348:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 800434c:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800434e:	fa1f fe8c 	uxth.w	lr, ip
 8004352:	4574      	cmp	r4, lr
 8004354:	d90a      	bls.n	800436c <D16_GENERIC+0xf4>
 8004356:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8004358:	2c01      	cmp	r4, #1
 800435a:	b2e6      	uxtb	r6, r4
 800435c:	d1ab      	bne.n	80042b6 <D16_GENERIC+0x3e>
 800435e:	9e05      	ldr	r6, [sp, #20]
 8004360:	f850 4b02 	ldr.w	r4, [r0], #2
 8004364:	2e00      	cmp	r6, #0
 8004366:	d0ac      	beq.n	80042c2 <D16_GENERIC+0x4a>
 8004368:	ba64      	rev16	r4, r4
 800436a:	e7aa      	b.n	80042c2 <D16_GENERIC+0x4a>
 800436c:	462e      	mov	r6, r5
 800436e:	9907      	ldr	r1, [sp, #28]
 8004370:	61d3      	str	r3, [r2, #28]
 8004372:	9b06      	ldr	r3, [sp, #24]
 8004374:	6096      	str	r6, [r2, #8]
 8004376:	2000      	movs	r0, #0
 8004378:	60d1      	str	r1, [r2, #12]
 800437a:	f8c2 a010 	str.w	sl, [r2, #16]
 800437e:	f8c2 b014 	str.w	fp, [r2, #20]
 8004382:	6193      	str	r3, [r2, #24]
 8004384:	b009      	add	sp, #36	; 0x24
 8004386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800438a:	bf00      	nop
 800438c:	20000188 	.word	0x20000188
 8004390:	00030001 	.word	0x00030001
 8004394:	00010003 	.word	0x00010003

08004398 <D24_GENERIC>:
 8004398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800439c:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800439e:	6993      	ldr	r3, [r2, #24]
 80043a0:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80043a2:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80043a6:	f8d2 9014 	ldr.w	r9, [r2, #20]
 80043aa:	6894      	ldr	r4, [r2, #8]
 80043ac:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 80043b0:	b089      	sub	sp, #36	; 0x24
 80043b2:	9307      	str	r3, [sp, #28]
 80043b4:	9503      	str	r5, [sp, #12]
 80043b6:	69d3      	ldr	r3, [r2, #28]
 80043b8:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80043ba:	9104      	str	r1, [sp, #16]
 80043bc:	2e00      	cmp	r6, #0
 80043be:	f000 8096 	beq.w	80044ee <D24_GENERIC+0x156>
 80043c2:	f005 0610 	and.w	r6, r5, #16
 80043c6:	f005 0520 	and.w	r5, r5, #32
 80043ca:	4954      	ldr	r1, [pc, #336]	; (800451c <D24_GENERIC+0x184>)
 80043cc:	9605      	str	r6, [sp, #20]
 80043ce:	9506      	str	r5, [sp, #24]
 80043d0:	f04f 0e00 	mov.w	lr, #0
 80043d4:	f8cd 9008 	str.w	r9, [sp, #8]
 80043d8:	e06a      	b.n	80044b0 <D24_GENERIC+0x118>
 80043da:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 80043de:	f810 8007 	ldrb.w	r8, [r0, r7]
 80043e2:	f890 c000 	ldrb.w	ip, [r0]
 80043e6:	042d      	lsls	r5, r5, #16
 80043e8:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80043ec:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 80043f0:	44ac      	add	ip, r5
 80043f2:	4438      	add	r0, r7
 80043f4:	fa5f f68c 	uxtb.w	r6, ip
 80043f8:	f3cc 2507 	ubfx	r5, ip, #8, #8
 80043fc:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8004400:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8004404:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004408:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800440c:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8004410:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 8004414:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8004418:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800441c:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8004420:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8004424:	4d3e      	ldr	r5, [pc, #248]	; (8004520 <D24_GENERIC+0x188>)
 8004426:	fb26 b705 	smlad	r7, r6, r5, fp
 800442a:	4d3e      	ldr	r5, [pc, #248]	; (8004524 <D24_GENERIC+0x18c>)
 800442c:	fb26 4b05 	smlad	fp, r6, r5, r4
 8004430:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8004434:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8004438:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 800443c:	2401      	movs	r4, #1
 800443e:	fb26 f604 	smuad	r6, r6, r4
 8004442:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8004446:	9f02      	ldr	r7, [sp, #8]
 8004448:	eb0e 0c04 	add.w	ip, lr, r4
 800444c:	eb08 0406 	add.w	r4, r8, r6
 8004450:	eb05 060a 	add.w	r6, r5, sl
 8004454:	1bf6      	subs	r6, r6, r7
 8004456:	4637      	mov	r7, r6
 8004458:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800445c:	e9cd 7800 	strd	r7, r8, [sp]
 8004460:	9f05      	ldr	r7, [sp, #20]
 8004462:	b177      	cbz	r7, 8004482 <D24_GENERIC+0xea>
 8004464:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8004468:	9502      	str	r5, [sp, #8]
 800446a:	fba6 9a08 	umull	r9, sl, r6, r8
 800446e:	9e01      	ldr	r6, [sp, #4]
 8004470:	fb08 aa06 	mla	sl, r8, r6, sl
 8004474:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 8004478:	f14a 0700 	adc.w	r7, sl, #0
 800447c:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8004480:	4655      	mov	r5, sl
 8004482:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8004484:	9f03      	ldr	r7, [sp, #12]
 8004486:	03ad      	lsls	r5, r5, #14
 8004488:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800448c:	f04f 0900 	mov.w	r9, #0
 8004490:	fb0e fe06 	mul.w	lr, lr, r6
 8004494:	fbc7 8905 	smlal	r8, r9, r7, r5
 8004498:	9e04      	ldr	r6, [sp, #16]
 800449a:	464f      	mov	r7, r9
 800449c:	10bd      	asrs	r5, r7, #2
 800449e:	f305 050f 	ssat	r5, #16, r5
 80044a2:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 80044a6:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80044a8:	fa1f fe8c 	uxth.w	lr, ip
 80044ac:	4575      	cmp	r5, lr
 80044ae:	d91c      	bls.n	80044ea <D24_GENERIC+0x152>
 80044b0:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 80044b2:	b2ef      	uxtb	r7, r5
 80044b4:	2d01      	cmp	r5, #1
 80044b6:	b23e      	sxth	r6, r7
 80044b8:	d18f      	bne.n	80043da <D24_GENERIC+0x42>
 80044ba:	9d06      	ldr	r5, [sp, #24]
 80044bc:	b15d      	cbz	r5, 80044d6 <D24_GENERIC+0x13e>
 80044be:	f01e 0f01 	tst.w	lr, #1
 80044c2:	d122      	bne.n	800450a <D24_GENERIC+0x172>
 80044c4:	7805      	ldrb	r5, [r0, #0]
 80044c6:	78c7      	ldrb	r7, [r0, #3]
 80044c8:	7846      	ldrb	r6, [r0, #1]
 80044ca:	022d      	lsls	r5, r5, #8
 80044cc:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 80044d0:	44b4      	add	ip, r6
 80044d2:	3002      	adds	r0, #2
 80044d4:	e78e      	b.n	80043f4 <D24_GENERIC+0x5c>
 80044d6:	7846      	ldrb	r6, [r0, #1]
 80044d8:	f890 c002 	ldrb.w	ip, [r0, #2]
 80044dc:	f810 5b03 	ldrb.w	r5, [r0], #3
 80044e0:	0236      	lsls	r6, r6, #8
 80044e2:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 80044e6:	44ac      	add	ip, r5
 80044e8:	e784      	b.n	80043f4 <D24_GENERIC+0x5c>
 80044ea:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80044ee:	61d3      	str	r3, [r2, #28]
 80044f0:	9b07      	ldr	r3, [sp, #28]
 80044f2:	6094      	str	r4, [r2, #8]
 80044f4:	2000      	movs	r0, #0
 80044f6:	f8c2 b00c 	str.w	fp, [r2, #12]
 80044fa:	f8c2 a010 	str.w	sl, [r2, #16]
 80044fe:	f8c2 9014 	str.w	r9, [r2, #20]
 8004502:	6193      	str	r3, [r2, #24]
 8004504:	b009      	add	sp, #36	; 0x24
 8004506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800450a:	78c5      	ldrb	r5, [r0, #3]
 800450c:	7887      	ldrb	r7, [r0, #2]
 800450e:	f810 6b04 	ldrb.w	r6, [r0], #4
 8004512:	022d      	lsls	r5, r5, #8
 8004514:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8004518:	44b4      	add	ip, r6
 800451a:	e76b      	b.n	80043f4 <D24_GENERIC+0x5c>
 800451c:	20000188 	.word	0x20000188
 8004520:	00030001 	.word	0x00030001
 8004524:	00060007 	.word	0x00060007

08004528 <D32_GENERIC>:
 8004528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800452c:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800452e:	6993      	ldr	r3, [r2, #24]
 8004530:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8004532:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8004536:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800453a:	69d6      	ldr	r6, [r2, #28]
 800453c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8004540:	b089      	sub	sp, #36	; 0x24
 8004542:	9307      	str	r3, [sp, #28]
 8004544:	9403      	str	r4, [sp, #12]
 8004546:	6893      	ldr	r3, [r2, #8]
 8004548:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800454a:	9104      	str	r1, [sp, #16]
 800454c:	2d00      	cmp	r5, #0
 800454e:	f000 809f 	beq.w	8004690 <D32_GENERIC+0x168>
 8004552:	f004 0510 	and.w	r5, r4, #16
 8004556:	f004 0420 	and.w	r4, r4, #32
 800455a:	9505      	str	r5, [sp, #20]
 800455c:	4953      	ldr	r1, [pc, #332]	; (80046ac <D32_GENERIC+0x184>)
 800455e:	9406      	str	r4, [sp, #24]
 8004560:	f04f 0c00 	mov.w	ip, #0
 8004564:	f8cd 9008 	str.w	r9, [sp, #8]
 8004568:	461d      	mov	r5, r3
 800456a:	4617      	mov	r7, r2
 800456c:	e077      	b.n	800465e <D32_GENERIC+0x136>
 800456e:	f818 3003 	ldrb.w	r3, [r8, r3]
 8004572:	f810 800e 	ldrb.w	r8, [r0, lr]
 8004576:	f810 e002 	ldrb.w	lr, [r0, r2]
 800457a:	7800      	ldrb	r0, [r0, #0]
 800457c:	041b      	lsls	r3, r3, #16
 800457e:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8004582:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8004586:	4403      	add	r3, r0
 8004588:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800458c:	b2dc      	uxtb	r4, r3
 800458e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004592:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8004596:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800459a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800459e:	0e1b      	lsrs	r3, r3, #24
 80045a0:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 80045a4:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 80045a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80045ac:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 80045b0:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 80045b4:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 80045b8:	f3c6 0309 	ubfx	r3, r6, #0, #10
 80045bc:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80045c0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80045c4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80045c8:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 80045cc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80045d0:	4b37      	ldr	r3, [pc, #220]	; (80046b0 <D32_GENERIC+0x188>)
 80045d2:	fb22 b403 	smlad	r4, r2, r3, fp
 80045d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045da:	fb2e 4803 	smlad	r8, lr, r3, r4
 80045de:	4b35      	ldr	r3, [pc, #212]	; (80046b4 <D32_GENERIC+0x18c>)
 80045e0:	fb22 5503 	smlad	r5, r2, r3, r5
 80045e4:	4b34      	ldr	r3, [pc, #208]	; (80046b8 <D32_GENERIC+0x190>)
 80045e6:	fb2e 5b03 	smlad	fp, lr, r3, r5
 80045ea:	2301      	movs	r3, #1
 80045ec:	fb22 f203 	smuad	r2, r2, r3
 80045f0:	4b32      	ldr	r3, [pc, #200]	; (80046bc <D32_GENERIC+0x194>)
 80045f2:	fb2e 2503 	smlad	r5, lr, r3, r2
 80045f6:	9b02      	ldr	r3, [sp, #8]
 80045f8:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 80045fc:	eb04 080a 	add.w	r8, r4, sl
 8004600:	eba8 0803 	sub.w	r8, r8, r3
 8004604:	4642      	mov	r2, r8
 8004606:	17d3      	asrs	r3, r2, #31
 8004608:	e9cd 2300 	strd	r2, r3, [sp]
 800460c:	9b05      	ldr	r3, [sp, #20]
 800460e:	f10c 0e01 	add.w	lr, ip, #1
 8004612:	b16b      	cbz	r3, 8004630 <D32_GENERIC+0x108>
 8004614:	6a3a      	ldr	r2, [r7, #32]
 8004616:	9b01      	ldr	r3, [sp, #4]
 8004618:	9402      	str	r4, [sp, #8]
 800461a:	fba8 8902 	umull	r8, r9, r8, r2
 800461e:	fb02 9903 	mla	r9, r2, r3, r9
 8004622:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8004626:	f149 0900 	adc.w	r9, r9, #0
 800462a:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800462e:	4654      	mov	r4, sl
 8004630:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004632:	9a04      	ldr	r2, [sp, #16]
 8004634:	fb0c fc03 	mul.w	ip, ip, r3
 8004638:	9b03      	ldr	r3, [sp, #12]
 800463a:	0364      	lsls	r4, r4, #13
 800463c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004640:	f04f 0900 	mov.w	r9, #0
 8004644:	fbc3 8904 	smlal	r8, r9, r3, r4
 8004648:	464b      	mov	r3, r9
 800464a:	109b      	asrs	r3, r3, #2
 800464c:	f303 030f 	ssat	r3, #16, r3
 8004650:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 8004654:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004656:	fa1f fc8e 	uxth.w	ip, lr
 800465a:	4563      	cmp	r3, ip
 800465c:	d914      	bls.n	8004688 <D32_GENERIC+0x160>
 800465e:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8004660:	b2e2      	uxtb	r2, r4
 8004662:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 8004666:	eb00 080e 	add.w	r8, r0, lr
 800466a:	4253      	negs	r3, r2
 800466c:	2c01      	cmp	r4, #1
 800466e:	eb08 0403 	add.w	r4, r8, r3
 8004672:	f47f af7c 	bne.w	800456e <D32_GENERIC+0x46>
 8004676:	1d02      	adds	r2, r0, #4
 8004678:	6803      	ldr	r3, [r0, #0]
 800467a:	9806      	ldr	r0, [sp, #24]
 800467c:	b110      	cbz	r0, 8004684 <D32_GENERIC+0x15c>
 800467e:	ba5b      	rev16	r3, r3
 8004680:	4610      	mov	r0, r2
 8004682:	e783      	b.n	800458c <D32_GENERIC+0x64>
 8004684:	4610      	mov	r0, r2
 8004686:	e781      	b.n	800458c <D32_GENERIC+0x64>
 8004688:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800468c:	462b      	mov	r3, r5
 800468e:	463a      	mov	r2, r7
 8004690:	6093      	str	r3, [r2, #8]
 8004692:	9b07      	ldr	r3, [sp, #28]
 8004694:	f8c2 b00c 	str.w	fp, [r2, #12]
 8004698:	2000      	movs	r0, #0
 800469a:	61d6      	str	r6, [r2, #28]
 800469c:	f8c2 a010 	str.w	sl, [r2, #16]
 80046a0:	f8c2 9014 	str.w	r9, [r2, #20]
 80046a4:	6193      	str	r3, [r2, #24]
 80046a6:	b009      	add	sp, #36	; 0x24
 80046a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ac:	20000188 	.word	0x20000188
 80046b0:	00060003 	.word	0x00060003
 80046b4:	000a000c 	.word	0x000a000c
 80046b8:	000c000a 	.word	0x000c000a
 80046bc:	00030006 	.word	0x00030006

080046c0 <D48_GENERIC>:
 80046c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c4:	b089      	sub	sp, #36	; 0x24
 80046c6:	6953      	ldr	r3, [r2, #20]
 80046c8:	68d4      	ldr	r4, [r2, #12]
 80046ca:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80046cc:	9302      	str	r3, [sp, #8]
 80046ce:	9400      	str	r4, [sp, #0]
 80046d0:	6993      	ldr	r3, [r2, #24]
 80046d2:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80046d4:	9307      	str	r3, [sp, #28]
 80046d6:	9403      	str	r4, [sp, #12]
 80046d8:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80046dc:	69d6      	ldr	r6, [r2, #28]
 80046de:	6893      	ldr	r3, [r2, #8]
 80046e0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80046e2:	9104      	str	r1, [sp, #16]
 80046e4:	2d00      	cmp	r5, #0
 80046e6:	f000 80c5 	beq.w	8004874 <D48_GENERIC+0x1b4>
 80046ea:	f004 0510 	and.w	r5, r4, #16
 80046ee:	f004 0420 	and.w	r4, r4, #32
 80046f2:	4967      	ldr	r1, [pc, #412]	; (8004890 <D48_GENERIC+0x1d0>)
 80046f4:	9505      	str	r5, [sp, #20]
 80046f6:	9406      	str	r4, [sp, #24]
 80046f8:	f04f 0c00 	mov.w	ip, #0
 80046fc:	4657      	mov	r7, sl
 80046fe:	9301      	str	r3, [sp, #4]
 8004700:	e09c      	b.n	800483c <D48_GENERIC+0x17c>
 8004702:	f81b 4005 	ldrb.w	r4, [fp, r5]
 8004706:	f810 b009 	ldrb.w	fp, [r0, r9]
 800470a:	f81a 9009 	ldrb.w	r9, [sl, r9]
 800470e:	f810 a00e 	ldrb.w	sl, [r0, lr]
 8004712:	7800      	ldrb	r0, [r0, #0]
 8004714:	0424      	lsls	r4, r4, #16
 8004716:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 800471a:	f818 4005 	ldrb.w	r4, [r8, r5]
 800471e:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 8004722:	44a8      	add	r8, r5
 8004724:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 8004728:	eb0b 0500 	add.w	r5, fp, r0
 800472c:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 8004730:	fa5f f885 	uxtb.w	r8, r5
 8004734:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8004738:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 800473c:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8004740:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 8004744:	0e2d      	lsrs	r5, r5, #24
 8004746:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 800474a:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 800474e:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 8004752:	b2e6      	uxtb	r6, r4
 8004754:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 8004758:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800475c:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8004760:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8004764:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 8004768:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 800476c:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8004770:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 8004774:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004778:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800477c:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8004780:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8004784:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004788:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800478c:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8004790:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 8004794:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 8004798:	4c3e      	ldr	r4, [pc, #248]	; (8004894 <D48_GENERIC+0x1d4>)
 800479a:	9d00      	ldr	r5, [sp, #0]
 800479c:	fb2a 5404 	smlad	r4, sl, r4, r5
 80047a0:	4d3d      	ldr	r5, [pc, #244]	; (8004898 <D48_GENERIC+0x1d8>)
 80047a2:	fb28 4405 	smlad	r4, r8, r5, r4
 80047a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047aa:	fb2e 4b03 	smlad	fp, lr, r3, r4
 80047ae:	4c3b      	ldr	r4, [pc, #236]	; (800489c <D48_GENERIC+0x1dc>)
 80047b0:	9b01      	ldr	r3, [sp, #4]
 80047b2:	fb2a 3304 	smlad	r3, sl, r4, r3
 80047b6:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 80047ba:	fb28 3304 	smlad	r3, r8, r4, r3
 80047be:	4c38      	ldr	r4, [pc, #224]	; (80048a0 <D48_GENERIC+0x1e0>)
 80047c0:	fb2e 3304 	smlad	r3, lr, r4, r3
 80047c4:	2501      	movs	r5, #1
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	fb2a fa05 	smuad	sl, sl, r5
 80047cc:	4b35      	ldr	r3, [pc, #212]	; (80048a4 <D48_GENERIC+0x1e4>)
 80047ce:	fb28 a803 	smlad	r8, r8, r3, sl
 80047d2:	4b35      	ldr	r3, [pc, #212]	; (80048a8 <D48_GENERIC+0x1e8>)
 80047d4:	fb2e 8303 	smlad	r3, lr, r3, r8
 80047d8:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 80047dc:	9301      	str	r3, [sp, #4]
 80047de:	9b02      	ldr	r3, [sp, #8]
 80047e0:	eb04 0807 	add.w	r8, r4, r7
 80047e4:	eba8 0803 	sub.w	r8, r8, r3
 80047e8:	9b05      	ldr	r3, [sp, #20]
 80047ea:	4465      	add	r5, ip
 80047ec:	ea4f 7be8 	mov.w	fp, r8, asr #31
 80047f0:	b163      	cbz	r3, 800480c <D48_GENERIC+0x14c>
 80047f2:	6a17      	ldr	r7, [r2, #32]
 80047f4:	9402      	str	r4, [sp, #8]
 80047f6:	fba8 8907 	umull	r8, r9, r8, r7
 80047fa:	fb07 990b 	mla	r9, r7, fp, r9
 80047fe:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8004802:	f149 0900 	adc.w	r9, r9, #0
 8004806:	ea4f 0749 	mov.w	r7, r9, lsl #1
 800480a:	463c      	mov	r4, r7
 800480c:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 8004810:	9b03      	ldr	r3, [sp, #12]
 8004812:	02e4      	lsls	r4, r4, #11
 8004814:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004818:	f04f 0900 	mov.w	r9, #0
 800481c:	fb0c fc0e 	mul.w	ip, ip, lr
 8004820:	fbc3 8904 	smlal	r8, r9, r3, r4
 8004824:	9b04      	ldr	r3, [sp, #16]
 8004826:	ea4f 04a9 	mov.w	r4, r9, asr #2
 800482a:	f304 040f 	ssat	r4, #16, r4
 800482e:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 8004832:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8004834:	fa1f fc85 	uxth.w	ip, r5
 8004838:	4564      	cmp	r4, ip
 800483a:	d919      	bls.n	8004870 <D48_GENERIC+0x1b0>
 800483c:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800483e:	fa5f fe84 	uxtb.w	lr, r4
 8004842:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 8004846:	f1ce 0500 	rsb	r5, lr, #0
 800484a:	eb00 0b09 	add.w	fp, r0, r9
 800484e:	eb0b 0a05 	add.w	sl, fp, r5
 8004852:	2c01      	cmp	r4, #1
 8004854:	eb0a 0809 	add.w	r8, sl, r9
 8004858:	f47f af53 	bne.w	8004702 <D48_GENERIC+0x42>
 800485c:	9b06      	ldr	r3, [sp, #24]
 800485e:	6805      	ldr	r5, [r0, #0]
 8004860:	6844      	ldr	r4, [r0, #4]
 8004862:	3006      	adds	r0, #6
 8004864:	2b00      	cmp	r3, #0
 8004866:	f43f af63 	beq.w	8004730 <D48_GENERIC+0x70>
 800486a:	ba6d      	rev16	r5, r5
 800486c:	ba64      	rev16	r4, r4
 800486e:	e75f      	b.n	8004730 <D48_GENERIC+0x70>
 8004870:	9b01      	ldr	r3, [sp, #4]
 8004872:	46ba      	mov	sl, r7
 8004874:	6093      	str	r3, [r2, #8]
 8004876:	9b00      	ldr	r3, [sp, #0]
 8004878:	60d3      	str	r3, [r2, #12]
 800487a:	9b02      	ldr	r3, [sp, #8]
 800487c:	6153      	str	r3, [r2, #20]
 800487e:	9b07      	ldr	r3, [sp, #28]
 8004880:	61d6      	str	r6, [r2, #28]
 8004882:	2000      	movs	r0, #0
 8004884:	f8c2 a010 	str.w	sl, [r2, #16]
 8004888:	6193      	str	r3, [r2, #24]
 800488a:	b009      	add	sp, #36	; 0x24
 800488c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004890:	20000188 	.word	0x20000188
 8004894:	000f000a 	.word	0x000f000a
 8004898:	00060003 	.word	0x00060003
 800489c:	00150019 	.word	0x00150019
 80048a0:	00190015 	.word	0x00190015
 80048a4:	00030006 	.word	0x00030006
 80048a8:	000a000f 	.word	0x000a000f

080048ac <D64_GENERIC>:
 80048ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b0:	b089      	sub	sp, #36	; 0x24
 80048b2:	6913      	ldr	r3, [r2, #16]
 80048b4:	6895      	ldr	r5, [r2, #8]
 80048b6:	9303      	str	r3, [sp, #12]
 80048b8:	9501      	str	r5, [sp, #4]
 80048ba:	6953      	ldr	r3, [r2, #20]
 80048bc:	68d5      	ldr	r5, [r2, #12]
 80048be:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80048c0:	9304      	str	r3, [sp, #16]
 80048c2:	9500      	str	r5, [sp, #0]
 80048c4:	6993      	ldr	r3, [r2, #24]
 80048c6:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80048c8:	9307      	str	r3, [sp, #28]
 80048ca:	9505      	str	r5, [sp, #20]
 80048cc:	69d3      	ldr	r3, [r2, #28]
 80048ce:	9106      	str	r1, [sp, #24]
 80048d0:	2c00      	cmp	r4, #0
 80048d2:	f000 80d9 	beq.w	8004a88 <D64_GENERIC+0x1dc>
 80048d6:	6a11      	ldr	r1, [r2, #32]
 80048d8:	9102      	str	r1, [sp, #8]
 80048da:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 8004ac8 <D64_GENERIC+0x21c>
 80048de:	f04f 0c00 	mov.w	ip, #0
 80048e2:	4681      	mov	r9, r0
 80048e4:	e0c1      	b.n	8004a6a <D64_GENERIC+0x1be>
 80048e6:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 80048ea:	4274      	negs	r4, r6
 80048ec:	eb09 0708 	add.w	r7, r9, r8
 80048f0:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 80048f4:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 80048f8:	5d38      	ldrb	r0, [r7, r4]
 80048fa:	5d29      	ldrb	r1, [r5, r4]
 80048fc:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8004900:	f819 a008 	ldrb.w	sl, [r9, r8]
 8004904:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8004908:	f899 7000 	ldrb.w	r7, [r9]
 800490c:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 8004910:	4425      	add	r5, r4
 8004912:	0409      	lsls	r1, r1, #16
 8004914:	0400      	lsls	r0, r0, #16
 8004916:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800491a:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800491e:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 8004922:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 8004926:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 800492a:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 800492e:	4459      	add	r1, fp
 8004930:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 8004934:	4438      	add	r0, r7
 8004936:	b2c5      	uxtb	r5, r0
 8004938:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800493c:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 8004940:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 8004944:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8004948:	0e00      	lsrs	r0, r0, #24
 800494a:	eb03 0806 	add.w	r8, r3, r6
 800494e:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 8004952:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 8004956:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800495a:	b2c8      	uxtb	r0, r1
 800495c:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8004960:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8004964:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 8004968:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 800496c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8004970:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8004974:	0e09      	lsrs	r1, r1, #24
 8004976:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800497a:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 800497e:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8004982:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8004986:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800498a:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800498e:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8004992:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004996:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800499a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800499e:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 80049a2:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80049a6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80049aa:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80049ae:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80049b2:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 80049b6:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 80049ba:	0a8b      	lsrs	r3, r1, #10
 80049bc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80049c0:	4939      	ldr	r1, [pc, #228]	; (8004aa8 <D64_GENERIC+0x1fc>)
 80049c2:	9c00      	ldr	r4, [sp, #0]
 80049c4:	fb28 4101 	smlad	r1, r8, r1, r4
 80049c8:	4c38      	ldr	r4, [pc, #224]	; (8004aac <D64_GENERIC+0x200>)
 80049ca:	fb27 1104 	smlad	r1, r7, r4, r1
 80049ce:	4c38      	ldr	r4, [pc, #224]	; (8004ab0 <D64_GENERIC+0x204>)
 80049d0:	fb20 1104 	smlad	r1, r0, r4, r1
 80049d4:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 80049d8:	fb2a 1106 	smlad	r1, sl, r6, r1
 80049dc:	4c35      	ldr	r4, [pc, #212]	; (8004ab4 <D64_GENERIC+0x208>)
 80049de:	9d01      	ldr	r5, [sp, #4]
 80049e0:	fb28 5404 	smlad	r4, r8, r4, r5
 80049e4:	4d33      	ldr	r5, [pc, #204]	; (8004ab4 <D64_GENERIC+0x208>)
 80049e6:	fb2a 4415 	smladx	r4, sl, r5, r4
 80049ea:	4d33      	ldr	r5, [pc, #204]	; (8004ab8 <D64_GENERIC+0x20c>)
 80049ec:	fb27 4405 	smlad	r4, r7, r5, r4
 80049f0:	fb20 4415 	smladx	r4, r0, r5, r4
 80049f4:	2501      	movs	r5, #1
 80049f6:	9400      	str	r4, [sp, #0]
 80049f8:	fb28 f805 	smuad	r8, r8, r5
 80049fc:	4c2f      	ldr	r4, [pc, #188]	; (8004abc <D64_GENERIC+0x210>)
 80049fe:	fb27 8704 	smlad	r7, r7, r4, r8
 8004a02:	4c2f      	ldr	r4, [pc, #188]	; (8004ac0 <D64_GENERIC+0x214>)
 8004a04:	fb20 7004 	smlad	r0, r0, r4, r7
 8004a08:	4c2e      	ldr	r4, [pc, #184]	; (8004ac4 <D64_GENERIC+0x218>)
 8004a0a:	fb2a 0004 	smlad	r0, sl, r4, r0
 8004a0e:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 8004a12:	9902      	ldr	r1, [sp, #8]
 8004a14:	9001      	str	r0, [sp, #4]
 8004a16:	b189      	cbz	r1, 8004a3c <D64_GENERIC+0x190>
 8004a18:	9803      	ldr	r0, [sp, #12]
 8004a1a:	9c04      	ldr	r4, [sp, #16]
 8004a1c:	9604      	str	r6, [sp, #16]
 8004a1e:	4430      	add	r0, r6
 8004a20:	1b00      	subs	r0, r0, r4
 8004a22:	17c5      	asrs	r5, r0, #31
 8004a24:	460f      	mov	r7, r1
 8004a26:	fba0 0101 	umull	r0, r1, r0, r1
 8004a2a:	fb07 1105 	mla	r1, r7, r5, r1
 8004a2e:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8004a32:	f141 0100 	adc.w	r1, r1, #0
 8004a36:	0049      	lsls	r1, r1, #1
 8004a38:	9103      	str	r1, [sp, #12]
 8004a3a:	460e      	mov	r6, r1
 8004a3c:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 8004a3e:	9905      	ldr	r1, [sp, #20]
 8004a40:	9806      	ldr	r0, [sp, #24]
 8004a42:	02b6      	lsls	r6, r6, #10
 8004a44:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8004a48:	f04f 0800 	mov.w	r8, #0
 8004a4c:	fb0c f404 	mul.w	r4, ip, r4
 8004a50:	fbc1 7806 	smlal	r7, r8, r1, r6
 8004a54:	4641      	mov	r1, r8
 8004a56:	1089      	asrs	r1, r1, #2
 8004a58:	f301 010f 	ssat	r1, #16, r1
 8004a5c:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8004a60:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8004a62:	f10c 0c01 	add.w	ip, ip, #1
 8004a66:	4561      	cmp	r1, ip
 8004a68:	dd0e      	ble.n	8004a88 <D64_GENERIC+0x1dc>
 8004a6a:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 8004a6c:	2e01      	cmp	r6, #1
 8004a6e:	f47f af3a 	bne.w	80048e6 <D64_GENERIC+0x3a>
 8004a72:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8004a74:	06b4      	lsls	r4, r6, #26
 8004a76:	e899 0003 	ldmia.w	r9, {r0, r1}
 8004a7a:	f109 0908 	add.w	r9, r9, #8
 8004a7e:	f57f af5a 	bpl.w	8004936 <D64_GENERIC+0x8a>
 8004a82:	ba40      	rev16	r0, r0
 8004a84:	ba49      	rev16	r1, r1
 8004a86:	e756      	b.n	8004936 <D64_GENERIC+0x8a>
 8004a88:	61d3      	str	r3, [r2, #28]
 8004a8a:	9b03      	ldr	r3, [sp, #12]
 8004a8c:	9901      	ldr	r1, [sp, #4]
 8004a8e:	6113      	str	r3, [r2, #16]
 8004a90:	9b04      	ldr	r3, [sp, #16]
 8004a92:	6091      	str	r1, [r2, #8]
 8004a94:	6153      	str	r3, [r2, #20]
 8004a96:	9900      	ldr	r1, [sp, #0]
 8004a98:	9b07      	ldr	r3, [sp, #28]
 8004a9a:	60d1      	str	r1, [r2, #12]
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	6193      	str	r3, [r2, #24]
 8004aa0:	b009      	add	sp, #36	; 0x24
 8004aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aa6:	bf00      	nop
 8004aa8:	001c0015 	.word	0x001c0015
 8004aac:	000f000a 	.word	0x000f000a
 8004ab0:	00060003 	.word	0x00060003
 8004ab4:	0024002a 	.word	0x0024002a
 8004ab8:	002e0030 	.word	0x002e0030
 8004abc:	00030006 	.word	0x00030006
 8004ac0:	000a000f 	.word	0x000a000f
 8004ac4:	0015001c 	.word	0x0015001c
 8004ac8:	20000188 	.word	0x20000188

08004acc <D80_GENERIC>:
 8004acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ad0:	b08b      	sub	sp, #44	; 0x2c
 8004ad2:	6914      	ldr	r4, [r2, #16]
 8004ad4:	9404      	str	r4, [sp, #16]
 8004ad6:	6954      	ldr	r4, [r2, #20]
 8004ad8:	9405      	str	r4, [sp, #20]
 8004ada:	6994      	ldr	r4, [r2, #24]
 8004adc:	9409      	str	r4, [sp, #36]	; 0x24
 8004ade:	6894      	ldr	r4, [r2, #8]
 8004ae0:	9402      	str	r4, [sp, #8]
 8004ae2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8004ae4:	68d4      	ldr	r4, [r2, #12]
 8004ae6:	9401      	str	r4, [sp, #4]
 8004ae8:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8004aea:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 8004aee:	9406      	str	r4, [sp, #24]
 8004af0:	9107      	str	r1, [sp, #28]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 810f 	beq.w	8004d16 <D80_GENERIC+0x24a>
 8004af8:	6a13      	ldr	r3, [r2, #32]
 8004afa:	9308      	str	r3, [sp, #32]
 8004afc:	2300      	movs	r3, #0
 8004afe:	9200      	str	r2, [sp, #0]
 8004b00:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8004d68 <D80_GENERIC+0x29c>
 8004b04:	f8cd b00c 	str.w	fp, [sp, #12]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	e0ed      	b.n	8004ce8 <D80_GENERIC+0x21c>
 8004b0c:	fa5f fc8c 	uxtb.w	ip, ip
 8004b10:	fa0f f48c 	sxth.w	r4, ip
 8004b14:	0066      	lsls	r6, r4, #1
 8004b16:	eb06 0804 	add.w	r8, r6, r4
 8004b1a:	f1cc 0500 	rsb	r5, ip, #0
 8004b1e:	eb00 0108 	add.w	r1, r0, r8
 8004b22:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004b26:	194b      	adds	r3, r1, r5
 8004b28:	5d49      	ldrb	r1, [r1, r5]
 8004b2a:	f810 a008 	ldrb.w	sl, [r0, r8]
 8004b2e:	f813 b004 	ldrb.w	fp, [r3, r4]
 8004b32:	f810 c00c 	ldrb.w	ip, [r0, ip]
 8004b36:	f890 8000 	ldrb.w	r8, [r0]
 8004b3a:	eb03 0e04 	add.w	lr, r3, r4
 8004b3e:	eb0e 0705 	add.w	r7, lr, r5
 8004b42:	0409      	lsls	r1, r1, #16
 8004b44:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8004b48:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8004b4c:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8004b50:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8004b54:	eb0a 0004 	add.w	r0, sl, r4
 8004b58:	041b      	lsls	r3, r3, #16
 8004b5a:	f81a a004 	ldrb.w	sl, [sl, r4]
 8004b5e:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8004b62:	5d44      	ldrb	r4, [r0, r5]
 8004b64:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8004b68:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8004b6c:	4428      	add	r0, r5
 8004b6e:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8004b72:	4441      	add	r1, r8
 8004b74:	4430      	add	r0, r6
 8004b76:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8004b7a:	441f      	add	r7, r3
 8004b7c:	b2cd      	uxtb	r5, r1
 8004b7e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8004b82:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 8004b86:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 8004b8a:	9b03      	ldr	r3, [sp, #12]
 8004b8c:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8004b90:	0e09      	lsrs	r1, r1, #24
 8004b92:	4433      	add	r3, r6
 8004b94:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8004b98:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8004b9c:	b2fd      	uxtb	r5, r7
 8004b9e:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 8004ba2:	469b      	mov	fp, r3
 8004ba4:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8004ba8:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8004bac:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 8004bb0:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8004bb4:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8004bb8:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8004bbc:	0e3b      	lsrs	r3, r7, #24
 8004bbe:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8004bc2:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 8004bc6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8004bca:	fa5f fe84 	uxtb.w	lr, r4
 8004bce:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 8004bd2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8004bd6:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8004bda:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 8004bde:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8004be2:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8004be6:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 8004bea:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8004bee:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004bf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bf6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8004bfa:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004bfe:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004c02:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004c06:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8004c0a:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8004c0e:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8004c12:	0aa3      	lsrs	r3, r4, #10
 8004c14:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004c18:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8004c1c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004c20:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 8004c24:	9303      	str	r3, [sp, #12]
 8004c26:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8004c2a:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8004c2e:	4b42      	ldr	r3, [pc, #264]	; (8004d38 <D80_GENERIC+0x26c>)
 8004c30:	9901      	ldr	r1, [sp, #4]
 8004c32:	fb2b 1303 	smlad	r3, fp, r3, r1
 8004c36:	4941      	ldr	r1, [pc, #260]	; (8004d3c <D80_GENERIC+0x270>)
 8004c38:	fb28 3301 	smlad	r3, r8, r1, r3
 8004c3c:	4940      	ldr	r1, [pc, #256]	; (8004d40 <D80_GENERIC+0x274>)
 8004c3e:	fb2c 3301 	smlad	r3, ip, r1, r3
 8004c42:	4940      	ldr	r1, [pc, #256]	; (8004d44 <D80_GENERIC+0x278>)
 8004c44:	fb27 3301 	smlad	r3, r7, r1, r3
 8004c48:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004c4c:	fb2e 3301 	smlad	r3, lr, r1, r3
 8004c50:	493d      	ldr	r1, [pc, #244]	; (8004d48 <D80_GENERIC+0x27c>)
 8004c52:	9c02      	ldr	r4, [sp, #8]
 8004c54:	fb2b 4401 	smlad	r4, fp, r1, r4
 8004c58:	493c      	ldr	r1, [pc, #240]	; (8004d4c <D80_GENERIC+0x280>)
 8004c5a:	fb28 4401 	smlad	r4, r8, r1, r4
 8004c5e:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 8004c62:	fb2c 4101 	smlad	r1, ip, r1, r4
 8004c66:	4c3a      	ldr	r4, [pc, #232]	; (8004d50 <D80_GENERIC+0x284>)
 8004c68:	fb27 1104 	smlad	r1, r7, r4, r1
 8004c6c:	4c39      	ldr	r4, [pc, #228]	; (8004d54 <D80_GENERIC+0x288>)
 8004c6e:	fb2e 1104 	smlad	r1, lr, r4, r1
 8004c72:	9101      	str	r1, [sp, #4]
 8004c74:	2101      	movs	r1, #1
 8004c76:	fb2b fb01 	smuad	fp, fp, r1
 8004c7a:	4937      	ldr	r1, [pc, #220]	; (8004d58 <D80_GENERIC+0x28c>)
 8004c7c:	fb28 b801 	smlad	r8, r8, r1, fp
 8004c80:	4d36      	ldr	r5, [pc, #216]	; (8004d5c <D80_GENERIC+0x290>)
 8004c82:	fb2c 8c05 	smlad	ip, ip, r5, r8
 8004c86:	4d36      	ldr	r5, [pc, #216]	; (8004d60 <D80_GENERIC+0x294>)
 8004c88:	fb27 c705 	smlad	r7, r7, r5, ip
 8004c8c:	4d35      	ldr	r5, [pc, #212]	; (8004d64 <D80_GENERIC+0x298>)
 8004c8e:	fb2e 7105 	smlad	r1, lr, r5, r7
 8004c92:	9102      	str	r1, [sp, #8]
 8004c94:	9908      	ldr	r1, [sp, #32]
 8004c96:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 8004c9a:	b181      	cbz	r1, 8004cbe <D80_GENERIC+0x1f2>
 8004c9c:	9c04      	ldr	r4, [sp, #16]
 8004c9e:	9d05      	ldr	r5, [sp, #20]
 8004ca0:	9305      	str	r3, [sp, #20]
 8004ca2:	441c      	add	r4, r3
 8004ca4:	1b64      	subs	r4, r4, r5
 8004ca6:	17e7      	asrs	r7, r4, #31
 8004ca8:	fba4 4501 	umull	r4, r5, r4, r1
 8004cac:	fb01 5507 	mla	r5, r1, r7, r5
 8004cb0:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8004cb4:	f145 0500 	adc.w	r5, r5, #0
 8004cb8:	0069      	lsls	r1, r5, #1
 8004cba:	9104      	str	r1, [sp, #16]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	9e00      	ldr	r6, [sp, #0]
 8004cc0:	9f06      	ldr	r7, [sp, #24]
 8004cc2:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8004cc4:	025b      	lsls	r3, r3, #9
 8004cc6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004cca:	2500      	movs	r5, #0
 8004ccc:	fb02 f101 	mul.w	r1, r2, r1
 8004cd0:	fbc7 4503 	smlal	r4, r5, r7, r3
 8004cd4:	9c07      	ldr	r4, [sp, #28]
 8004cd6:	10ab      	asrs	r3, r5, #2
 8004cd8:	f303 030f 	ssat	r3, #16, r3
 8004cdc:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8004ce0:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8004ce2:	3201      	adds	r2, #1
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	dd13      	ble.n	8004d10 <D80_GENERIC+0x244>
 8004ce8:	9b00      	ldr	r3, [sp, #0]
 8004cea:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 8004cee:	f1bc 0f01 	cmp.w	ip, #1
 8004cf2:	f47f af0b 	bne.w	8004b0c <D80_GENERIC+0x40>
 8004cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf8:	6884      	ldr	r4, [r0, #8]
 8004cfa:	069b      	lsls	r3, r3, #26
 8004cfc:	e890 0082 	ldmia.w	r0, {r1, r7}
 8004d00:	f100 000a 	add.w	r0, r0, #10
 8004d04:	f57f af3a 	bpl.w	8004b7c <D80_GENERIC+0xb0>
 8004d08:	ba49      	rev16	r1, r1
 8004d0a:	ba7f      	rev16	r7, r7
 8004d0c:	ba64      	rev16	r4, r4
 8004d0e:	e735      	b.n	8004b7c <D80_GENERIC+0xb0>
 8004d10:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004d14:	4632      	mov	r2, r6
 8004d16:	9b02      	ldr	r3, [sp, #8]
 8004d18:	6093      	str	r3, [r2, #8]
 8004d1a:	9b01      	ldr	r3, [sp, #4]
 8004d1c:	60d3      	str	r3, [r2, #12]
 8004d1e:	9b04      	ldr	r3, [sp, #16]
 8004d20:	6113      	str	r3, [r2, #16]
 8004d22:	9b05      	ldr	r3, [sp, #20]
 8004d24:	6153      	str	r3, [r2, #20]
 8004d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d28:	f8c2 b01c 	str.w	fp, [r2, #28]
 8004d2c:	2000      	movs	r0, #0
 8004d2e:	6193      	str	r3, [r2, #24]
 8004d30:	b00b      	add	sp, #44	; 0x2c
 8004d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d36:	bf00      	nop
 8004d38:	002d0024 	.word	0x002d0024
 8004d3c:	001c0015 	.word	0x001c0015
 8004d40:	000f000a 	.word	0x000f000a
 8004d44:	00060003 	.word	0x00060003
 8004d48:	0037003f 	.word	0x0037003f
 8004d4c:	00450049 	.word	0x00450049
 8004d50:	00490045 	.word	0x00490045
 8004d54:	003f0037 	.word	0x003f0037
 8004d58:	00030006 	.word	0x00030006
 8004d5c:	000a000f 	.word	0x000a000f
 8004d60:	0015001c 	.word	0x0015001c
 8004d64:	0024002d 	.word	0x0024002d
 8004d68:	20000188 	.word	0x20000188

08004d6c <D128_GENERIC>:
 8004d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d70:	b093      	sub	sp, #76	; 0x4c
 8004d72:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8004d74:	9005      	str	r0, [sp, #20]
 8004d76:	4610      	mov	r0, r2
 8004d78:	9201      	str	r2, [sp, #4]
 8004d7a:	6912      	ldr	r2, [r2, #16]
 8004d7c:	920c      	str	r2, [sp, #48]	; 0x30
 8004d7e:	4602      	mov	r2, r0
 8004d80:	6940      	ldr	r0, [r0, #20]
 8004d82:	900d      	str	r0, [sp, #52]	; 0x34
 8004d84:	4610      	mov	r0, r2
 8004d86:	4614      	mov	r4, r2
 8004d88:	6992      	ldr	r2, [r2, #24]
 8004d8a:	9211      	str	r2, [sp, #68]	; 0x44
 8004d8c:	69c2      	ldr	r2, [r0, #28]
 8004d8e:	9202      	str	r2, [sp, #8]
 8004d90:	68e2      	ldr	r2, [r4, #12]
 8004d92:	6880      	ldr	r0, [r0, #8]
 8004d94:	9203      	str	r2, [sp, #12]
 8004d96:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004d98:	9004      	str	r0, [sp, #16]
 8004d9a:	920e      	str	r2, [sp, #56]	; 0x38
 8004d9c:	910f      	str	r1, [sp, #60]	; 0x3c
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 819b 	beq.w	80050da <D128_GENERIC+0x36e>
 8004da4:	6a23      	ldr	r3, [r4, #32]
 8004da6:	9310      	str	r3, [sp, #64]	; 0x40
 8004da8:	2300      	movs	r3, #0
 8004daa:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 8005154 <D128_GENERIC+0x3e8>
 8004dae:	9306      	str	r3, [sp, #24]
 8004db0:	e17a      	b.n	80050a8 <D128_GENERIC+0x33c>
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	9d05      	ldr	r5, [sp, #20]
 8004db6:	b214      	sxth	r4, r2
 8004db8:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8004dbc:	4250      	negs	r0, r2
 8004dbe:	eb05 010a 	add.w	r1, r5, sl
 8004dc2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004dc6:	eb01 0800 	add.w	r8, r1, r0
 8004dca:	eb0b 0c04 	add.w	ip, fp, r4
 8004dce:	eb08 070c 	add.w	r7, r8, ip
 8004dd2:	183b      	adds	r3, r7, r0
 8004dd4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8004dd8:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 8004ddc:	eb0e 0604 	add.w	r6, lr, r4
 8004de0:	9307      	str	r3, [sp, #28]
 8004de2:	1833      	adds	r3, r6, r0
 8004de4:	9305      	str	r3, [sp, #20]
 8004de6:	462b      	mov	r3, r5
 8004de8:	f815 a00a 	ldrb.w	sl, [r5, sl]
 8004dec:	f8cd a020 	str.w	sl, [sp, #32]
 8004df0:	f818 a00c 	ldrb.w	sl, [r8, ip]
 8004df4:	f813 c002 	ldrb.w	ip, [r3, r2]
 8004df8:	f81e 8004 	ldrb.w	r8, [lr, r4]
 8004dfc:	5c3a      	ldrb	r2, [r7, r0]
 8004dfe:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 8004e02:	781f      	ldrb	r7, [r3, #0]
 8004e04:	9b07      	ldr	r3, [sp, #28]
 8004e06:	9d05      	ldr	r5, [sp, #20]
 8004e08:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8004e0c:	5c09      	ldrb	r1, [r1, r0]
 8004e0e:	9709      	str	r7, [sp, #36]	; 0x24
 8004e10:	9307      	str	r3, [sp, #28]
 8004e12:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8004e16:	5c33      	ldrb	r3, [r6, r0]
 8004e18:	0412      	lsls	r2, r2, #16
 8004e1a:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8004e1e:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8004e22:	9d08      	ldr	r5, [sp, #32]
 8004e24:	eb06 0a04 	add.w	sl, r6, r4
 8004e28:	0409      	lsls	r1, r1, #16
 8004e2a:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 8004e2e:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8004e32:	5d36      	ldrb	r6, [r6, r4]
 8004e34:	9c05      	ldr	r4, [sp, #20]
 8004e36:	042d      	lsls	r5, r5, #16
 8004e38:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8004e3c:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8004e40:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8004e44:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 8004e48:	eb0a 0c00 	add.w	ip, sl, r0
 8004e4c:	041b      	lsls	r3, r3, #16
 8004e4e:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8004e52:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8004e56:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 8004e5a:	9d07      	ldr	r5, [sp, #28]
 8004e5c:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8004e60:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 8004e64:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004e66:	4458      	add	r0, fp
 8004e68:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8004e6c:	9005      	str	r0, [sp, #20]
 8004e6e:	4439      	add	r1, r7
 8004e70:	442a      	add	r2, r5
 8004e72:	44b2      	add	sl, r6
 8004e74:	1918      	adds	r0, r3, r4
 8004e76:	b2cb      	uxtb	r3, r1
 8004e78:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8004e7c:	9e02      	ldr	r6, [sp, #8]
 8004e7e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8004e82:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8004e86:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8004e8a:	441e      	add	r6, r3
 8004e8c:	0e09      	lsrs	r1, r1, #24
 8004e8e:	4633      	mov	r3, r6
 8004e90:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8004e94:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8004e98:	b2d4      	uxtb	r4, r2
 8004e9a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8004e9e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004ea2:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8004ea6:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8004eaa:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8004eae:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8004eb2:	0e12      	lsrs	r2, r2, #24
 8004eb4:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8004eb8:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8004ebc:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8004ec0:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8004ec4:	9702      	str	r7, [sp, #8]
 8004ec6:	b2c2      	uxtb	r2, r0
 8004ec8:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8004ecc:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 8004ed0:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8004ed4:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8004ed8:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8004edc:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8004ee0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8004ee4:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8004ee8:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8004eec:	0e00      	lsrs	r0, r0, #24
 8004eee:	fa5f f68a 	uxtb.w	r6, sl
 8004ef2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ef8:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8004efc:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8004f00:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8004f04:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8004f08:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004f0c:	950a      	str	r5, [sp, #40]	; 0x28
 8004f0e:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8004f12:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8004f16:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8004f1a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8004f1e:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8004f22:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004f26:	920b      	str	r2, [sp, #44]	; 0x2c
 8004f28:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8004f2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f2e:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8004f32:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8004f36:	9307      	str	r3, [sp, #28]
 8004f38:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8004f3c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8004f40:	9b02      	ldr	r3, [sp, #8]
 8004f42:	f8cd c008 	str.w	ip, [sp, #8]
 8004f46:	4694      	mov	ip, r2
 8004f48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f4a:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8004f4e:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8004f52:	9a02      	ldr	r2, [sp, #8]
 8004f54:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004f58:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8004f5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004f60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f62:	f8cd a020 	str.w	sl, [sp, #32]
 8004f66:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004f6a:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8004f6e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004f72:	9b07      	ldr	r3, [sp, #28]
 8004f74:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004f78:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8004f7c:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 8004f80:	9a08      	ldr	r2, [sp, #32]
 8004f82:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004f86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f8a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8004f8e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004f92:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 8004f96:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8004f9a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004f9e:	0a96      	lsrs	r6, r2, #10
 8004fa0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004fa4:	9602      	str	r6, [sp, #8]
 8004fa6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8004faa:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8004fae:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 8004fb2:	4e53      	ldr	r6, [pc, #332]	; (8005100 <D128_GENERIC+0x394>)
 8004fb4:	9f03      	ldr	r7, [sp, #12]
 8004fb6:	fb2c 7606 	smlad	r6, ip, r6, r7
 8004fba:	4f52      	ldr	r7, [pc, #328]	; (8005104 <D128_GENERIC+0x398>)
 8004fbc:	fb2a 6607 	smlad	r6, sl, r7, r6
 8004fc0:	4f51      	ldr	r7, [pc, #324]	; (8005108 <D128_GENERIC+0x39c>)
 8004fc2:	fb21 6607 	smlad	r6, r1, r7, r6
 8004fc6:	4f51      	ldr	r7, [pc, #324]	; (800510c <D128_GENERIC+0x3a0>)
 8004fc8:	fb24 6607 	smlad	r6, r4, r7, r6
 8004fcc:	4f50      	ldr	r7, [pc, #320]	; (8005110 <D128_GENERIC+0x3a4>)
 8004fce:	fb28 6607 	smlad	r6, r8, r7, r6
 8004fd2:	4f50      	ldr	r7, [pc, #320]	; (8005114 <D128_GENERIC+0x3a8>)
 8004fd4:	fb20 6607 	smlad	r6, r0, r7, r6
 8004fd8:	4f4f      	ldr	r7, [pc, #316]	; (8005118 <D128_GENERIC+0x3ac>)
 8004fda:	fb23 6607 	smlad	r6, r3, r7, r6
 8004fde:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8004fe2:	fb25 6607 	smlad	r6, r5, r7, r6
 8004fe6:	4f4d      	ldr	r7, [pc, #308]	; (800511c <D128_GENERIC+0x3b0>)
 8004fe8:	9a04      	ldr	r2, [sp, #16]
 8004fea:	fb2c 2e07 	smlad	lr, ip, r7, r2
 8004fee:	4a4c      	ldr	r2, [pc, #304]	; (8005120 <D128_GENERIC+0x3b4>)
 8004ff0:	fb2a ee02 	smlad	lr, sl, r2, lr
 8004ff4:	4f4b      	ldr	r7, [pc, #300]	; (8005124 <D128_GENERIC+0x3b8>)
 8004ff6:	fb21 ee07 	smlad	lr, r1, r7, lr
 8004ffa:	4f4b      	ldr	r7, [pc, #300]	; (8005128 <D128_GENERIC+0x3bc>)
 8004ffc:	fb24 ee07 	smlad	lr, r4, r7, lr
 8005000:	4f4a      	ldr	r7, [pc, #296]	; (800512c <D128_GENERIC+0x3c0>)
 8005002:	fb28 ee07 	smlad	lr, r8, r7, lr
 8005006:	4f4a      	ldr	r7, [pc, #296]	; (8005130 <D128_GENERIC+0x3c4>)
 8005008:	fb20 ee07 	smlad	lr, r0, r7, lr
 800500c:	4f49      	ldr	r7, [pc, #292]	; (8005134 <D128_GENERIC+0x3c8>)
 800500e:	fb23 e707 	smlad	r7, r3, r7, lr
 8005012:	f8df e144 	ldr.w	lr, [pc, #324]	; 8005158 <D128_GENERIC+0x3ec>
 8005016:	fb25 720e 	smlad	r2, r5, lr, r7
 800501a:	f04f 0b01 	mov.w	fp, #1
 800501e:	9203      	str	r2, [sp, #12]
 8005020:	fb2c fb0b 	smuad	fp, ip, fp
 8005024:	4f44      	ldr	r7, [pc, #272]	; (8005138 <D128_GENERIC+0x3cc>)
 8005026:	fb2a ba07 	smlad	sl, sl, r7, fp
 800502a:	4f44      	ldr	r7, [pc, #272]	; (800513c <D128_GENERIC+0x3d0>)
 800502c:	fb21 aa07 	smlad	sl, r1, r7, sl
 8005030:	4f43      	ldr	r7, [pc, #268]	; (8005140 <D128_GENERIC+0x3d4>)
 8005032:	fb24 aa07 	smlad	sl, r4, r7, sl
 8005036:	4f43      	ldr	r7, [pc, #268]	; (8005144 <D128_GENERIC+0x3d8>)
 8005038:	fb28 a707 	smlad	r7, r8, r7, sl
 800503c:	4a42      	ldr	r2, [pc, #264]	; (8005148 <D128_GENERIC+0x3dc>)
 800503e:	fb20 7702 	smlad	r7, r0, r2, r7
 8005042:	4a42      	ldr	r2, [pc, #264]	; (800514c <D128_GENERIC+0x3e0>)
 8005044:	fb23 7702 	smlad	r7, r3, r2, r7
 8005048:	4b41      	ldr	r3, [pc, #260]	; (8005150 <D128_GENERIC+0x3e4>)
 800504a:	fb25 7303 	smlad	r3, r5, r3, r7
 800504e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005050:	9304      	str	r3, [sp, #16]
 8005052:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8005056:	b185      	cbz	r5, 800507a <D128_GENERIC+0x30e>
 8005058:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800505a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800505c:	960d      	str	r6, [sp, #52]	; 0x34
 800505e:	4432      	add	r2, r6
 8005060:	1a52      	subs	r2, r2, r1
 8005062:	17d1      	asrs	r1, r2, #31
 8005064:	fba2 2305 	umull	r2, r3, r2, r5
 8005068:	fb05 3301 	mla	r3, r5, r1, r3
 800506c:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8005070:	f143 0300 	adc.w	r3, r3, #0
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	930c      	str	r3, [sp, #48]	; 0x30
 8005078:	461e      	mov	r6, r3
 800507a:	9801      	ldr	r0, [sp, #4]
 800507c:	9c06      	ldr	r4, [sp, #24]
 800507e:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8005080:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005082:	01f6      	lsls	r6, r6, #7
 8005084:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005088:	2300      	movs	r3, #0
 800508a:	fbc5 2306 	smlal	r2, r3, r5, r6
 800508e:	fb04 f101 	mul.w	r1, r4, r1
 8005092:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005094:	109b      	asrs	r3, r3, #2
 8005096:	f303 030f 	ssat	r3, #16, r3
 800509a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800509e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80050a0:	1c62      	adds	r2, r4, #1
 80050a2:	4293      	cmp	r3, r2
 80050a4:	9206      	str	r2, [sp, #24]
 80050a6:	dd18      	ble.n	80050da <D128_GENERIC+0x36e>
 80050a8:	9b01      	ldr	r3, [sp, #4]
 80050aa:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80050ac:	2a01      	cmp	r2, #1
 80050ae:	f47f ae80 	bne.w	8004db2 <D128_GENERIC+0x46>
 80050b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b4:	9d05      	ldr	r5, [sp, #20]
 80050b6:	069b      	lsls	r3, r3, #26
 80050b8:	6829      	ldr	r1, [r5, #0]
 80050ba:	686a      	ldr	r2, [r5, #4]
 80050bc:	68a8      	ldr	r0, [r5, #8]
 80050be:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80050c2:	f105 0410 	add.w	r4, r5, #16
 80050c6:	d506      	bpl.n	80050d6 <D128_GENERIC+0x36a>
 80050c8:	ba49      	rev16	r1, r1
 80050ca:	ba52      	rev16	r2, r2
 80050cc:	ba40      	rev16	r0, r0
 80050ce:	fa9a fa9a 	rev16.w	sl, sl
 80050d2:	9405      	str	r4, [sp, #20]
 80050d4:	e6cf      	b.n	8004e76 <D128_GENERIC+0x10a>
 80050d6:	9405      	str	r4, [sp, #20]
 80050d8:	e6cd      	b.n	8004e76 <D128_GENERIC+0x10a>
 80050da:	9a01      	ldr	r2, [sp, #4]
 80050dc:	9904      	ldr	r1, [sp, #16]
 80050de:	6091      	str	r1, [r2, #8]
 80050e0:	9903      	ldr	r1, [sp, #12]
 80050e2:	60d1      	str	r1, [r2, #12]
 80050e4:	9b02      	ldr	r3, [sp, #8]
 80050e6:	61d3      	str	r3, [r2, #28]
 80050e8:	4611      	mov	r1, r2
 80050ea:	4613      	mov	r3, r2
 80050ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80050ee:	610a      	str	r2, [r1, #16]
 80050f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80050f2:	6159      	str	r1, [r3, #20]
 80050f4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80050f6:	6199      	str	r1, [r3, #24]
 80050f8:	2000      	movs	r0, #0
 80050fa:	b013      	add	sp, #76	; 0x4c
 80050fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005100:	00780069 	.word	0x00780069
 8005104:	005b004e 	.word	0x005b004e
 8005108:	00420037 	.word	0x00420037
 800510c:	002d0024 	.word	0x002d0024
 8005110:	001c0015 	.word	0x001c0015
 8005114:	000f000a 	.word	0x000f000a
 8005118:	00060003 	.word	0x00060003
 800511c:	00880096 	.word	0x00880096
 8005120:	00a200ac 	.word	0x00a200ac
 8005124:	00b400ba 	.word	0x00b400ba
 8005128:	00be00c0 	.word	0x00be00c0
 800512c:	00c000be 	.word	0x00c000be
 8005130:	00ba00b4 	.word	0x00ba00b4
 8005134:	00ac00a2 	.word	0x00ac00a2
 8005138:	00030006 	.word	0x00030006
 800513c:	000a000f 	.word	0x000a000f
 8005140:	0015001c 	.word	0x0015001c
 8005144:	0024002d 	.word	0x0024002d
 8005148:	00370042 	.word	0x00370042
 800514c:	004e005b 	.word	0x004e005b
 8005150:	00690078 	.word	0x00690078
 8005154:	20000188 	.word	0x20000188
 8005158:	00960088 	.word	0x00960088

0800515c <D16_1CH_HTONS_VOL_HP>:
 800515c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005160:	4691      	mov	r9, r2
 8005162:	b083      	sub	sp, #12
 8005164:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8005166:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800516a:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	4680      	mov	r8, r0
 8005172:	f8d9 7014 	ldr.w	r7, [r9, #20]
 8005176:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800517a:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800517e:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8005182:	9401      	str	r4, [sp, #4]
 8005184:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8005188:	f8d9 e020 	ldr.w	lr, [r9, #32]
 800518c:	2a00      	cmp	r2, #0
 800518e:	d04e      	beq.n	800522e <D16_1CH_HTONS_VOL_HP+0xd2>
 8005190:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800523c <D16_1CH_HTONS_VOL_HP+0xe0>
 8005194:	1e8c      	subs	r4, r1, #2
 8005196:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 800519a:	f858 2b02 	ldr.w	r2, [r8], #2
 800519e:	ba52      	rev16	r2, r2
 80051a0:	b2d6      	uxtb	r6, r2
 80051a2:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80051a6:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 80051aa:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 80051ae:	4413      	add	r3, r2
 80051b0:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 80051b4:	f3c2 0109 	ubfx	r1, r2, #0, #10
 80051b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80051c0:	0a93      	lsrs	r3, r2, #10
 80051c2:	4a1c      	ldr	r2, [pc, #112]	; (8005234 <D16_1CH_HTONS_VOL_HP+0xd8>)
 80051c4:	fb21 5202 	smlad	r2, r1, r2, r5
 80051c8:	4d1b      	ldr	r5, [pc, #108]	; (8005238 <D16_1CH_HTONS_VOL_HP+0xdc>)
 80051ca:	fb21 f505 	smuad	r5, r1, r5
 80051ce:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 80051d2:	4410      	add	r0, r2
 80051d4:	1bc0      	subs	r0, r0, r7
 80051d6:	17c7      	asrs	r7, r0, #31
 80051d8:	fba0 010e 	umull	r0, r1, r0, lr
 80051dc:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 80051e0:	fb0e 1107 	mla	r1, lr, r7, r1
 80051e4:	f141 0100 	adc.w	r1, r1, #0
 80051e8:	0448      	lsls	r0, r1, #17
 80051ea:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80051ee:	2700      	movs	r7, #0
 80051f0:	fbc0 670a 	smlal	r6, r7, r0, sl
 80051f4:	45d8      	cmp	r8, fp
 80051f6:	ea4f 0041 	mov.w	r0, r1, lsl #1
 80051fa:	ea4f 01a7 	mov.w	r1, r7, asr #2
 80051fe:	4617      	mov	r7, r2
 8005200:	f301 010f 	ssat	r1, #16, r1
 8005204:	f824 1f02 	strh.w	r1, [r4, #2]!
 8005208:	d1c7      	bne.n	800519a <D16_1CH_HTONS_VOL_HP+0x3e>
 800520a:	9901      	ldr	r1, [sp, #4]
 800520c:	f8c9 301c 	str.w	r3, [r9, #28]
 8005210:	9b00      	ldr	r3, [sp, #0]
 8005212:	f8c9 0010 	str.w	r0, [r9, #16]
 8005216:	2000      	movs	r0, #0
 8005218:	f8c9 5008 	str.w	r5, [r9, #8]
 800521c:	f8c9 100c 	str.w	r1, [r9, #12]
 8005220:	f8c9 2014 	str.w	r2, [r9, #20]
 8005224:	f8c9 3018 	str.w	r3, [r9, #24]
 8005228:	b003      	add	sp, #12
 800522a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800522e:	463a      	mov	r2, r7
 8005230:	4621      	mov	r1, r4
 8005232:	e7eb      	b.n	800520c <D16_1CH_HTONS_VOL_HP+0xb0>
 8005234:	00030001 	.word	0x00030001
 8005238:	00010003 	.word	0x00010003
 800523c:	20000188 	.word	0x20000188

08005240 <D24_1CH_HTONS_VOL_HP>:
 8005240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005244:	b089      	sub	sp, #36	; 0x24
 8005246:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8005248:	6996      	ldr	r6, [r2, #24]
 800524a:	9304      	str	r3, [sp, #16]
 800524c:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800524e:	9207      	str	r2, [sp, #28]
 8005250:	6915      	ldr	r5, [r2, #16]
 8005252:	6954      	ldr	r4, [r2, #20]
 8005254:	9606      	str	r6, [sp, #24]
 8005256:	6893      	ldr	r3, [r2, #8]
 8005258:	69d6      	ldr	r6, [r2, #28]
 800525a:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800525e:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8005262:	9a04      	ldr	r2, [sp, #16]
 8005264:	9705      	str	r7, [sp, #20]
 8005266:	2a00      	cmp	r2, #0
 8005268:	d07e      	beq.n	8005368 <D24_1CH_HTONS_VOL_HP+0x128>
 800526a:	f1a1 0b02 	sub.w	fp, r1, #2
 800526e:	2700      	movs	r7, #0
 8005270:	46a8      	mov	r8, r5
 8005272:	f8cd b004 	str.w	fp, [sp, #4]
 8005276:	4655      	mov	r5, sl
 8005278:	46e3      	mov	fp, ip
 800527a:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 8005374 <D24_1CH_HTONS_VOL_HP+0x134>
 800527e:	46ba      	mov	sl, r7
 8005280:	469c      	mov	ip, r3
 8005282:	e055      	b.n	8005330 <D24_1CH_HTONS_VOL_HP+0xf0>
 8005284:	7802      	ldrb	r2, [r0, #0]
 8005286:	78c3      	ldrb	r3, [r0, #3]
 8005288:	7841      	ldrb	r1, [r0, #1]
 800528a:	0212      	lsls	r2, r2, #8
 800528c:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8005290:	440b      	add	r3, r1
 8005292:	3002      	adds	r0, #2
 8005294:	b2d9      	uxtb	r1, r3
 8005296:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800529a:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 800529e:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 80052a2:	0c1b      	lsrs	r3, r3, #16
 80052a4:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80052a8:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 80052ac:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 80052b0:	f3c7 0309 	ubfx	r3, r7, #0, #10
 80052b4:	f3c2 0709 	ubfx	r7, r2, #0, #10
 80052b8:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80052bc:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80052c0:	4a2a      	ldr	r2, [pc, #168]	; (800536c <D24_1CH_HTONS_VOL_HP+0x12c>)
 80052c2:	fb23 b102 	smlad	r1, r3, r2, fp
 80052c6:	4a2a      	ldr	r2, [pc, #168]	; (8005370 <D24_1CH_HTONS_VOL_HP+0x130>)
 80052c8:	fb23 cb02 	smlad	fp, r3, r2, ip
 80052cc:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 80052d0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80052d4:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 80052d8:	2201      	movs	r2, #1
 80052da:	fb23 f702 	smuad	r7, r3, r2
 80052de:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 80052e2:	eb01 0208 	add.w	r2, r1, r8
 80052e6:	1b12      	subs	r2, r2, r4
 80052e8:	17d4      	asrs	r4, r2, #31
 80052ea:	fba2 2305 	umull	r2, r3, r2, r5
 80052ee:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80052f2:	fb05 3304 	mla	r3, r5, r4, r3
 80052f6:	f143 0300 	adc.w	r3, r3, #0
 80052fa:	9c05      	ldr	r4, [sp, #20]
 80052fc:	03da      	lsls	r2, r3, #15
 80052fe:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005302:	f04f 0900 	mov.w	r9, #0
 8005306:	fbc4 8902 	smlal	r8, r9, r4, r2
 800530a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800530e:	9a01      	ldr	r2, [sp, #4]
 8005310:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8005314:	9b03      	ldr	r3, [sp, #12]
 8005316:	109b      	asrs	r3, r3, #2
 8005318:	f303 030f 	ssat	r3, #16, r3
 800531c:	f822 3f02 	strh.w	r3, [r2, #2]!
 8005320:	9b04      	ldr	r3, [sp, #16]
 8005322:	9201      	str	r2, [sp, #4]
 8005324:	f10a 0a01 	add.w	sl, sl, #1
 8005328:	459a      	cmp	sl, r3
 800532a:	44bc      	add	ip, r7
 800532c:	460c      	mov	r4, r1
 800532e:	d00b      	beq.n	8005348 <D24_1CH_HTONS_VOL_HP+0x108>
 8005330:	f01a 0f01 	tst.w	sl, #1
 8005334:	d0a6      	beq.n	8005284 <D24_1CH_HTONS_VOL_HP+0x44>
 8005336:	78c2      	ldrb	r2, [r0, #3]
 8005338:	7883      	ldrb	r3, [r0, #2]
 800533a:	f810 1b04 	ldrb.w	r1, [r0], #4
 800533e:	0212      	lsls	r2, r2, #8
 8005340:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8005344:	440b      	add	r3, r1
 8005346:	e7a5      	b.n	8005294 <D24_1CH_HTONS_VOL_HP+0x54>
 8005348:	4663      	mov	r3, ip
 800534a:	4645      	mov	r5, r8
 800534c:	46dc      	mov	ip, fp
 800534e:	9807      	ldr	r0, [sp, #28]
 8005350:	6141      	str	r1, [r0, #20]
 8005352:	9906      	ldr	r1, [sp, #24]
 8005354:	6083      	str	r3, [r0, #8]
 8005356:	f8c0 c00c 	str.w	ip, [r0, #12]
 800535a:	61c6      	str	r6, [r0, #28]
 800535c:	6105      	str	r5, [r0, #16]
 800535e:	6181      	str	r1, [r0, #24]
 8005360:	2000      	movs	r0, #0
 8005362:	b009      	add	sp, #36	; 0x24
 8005364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005368:	4621      	mov	r1, r4
 800536a:	e7f0      	b.n	800534e <D24_1CH_HTONS_VOL_HP+0x10e>
 800536c:	00030001 	.word	0x00030001
 8005370:	00060007 	.word	0x00060007
 8005374:	20000188 	.word	0x20000188

08005378 <D32_1CH_HTONS_VOL_HP>:
 8005378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800537c:	4692      	mov	sl, r2
 800537e:	b087      	sub	sp, #28
 8005380:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8005382:	f8da 3018 	ldr.w	r3, [sl, #24]
 8005386:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 800538a:	9304      	str	r3, [sp, #16]
 800538c:	f8da 4010 	ldr.w	r4, [sl, #16]
 8005390:	f8da 8014 	ldr.w	r8, [sl, #20]
 8005394:	f8da 601c 	ldr.w	r6, [sl, #28]
 8005398:	f8da 3008 	ldr.w	r3, [sl, #8]
 800539c:	f8da e00c 	ldr.w	lr, [sl, #12]
 80053a0:	9501      	str	r5, [sp, #4]
 80053a2:	f8da c020 	ldr.w	ip, [sl, #32]
 80053a6:	2a00      	cmp	r2, #0
 80053a8:	d07b      	beq.n	80054a2 <D32_1CH_HTONS_VOL_HP+0x12a>
 80053aa:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80053ae:	4f3e      	ldr	r7, [pc, #248]	; (80054a8 <D32_1CH_HTONS_VOL_HP+0x130>)
 80053b0:	f8cd c00c 	str.w	ip, [sp, #12]
 80053b4:	9202      	str	r2, [sp, #8]
 80053b6:	460d      	mov	r5, r1
 80053b8:	46a1      	mov	r9, r4
 80053ba:	4684      	mov	ip, r0
 80053bc:	f8cd a014 	str.w	sl, [sp, #20]
 80053c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80053c4:	ba49      	rev16	r1, r1
 80053c6:	b2c8      	uxtb	r0, r1
 80053c8:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80053cc:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 80053d0:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80053d4:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80053d8:	0e09      	lsrs	r1, r1, #24
 80053da:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 80053de:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 80053e2:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80053e6:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 80053ea:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 80053ee:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 80053f2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80053f6:	f3c6 0109 	ubfx	r1, r6, #0, #10
 80053fa:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80053fe:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8005402:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 8005406:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800540a:	4a28      	ldr	r2, [pc, #160]	; (80054ac <D32_1CH_HTONS_VOL_HP+0x134>)
 800540c:	fb20 e202 	smlad	r2, r0, r2, lr
 8005410:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005414:	fb2a 2101 	smlad	r1, sl, r1, r2
 8005418:	4a25      	ldr	r2, [pc, #148]	; (80054b0 <D32_1CH_HTONS_VOL_HP+0x138>)
 800541a:	fb20 3302 	smlad	r3, r0, r2, r3
 800541e:	4a25      	ldr	r2, [pc, #148]	; (80054b4 <D32_1CH_HTONS_VOL_HP+0x13c>)
 8005420:	fb2a 3e02 	smlad	lr, sl, r2, r3
 8005424:	2301      	movs	r3, #1
 8005426:	fb20 f003 	smuad	r0, r0, r3
 800542a:	4b23      	ldr	r3, [pc, #140]	; (80054b8 <D32_1CH_HTONS_VOL_HP+0x140>)
 800542c:	fb2a 0303 	smlad	r3, sl, r3, r0
 8005430:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 8005434:	9c03      	ldr	r4, [sp, #12]
 8005436:	eb02 0009 	add.w	r0, r2, r9
 800543a:	eba0 0008 	sub.w	r0, r0, r8
 800543e:	ea4f 7be0 	mov.w	fp, r0, asr #31
 8005442:	fba0 0104 	umull	r0, r1, r0, r4
 8005446:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800544a:	fb04 110b 	mla	r1, r4, fp, r1
 800544e:	f141 0100 	adc.w	r1, r1, #0
 8005452:	9c01      	ldr	r4, [sp, #4]
 8005454:	0388      	lsls	r0, r1, #14
 8005456:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800545a:	f04f 0900 	mov.w	r9, #0
 800545e:	fbc0 8904 	smlal	r8, r9, r0, r4
 8005462:	ea4f 00a9 	mov.w	r0, r9, asr #2
 8005466:	ea4f 0941 	mov.w	r9, r1, lsl #1
 800546a:	f300 000f 	ssat	r0, #16, r0
 800546e:	9902      	ldr	r1, [sp, #8]
 8005470:	f825 0b02 	strh.w	r0, [r5], #2
 8005474:	428d      	cmp	r5, r1
 8005476:	4690      	mov	r8, r2
 8005478:	d1a2      	bne.n	80053c0 <D32_1CH_HTONS_VOL_HP+0x48>
 800547a:	f8dd a014 	ldr.w	sl, [sp, #20]
 800547e:	464c      	mov	r4, r9
 8005480:	f8ca 3008 	str.w	r3, [sl, #8]
 8005484:	9b04      	ldr	r3, [sp, #16]
 8005486:	f8ca e00c 	str.w	lr, [sl, #12]
 800548a:	2000      	movs	r0, #0
 800548c:	f8ca 601c 	str.w	r6, [sl, #28]
 8005490:	f8ca 4010 	str.w	r4, [sl, #16]
 8005494:	f8ca 2014 	str.w	r2, [sl, #20]
 8005498:	f8ca 3018 	str.w	r3, [sl, #24]
 800549c:	b007      	add	sp, #28
 800549e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054a2:	4642      	mov	r2, r8
 80054a4:	e7ec      	b.n	8005480 <D32_1CH_HTONS_VOL_HP+0x108>
 80054a6:	bf00      	nop
 80054a8:	20000188 	.word	0x20000188
 80054ac:	00060003 	.word	0x00060003
 80054b0:	000a000c 	.word	0x000a000c
 80054b4:	000c000a 	.word	0x000c000a
 80054b8:	00030006 	.word	0x00030006

080054bc <D48_1CH_HTONS_VOL_HP>:
 80054bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c0:	4613      	mov	r3, r2
 80054c2:	461c      	mov	r4, r3
 80054c4:	b087      	sub	sp, #28
 80054c6:	4625      	mov	r5, r4
 80054c8:	4626      	mov	r6, r4
 80054ca:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 80054cc:	9205      	str	r2, [sp, #20]
 80054ce:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80054d0:	f8d3 9014 	ldr.w	r9, [r3, #20]
 80054d4:	9501      	str	r5, [sp, #4]
 80054d6:	4680      	mov	r8, r0
 80054d8:	6a35      	ldr	r5, [r6, #32]
 80054da:	6918      	ldr	r0, [r3, #16]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	9304      	str	r3, [sp, #16]
 80054e0:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 80054e4:	68a3      	ldr	r3, [r4, #8]
 80054e6:	9502      	str	r5, [sp, #8]
 80054e8:	68e4      	ldr	r4, [r4, #12]
 80054ea:	2a00      	cmp	r2, #0
 80054ec:	f000 808c 	beq.w	8005608 <D48_1CH_HTONS_VOL_HP+0x14c>
 80054f0:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80054f4:	4d45      	ldr	r5, [pc, #276]	; (800560c <D48_1CH_HTONS_VOL_HP+0x150>)
 80054f6:	9203      	str	r2, [sp, #12]
 80054f8:	468c      	mov	ip, r1
 80054fa:	e898 0044 	ldmia.w	r8, {r2, r6}
 80054fe:	f108 0806 	add.w	r8, r8, #6
 8005502:	ba52      	rev16	r2, r2
 8005504:	ba76      	rev16	r6, r6
 8005506:	b2d7      	uxtb	r7, r2
 8005508:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800550c:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 8005510:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8005514:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8005518:	0e12      	lsrs	r2, r2, #24
 800551a:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800551e:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8005522:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8005526:	fa5f fb86 	uxtb.w	fp, r6
 800552a:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800552e:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8005532:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8005536:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 800553a:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 800553e:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8005542:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8005546:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800554a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800554e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005552:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 8005556:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800555a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800555e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005562:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8005566:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800556a:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 800556e:	4a28      	ldr	r2, [pc, #160]	; (8005610 <D48_1CH_HTONS_VOL_HP+0x154>)
 8005570:	fb2a 4202 	smlad	r2, sl, r2, r4
 8005574:	4927      	ldr	r1, [pc, #156]	; (8005614 <D48_1CH_HTONS_VOL_HP+0x158>)
 8005576:	fb27 2201 	smlad	r2, r7, r1, r2
 800557a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800557e:	fb26 2201 	smlad	r2, r6, r1, r2
 8005582:	4925      	ldr	r1, [pc, #148]	; (8005618 <D48_1CH_HTONS_VOL_HP+0x15c>)
 8005584:	fb2a 3401 	smlad	r4, sl, r1, r3
 8005588:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800558c:	fb27 4403 	smlad	r4, r7, r3, r4
 8005590:	4b22      	ldr	r3, [pc, #136]	; (800561c <D48_1CH_HTONS_VOL_HP+0x160>)
 8005592:	fb26 4403 	smlad	r4, r6, r3, r4
 8005596:	2101      	movs	r1, #1
 8005598:	fb2a fa01 	smuad	sl, sl, r1
 800559c:	4b20      	ldr	r3, [pc, #128]	; (8005620 <D48_1CH_HTONS_VOL_HP+0x164>)
 800559e:	fb27 a703 	smlad	r7, r7, r3, sl
 80055a2:	4b20      	ldr	r3, [pc, #128]	; (8005624 <D48_1CH_HTONS_VOL_HP+0x168>)
 80055a4:	fb26 7303 	smlad	r3, r6, r3, r7
 80055a8:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 80055ac:	9e02      	ldr	r6, [sp, #8]
 80055ae:	9f01      	ldr	r7, [sp, #4]
 80055b0:	4410      	add	r0, r2
 80055b2:	eba0 0009 	sub.w	r0, r0, r9
 80055b6:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 80055ba:	fba0 0106 	umull	r0, r1, r0, r6
 80055be:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 80055c2:	fb06 110a 	mla	r1, r6, sl, r1
 80055c6:	f141 0100 	adc.w	r1, r1, #0
 80055ca:	0308      	lsls	r0, r1, #12
 80055cc:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80055d0:	f04f 0a00 	mov.w	sl, #0
 80055d4:	fbc0 9a07 	smlal	r9, sl, r0, r7
 80055d8:	4657      	mov	r7, sl
 80055da:	10b8      	asrs	r0, r7, #2
 80055dc:	f300 000f 	ssat	r0, #16, r0
 80055e0:	f82c 0b02 	strh.w	r0, [ip], #2
 80055e4:	0048      	lsls	r0, r1, #1
 80055e6:	9903      	ldr	r1, [sp, #12]
 80055e8:	458c      	cmp	ip, r1
 80055ea:	4691      	mov	r9, r2
 80055ec:	d185      	bne.n	80054fa <D48_1CH_HTONS_VOL_HP+0x3e>
 80055ee:	9d05      	ldr	r5, [sp, #20]
 80055f0:	616a      	str	r2, [r5, #20]
 80055f2:	9a04      	ldr	r2, [sp, #16]
 80055f4:	6128      	str	r0, [r5, #16]
 80055f6:	2000      	movs	r0, #0
 80055f8:	60ab      	str	r3, [r5, #8]
 80055fa:	60ec      	str	r4, [r5, #12]
 80055fc:	f8c5 e01c 	str.w	lr, [r5, #28]
 8005600:	61aa      	str	r2, [r5, #24]
 8005602:	b007      	add	sp, #28
 8005604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005608:	464a      	mov	r2, r9
 800560a:	e7f0      	b.n	80055ee <D48_1CH_HTONS_VOL_HP+0x132>
 800560c:	20000188 	.word	0x20000188
 8005610:	000f000a 	.word	0x000f000a
 8005614:	00060003 	.word	0x00060003
 8005618:	00150019 	.word	0x00150019
 800561c:	00190015 	.word	0x00190015
 8005620:	00030006 	.word	0x00030006
 8005624:	000a000f 	.word	0x000a000f

08005628 <D64_1CH_HTONS_VOL_HP>:
 8005628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800562c:	b089      	sub	sp, #36	; 0x24
 800562e:	4614      	mov	r4, r2
 8005630:	9207      	str	r2, [sp, #28]
 8005632:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8005634:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8005638:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800563c:	6992      	ldr	r2, [r2, #24]
 800563e:	9206      	str	r2, [sp, #24]
 8005640:	68e2      	ldr	r2, [r4, #12]
 8005642:	9201      	str	r2, [sp, #4]
 8005644:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005646:	9203      	str	r2, [sp, #12]
 8005648:	6a22      	ldr	r2, [r4, #32]
 800564a:	69e5      	ldr	r5, [r4, #28]
 800564c:	68a6      	ldr	r6, [r4, #8]
 800564e:	9204      	str	r2, [sp, #16]
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 80b0 	beq.w	80057b6 <D64_1CH_HTONS_VOL_HP+0x18e>
 8005656:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800565a:	4f58      	ldr	r7, [pc, #352]	; (80057bc <D64_1CH_HTONS_VOL_HP+0x194>)
 800565c:	9305      	str	r3, [sp, #20]
 800565e:	9102      	str	r1, [sp, #8]
 8005660:	f850 2b08 	ldr.w	r2, [r0], #8
 8005664:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005668:	ba52      	rev16	r2, r2
 800566a:	fa93 f993 	rev16.w	r9, r3
 800566e:	b2d4      	uxtb	r4, r2
 8005670:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8005674:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 8005678:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800567c:	9901      	ldr	r1, [sp, #4]
 800567e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8005682:	0e12      	lsrs	r2, r2, #24
 8005684:	44ab      	add	fp, r5
 8005686:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800568a:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 800568e:	fa5f f289 	uxtb.w	r2, r9
 8005692:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 8005696:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800569a:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 800569e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80056a2:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80056a6:	f3c9 4507 	ubfx	r5, r9, #16, #8
 80056aa:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 80056ae:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80056b2:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 80056b6:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80056ba:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 80056be:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 80056c2:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80056c6:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 80056ca:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80056ce:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80056d2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80056d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056da:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80056de:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 80056e2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80056e6:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 80056ea:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80056ee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80056f2:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 80056f6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80056fa:	ea4f 2599 	mov.w	r5, r9, lsr #10
 80056fe:	4b30      	ldr	r3, [pc, #192]	; (80057c0 <D64_1CH_HTONS_VOL_HP+0x198>)
 8005700:	fb2b 1303 	smlad	r3, fp, r3, r1
 8005704:	492f      	ldr	r1, [pc, #188]	; (80057c4 <D64_1CH_HTONS_VOL_HP+0x19c>)
 8005706:	fb24 3301 	smlad	r3, r4, r1, r3
 800570a:	492f      	ldr	r1, [pc, #188]	; (80057c8 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800570c:	fb22 3301 	smlad	r3, r2, r1, r3
 8005710:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8005714:	fb2e 390a 	smlad	r9, lr, sl, r3
 8005718:	4b2c      	ldr	r3, [pc, #176]	; (80057cc <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800571a:	fb2b 6603 	smlad	r6, fp, r3, r6
 800571e:	fb2e 6613 	smladx	r6, lr, r3, r6
 8005722:	4b2b      	ldr	r3, [pc, #172]	; (80057d0 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 8005724:	fb24 6603 	smlad	r6, r4, r3, r6
 8005728:	fb22 6313 	smladx	r3, r2, r3, r6
 800572c:	f04f 0a01 	mov.w	sl, #1
 8005730:	9301      	str	r3, [sp, #4]
 8005732:	fb2b fb0a 	smuad	fp, fp, sl
 8005736:	4b27      	ldr	r3, [pc, #156]	; (80057d4 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 8005738:	fb24 ba03 	smlad	sl, r4, r3, fp
 800573c:	4b26      	ldr	r3, [pc, #152]	; (80057d8 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800573e:	fb22 a203 	smlad	r2, r2, r3, sl
 8005742:	4b26      	ldr	r3, [pc, #152]	; (80057dc <D64_1CH_HTONS_VOL_HP+0x1b4>)
 8005744:	fb2e 2603 	smlad	r6, lr, r3, r2
 8005748:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 800574c:	eb0a 020c 	add.w	r2, sl, ip
 8005750:	9c04      	ldr	r4, [sp, #16]
 8005752:	9903      	ldr	r1, [sp, #12]
 8005754:	eba2 0208 	sub.w	r2, r2, r8
 8005758:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800575c:	fba2 2304 	umull	r2, r3, r2, r4
 8005760:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8005764:	fb04 3309 	mla	r3, r4, r9, r3
 8005768:	f143 0300 	adc.w	r3, r3, #0
 800576c:	02da      	lsls	r2, r3, #11
 800576e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005772:	f04f 0900 	mov.w	r9, #0
 8005776:	fbc1 8902 	smlal	r8, r9, r1, r2
 800577a:	9902      	ldr	r1, [sp, #8]
 800577c:	ea4f 02a9 	mov.w	r2, r9, asr #2
 8005780:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005784:	f302 020f 	ssat	r2, #16, r2
 8005788:	9b05      	ldr	r3, [sp, #20]
 800578a:	f821 2b02 	strh.w	r2, [r1], #2
 800578e:	4299      	cmp	r1, r3
 8005790:	9102      	str	r1, [sp, #8]
 8005792:	46d0      	mov	r8, sl
 8005794:	f47f af64 	bne.w	8005660 <D64_1CH_HTONS_VOL_HP+0x38>
 8005798:	9a07      	ldr	r2, [sp, #28]
 800579a:	9901      	ldr	r1, [sp, #4]
 800579c:	60d1      	str	r1, [r2, #12]
 800579e:	9906      	ldr	r1, [sp, #24]
 80057a0:	6096      	str	r6, [r2, #8]
 80057a2:	2000      	movs	r0, #0
 80057a4:	61d5      	str	r5, [r2, #28]
 80057a6:	f8c2 c010 	str.w	ip, [r2, #16]
 80057aa:	f8c2 a014 	str.w	sl, [r2, #20]
 80057ae:	6191      	str	r1, [r2, #24]
 80057b0:	b009      	add	sp, #36	; 0x24
 80057b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057b6:	46c2      	mov	sl, r8
 80057b8:	4622      	mov	r2, r4
 80057ba:	e7ee      	b.n	800579a <D64_1CH_HTONS_VOL_HP+0x172>
 80057bc:	20000188 	.word	0x20000188
 80057c0:	001c0015 	.word	0x001c0015
 80057c4:	000f000a 	.word	0x000f000a
 80057c8:	00060003 	.word	0x00060003
 80057cc:	0024002a 	.word	0x0024002a
 80057d0:	002e0030 	.word	0x002e0030
 80057d4:	00030006 	.word	0x00030006
 80057d8:	000a000f 	.word	0x000a000f
 80057dc:	0015001c 	.word	0x0015001c

080057e0 <D80_1CH_HTONS_VOL_HP>:
 80057e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e4:	4613      	mov	r3, r2
 80057e6:	b089      	sub	sp, #36	; 0x24
 80057e8:	4686      	mov	lr, r0
 80057ea:	6918      	ldr	r0, [r3, #16]
 80057ec:	9000      	str	r0, [sp, #0]
 80057ee:	4618      	mov	r0, r3
 80057f0:	461c      	mov	r4, r3
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	9302      	str	r3, [sp, #8]
 80057f6:	6983      	ldr	r3, [r0, #24]
 80057f8:	9306      	str	r3, [sp, #24]
 80057fa:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80057fe:	69c3      	ldr	r3, [r0, #28]
 8005800:	68c0      	ldr	r0, [r0, #12]
 8005802:	9207      	str	r2, [sp, #28]
 8005804:	9001      	str	r0, [sp, #4]
 8005806:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8005808:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800580a:	9003      	str	r0, [sp, #12]
 800580c:	6a20      	ldr	r0, [r4, #32]
 800580e:	9004      	str	r0, [sp, #16]
 8005810:	2a00      	cmp	r2, #0
 8005812:	f000 80d2 	beq.w	80059ba <D80_1CH_HTONS_VOL_HP+0x1da>
 8005816:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800581a:	4869      	ldr	r0, [pc, #420]	; (80059c0 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800581c:	9205      	str	r2, [sp, #20]
 800581e:	461c      	mov	r4, r3
 8005820:	f8de 5000 	ldr.w	r5, [lr]
 8005824:	f8de 2004 	ldr.w	r2, [lr, #4]
 8005828:	f8de 3008 	ldr.w	r3, [lr, #8]
 800582c:	f10e 0e0a 	add.w	lr, lr, #10
 8005830:	ba6d      	rev16	r5, r5
 8005832:	ba52      	rev16	r2, r2
 8005834:	fa93 fb93 	rev16.w	fp, r3
 8005838:	b2ee      	uxtb	r6, r5
 800583a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800583e:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8005842:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005846:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800584a:	eb04 0a07 	add.w	sl, r4, r7
 800584e:	0e2d      	lsrs	r5, r5, #24
 8005850:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8005854:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8005858:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800585c:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 8005860:	b2d5      	uxtb	r5, r2
 8005862:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8005866:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800586a:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800586e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8005872:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8005876:	0e12      	lsrs	r2, r2, #24
 8005878:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 800587c:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 8005880:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8005884:	fa5f f48b 	uxtb.w	r4, fp
 8005888:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800588c:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8005890:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8005894:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8005898:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 800589c:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 80058a0:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 80058a4:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 80058a8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80058ac:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80058b0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80058b4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80058b8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80058bc:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80058c0:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 80058c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058c8:	f3cb 0609 	ubfx	r6, fp, #0, #10
 80058cc:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80058d0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80058d4:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 80058d8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80058dc:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 80058e0:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80058e4:	ea4f 249b 	mov.w	r4, fp, lsr #10
 80058e8:	4d36      	ldr	r5, [pc, #216]	; (80059c4 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 80058ea:	9f01      	ldr	r7, [sp, #4]
 80058ec:	fb23 7505 	smlad	r5, r3, r5, r7
 80058f0:	4f35      	ldr	r7, [pc, #212]	; (80059c8 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 80058f2:	fb29 5507 	smlad	r5, r9, r7, r5
 80058f6:	4f35      	ldr	r7, [pc, #212]	; (80059cc <D80_1CH_HTONS_VOL_HP+0x1ec>)
 80058f8:	fb28 5507 	smlad	r5, r8, r7, r5
 80058fc:	4f34      	ldr	r7, [pc, #208]	; (80059d0 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 80058fe:	fb22 5507 	smlad	r5, r2, r7, r5
 8005902:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8005906:	fb26 5b0a 	smlad	fp, r6, sl, r5
 800590a:	4d32      	ldr	r5, [pc, #200]	; (80059d4 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800590c:	fb23 cc05 	smlad	ip, r3, r5, ip
 8005910:	4d31      	ldr	r5, [pc, #196]	; (80059d8 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8005912:	fb29 cc05 	smlad	ip, r9, r5, ip
 8005916:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 800591a:	fb28 c505 	smlad	r5, r8, r5, ip
 800591e:	4f2f      	ldr	r7, [pc, #188]	; (80059dc <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8005920:	fb22 5507 	smlad	r5, r2, r7, r5
 8005924:	4f2e      	ldr	r7, [pc, #184]	; (80059e0 <D80_1CH_HTONS_VOL_HP+0x200>)
 8005926:	fb26 5507 	smlad	r5, r6, r7, r5
 800592a:	f04f 0a01 	mov.w	sl, #1
 800592e:	9501      	str	r5, [sp, #4]
 8005930:	fb23 fa0a 	smuad	sl, r3, sl
 8005934:	4b2b      	ldr	r3, [pc, #172]	; (80059e4 <D80_1CH_HTONS_VOL_HP+0x204>)
 8005936:	fb29 a903 	smlad	r9, r9, r3, sl
 800593a:	4d2b      	ldr	r5, [pc, #172]	; (80059e8 <D80_1CH_HTONS_VOL_HP+0x208>)
 800593c:	fb28 9805 	smlad	r8, r8, r5, r9
 8005940:	4d2a      	ldr	r5, [pc, #168]	; (80059ec <D80_1CH_HTONS_VOL_HP+0x20c>)
 8005942:	fb22 8205 	smlad	r2, r2, r5, r8
 8005946:	4b2a      	ldr	r3, [pc, #168]	; (80059f0 <D80_1CH_HTONS_VOL_HP+0x210>)
 8005948:	fb26 2c03 	smlad	ip, r6, r3, r2
 800594c:	9b00      	ldr	r3, [sp, #0]
 800594e:	9d04      	ldr	r5, [sp, #16]
 8005950:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 8005954:	4453      	add	r3, sl
 8005956:	461a      	mov	r2, r3
 8005958:	9b02      	ldr	r3, [sp, #8]
 800595a:	f8cd a008 	str.w	sl, [sp, #8]
 800595e:	1ad2      	subs	r2, r2, r3
 8005960:	17d7      	asrs	r7, r2, #31
 8005962:	fba2 2305 	umull	r2, r3, r2, r5
 8005966:	fb05 3307 	mla	r3, r5, r7, r3
 800596a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800596e:	f143 0300 	adc.w	r3, r3, #0
 8005972:	9d03      	ldr	r5, [sp, #12]
 8005974:	029a      	lsls	r2, r3, #10
 8005976:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800597a:	2700      	movs	r7, #0
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	fbc5 6702 	smlal	r6, r7, r5, r2
 8005982:	10ba      	asrs	r2, r7, #2
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	f302 020f 	ssat	r2, #16, r2
 800598a:	9b05      	ldr	r3, [sp, #20]
 800598c:	f821 2b02 	strh.w	r2, [r1], #2
 8005990:	4299      	cmp	r1, r3
 8005992:	f47f af45 	bne.w	8005820 <D80_1CH_HTONS_VOL_HP+0x40>
 8005996:	4623      	mov	r3, r4
 8005998:	9907      	ldr	r1, [sp, #28]
 800599a:	9801      	ldr	r0, [sp, #4]
 800599c:	60c8      	str	r0, [r1, #12]
 800599e:	9a00      	ldr	r2, [sp, #0]
 80059a0:	f8c1 c008 	str.w	ip, [r1, #8]
 80059a4:	4608      	mov	r0, r1
 80059a6:	61cb      	str	r3, [r1, #28]
 80059a8:	610a      	str	r2, [r1, #16]
 80059aa:	f8c1 a014 	str.w	sl, [r1, #20]
 80059ae:	9906      	ldr	r1, [sp, #24]
 80059b0:	6181      	str	r1, [r0, #24]
 80059b2:	2000      	movs	r0, #0
 80059b4:	b009      	add	sp, #36	; 0x24
 80059b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ba:	f8dd a008 	ldr.w	sl, [sp, #8]
 80059be:	e7eb      	b.n	8005998 <D80_1CH_HTONS_VOL_HP+0x1b8>
 80059c0:	20000188 	.word	0x20000188
 80059c4:	002d0024 	.word	0x002d0024
 80059c8:	001c0015 	.word	0x001c0015
 80059cc:	000f000a 	.word	0x000f000a
 80059d0:	00060003 	.word	0x00060003
 80059d4:	0037003f 	.word	0x0037003f
 80059d8:	00450049 	.word	0x00450049
 80059dc:	00490045 	.word	0x00490045
 80059e0:	003f0037 	.word	0x003f0037
 80059e4:	00030006 	.word	0x00030006
 80059e8:	000a000f 	.word	0x000a000f
 80059ec:	0015001c 	.word	0x0015001c
 80059f0:	0024002d 	.word	0x0024002d

080059f4 <D128_1CH_HTONS_VOL_HP>:
 80059f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f8:	b093      	sub	sp, #76	; 0x4c
 80059fa:	4614      	mov	r4, r2
 80059fc:	9211      	str	r2, [sp, #68]	; 0x44
 80059fe:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8005a00:	6912      	ldr	r2, [r2, #16]
 8005a02:	9203      	str	r2, [sp, #12]
 8005a04:	4622      	mov	r2, r4
 8005a06:	4615      	mov	r5, r2
 8005a08:	6964      	ldr	r4, [r4, #20]
 8005a0a:	9406      	str	r4, [sp, #24]
 8005a0c:	4614      	mov	r4, r2
 8005a0e:	6992      	ldr	r2, [r2, #24]
 8005a10:	9210      	str	r2, [sp, #64]	; 0x40
 8005a12:	68ea      	ldr	r2, [r5, #12]
 8005a14:	9204      	str	r2, [sp, #16]
 8005a16:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8005a18:	69e6      	ldr	r6, [r4, #28]
 8005a1a:	920d      	str	r2, [sp, #52]	; 0x34
 8005a1c:	68a4      	ldr	r4, [r4, #8]
 8005a1e:	6a2a      	ldr	r2, [r5, #32]
 8005a20:	9405      	str	r4, [sp, #20]
 8005a22:	920e      	str	r2, [sp, #56]	; 0x38
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 8145 	beq.w	8005cb4 <D128_1CH_HTONS_VOL_HP+0x2c0>
 8005a2a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8005a2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a30:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8005d10 <D128_1CH_HTONS_VOL_HP+0x31c>
 8005a34:	9107      	str	r1, [sp, #28]
 8005a36:	f100 0310 	add.w	r3, r0, #16
 8005a3a:	4699      	mov	r9, r3
 8005a3c:	f1a9 0110 	sub.w	r1, r9, #16
 8005a40:	c90e      	ldmia	r1, {r1, r2, r3}
 8005a42:	f859 0c04 	ldr.w	r0, [r9, #-4]
 8005a46:	ba49      	rev16	r1, r1
 8005a48:	ba52      	rev16	r2, r2
 8005a4a:	ba5b      	rev16	r3, r3
 8005a4c:	fa90 fa90 	rev16.w	sl, r0
 8005a50:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8005a54:	b2cc      	uxtb	r4, r1
 8005a56:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 8005a5a:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8005a5e:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8005a62:	0e09      	lsrs	r1, r1, #24
 8005a64:	4426      	add	r6, r4
 8005a66:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8005a6a:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 8005a6e:	b2d0      	uxtb	r0, r2
 8005a70:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8005a74:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 8005a78:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005a7c:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8005a80:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8005a84:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8005a88:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8005a8c:	0e12      	lsrs	r2, r2, #24
 8005a8e:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8005a92:	9701      	str	r7, [sp, #4]
 8005a94:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8005a98:	4627      	mov	r7, r4
 8005a9a:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8005a9e:	9702      	str	r7, [sp, #8]
 8005aa0:	b2da      	uxtb	r2, r3
 8005aa2:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8005aa6:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 8005aaa:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8005aae:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8005ab2:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 8005ab6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005aba:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8005abe:	0e1b      	lsrs	r3, r3, #24
 8005ac0:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8005ac4:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8005ac8:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8005acc:	fa5f f38a 	uxtb.w	r3, sl
 8005ad0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005ad4:	960a      	str	r6, [sp, #40]	; 0x28
 8005ad6:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8005ada:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 8005ade:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005ae2:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8005ae6:	950b      	str	r5, [sp, #44]	; 0x2c
 8005ae8:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8005aec:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8005af0:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8005af4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8005af8:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8005afc:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8005b00:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8005b04:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8005b08:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 8005b0c:	9308      	str	r3, [sp, #32]
 8005b0e:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8005b12:	9b01      	ldr	r3, [sp, #4]
 8005b14:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8005b18:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005b1c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8005b20:	9b02      	ldr	r3, [sp, #8]
 8005b22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b26:	9302      	str	r3, [sp, #8]
 8005b28:	9b08      	ldr	r3, [sp, #32]
 8005b2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b2e:	9308      	str	r3, [sp, #32]
 8005b30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b32:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005b36:	950c      	str	r5, [sp, #48]	; 0x30
 8005b38:	461d      	mov	r5, r3
 8005b3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b3c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005b40:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005b44:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8005b48:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8005b4c:	9301      	str	r3, [sp, #4]
 8005b4e:	9b02      	ldr	r3, [sp, #8]
 8005b50:	9202      	str	r2, [sp, #8]
 8005b52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b54:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b56:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005b5a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005b5e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8005b62:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005b66:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8005b6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005b6e:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8005b72:	9b08      	ldr	r3, [sp, #32]
 8005b74:	9f01      	ldr	r7, [sp, #4]
 8005b76:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8005b7a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8005b7e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005b82:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005b86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8005b8a:	46be      	mov	lr, r7
 8005b8c:	0a96      	lsrs	r6, r2, #10
 8005b8e:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8005b92:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8005b96:	4f49      	ldr	r7, [pc, #292]	; (8005cbc <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8005b98:	9a04      	ldr	r2, [sp, #16]
 8005b9a:	fb2e 2e07 	smlad	lr, lr, r7, r2
 8005b9e:	4a48      	ldr	r2, [pc, #288]	; (8005cc0 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8005ba0:	fb2a ee02 	smlad	lr, sl, r2, lr
 8005ba4:	4a47      	ldr	r2, [pc, #284]	; (8005cc4 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 8005ba6:	fb21 ee02 	smlad	lr, r1, r2, lr
 8005baa:	4a47      	ldr	r2, [pc, #284]	; (8005cc8 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8005bac:	fb24 ee02 	smlad	lr, r4, r2, lr
 8005bb0:	4a46      	ldr	r2, [pc, #280]	; (8005ccc <D128_1CH_HTONS_VOL_HP+0x2d8>)
 8005bb2:	9f02      	ldr	r7, [sp, #8]
 8005bb4:	fb27 ee02 	smlad	lr, r7, r2, lr
 8005bb8:	4a45      	ldr	r2, [pc, #276]	; (8005cd0 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 8005bba:	fb20 ee02 	smlad	lr, r0, r2, lr
 8005bbe:	4a45      	ldr	r2, [pc, #276]	; (8005cd4 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8005bc0:	fb23 e702 	smlad	r7, r3, r2, lr
 8005bc4:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 8005bc8:	fb25 7e0e 	smlad	lr, r5, lr, r7
 8005bcc:	9f01      	ldr	r7, [sp, #4]
 8005bce:	4a42      	ldr	r2, [pc, #264]	; (8005cd8 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8005bd0:	46bc      	mov	ip, r7
 8005bd2:	9f05      	ldr	r7, [sp, #20]
 8005bd4:	fb2c 7c02 	smlad	ip, ip, r2, r7
 8005bd8:	4a40      	ldr	r2, [pc, #256]	; (8005cdc <D128_1CH_HTONS_VOL_HP+0x2e8>)
 8005bda:	fb2a cc02 	smlad	ip, sl, r2, ip
 8005bde:	4f40      	ldr	r7, [pc, #256]	; (8005ce0 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 8005be0:	fb21 cc07 	smlad	ip, r1, r7, ip
 8005be4:	4f3f      	ldr	r7, [pc, #252]	; (8005ce4 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 8005be6:	fb24 cc07 	smlad	ip, r4, r7, ip
 8005bea:	4f3f      	ldr	r7, [pc, #252]	; (8005ce8 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 8005bec:	9a02      	ldr	r2, [sp, #8]
 8005bee:	fb22 cc07 	smlad	ip, r2, r7, ip
 8005bf2:	4f3e      	ldr	r7, [pc, #248]	; (8005cec <D128_1CH_HTONS_VOL_HP+0x2f8>)
 8005bf4:	fb20 cc07 	smlad	ip, r0, r7, ip
 8005bf8:	4f3d      	ldr	r7, [pc, #244]	; (8005cf0 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 8005bfa:	fb23 c707 	smlad	r7, r3, r7, ip
 8005bfe:	f8df c114 	ldr.w	ip, [pc, #276]	; 8005d14 <D128_1CH_HTONS_VOL_HP+0x320>
 8005c02:	fb25 720c 	smlad	r2, r5, ip, r7
 8005c06:	f04f 0b01 	mov.w	fp, #1
 8005c0a:	9204      	str	r2, [sp, #16]
 8005c0c:	9f01      	ldr	r7, [sp, #4]
 8005c0e:	fb27 fb0b 	smuad	fp, r7, fp
 8005c12:	4f38      	ldr	r7, [pc, #224]	; (8005cf4 <D128_1CH_HTONS_VOL_HP+0x300>)
 8005c14:	fb2a ba07 	smlad	sl, sl, r7, fp
 8005c18:	4f37      	ldr	r7, [pc, #220]	; (8005cf8 <D128_1CH_HTONS_VOL_HP+0x304>)
 8005c1a:	fb21 aa07 	smlad	sl, r1, r7, sl
 8005c1e:	4f37      	ldr	r7, [pc, #220]	; (8005cfc <D128_1CH_HTONS_VOL_HP+0x308>)
 8005c20:	fb24 aa07 	smlad	sl, r4, r7, sl
 8005c24:	4f36      	ldr	r7, [pc, #216]	; (8005d00 <D128_1CH_HTONS_VOL_HP+0x30c>)
 8005c26:	9a02      	ldr	r2, [sp, #8]
 8005c28:	fb22 a707 	smlad	r7, r2, r7, sl
 8005c2c:	4a35      	ldr	r2, [pc, #212]	; (8005d04 <D128_1CH_HTONS_VOL_HP+0x310>)
 8005c2e:	fb20 7702 	smlad	r7, r0, r2, r7
 8005c32:	4a35      	ldr	r2, [pc, #212]	; (8005d08 <D128_1CH_HTONS_VOL_HP+0x314>)
 8005c34:	fb23 7702 	smlad	r7, r3, r2, r7
 8005c38:	4b34      	ldr	r3, [pc, #208]	; (8005d0c <D128_1CH_HTONS_VOL_HP+0x318>)
 8005c3a:	fb25 7303 	smlad	r3, r5, r3, r7
 8005c3e:	9305      	str	r3, [sp, #20]
 8005c40:	9b03      	ldr	r3, [sp, #12]
 8005c42:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005c44:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8005c48:	4473      	add	r3, lr
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	9b06      	ldr	r3, [sp, #24]
 8005c4e:	f8cd e018 	str.w	lr, [sp, #24]
 8005c52:	1ad2      	subs	r2, r2, r3
 8005c54:	17d1      	asrs	r1, r2, #31
 8005c56:	fba2 2304 	umull	r2, r3, r2, r4
 8005c5a:	fb04 3301 	mla	r3, r4, r1, r3
 8005c5e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8005c62:	f143 0300 	adc.w	r3, r3, #0
 8005c66:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8005c68:	021a      	lsls	r2, r3, #8
 8005c6a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005c6e:	2100      	movs	r1, #0
 8005c70:	fbc4 0102 	smlal	r0, r1, r4, r2
 8005c74:	108a      	asrs	r2, r1, #2
 8005c76:	9907      	ldr	r1, [sp, #28]
 8005c78:	f302 020f 	ssat	r2, #16, r2
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	f821 2b02 	strh.w	r2, [r1], #2
 8005c82:	9303      	str	r3, [sp, #12]
 8005c84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c86:	9107      	str	r1, [sp, #28]
 8005c88:	4299      	cmp	r1, r3
 8005c8a:	f109 0910 	add.w	r9, r9, #16
 8005c8e:	f47f aed5 	bne.w	8005a3c <D128_1CH_HTONS_VOL_HP+0x48>
 8005c92:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005c94:	9905      	ldr	r1, [sp, #20]
 8005c96:	6091      	str	r1, [r2, #8]
 8005c98:	9904      	ldr	r1, [sp, #16]
 8005c9a:	60d1      	str	r1, [r2, #12]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	61d6      	str	r6, [r2, #28]
 8005ca0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005ca2:	9a03      	ldr	r2, [sp, #12]
 8005ca4:	611a      	str	r2, [r3, #16]
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	f8c3 e014 	str.w	lr, [r3, #20]
 8005cac:	6199      	str	r1, [r3, #24]
 8005cae:	b013      	add	sp, #76	; 0x4c
 8005cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb4:	f8dd e018 	ldr.w	lr, [sp, #24]
 8005cb8:	e7eb      	b.n	8005c92 <D128_1CH_HTONS_VOL_HP+0x29e>
 8005cba:	bf00      	nop
 8005cbc:	00780069 	.word	0x00780069
 8005cc0:	005b004e 	.word	0x005b004e
 8005cc4:	00420037 	.word	0x00420037
 8005cc8:	002d0024 	.word	0x002d0024
 8005ccc:	001c0015 	.word	0x001c0015
 8005cd0:	000f000a 	.word	0x000f000a
 8005cd4:	00060003 	.word	0x00060003
 8005cd8:	00880096 	.word	0x00880096
 8005cdc:	00a200ac 	.word	0x00a200ac
 8005ce0:	00b400ba 	.word	0x00b400ba
 8005ce4:	00be00c0 	.word	0x00be00c0
 8005ce8:	00c000be 	.word	0x00c000be
 8005cec:	00ba00b4 	.word	0x00ba00b4
 8005cf0:	00ac00a2 	.word	0x00ac00a2
 8005cf4:	00030006 	.word	0x00030006
 8005cf8:	000a000f 	.word	0x000a000f
 8005cfc:	0015001c 	.word	0x0015001c
 8005d00:	0024002d 	.word	0x0024002d
 8005d04:	00370042 	.word	0x00370042
 8005d08:	004e005b 	.word	0x004e005b
 8005d0c:	00690078 	.word	0x00690078
 8005d10:	20000188 	.word	0x20000188
 8005d14:	00960088 	.word	0x00960088

08005d18 <PDM_Filter_Init>:
 8005d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d1a:	2240      	movs	r2, #64	; 0x40
 8005d1c:	4604      	mov	r4, r0
 8005d1e:	2100      	movs	r1, #0
 8005d20:	300c      	adds	r0, #12
 8005d22:	f000 f9f9 	bl	8006118 <memset>
 8005d26:	493b      	ldr	r1, [pc, #236]	; (8005e14 <PDM_Filter_Init+0xfc>)
 8005d28:	483b      	ldr	r0, [pc, #236]	; (8005e18 <PDM_Filter_Init+0x100>)
 8005d2a:	f000 f98d 	bl	8006048 <CRC_Lock>
 8005d2e:	8822      	ldrh	r2, [r4, #0]
 8005d30:	8963      	ldrh	r3, [r4, #10]
 8005d32:	4938      	ldr	r1, [pc, #224]	; (8005e14 <PDM_Filter_Init+0xfc>)
 8005d34:	8925      	ldrh	r5, [r4, #8]
 8005d36:	86a3      	strh	r3, [r4, #52]	; 0x34
 8005d38:	2801      	cmp	r0, #1
 8005d3a:	f04f 0300 	mov.w	r3, #0
 8005d3e:	bf18      	it	ne
 8005d40:	2100      	movne	r1, #0
 8005d42:	2a01      	cmp	r2, #1
 8005d44:	6461      	str	r1, [r4, #68]	; 0x44
 8005d46:	86e5      	strh	r5, [r4, #54]	; 0x36
 8005d48:	61a3      	str	r3, [r4, #24]
 8005d4a:	6123      	str	r3, [r4, #16]
 8005d4c:	6163      	str	r3, [r4, #20]
 8005d4e:	60e3      	str	r3, [r4, #12]
 8005d50:	6263      	str	r3, [r4, #36]	; 0x24
 8005d52:	61e3      	str	r3, [r4, #28]
 8005d54:	6223      	str	r3, [r4, #32]
 8005d56:	6423      	str	r3, [r4, #64]	; 0x40
 8005d58:	d918      	bls.n	8005d8c <PDM_Filter_Init+0x74>
 8005d5a:	2003      	movs	r0, #3
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	8862      	ldrh	r2, [r4, #2]
 8005d60:	2a01      	cmp	r2, #1
 8005d62:	d91d      	bls.n	8005da0 <PDM_Filter_Init+0x88>
 8005d64:	2140      	movs	r1, #64	; 0x40
 8005d66:	2300      	movs	r3, #0
 8005d68:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005d6a:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8005d6e:	6862      	ldr	r2, [r4, #4]
 8005d70:	bf04      	itt	eq
 8005d72:	6421      	streq	r1, [r4, #64]	; 0x40
 8005d74:	460b      	moveq	r3, r1
 8005d76:	b11a      	cbz	r2, 8005d80 <PDM_Filter_Init+0x68>
 8005d78:	f043 0310 	orr.w	r3, r3, #16
 8005d7c:	6423      	str	r3, [r4, #64]	; 0x40
 8005d7e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8005d80:	2200      	movs	r2, #0
 8005d82:	8722      	strh	r2, [r4, #56]	; 0x38
 8005d84:	b908      	cbnz	r0, 8005d8a <PDM_Filter_Init+0x72>
 8005d86:	3380      	adds	r3, #128	; 0x80
 8005d88:	6423      	str	r3, [r4, #64]	; 0x40
 8005d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d8c:	4d23      	ldr	r5, [pc, #140]	; (8005e1c <PDM_Filter_Init+0x104>)
 8005d8e:	d010      	beq.n	8005db2 <PDM_Filter_Init+0x9a>
 8005d90:	782a      	ldrb	r2, [r5, #0]
 8005d92:	2a01      	cmp	r2, #1
 8005d94:	d027      	beq.n	8005de6 <PDM_Filter_Init+0xce>
 8005d96:	8862      	ldrh	r2, [r4, #2]
 8005d98:	2a01      	cmp	r2, #1
 8005d9a:	f04f 0001 	mov.w	r0, #1
 8005d9e:	d8e1      	bhi.n	8005d64 <PDM_Filter_Init+0x4c>
 8005da0:	d001      	beq.n	8005da6 <PDM_Filter_Init+0x8e>
 8005da2:	4618      	mov	r0, r3
 8005da4:	e7de      	b.n	8005d64 <PDM_Filter_Init+0x4c>
 8005da6:	2220      	movs	r2, #32
 8005da8:	4618      	mov	r0, r3
 8005daa:	6422      	str	r2, [r4, #64]	; 0x40
 8005dac:	4613      	mov	r3, r2
 8005dae:	2160      	movs	r1, #96	; 0x60
 8005db0:	e7da      	b.n	8005d68 <PDM_Filter_Init+0x50>
 8005db2:	7829      	ldrb	r1, [r5, #0]
 8005db4:	2900      	cmp	r1, #0
 8005db6:	d1ee      	bne.n	8005d96 <PDM_Filter_Init+0x7e>
 8005db8:	4919      	ldr	r1, [pc, #100]	; (8005e20 <PDM_Filter_Init+0x108>)
 8005dba:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8005e28 <PDM_Filter_Init+0x110>
 8005dbe:	4f19      	ldr	r7, [pc, #100]	; (8005e24 <PDM_Filter_Init+0x10c>)
 8005dc0:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8005dc4:	684a      	ldr	r2, [r1, #4]
 8005dc6:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8005dca:	ea02 0007 	and.w	r0, r2, r7
 8005dce:	4303      	orrs	r3, r0
 8005dd0:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f841 3f04 	str.w	r3, [r1, #4]!
 8005dda:	428e      	cmp	r6, r1
 8005ddc:	d1f2      	bne.n	8005dc4 <PDM_Filter_Init+0xac>
 8005dde:	2001      	movs	r0, #1
 8005de0:	7028      	strb	r0, [r5, #0]
 8005de2:	2300      	movs	r3, #0
 8005de4:	e7bb      	b.n	8005d5e <PDM_Filter_Init+0x46>
 8005de6:	490e      	ldr	r1, [pc, #56]	; (8005e20 <PDM_Filter_Init+0x108>)
 8005de8:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8005e28 <PDM_Filter_Init+0x110>
 8005dec:	4f0d      	ldr	r7, [pc, #52]	; (8005e24 <PDM_Filter_Init+0x10c>)
 8005dee:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8005df2:	684a      	ldr	r2, [r1, #4]
 8005df4:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8005df8:	ea02 0007 	and.w	r0, r2, r7
 8005dfc:	4303      	orrs	r3, r0
 8005dfe:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8005e02:	4413      	add	r3, r2
 8005e04:	f841 3f04 	str.w	r3, [r1, #4]!
 8005e08:	428e      	cmp	r6, r1
 8005e0a:	d1f2      	bne.n	8005df2 <PDM_Filter_Init+0xda>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	702b      	strb	r3, [r5, #0]
 8005e10:	e7c1      	b.n	8005d96 <PDM_Filter_Init+0x7e>
 8005e12:	bf00      	nop
 8005e14:	b5e8b5cd 	.word	0xb5e8b5cd
 8005e18:	f407a5c2 	.word	0xf407a5c2
 8005e1c:	2001ca4d 	.word	0x2001ca4d
 8005e20:	20000184 	.word	0x20000184
 8005e24:	000ffc00 	.word	0x000ffc00
 8005e28:	3ff00000 	.word	0x3ff00000

08005e2c <PDM_Filter_setConfig>:
 8005e2c:	4b66      	ldr	r3, [pc, #408]	; (8005fc8 <PDM_Filter_setConfig+0x19c>)
 8005e2e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d001      	beq.n	8005e38 <PDM_Filter_setConfig+0xc>
 8005e34:	2004      	movs	r0, #4
 8005e36:	4770      	bx	lr
 8005e38:	b530      	push	{r4, r5, lr}
 8005e3a:	880a      	ldrh	r2, [r1, #0]
 8005e3c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005e3e:	ed2d 8b04 	vpush	{d8-d9}
 8005e42:	4604      	mov	r4, r0
 8005e44:	460d      	mov	r5, r1
 8005e46:	1e51      	subs	r1, r2, #1
 8005e48:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 8005e4c:	2906      	cmp	r1, #6
 8005e4e:	b083      	sub	sp, #12
 8005e50:	6420      	str	r0, [r4, #64]	; 0x40
 8005e52:	d91a      	bls.n	8005e8a <PDM_Filter_setConfig+0x5e>
 8005e54:	2008      	movs	r0, #8
 8005e56:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8005e5a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8005e5e:	4299      	cmp	r1, r3
 8005e60:	d07e      	beq.n	8005f60 <PDM_Filter_setConfig+0x134>
 8005e62:	f113 0f0c 	cmn.w	r3, #12
 8005e66:	da2a      	bge.n	8005ebe <PDM_Filter_setConfig+0x92>
 8005e68:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8005e6c:	3040      	adds	r0, #64	; 0x40
 8005e6e:	80ab      	strh	r3, [r5, #4]
 8005e70:	8622      	strh	r2, [r4, #48]	; 0x30
 8005e72:	886b      	ldrh	r3, [r5, #2]
 8005e74:	8663      	strh	r3, [r4, #50]	; 0x32
 8005e76:	b920      	cbnz	r0, 8005e82 <PDM_Filter_setConfig+0x56>
 8005e78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e7e:	6423      	str	r3, [r4, #64]	; 0x40
 8005e80:	2000      	movs	r0, #0
 8005e82:	b003      	add	sp, #12
 8005e84:	ecbd 8b04 	vpop	{d8-d9}
 8005e88:	bd30      	pop	{r4, r5, pc}
 8005e8a:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8005e8c:	4291      	cmp	r1, r2
 8005e8e:	d06c      	beq.n	8005f6a <PDM_Filter_setConfig+0x13e>
 8005e90:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8005e94:	f023 0301 	bic.w	r3, r3, #1
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8005e9e:	6423      	str	r3, [r4, #64]	; 0x40
 8005ea0:	2970      	cmp	r1, #112	; 0x70
 8005ea2:	f003 030f 	and.w	r3, r3, #15
 8005ea6:	f103 33ff 	add.w	r3, r3, #4294967295
 8005eaa:	d066      	beq.n	8005f7a <PDM_Filter_setConfig+0x14e>
 8005eac:	2b06      	cmp	r3, #6
 8005eae:	f200 8089 	bhi.w	8005fc4 <PDM_Filter_setConfig+0x198>
 8005eb2:	e8df f003 	tbb	[pc, r3]
 8005eb6:	4f52      	.short	0x4f52
 8005eb8:	3d43494c 	.word	0x3d43494c
 8005ebc:	46          	.byte	0x46
 8005ebd:	00          	.byte	0x00
 8005ebe:	2b33      	cmp	r3, #51	; 0x33
 8005ec0:	dc32      	bgt.n	8005f28 <PDM_Filter_setConfig+0xfc>
 8005ec2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005ec4:	f002 020f 	and.w	r2, r2, #15
 8005ec8:	3a01      	subs	r2, #1
 8005eca:	2a06      	cmp	r2, #6
 8005ecc:	d872      	bhi.n	8005fb4 <PDM_Filter_setConfig+0x188>
 8005ece:	493f      	ldr	r1, [pc, #252]	; (8005fcc <PDM_Filter_setConfig+0x1a0>)
 8005ed0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005ed4:	ed92 9a00 	vldr	s18, [r2]
 8005ed8:	ed92 8a07 	vldr	s16, [r2, #28]
 8005edc:	9001      	str	r0, [sp, #4]
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ee6:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8005eea:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8005eee:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8005ef2:	f000 f93d 	bl	8006170 <powf>
 8005ef6:	eddf 0a36 	vldr	s1, [pc, #216]	; 8005fd0 <PDM_Filter_setConfig+0x1a4>
 8005efa:	eef0 8a40 	vmov.f32	s17, s0
 8005efe:	ee70 0ac9 	vsub.f32	s1, s1, s18
 8005f02:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8005f06:	f000 f933 	bl	8006170 <powf>
 8005f0a:	ee28 8a28 	vmul.f32	s16, s16, s17
 8005f0e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8005f12:	f000 f909 	bl	8006128 <roundf>
 8005f16:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8005f1a:	88ab      	ldrh	r3, [r5, #4]
 8005f1c:	882a      	ldrh	r2, [r5, #0]
 8005f1e:	9801      	ldr	r0, [sp, #4]
 8005f20:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 8005f24:	8723      	strh	r3, [r4, #56]	; 0x38
 8005f26:	e7a3      	b.n	8005e70 <PDM_Filter_setConfig+0x44>
 8005f28:	2333      	movs	r3, #51	; 0x33
 8005f2a:	3040      	adds	r0, #64	; 0x40
 8005f2c:	80ab      	strh	r3, [r5, #4]
 8005f2e:	e79f      	b.n	8005e70 <PDM_Filter_setConfig+0x44>
 8005f30:	4b28      	ldr	r3, [pc, #160]	; (8005fd4 <PDM_Filter_setConfig+0x1a8>)
 8005f32:	64a3      	str	r3, [r4, #72]	; 0x48
 8005f34:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8005f38:	2000      	movs	r0, #0
 8005f3a:	e792      	b.n	8005e62 <PDM_Filter_setConfig+0x36>
 8005f3c:	4b26      	ldr	r3, [pc, #152]	; (8005fd8 <PDM_Filter_setConfig+0x1ac>)
 8005f3e:	64a3      	str	r3, [r4, #72]	; 0x48
 8005f40:	e7f8      	b.n	8005f34 <PDM_Filter_setConfig+0x108>
 8005f42:	4b26      	ldr	r3, [pc, #152]	; (8005fdc <PDM_Filter_setConfig+0x1b0>)
 8005f44:	64a3      	str	r3, [r4, #72]	; 0x48
 8005f46:	e7f5      	b.n	8005f34 <PDM_Filter_setConfig+0x108>
 8005f48:	4b25      	ldr	r3, [pc, #148]	; (8005fe0 <PDM_Filter_setConfig+0x1b4>)
 8005f4a:	64a3      	str	r3, [r4, #72]	; 0x48
 8005f4c:	e7f2      	b.n	8005f34 <PDM_Filter_setConfig+0x108>
 8005f4e:	4b25      	ldr	r3, [pc, #148]	; (8005fe4 <PDM_Filter_setConfig+0x1b8>)
 8005f50:	64a3      	str	r3, [r4, #72]	; 0x48
 8005f52:	e7ef      	b.n	8005f34 <PDM_Filter_setConfig+0x108>
 8005f54:	4b24      	ldr	r3, [pc, #144]	; (8005fe8 <PDM_Filter_setConfig+0x1bc>)
 8005f56:	64a3      	str	r3, [r4, #72]	; 0x48
 8005f58:	e7ec      	b.n	8005f34 <PDM_Filter_setConfig+0x108>
 8005f5a:	4b24      	ldr	r3, [pc, #144]	; (8005fec <PDM_Filter_setConfig+0x1c0>)
 8005f5c:	64a3      	str	r3, [r4, #72]	; 0x48
 8005f5e:	e7e9      	b.n	8005f34 <PDM_Filter_setConfig+0x108>
 8005f60:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8005f62:	4291      	cmp	r1, r2
 8005f64:	f47f af7d 	bne.w	8005e62 <PDM_Filter_setConfig+0x36>
 8005f68:	e783      	b.n	8005e72 <PDM_Filter_setConfig+0x46>
 8005f6a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8005f6e:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8005f72:	4299      	cmp	r1, r3
 8005f74:	d023      	beq.n	8005fbe <PDM_Filter_setConfig+0x192>
 8005f76:	2000      	movs	r0, #0
 8005f78:	e773      	b.n	8005e62 <PDM_Filter_setConfig+0x36>
 8005f7a:	2b06      	cmp	r3, #6
 8005f7c:	d822      	bhi.n	8005fc4 <PDM_Filter_setConfig+0x198>
 8005f7e:	e8df f003 	tbb	[pc, r3]
 8005f82:	1316      	.short	0x1316
 8005f84:	070a0d10 	.word	0x070a0d10
 8005f88:	04          	.byte	0x04
 8005f89:	00          	.byte	0x00
 8005f8a:	4b19      	ldr	r3, [pc, #100]	; (8005ff0 <PDM_Filter_setConfig+0x1c4>)
 8005f8c:	64a3      	str	r3, [r4, #72]	; 0x48
 8005f8e:	e7d1      	b.n	8005f34 <PDM_Filter_setConfig+0x108>
 8005f90:	4b18      	ldr	r3, [pc, #96]	; (8005ff4 <PDM_Filter_setConfig+0x1c8>)
 8005f92:	64a3      	str	r3, [r4, #72]	; 0x48
 8005f94:	e7ce      	b.n	8005f34 <PDM_Filter_setConfig+0x108>
 8005f96:	4b18      	ldr	r3, [pc, #96]	; (8005ff8 <PDM_Filter_setConfig+0x1cc>)
 8005f98:	64a3      	str	r3, [r4, #72]	; 0x48
 8005f9a:	e7cb      	b.n	8005f34 <PDM_Filter_setConfig+0x108>
 8005f9c:	4b17      	ldr	r3, [pc, #92]	; (8005ffc <PDM_Filter_setConfig+0x1d0>)
 8005f9e:	64a3      	str	r3, [r4, #72]	; 0x48
 8005fa0:	e7c8      	b.n	8005f34 <PDM_Filter_setConfig+0x108>
 8005fa2:	4b17      	ldr	r3, [pc, #92]	; (8006000 <PDM_Filter_setConfig+0x1d4>)
 8005fa4:	64a3      	str	r3, [r4, #72]	; 0x48
 8005fa6:	e7c5      	b.n	8005f34 <PDM_Filter_setConfig+0x108>
 8005fa8:	4b16      	ldr	r3, [pc, #88]	; (8006004 <PDM_Filter_setConfig+0x1d8>)
 8005faa:	64a3      	str	r3, [r4, #72]	; 0x48
 8005fac:	e7c2      	b.n	8005f34 <PDM_Filter_setConfig+0x108>
 8005fae:	4b16      	ldr	r3, [pc, #88]	; (8006008 <PDM_Filter_setConfig+0x1dc>)
 8005fb0:	64a3      	str	r3, [r4, #72]	; 0x48
 8005fb2:	e7bf      	b.n	8005f34 <PDM_Filter_setConfig+0x108>
 8005fb4:	ed9f 8a15 	vldr	s16, [pc, #84]	; 800600c <PDM_Filter_setConfig+0x1e0>
 8005fb8:	eeb0 9a48 	vmov.f32	s18, s16
 8005fbc:	e78e      	b.n	8005edc <PDM_Filter_setConfig+0xb0>
 8005fbe:	886b      	ldrh	r3, [r5, #2]
 8005fc0:	8663      	strh	r3, [r4, #50]	; 0x32
 8005fc2:	e759      	b.n	8005e78 <PDM_Filter_setConfig+0x4c>
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	e746      	b.n	8005e56 <PDM_Filter_setConfig+0x2a>
 8005fc8:	b5e8b5cd 	.word	0xb5e8b5cd
 8005fcc:	08006a1c 	.word	0x08006a1c
 8005fd0:	42000000 	.word	0x42000000
 8005fd4:	08004399 	.word	0x08004399
 8005fd8:	08004279 	.word	0x08004279
 8005fdc:	08004529 	.word	0x08004529
 8005fe0:	08004d6d 	.word	0x08004d6d
 8005fe4:	08004acd 	.word	0x08004acd
 8005fe8:	080048ad 	.word	0x080048ad
 8005fec:	080046c1 	.word	0x080046c1
 8005ff0:	08005379 	.word	0x08005379
 8005ff4:	08005241 	.word	0x08005241
 8005ff8:	0800515d 	.word	0x0800515d
 8005ffc:	080059f5 	.word	0x080059f5
 8006000:	080057e1 	.word	0x080057e1
 8006004:	08005629 	.word	0x08005629
 8006008:	080054bd 	.word	0x080054bd
 800600c:	00000000 	.word	0x00000000

08006010 <PDM_Filter>:
 8006010:	b410      	push	{r4}
 8006012:	4b0c      	ldr	r3, [pc, #48]	; (8006044 <PDM_Filter+0x34>)
 8006014:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8006016:	429c      	cmp	r4, r3
 8006018:	d003      	beq.n	8006022 <PDM_Filter+0x12>
 800601a:	2004      	movs	r0, #4
 800601c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006024:	05dc      	lsls	r4, r3, #23
 8006026:	d407      	bmi.n	8006038 <PDM_Filter+0x28>
 8006028:	f013 0f80 	tst.w	r3, #128	; 0x80
 800602c:	bf14      	ite	ne
 800602e:	2020      	movne	r0, #32
 8006030:	2030      	moveq	r0, #48	; 0x30
 8006032:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800603a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800603e:	320c      	adds	r2, #12
 8006040:	4718      	bx	r3
 8006042:	bf00      	nop
 8006044:	b5e8b5cd 	.word	0xb5e8b5cd

08006048 <CRC_Lock>:
 8006048:	4a17      	ldr	r2, [pc, #92]	; (80060a8 <CRC_Lock+0x60>)
 800604a:	6813      	ldr	r3, [r2, #0]
 800604c:	b410      	push	{r4}
 800604e:	f023 0301 	bic.w	r3, r3, #1
 8006052:	4c16      	ldr	r4, [pc, #88]	; (80060ac <CRC_Lock+0x64>)
 8006054:	6013      	str	r3, [r2, #0]
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	b933      	cbnz	r3, 8006068 <CRC_Lock+0x20>
 800605a:	4b15      	ldr	r3, [pc, #84]	; (80060b0 <CRC_Lock+0x68>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006062:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006066:	d00f      	beq.n	8006088 <CRC_Lock+0x40>
 8006068:	4a12      	ldr	r2, [pc, #72]	; (80060b4 <CRC_Lock+0x6c>)
 800606a:	2301      	movs	r3, #1
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	6813      	ldr	r3, [r2, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1fc      	bne.n	800606e <CRC_Lock+0x26>
 8006074:	4b10      	ldr	r3, [pc, #64]	; (80060b8 <CRC_Lock+0x70>)
 8006076:	f85d 4b04 	ldr.w	r4, [sp], #4
 800607a:	6018      	str	r0, [r3, #0]
 800607c:	6818      	ldr	r0, [r3, #0]
 800607e:	1a08      	subs	r0, r1, r0
 8006080:	fab0 f080 	clz	r0, r0
 8006084:	0940      	lsrs	r0, r0, #5
 8006086:	4770      	bx	lr
 8006088:	4a0c      	ldr	r2, [pc, #48]	; (80060bc <CRC_Lock+0x74>)
 800608a:	2301      	movs	r3, #1
 800608c:	6013      	str	r3, [r2, #0]
 800608e:	6813      	ldr	r3, [r2, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1fc      	bne.n	800608e <CRC_Lock+0x46>
 8006094:	4b0a      	ldr	r3, [pc, #40]	; (80060c0 <CRC_Lock+0x78>)
 8006096:	f85d 4b04 	ldr.w	r4, [sp], #4
 800609a:	6018      	str	r0, [r3, #0]
 800609c:	6818      	ldr	r0, [r3, #0]
 800609e:	1a40      	subs	r0, r0, r1
 80060a0:	fab0 f080 	clz	r0, r0
 80060a4:	0940      	lsrs	r0, r0, #5
 80060a6:	4770      	bx	lr
 80060a8:	e0002000 	.word	0xe0002000
 80060ac:	e0042000 	.word	0xe0042000
 80060b0:	5c001000 	.word	0x5c001000
 80060b4:	40023008 	.word	0x40023008
 80060b8:	40023000 	.word	0x40023000
 80060bc:	58024c08 	.word	0x58024c08
 80060c0:	58024c00 	.word	0x58024c00

080060c4 <__errno>:
 80060c4:	4b01      	ldr	r3, [pc, #4]	; (80060cc <__errno+0x8>)
 80060c6:	6818      	ldr	r0, [r3, #0]
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	20000588 	.word	0x20000588

080060d0 <__libc_init_array>:
 80060d0:	b570      	push	{r4, r5, r6, lr}
 80060d2:	4d0d      	ldr	r5, [pc, #52]	; (8006108 <__libc_init_array+0x38>)
 80060d4:	4c0d      	ldr	r4, [pc, #52]	; (800610c <__libc_init_array+0x3c>)
 80060d6:	1b64      	subs	r4, r4, r5
 80060d8:	10a4      	asrs	r4, r4, #2
 80060da:	2600      	movs	r6, #0
 80060dc:	42a6      	cmp	r6, r4
 80060de:	d109      	bne.n	80060f4 <__libc_init_array+0x24>
 80060e0:	4d0b      	ldr	r5, [pc, #44]	; (8006110 <__libc_init_array+0x40>)
 80060e2:	4c0c      	ldr	r4, [pc, #48]	; (8006114 <__libc_init_array+0x44>)
 80060e4:	f000 fc16 	bl	8006914 <_init>
 80060e8:	1b64      	subs	r4, r4, r5
 80060ea:	10a4      	asrs	r4, r4, #2
 80060ec:	2600      	movs	r6, #0
 80060ee:	42a6      	cmp	r6, r4
 80060f0:	d105      	bne.n	80060fe <__libc_init_array+0x2e>
 80060f2:	bd70      	pop	{r4, r5, r6, pc}
 80060f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060f8:	4798      	blx	r3
 80060fa:	3601      	adds	r6, #1
 80060fc:	e7ee      	b.n	80060dc <__libc_init_array+0xc>
 80060fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006102:	4798      	blx	r3
 8006104:	3601      	adds	r6, #1
 8006106:	e7f2      	b.n	80060ee <__libc_init_array+0x1e>
 8006108:	08006a74 	.word	0x08006a74
 800610c:	08006a74 	.word	0x08006a74
 8006110:	08006a74 	.word	0x08006a74
 8006114:	08006a78 	.word	0x08006a78

08006118 <memset>:
 8006118:	4402      	add	r2, r0
 800611a:	4603      	mov	r3, r0
 800611c:	4293      	cmp	r3, r2
 800611e:	d100      	bne.n	8006122 <memset+0xa>
 8006120:	4770      	bx	lr
 8006122:	f803 1b01 	strb.w	r1, [r3], #1
 8006126:	e7f9      	b.n	800611c <memset+0x4>

08006128 <roundf>:
 8006128:	ee10 0a10 	vmov	r0, s0
 800612c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8006130:	3a7f      	subs	r2, #127	; 0x7f
 8006132:	2a16      	cmp	r2, #22
 8006134:	dc15      	bgt.n	8006162 <roundf+0x3a>
 8006136:	2a00      	cmp	r2, #0
 8006138:	da08      	bge.n	800614c <roundf+0x24>
 800613a:	3201      	adds	r2, #1
 800613c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8006140:	d101      	bne.n	8006146 <roundf+0x1e>
 8006142:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8006146:	ee00 3a10 	vmov	s0, r3
 800614a:	4770      	bx	lr
 800614c:	4907      	ldr	r1, [pc, #28]	; (800616c <roundf+0x44>)
 800614e:	4111      	asrs	r1, r2
 8006150:	4208      	tst	r0, r1
 8006152:	d0fa      	beq.n	800614a <roundf+0x22>
 8006154:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006158:	4113      	asrs	r3, r2
 800615a:	4403      	add	r3, r0
 800615c:	ea23 0301 	bic.w	r3, r3, r1
 8006160:	e7f1      	b.n	8006146 <roundf+0x1e>
 8006162:	2a80      	cmp	r2, #128	; 0x80
 8006164:	d1f1      	bne.n	800614a <roundf+0x22>
 8006166:	ee30 0a00 	vadd.f32	s0, s0, s0
 800616a:	4770      	bx	lr
 800616c:	007fffff 	.word	0x007fffff

08006170 <powf>:
 8006170:	b508      	push	{r3, lr}
 8006172:	ed2d 8b04 	vpush	{d8-d9}
 8006176:	eeb0 8a60 	vmov.f32	s16, s1
 800617a:	eeb0 9a40 	vmov.f32	s18, s0
 800617e:	f000 f84f 	bl	8006220 <__ieee754_powf>
 8006182:	eeb4 8a48 	vcmp.f32	s16, s16
 8006186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800618a:	eef0 8a40 	vmov.f32	s17, s0
 800618e:	d63e      	bvs.n	800620e <powf+0x9e>
 8006190:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8006194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006198:	d112      	bne.n	80061c0 <powf+0x50>
 800619a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800619e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061a2:	d039      	beq.n	8006218 <powf+0xa8>
 80061a4:	eeb0 0a48 	vmov.f32	s0, s16
 80061a8:	f000 fb35 	bl	8006816 <finitef>
 80061ac:	b378      	cbz	r0, 800620e <powf+0x9e>
 80061ae:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80061b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061b6:	d52a      	bpl.n	800620e <powf+0x9e>
 80061b8:	f7ff ff84 	bl	80060c4 <__errno>
 80061bc:	2322      	movs	r3, #34	; 0x22
 80061be:	e014      	b.n	80061ea <powf+0x7a>
 80061c0:	f000 fb29 	bl	8006816 <finitef>
 80061c4:	b998      	cbnz	r0, 80061ee <powf+0x7e>
 80061c6:	eeb0 0a49 	vmov.f32	s0, s18
 80061ca:	f000 fb24 	bl	8006816 <finitef>
 80061ce:	b170      	cbz	r0, 80061ee <powf+0x7e>
 80061d0:	eeb0 0a48 	vmov.f32	s0, s16
 80061d4:	f000 fb1f 	bl	8006816 <finitef>
 80061d8:	b148      	cbz	r0, 80061ee <powf+0x7e>
 80061da:	eef4 8a68 	vcmp.f32	s17, s17
 80061de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061e2:	d7e9      	bvc.n	80061b8 <powf+0x48>
 80061e4:	f7ff ff6e 	bl	80060c4 <__errno>
 80061e8:	2321      	movs	r3, #33	; 0x21
 80061ea:	6003      	str	r3, [r0, #0]
 80061ec:	e00f      	b.n	800620e <powf+0x9e>
 80061ee:	eef5 8a40 	vcmp.f32	s17, #0.0
 80061f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f6:	d10a      	bne.n	800620e <powf+0x9e>
 80061f8:	eeb0 0a49 	vmov.f32	s0, s18
 80061fc:	f000 fb0b 	bl	8006816 <finitef>
 8006200:	b128      	cbz	r0, 800620e <powf+0x9e>
 8006202:	eeb0 0a48 	vmov.f32	s0, s16
 8006206:	f000 fb06 	bl	8006816 <finitef>
 800620a:	2800      	cmp	r0, #0
 800620c:	d1d4      	bne.n	80061b8 <powf+0x48>
 800620e:	eeb0 0a68 	vmov.f32	s0, s17
 8006212:	ecbd 8b04 	vpop	{d8-d9}
 8006216:	bd08      	pop	{r3, pc}
 8006218:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800621c:	e7f7      	b.n	800620e <powf+0x9e>
	...

08006220 <__ieee754_powf>:
 8006220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006224:	ee10 4a90 	vmov	r4, s1
 8006228:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800622c:	ed2d 8b02 	vpush	{d8}
 8006230:	ee10 6a10 	vmov	r6, s0
 8006234:	eeb0 8a40 	vmov.f32	s16, s0
 8006238:	eef0 8a60 	vmov.f32	s17, s1
 800623c:	d10c      	bne.n	8006258 <__ieee754_powf+0x38>
 800623e:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8006242:	0076      	lsls	r6, r6, #1
 8006244:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8006248:	f240 8296 	bls.w	8006778 <__ieee754_powf+0x558>
 800624c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8006250:	ecbd 8b02 	vpop	{d8}
 8006254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006258:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800625c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8006260:	dcf4      	bgt.n	800624c <__ieee754_powf+0x2c>
 8006262:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8006266:	dd08      	ble.n	800627a <__ieee754_powf+0x5a>
 8006268:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800626c:	d1ee      	bne.n	800624c <__ieee754_powf+0x2c>
 800626e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8006272:	0064      	lsls	r4, r4, #1
 8006274:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8006278:	e7e6      	b.n	8006248 <__ieee754_powf+0x28>
 800627a:	2e00      	cmp	r6, #0
 800627c:	da20      	bge.n	80062c0 <__ieee754_powf+0xa0>
 800627e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8006282:	da2d      	bge.n	80062e0 <__ieee754_powf+0xc0>
 8006284:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8006288:	f2c0 827f 	blt.w	800678a <__ieee754_powf+0x56a>
 800628c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8006290:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006294:	fa48 f703 	asr.w	r7, r8, r3
 8006298:	fa07 f303 	lsl.w	r3, r7, r3
 800629c:	4543      	cmp	r3, r8
 800629e:	f040 8274 	bne.w	800678a <__ieee754_powf+0x56a>
 80062a2:	f007 0701 	and.w	r7, r7, #1
 80062a6:	f1c7 0702 	rsb	r7, r7, #2
 80062aa:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80062ae:	d11f      	bne.n	80062f0 <__ieee754_powf+0xd0>
 80062b0:	2c00      	cmp	r4, #0
 80062b2:	f280 8267 	bge.w	8006784 <__ieee754_powf+0x564>
 80062b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80062ba:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80062be:	e7c7      	b.n	8006250 <__ieee754_powf+0x30>
 80062c0:	2700      	movs	r7, #0
 80062c2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80062c6:	d1f0      	bne.n	80062aa <__ieee754_powf+0x8a>
 80062c8:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 80062cc:	f000 8254 	beq.w	8006778 <__ieee754_powf+0x558>
 80062d0:	dd08      	ble.n	80062e4 <__ieee754_powf+0xc4>
 80062d2:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 80065dc <__ieee754_powf+0x3bc>
 80062d6:	2c00      	cmp	r4, #0
 80062d8:	bfa8      	it	ge
 80062da:	eeb0 0a68 	vmovge.f32	s0, s17
 80062de:	e7b7      	b.n	8006250 <__ieee754_powf+0x30>
 80062e0:	2702      	movs	r7, #2
 80062e2:	e7ee      	b.n	80062c2 <__ieee754_powf+0xa2>
 80062e4:	2c00      	cmp	r4, #0
 80062e6:	f280 824a 	bge.w	800677e <__ieee754_powf+0x55e>
 80062ea:	eeb1 0a68 	vneg.f32	s0, s17
 80062ee:	e7af      	b.n	8006250 <__ieee754_powf+0x30>
 80062f0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80062f4:	d102      	bne.n	80062fc <__ieee754_powf+0xdc>
 80062f6:	ee28 0a08 	vmul.f32	s0, s16, s16
 80062fa:	e7a9      	b.n	8006250 <__ieee754_powf+0x30>
 80062fc:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8006300:	eeb0 0a48 	vmov.f32	s0, s16
 8006304:	d107      	bne.n	8006316 <__ieee754_powf+0xf6>
 8006306:	2e00      	cmp	r6, #0
 8006308:	db05      	blt.n	8006316 <__ieee754_powf+0xf6>
 800630a:	ecbd 8b02 	vpop	{d8}
 800630e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006312:	f000 ba53 	b.w	80067bc <__ieee754_sqrtf>
 8006316:	f000 fa77 	bl	8006808 <fabsf>
 800631a:	b125      	cbz	r5, 8006326 <__ieee754_powf+0x106>
 800631c:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8006320:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8006324:	d116      	bne.n	8006354 <__ieee754_powf+0x134>
 8006326:	2c00      	cmp	r4, #0
 8006328:	bfbc      	itt	lt
 800632a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800632e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8006332:	2e00      	cmp	r6, #0
 8006334:	da8c      	bge.n	8006250 <__ieee754_powf+0x30>
 8006336:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800633a:	ea55 0307 	orrs.w	r3, r5, r7
 800633e:	d104      	bne.n	800634a <__ieee754_powf+0x12a>
 8006340:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006344:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8006348:	e782      	b.n	8006250 <__ieee754_powf+0x30>
 800634a:	2f01      	cmp	r7, #1
 800634c:	d180      	bne.n	8006250 <__ieee754_powf+0x30>
 800634e:	eeb1 0a40 	vneg.f32	s0, s0
 8006352:	e77d      	b.n	8006250 <__ieee754_powf+0x30>
 8006354:	0ff0      	lsrs	r0, r6, #31
 8006356:	3801      	subs	r0, #1
 8006358:	ea57 0300 	orrs.w	r3, r7, r0
 800635c:	d104      	bne.n	8006368 <__ieee754_powf+0x148>
 800635e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8006362:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8006366:	e773      	b.n	8006250 <__ieee754_powf+0x30>
 8006368:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800636c:	dd74      	ble.n	8006458 <__ieee754_powf+0x238>
 800636e:	4b9c      	ldr	r3, [pc, #624]	; (80065e0 <__ieee754_powf+0x3c0>)
 8006370:	429d      	cmp	r5, r3
 8006372:	dc08      	bgt.n	8006386 <__ieee754_powf+0x166>
 8006374:	2c00      	cmp	r4, #0
 8006376:	da0b      	bge.n	8006390 <__ieee754_powf+0x170>
 8006378:	2000      	movs	r0, #0
 800637a:	ecbd 8b02 	vpop	{d8}
 800637e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006382:	f000 ba3b 	b.w	80067fc <__math_oflowf>
 8006386:	4b97      	ldr	r3, [pc, #604]	; (80065e4 <__ieee754_powf+0x3c4>)
 8006388:	429d      	cmp	r5, r3
 800638a:	dd08      	ble.n	800639e <__ieee754_powf+0x17e>
 800638c:	2c00      	cmp	r4, #0
 800638e:	dcf3      	bgt.n	8006378 <__ieee754_powf+0x158>
 8006390:	2000      	movs	r0, #0
 8006392:	ecbd 8b02 	vpop	{d8}
 8006396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800639a:	f000 ba29 	b.w	80067f0 <__math_uflowf>
 800639e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80063a2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80063a6:	eddf 6a90 	vldr	s13, [pc, #576]	; 80065e8 <__ieee754_powf+0x3c8>
 80063aa:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80063ae:	eee0 6a67 	vfms.f32	s13, s0, s15
 80063b2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80063b6:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80063ba:	ee20 7a00 	vmul.f32	s14, s0, s0
 80063be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063c2:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80065ec <__ieee754_powf+0x3cc>
 80063c6:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80063ca:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80065f0 <__ieee754_powf+0x3d0>
 80063ce:	eee0 7a07 	vfma.f32	s15, s0, s14
 80063d2:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80065f4 <__ieee754_powf+0x3d4>
 80063d6:	eef0 6a67 	vmov.f32	s13, s15
 80063da:	eee0 6a07 	vfma.f32	s13, s0, s14
 80063de:	ee16 3a90 	vmov	r3, s13
 80063e2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80063e6:	f023 030f 	bic.w	r3, r3, #15
 80063ea:	ee00 3a90 	vmov	s1, r3
 80063ee:	eee0 0a47 	vfms.f32	s1, s0, s14
 80063f2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80063f6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80063fa:	f024 040f 	bic.w	r4, r4, #15
 80063fe:	ee07 4a10 	vmov	s14, r4
 8006402:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8006406:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800640a:	ee07 3a90 	vmov	s15, r3
 800640e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8006412:	3f01      	subs	r7, #1
 8006414:	ea57 0200 	orrs.w	r2, r7, r0
 8006418:	ee07 4a10 	vmov	s14, r4
 800641c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006420:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8006424:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8006428:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800642c:	ee17 4a10 	vmov	r4, s14
 8006430:	bf08      	it	eq
 8006432:	eeb0 8a40 	vmoveq.f32	s16, s0
 8006436:	2c00      	cmp	r4, #0
 8006438:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800643c:	f340 817e 	ble.w	800673c <__ieee754_powf+0x51c>
 8006440:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8006444:	f340 80f8 	ble.w	8006638 <__ieee754_powf+0x418>
 8006448:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800644c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006450:	bf4c      	ite	mi
 8006452:	2001      	movmi	r0, #1
 8006454:	2000      	movpl	r0, #0
 8006456:	e790      	b.n	800637a <__ieee754_powf+0x15a>
 8006458:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800645c:	bf01      	itttt	eq
 800645e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 80065f8 <__ieee754_powf+0x3d8>
 8006462:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8006466:	f06f 0217 	mvneq.w	r2, #23
 800646a:	ee17 5a90 	vmoveq	r5, s15
 800646e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8006472:	bf18      	it	ne
 8006474:	2200      	movne	r2, #0
 8006476:	3b7f      	subs	r3, #127	; 0x7f
 8006478:	4413      	add	r3, r2
 800647a:	4a60      	ldr	r2, [pc, #384]	; (80065fc <__ieee754_powf+0x3dc>)
 800647c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8006480:	4295      	cmp	r5, r2
 8006482:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8006486:	dd06      	ble.n	8006496 <__ieee754_powf+0x276>
 8006488:	4a5d      	ldr	r2, [pc, #372]	; (8006600 <__ieee754_powf+0x3e0>)
 800648a:	4295      	cmp	r5, r2
 800648c:	f340 80a4 	ble.w	80065d8 <__ieee754_powf+0x3b8>
 8006490:	3301      	adds	r3, #1
 8006492:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8006496:	2500      	movs	r5, #0
 8006498:	4a5a      	ldr	r2, [pc, #360]	; (8006604 <__ieee754_powf+0x3e4>)
 800649a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800649e:	ee07 1a90 	vmov	s15, r1
 80064a2:	ed92 7a00 	vldr	s14, [r2]
 80064a6:	4a58      	ldr	r2, [pc, #352]	; (8006608 <__ieee754_powf+0x3e8>)
 80064a8:	ee37 6a27 	vadd.f32	s12, s14, s15
 80064ac:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80064b0:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80064b4:	1049      	asrs	r1, r1, #1
 80064b6:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80064ba:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80064be:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 80064c2:	ee37 5ac7 	vsub.f32	s10, s15, s14
 80064c6:	ee06 1a10 	vmov	s12, r1
 80064ca:	ee65 4a26 	vmul.f32	s9, s10, s13
 80064ce:	ee36 7a47 	vsub.f32	s14, s12, s14
 80064d2:	ee14 6a90 	vmov	r6, s9
 80064d6:	4016      	ands	r6, r2
 80064d8:	ee05 6a90 	vmov	s11, r6
 80064dc:	eea5 5ac6 	vfms.f32	s10, s11, s12
 80064e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80064e4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800660c <__ieee754_powf+0x3ec>
 80064e8:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80064ec:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80064f0:	ee25 6a26 	vmul.f32	s12, s10, s13
 80064f4:	eddf 6a46 	vldr	s13, [pc, #280]	; 8006610 <__ieee754_powf+0x3f0>
 80064f8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80064fc:	eddf 6a45 	vldr	s13, [pc, #276]	; 8006614 <__ieee754_powf+0x3f4>
 8006500:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006504:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80065e8 <__ieee754_powf+0x3c8>
 8006508:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800650c:	eddf 6a42 	vldr	s13, [pc, #264]	; 8006618 <__ieee754_powf+0x3f8>
 8006510:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006514:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800661c <__ieee754_powf+0x3fc>
 8006518:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800651c:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8006520:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8006524:	ee66 6a86 	vmul.f32	s13, s13, s12
 8006528:	eee5 6a07 	vfma.f32	s13, s10, s14
 800652c:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8006530:	eef0 7a45 	vmov.f32	s15, s10
 8006534:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8006538:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800653c:	ee17 1a90 	vmov	r1, s15
 8006540:	4011      	ands	r1, r2
 8006542:	ee07 1a90 	vmov	s15, r1
 8006546:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800654a:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800654e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006552:	ee27 7a24 	vmul.f32	s14, s14, s9
 8006556:	eea6 7a27 	vfma.f32	s14, s12, s15
 800655a:	eeb0 6a47 	vmov.f32	s12, s14
 800655e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8006562:	ee16 1a10 	vmov	r1, s12
 8006566:	4011      	ands	r1, r2
 8006568:	ee06 1a90 	vmov	s13, r1
 800656c:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8006570:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8006620 <__ieee754_powf+0x400>
 8006574:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8006624 <__ieee754_powf+0x404>
 8006578:	ee37 7a66 	vsub.f32	s14, s14, s13
 800657c:	ee06 1a10 	vmov	s12, r1
 8006580:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006584:	eddf 7a28 	vldr	s15, [pc, #160]	; 8006628 <__ieee754_powf+0x408>
 8006588:	4928      	ldr	r1, [pc, #160]	; (800662c <__ieee754_powf+0x40c>)
 800658a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800658e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8006592:	edd1 7a00 	vldr	s15, [r1]
 8006596:	ee37 7a27 	vadd.f32	s14, s14, s15
 800659a:	ee07 3a90 	vmov	s15, r3
 800659e:	4b24      	ldr	r3, [pc, #144]	; (8006630 <__ieee754_powf+0x410>)
 80065a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80065a4:	eef0 7a47 	vmov.f32	s15, s14
 80065a8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80065ac:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80065b0:	edd5 0a00 	vldr	s1, [r5]
 80065b4:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80065b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065bc:	ee17 3a90 	vmov	r3, s15
 80065c0:	4013      	ands	r3, r2
 80065c2:	ee07 3a90 	vmov	s15, r3
 80065c6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80065ca:	ee76 6ae0 	vsub.f32	s13, s13, s1
 80065ce:	eee6 6a65 	vfms.f32	s13, s12, s11
 80065d2:	ee77 7a66 	vsub.f32	s15, s14, s13
 80065d6:	e70e      	b.n	80063f6 <__ieee754_powf+0x1d6>
 80065d8:	2501      	movs	r5, #1
 80065da:	e75d      	b.n	8006498 <__ieee754_powf+0x278>
 80065dc:	00000000 	.word	0x00000000
 80065e0:	3f7ffff3 	.word	0x3f7ffff3
 80065e4:	3f800007 	.word	0x3f800007
 80065e8:	3eaaaaab 	.word	0x3eaaaaab
 80065ec:	3fb8aa3b 	.word	0x3fb8aa3b
 80065f0:	36eca570 	.word	0x36eca570
 80065f4:	3fb8aa00 	.word	0x3fb8aa00
 80065f8:	4b800000 	.word	0x4b800000
 80065fc:	001cc471 	.word	0x001cc471
 8006600:	005db3d6 	.word	0x005db3d6
 8006604:	08006a54 	.word	0x08006a54
 8006608:	fffff000 	.word	0xfffff000
 800660c:	3e6c3255 	.word	0x3e6c3255
 8006610:	3e53f142 	.word	0x3e53f142
 8006614:	3e8ba305 	.word	0x3e8ba305
 8006618:	3edb6db7 	.word	0x3edb6db7
 800661c:	3f19999a 	.word	0x3f19999a
 8006620:	3f76384f 	.word	0x3f76384f
 8006624:	3f763800 	.word	0x3f763800
 8006628:	369dc3a0 	.word	0x369dc3a0
 800662c:	08006a64 	.word	0x08006a64
 8006630:	08006a5c 	.word	0x08006a5c
 8006634:	3338aa3c 	.word	0x3338aa3c
 8006638:	f040 8095 	bne.w	8006766 <__ieee754_powf+0x546>
 800663c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8006634 <__ieee754_powf+0x414>
 8006640:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006644:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8006648:	eef4 6ac7 	vcmpe.f32	s13, s14
 800664c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006650:	f73f aefa 	bgt.w	8006448 <__ieee754_powf+0x228>
 8006654:	15db      	asrs	r3, r3, #23
 8006656:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800665a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800665e:	4103      	asrs	r3, r0
 8006660:	4423      	add	r3, r4
 8006662:	494b      	ldr	r1, [pc, #300]	; (8006790 <__ieee754_powf+0x570>)
 8006664:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006668:	3a7f      	subs	r2, #127	; 0x7f
 800666a:	4111      	asrs	r1, r2
 800666c:	ea23 0101 	bic.w	r1, r3, r1
 8006670:	ee07 1a10 	vmov	s14, r1
 8006674:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8006678:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800667c:	f1c2 0217 	rsb	r2, r2, #23
 8006680:	4110      	asrs	r0, r2
 8006682:	2c00      	cmp	r4, #0
 8006684:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006688:	bfb8      	it	lt
 800668a:	4240      	neglt	r0, r0
 800668c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8006690:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8006794 <__ieee754_powf+0x574>
 8006694:	eddf 6a40 	vldr	s13, [pc, #256]	; 8006798 <__ieee754_powf+0x578>
 8006698:	ee17 3a10 	vmov	r3, s14
 800669c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80066a0:	f023 030f 	bic.w	r3, r3, #15
 80066a4:	ee07 3a10 	vmov	s14, r3
 80066a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066ac:	ee27 0a00 	vmul.f32	s0, s14, s0
 80066b0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80066b4:	eddf 7a39 	vldr	s15, [pc, #228]	; 800679c <__ieee754_powf+0x57c>
 80066b8:	eea0 0aa7 	vfma.f32	s0, s1, s15
 80066bc:	eef0 7a40 	vmov.f32	s15, s0
 80066c0:	eee7 7a26 	vfma.f32	s15, s14, s13
 80066c4:	eeb0 6a67 	vmov.f32	s12, s15
 80066c8:	eea7 6a66 	vfms.f32	s12, s14, s13
 80066cc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80066d0:	ee30 0a46 	vsub.f32	s0, s0, s12
 80066d4:	eddf 6a32 	vldr	s13, [pc, #200]	; 80067a0 <__ieee754_powf+0x580>
 80066d8:	ed9f 6a32 	vldr	s12, [pc, #200]	; 80067a4 <__ieee754_powf+0x584>
 80066dc:	eee7 6a06 	vfma.f32	s13, s14, s12
 80066e0:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80067a8 <__ieee754_powf+0x588>
 80066e4:	eea6 6a87 	vfma.f32	s12, s13, s14
 80066e8:	eddf 6a30 	vldr	s13, [pc, #192]	; 80067ac <__ieee754_powf+0x58c>
 80066ec:	eee6 6a07 	vfma.f32	s13, s12, s14
 80066f0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80067b0 <__ieee754_powf+0x590>
 80066f4:	eea6 6a87 	vfma.f32	s12, s13, s14
 80066f8:	eef0 6a67 	vmov.f32	s13, s15
 80066fc:	eee6 6a47 	vfms.f32	s13, s12, s14
 8006700:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006704:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8006708:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800670c:	eea7 0a80 	vfma.f32	s0, s15, s0
 8006710:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006714:	ee37 0a40 	vsub.f32	s0, s14, s0
 8006718:	ee70 7a67 	vsub.f32	s15, s0, s15
 800671c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006720:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006724:	ee10 3a10 	vmov	r3, s0
 8006728:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800672c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006730:	da1f      	bge.n	8006772 <__ieee754_powf+0x552>
 8006732:	f000 f87d 	bl	8006830 <scalbnf>
 8006736:	ee20 0a08 	vmul.f32	s0, s0, s16
 800673a:	e589      	b.n	8006250 <__ieee754_powf+0x30>
 800673c:	4a1d      	ldr	r2, [pc, #116]	; (80067b4 <__ieee754_powf+0x594>)
 800673e:	4293      	cmp	r3, r2
 8006740:	dd07      	ble.n	8006752 <__ieee754_powf+0x532>
 8006742:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800674a:	bf4c      	ite	mi
 800674c:	2001      	movmi	r0, #1
 800674e:	2000      	movpl	r0, #0
 8006750:	e61f      	b.n	8006392 <__ieee754_powf+0x172>
 8006752:	d108      	bne.n	8006766 <__ieee754_powf+0x546>
 8006754:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006758:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800675c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006760:	f6ff af78 	blt.w	8006654 <__ieee754_powf+0x434>
 8006764:	e7ed      	b.n	8006742 <__ieee754_powf+0x522>
 8006766:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800676a:	f73f af73 	bgt.w	8006654 <__ieee754_powf+0x434>
 800676e:	2000      	movs	r0, #0
 8006770:	e78c      	b.n	800668c <__ieee754_powf+0x46c>
 8006772:	ee00 3a10 	vmov	s0, r3
 8006776:	e7de      	b.n	8006736 <__ieee754_powf+0x516>
 8006778:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800677c:	e568      	b.n	8006250 <__ieee754_powf+0x30>
 800677e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80067b8 <__ieee754_powf+0x598>
 8006782:	e565      	b.n	8006250 <__ieee754_powf+0x30>
 8006784:	eeb0 0a48 	vmov.f32	s0, s16
 8006788:	e562      	b.n	8006250 <__ieee754_powf+0x30>
 800678a:	2700      	movs	r7, #0
 800678c:	e58d      	b.n	80062aa <__ieee754_powf+0x8a>
 800678e:	bf00      	nop
 8006790:	007fffff 	.word	0x007fffff
 8006794:	35bfbe8c 	.word	0x35bfbe8c
 8006798:	3f317200 	.word	0x3f317200
 800679c:	3f317218 	.word	0x3f317218
 80067a0:	b5ddea0e 	.word	0xb5ddea0e
 80067a4:	3331bb4c 	.word	0x3331bb4c
 80067a8:	388ab355 	.word	0x388ab355
 80067ac:	bb360b61 	.word	0xbb360b61
 80067b0:	3e2aaaab 	.word	0x3e2aaaab
 80067b4:	43160000 	.word	0x43160000
 80067b8:	00000000 	.word	0x00000000

080067bc <__ieee754_sqrtf>:
 80067bc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80067c0:	4770      	bx	lr

080067c2 <with_errnof>:
 80067c2:	b513      	push	{r0, r1, r4, lr}
 80067c4:	4604      	mov	r4, r0
 80067c6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80067ca:	f7ff fc7b 	bl	80060c4 <__errno>
 80067ce:	ed9d 0a01 	vldr	s0, [sp, #4]
 80067d2:	6004      	str	r4, [r0, #0]
 80067d4:	b002      	add	sp, #8
 80067d6:	bd10      	pop	{r4, pc}

080067d8 <xflowf>:
 80067d8:	b130      	cbz	r0, 80067e8 <xflowf+0x10>
 80067da:	eef1 7a40 	vneg.f32	s15, s0
 80067de:	ee27 0a80 	vmul.f32	s0, s15, s0
 80067e2:	2022      	movs	r0, #34	; 0x22
 80067e4:	f7ff bfed 	b.w	80067c2 <with_errnof>
 80067e8:	eef0 7a40 	vmov.f32	s15, s0
 80067ec:	e7f7      	b.n	80067de <xflowf+0x6>
	...

080067f0 <__math_uflowf>:
 80067f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80067f8 <__math_uflowf+0x8>
 80067f4:	f7ff bff0 	b.w	80067d8 <xflowf>
 80067f8:	10000000 	.word	0x10000000

080067fc <__math_oflowf>:
 80067fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006804 <__math_oflowf+0x8>
 8006800:	f7ff bfea 	b.w	80067d8 <xflowf>
 8006804:	70000000 	.word	0x70000000

08006808 <fabsf>:
 8006808:	ee10 3a10 	vmov	r3, s0
 800680c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006810:	ee00 3a10 	vmov	s0, r3
 8006814:	4770      	bx	lr

08006816 <finitef>:
 8006816:	b082      	sub	sp, #8
 8006818:	ed8d 0a01 	vstr	s0, [sp, #4]
 800681c:	9801      	ldr	r0, [sp, #4]
 800681e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006822:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8006826:	bfac      	ite	ge
 8006828:	2000      	movge	r0, #0
 800682a:	2001      	movlt	r0, #1
 800682c:	b002      	add	sp, #8
 800682e:	4770      	bx	lr

08006830 <scalbnf>:
 8006830:	ee10 3a10 	vmov	r3, s0
 8006834:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8006838:	d025      	beq.n	8006886 <scalbnf+0x56>
 800683a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800683e:	d302      	bcc.n	8006846 <scalbnf+0x16>
 8006840:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006844:	4770      	bx	lr
 8006846:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800684a:	d122      	bne.n	8006892 <scalbnf+0x62>
 800684c:	4b2a      	ldr	r3, [pc, #168]	; (80068f8 <scalbnf+0xc8>)
 800684e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80068fc <scalbnf+0xcc>
 8006852:	4298      	cmp	r0, r3
 8006854:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006858:	db16      	blt.n	8006888 <scalbnf+0x58>
 800685a:	ee10 3a10 	vmov	r3, s0
 800685e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006862:	3a19      	subs	r2, #25
 8006864:	4402      	add	r2, r0
 8006866:	2afe      	cmp	r2, #254	; 0xfe
 8006868:	dd15      	ble.n	8006896 <scalbnf+0x66>
 800686a:	ee10 3a10 	vmov	r3, s0
 800686e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8006900 <scalbnf+0xd0>
 8006872:	eddf 6a24 	vldr	s13, [pc, #144]	; 8006904 <scalbnf+0xd4>
 8006876:	2b00      	cmp	r3, #0
 8006878:	eeb0 7a67 	vmov.f32	s14, s15
 800687c:	bfb8      	it	lt
 800687e:	eef0 7a66 	vmovlt.f32	s15, s13
 8006882:	ee27 0a27 	vmul.f32	s0, s14, s15
 8006886:	4770      	bx	lr
 8006888:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006908 <scalbnf+0xd8>
 800688c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006890:	4770      	bx	lr
 8006892:	0dd2      	lsrs	r2, r2, #23
 8006894:	e7e6      	b.n	8006864 <scalbnf+0x34>
 8006896:	2a00      	cmp	r2, #0
 8006898:	dd06      	ble.n	80068a8 <scalbnf+0x78>
 800689a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800689e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80068a2:	ee00 3a10 	vmov	s0, r3
 80068a6:	4770      	bx	lr
 80068a8:	f112 0f16 	cmn.w	r2, #22
 80068ac:	da1a      	bge.n	80068e4 <scalbnf+0xb4>
 80068ae:	f24c 3350 	movw	r3, #50000	; 0xc350
 80068b2:	4298      	cmp	r0, r3
 80068b4:	ee10 3a10 	vmov	r3, s0
 80068b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068bc:	dd0a      	ble.n	80068d4 <scalbnf+0xa4>
 80068be:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8006900 <scalbnf+0xd0>
 80068c2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006904 <scalbnf+0xd4>
 80068c6:	eef0 7a40 	vmov.f32	s15, s0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	bf18      	it	ne
 80068ce:	eeb0 0a47 	vmovne.f32	s0, s14
 80068d2:	e7db      	b.n	800688c <scalbnf+0x5c>
 80068d4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8006908 <scalbnf+0xd8>
 80068d8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800690c <scalbnf+0xdc>
 80068dc:	eef0 7a40 	vmov.f32	s15, s0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	e7f3      	b.n	80068cc <scalbnf+0x9c>
 80068e4:	3219      	adds	r2, #25
 80068e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80068ea:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80068ee:	eddf 7a08 	vldr	s15, [pc, #32]	; 8006910 <scalbnf+0xe0>
 80068f2:	ee07 3a10 	vmov	s14, r3
 80068f6:	e7c4      	b.n	8006882 <scalbnf+0x52>
 80068f8:	ffff3cb0 	.word	0xffff3cb0
 80068fc:	4c000000 	.word	0x4c000000
 8006900:	7149f2ca 	.word	0x7149f2ca
 8006904:	f149f2ca 	.word	0xf149f2ca
 8006908:	0da24260 	.word	0x0da24260
 800690c:	8da24260 	.word	0x8da24260
 8006910:	33000000 	.word	0x33000000

08006914 <_init>:
 8006914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006916:	bf00      	nop
 8006918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800691a:	bc08      	pop	{r3}
 800691c:	469e      	mov	lr, r3
 800691e:	4770      	bx	lr

08006920 <_fini>:
 8006920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006922:	bf00      	nop
 8006924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006926:	bc08      	pop	{r3}
 8006928:	469e      	mov	lr, r3
 800692a:	4770      	bx	lr
