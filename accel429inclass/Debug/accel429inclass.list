
accel429inclass.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027c4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002970  08002970  00012970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002980  08002980  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  08002980  08002980  00012980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002988  08002988  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002988  08002988  00012988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800298c  0800298c  0001298c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08002990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020048  2**0
                  CONTENTS
 10 .bss          000000e0  20000048  20000048  00020048  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000128  20000128  00020048  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007ff8  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017fd  00000000  00000000  00028070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b8  00000000  00000000  00029870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006f0  00000000  00000000  0002a028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000215b1  00000000  00000000  0002a718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007ff9  00000000  00000000  0004bcc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cefad  00000000  00000000  00053cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00122c6f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001db4  00000000  00000000  00122cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000048 	.word	0x20000048
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002958 	.word	0x08002958

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000004c 	.word	0x2000004c
 80001e8:	08002958 	.word	0x08002958

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80004fa:	2300      	movs	r3, #0
 80004fc:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80004fe:	f000 fbc5 	bl	8000c8c <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000502:	88fb      	ldrh	r3, [r7, #6]
 8000504:	b2db      	uxtb	r3, r3
 8000506:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000508:	f107 030f 	add.w	r3, r7, #15
 800050c:	2201      	movs	r2, #1
 800050e:	2120      	movs	r1, #32
 8000510:	4618      	mov	r0, r3
 8000512:	f000 fc07 	bl	8000d24 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8000516:	88fb      	ldrh	r3, [r7, #6]
 8000518:	0a1b      	lsrs	r3, r3, #8
 800051a:	b29b      	uxth	r3, r3
 800051c:	b2db      	uxtb	r3, r3
 800051e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8000520:	f107 030f 	add.w	r3, r7, #15
 8000524:	2201      	movs	r2, #1
 8000526:	2123      	movs	r1, #35	; 0x23
 8000528:	4618      	mov	r0, r3
 800052a:	f000 fbfb 	bl	8000d24 <GYRO_IO_Write>
}
 800052e:	bf00      	nop
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0
}
 800053a:	bf00      	nop
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 800054a:	f000 fb9f 	bl	8000c8c <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 800054e:	1dfb      	adds	r3, r7, #7
 8000550:	2201      	movs	r2, #1
 8000552:	210f      	movs	r1, #15
 8000554:	4618      	mov	r0, r3
 8000556:	f000 fc17 	bl	8000d88 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 800055a:	79fb      	ldrb	r3, [r7, #7]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800056a:	1dfb      	adds	r3, r7, #7
 800056c:	2201      	movs	r2, #1
 800056e:	2124      	movs	r1, #36	; 0x24
 8000570:	4618      	mov	r0, r3
 8000572:	f000 fc09 	bl	8000d88 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800057c:	b2db      	uxtb	r3, r3
 800057e:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000580:	1dfb      	adds	r3, r7, #7
 8000582:	2201      	movs	r2, #1
 8000584:	2124      	movs	r1, #36	; 0x24
 8000586:	4618      	mov	r0, r3
 8000588:	f000 fbcc 	bl	8000d24 <GYRO_IO_Write>
}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800059e:	2300      	movs	r3, #0
 80005a0:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80005a2:	88fb      	ldrh	r3, [r7, #6]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80005a8:	f107 030f 	add.w	r3, r7, #15
 80005ac:	2201      	movs	r2, #1
 80005ae:	2120      	movs	r1, #32
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fbb7 	bl	8000d24 <GYRO_IO_Write>
}
 80005b6:	bf00      	nop
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	b084      	sub	sp, #16
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	4603      	mov	r3, r0
 80005c6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 80005c8:	2300      	movs	r3, #0
 80005ca:	73fb      	strb	r3, [r7, #15]
 80005cc:	2300      	movs	r3, #0
 80005ce:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80005d0:	f107 030f 	add.w	r3, r7, #15
 80005d4:	2201      	movs	r2, #1
 80005d6:	2130      	movs	r1, #48	; 0x30
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fbd5 	bl	8000d88 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80005de:	f107 030e 	add.w	r3, r7, #14
 80005e2:	2201      	movs	r2, #1
 80005e4:	2122      	movs	r1, #34	; 0x22
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 fbce 	bl	8000d88 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	121b      	asrs	r3, r3, #8
 80005fc:	b25a      	sxtb	r2, r3
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	b25b      	sxtb	r3, r3
 8000602:	4313      	orrs	r3, r2
 8000604:	b25b      	sxtb	r3, r3
 8000606:	b2db      	uxtb	r3, r3
 8000608:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 800060a:	7bbb      	ldrb	r3, [r7, #14]
 800060c:	f023 0320 	bic.w	r3, r3, #32
 8000610:	b2db      	uxtb	r3, r3
 8000612:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8000614:	88fb      	ldrh	r3, [r7, #6]
 8000616:	b2da      	uxtb	r2, r3
 8000618:	7bbb      	ldrb	r3, [r7, #14]
 800061a:	4313      	orrs	r3, r2
 800061c:	b2db      	uxtb	r3, r3
 800061e:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8000620:	f107 030f 	add.w	r3, r7, #15
 8000624:	2201      	movs	r2, #1
 8000626:	2130      	movs	r1, #48	; 0x30
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fb7b 	bl	8000d24 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800062e:	f107 030e 	add.w	r3, r7, #14
 8000632:	2201      	movs	r2, #1
 8000634:	2122      	movs	r1, #34	; 0x22
 8000636:	4618      	mov	r0, r3
 8000638:	f000 fb74 	bl	8000d24 <GYRO_IO_Write>
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800064e:	f107 030f 	add.w	r3, r7, #15
 8000652:	2201      	movs	r2, #1
 8000654:	2122      	movs	r1, #34	; 0x22
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fb96 	bl	8000d88 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d10a      	bne.n	8000678 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8000662:	7bfb      	ldrb	r3, [r7, #15]
 8000664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000668:	b2db      	uxtb	r3, r3
 800066a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000672:	b2db      	uxtb	r3, r3
 8000674:	73fb      	strb	r3, [r7, #15]
 8000676:	e00c      	b.n	8000692 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d109      	bne.n	8000692 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	f023 0308 	bic.w	r3, r3, #8
 8000684:	b2db      	uxtb	r3, r3
 8000686:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8000688:	7bfb      	ldrb	r3, [r7, #15]
 800068a:	f043 0308 	orr.w	r3, r3, #8
 800068e:	b2db      	uxtb	r3, r3
 8000690:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000692:	f107 030f 	add.w	r3, r7, #15
 8000696:	2201      	movs	r2, #1
 8000698:	2122      	movs	r1, #34	; 0x22
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fb42 	bl	8000d24 <GYRO_IO_Write>
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80006b2:	f107 030f 	add.w	r3, r7, #15
 80006b6:	2201      	movs	r2, #1
 80006b8:	2122      	movs	r1, #34	; 0x22
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 fb64 	bl	8000d88 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d107      	bne.n	80006d6 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	73fb      	strb	r3, [r7, #15]
 80006d4:	e009      	b.n	80006ea <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d106      	bne.n	80006ea <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	f023 0308 	bic.w	r3, r3, #8
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80006ea:	f107 030f 	add.w	r3, r7, #15
 80006ee:	2201      	movs	r2, #1
 80006f0:	2122      	movs	r1, #34	; 0x22
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 fb16 	bl	8000d24 <GYRO_IO_Write>
}
 80006f8:	bf00      	nop
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800070a:	f107 030f 	add.w	r3, r7, #15
 800070e:	2201      	movs	r2, #1
 8000710:	2121      	movs	r1, #33	; 0x21
 8000712:	4618      	mov	r0, r3
 8000714:	f000 fb38 	bl	8000d88 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800071e:	b2db      	uxtb	r3, r3
 8000720:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8000722:	7bfa      	ldrb	r2, [r7, #15]
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	4313      	orrs	r3, r2
 8000728:	b2db      	uxtb	r3, r3
 800072a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800072c:	f107 030f 	add.w	r3, r7, #15
 8000730:	2201      	movs	r2, #1
 8000732:	2121      	movs	r1, #33	; 0x21
 8000734:	4618      	mov	r0, r3
 8000736:	f000 faf5 	bl	8000d24 <GYRO_IO_Write>
}
 800073a:	bf00      	nop
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	b084      	sub	sp, #16
 8000746:	af00      	add	r7, sp, #0
 8000748:	4603      	mov	r3, r0
 800074a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800074c:	f107 030f 	add.w	r3, r7, #15
 8000750:	2201      	movs	r2, #1
 8000752:	2124      	movs	r1, #36	; 0x24
 8000754:	4618      	mov	r0, r3
 8000756:	f000 fb17 	bl	8000d88 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	f023 0310 	bic.w	r3, r3, #16
 8000760:	b2db      	uxtb	r3, r3
 8000762:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8000764:	7bfa      	ldrb	r2, [r7, #15]
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	4313      	orrs	r3, r2
 800076a:	b2db      	uxtb	r3, r3
 800076c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800076e:	f107 030f 	add.w	r3, r7, #15
 8000772:	2201      	movs	r2, #1
 8000774:	2124      	movs	r1, #36	; 0x24
 8000776:	4618      	mov	r0, r3
 8000778:	f000 fad4 	bl	8000d24 <GYRO_IO_Write>
}
 800077c:	bf00      	nop
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
 8000790:	2300      	movs	r3, #0
 8000792:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 80007a2:	f04f 0300 	mov.w	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 80007ac:	f107 030f 	add.w	r3, r7, #15
 80007b0:	2201      	movs	r2, #1
 80007b2:	2123      	movs	r1, #35	; 0x23
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 fae7 	bl	8000d88 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 80007ba:	f107 0318 	add.w	r3, r7, #24
 80007be:	2206      	movs	r2, #6
 80007c0:	2128      	movs	r1, #40	; 0x28
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 fae0 	bl	8000d88 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d123      	bne.n	800081a <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 80007d2:	2300      	movs	r3, #0
 80007d4:	623b      	str	r3, [r7, #32]
 80007d6:	e01c      	b.n	8000812 <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 80007d8:	6a3b      	ldr	r3, [r7, #32]
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	3301      	adds	r3, #1
 80007de:	3328      	adds	r3, #40	; 0x28
 80007e0:	443b      	add	r3, r7
 80007e2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	021b      	lsls	r3, r3, #8
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	6a3b      	ldr	r3, [r7, #32]
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	3328      	adds	r3, #40	; 0x28
 80007f2:	443b      	add	r3, r7
 80007f4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	4413      	add	r3, r2
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	b21a      	sxth	r2, r3
 8000800:	6a3b      	ldr	r3, [r7, #32]
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	3328      	adds	r3, #40	; 0x28
 8000806:	443b      	add	r3, r7
 8000808:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 800080c:	6a3b      	ldr	r3, [r7, #32]
 800080e:	3301      	adds	r3, #1
 8000810:	623b      	str	r3, [r7, #32]
 8000812:	6a3b      	ldr	r3, [r7, #32]
 8000814:	2b02      	cmp	r3, #2
 8000816:	dddf      	ble.n	80007d8 <L3GD20_ReadXYZAngRate+0x54>
 8000818:	e022      	b.n	8000860 <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
 800081e:	e01c      	b.n	800085a <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8000820:	6a3b      	ldr	r3, [r7, #32]
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	3328      	adds	r3, #40	; 0x28
 8000826:	443b      	add	r3, r7
 8000828:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800082c:	b29b      	uxth	r3, r3
 800082e:	021b      	lsls	r3, r3, #8
 8000830:	b29a      	uxth	r2, r3
 8000832:	6a3b      	ldr	r3, [r7, #32]
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	3301      	adds	r3, #1
 8000838:	3328      	adds	r3, #40	; 0x28
 800083a:	443b      	add	r3, r7
 800083c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000840:	b29b      	uxth	r3, r3
 8000842:	4413      	add	r3, r2
 8000844:	b29b      	uxth	r3, r3
 8000846:	b21a      	sxth	r2, r3
 8000848:	6a3b      	ldr	r3, [r7, #32]
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	3328      	adds	r3, #40	; 0x28
 800084e:	443b      	add	r3, r7
 8000850:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8000854:	6a3b      	ldr	r3, [r7, #32]
 8000856:	3301      	adds	r3, #1
 8000858:	623b      	str	r3, [r7, #32]
 800085a:	6a3b      	ldr	r3, [r7, #32]
 800085c:	2b02      	cmp	r3, #2
 800085e:	dddf      	ble.n	8000820 <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8000860:	7bfb      	ldrb	r3, [r7, #15]
 8000862:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000866:	2b20      	cmp	r3, #32
 8000868:	d00c      	beq.n	8000884 <L3GD20_ReadXYZAngRate+0x100>
 800086a:	2b20      	cmp	r3, #32
 800086c:	dc0d      	bgt.n	800088a <L3GD20_ReadXYZAngRate+0x106>
 800086e:	2b00      	cmp	r3, #0
 8000870:	d002      	beq.n	8000878 <L3GD20_ReadXYZAngRate+0xf4>
 8000872:	2b10      	cmp	r3, #16
 8000874:	d003      	beq.n	800087e <L3GD20_ReadXYZAngRate+0xfa>
 8000876:	e008      	b.n	800088a <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <L3GD20_ReadXYZAngRate+0x14c>)
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800087c:	e005      	b.n	800088a <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <L3GD20_ReadXYZAngRate+0x150>)
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8000882:	e002      	b.n	800088a <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <L3GD20_ReadXYZAngRate+0x154>)
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8000888:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
 800088e:	e016      	b.n	80008be <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8000890:	6a3b      	ldr	r3, [r7, #32]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	3328      	adds	r3, #40	; 0x28
 8000896:	443b      	add	r3, r7
 8000898:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800089c:	ee07 3a90 	vmov	s15, r3
 80008a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008a4:	6a3b      	ldr	r3, [r7, #32]
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	4413      	add	r3, r2
 80008ac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80008b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008b4:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80008b8:	6a3b      	ldr	r3, [r7, #32]
 80008ba:	3301      	adds	r3, #1
 80008bc:	623b      	str	r3, [r7, #32]
 80008be:	6a3b      	ldr	r3, [r7, #32]
 80008c0:	2b02      	cmp	r3, #2
 80008c2:	dde5      	ble.n	8000890 <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 80008c4:	bf00      	nop
 80008c6:	bf00      	nop
 80008c8:	3728      	adds	r7, #40	; 0x28
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	410c0000 	.word	0x410c0000
 80008d4:	418c0000 	.word	0x418c0000
 80008d8:	428c0000 	.word	0x428c0000

080008dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e0:	f000 fc20 	bl	8001124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e4:	f000 f818 	bl	8000918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e8:	f000 f8ac 	bl	8000a44 <MX_GPIO_Init>
  MX_SPI5_Init();
 80008ec:	f000 f874 	bl	80009d8 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
BSP_GYRO_Init();
 80008f0:	f000 fa84 	bl	8000dfc <BSP_GYRO_Init>
returnid=BSP_GYRO_ReadID();
 80008f4:	f000 fae8 	bl	8000ec8 <BSP_GYRO_ReadID>
 80008f8:	4603      	mov	r3, r0
 80008fa:	461a      	mov	r2, r3
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <main+0x34>)
 80008fe:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BSP_GYRO_GetXYZ(pfData);
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <main+0x38>)
 8000902:	f000 faf9 	bl	8000ef8 <BSP_GYRO_GetXYZ>
	  HAL_Delay(300);
 8000906:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800090a:	f000 fc7d 	bl	8001208 <HAL_Delay>
	  BSP_GYRO_GetXYZ(pfData);
 800090e:	e7f7      	b.n	8000900 <main+0x24>
 8000910:	20000034 	.word	0x20000034
 8000914:	200000bc 	.word	0x200000bc

08000918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b094      	sub	sp, #80	; 0x50
 800091c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	f107 0320 	add.w	r3, r7, #32
 8000922:	2230      	movs	r2, #48	; 0x30
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f002 f80e 	bl	8002948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	4b23      	ldr	r3, [pc, #140]	; (80009d0 <SystemClock_Config+0xb8>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000944:	4a22      	ldr	r2, [pc, #136]	; (80009d0 <SystemClock_Config+0xb8>)
 8000946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094a:	6413      	str	r3, [r2, #64]	; 0x40
 800094c:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <SystemClock_Config+0xb8>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <SystemClock_Config+0xbc>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000964:	4a1b      	ldr	r2, [pc, #108]	; (80009d4 <SystemClock_Config+0xbc>)
 8000966:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096a:	6013      	str	r3, [r2, #0]
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <SystemClock_Config+0xbc>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000978:	2302      	movs	r3, #2
 800097a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800097c:	2301      	movs	r3, #1
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000980:	2310      	movs	r3, #16
 8000982:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000984:	2300      	movs	r3, #0
 8000986:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000988:	f107 0320 	add.w	r3, r7, #32
 800098c:	4618      	mov	r0, r3
 800098e:	f001 f867 	bl	8001a60 <HAL_RCC_OscConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000998:	f000 f8d2 	bl	8000b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099c:	230f      	movs	r3, #15
 800099e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009a0:	2300      	movs	r3, #0
 80009a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f001 faca 	bl	8001f50 <HAL_RCC_ClockConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80009c2:	f000 f8bd 	bl	8000b40 <Error_Handler>
  }
}
 80009c6:	bf00      	nop
 80009c8:	3750      	adds	r7, #80	; 0x50
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40007000 	.word	0x40007000

080009d8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80009dc:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <MX_SPI5_Init+0x64>)
 80009de:	4a18      	ldr	r2, [pc, #96]	; (8000a40 <MX_SPI5_Init+0x68>)
 80009e0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80009e2:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <MX_SPI5_Init+0x64>)
 80009e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009e8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80009ea:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_SPI5_Init+0x64>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <MX_SPI5_Init+0x64>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_SPI5_Init+0x64>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_SPI5_Init+0x64>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_SPI5_Init+0x64>)
 8000a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a08:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_SPI5_Init+0x64>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <MX_SPI5_Init+0x64>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_SPI5_Init+0x64>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <MX_SPI5_Init+0x64>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_SPI5_Init+0x64>)
 8000a24:	220a      	movs	r2, #10
 8000a26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <MX_SPI5_Init+0x64>)
 8000a2a:	f001 fc3d 	bl	80022a8 <HAL_SPI_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000a34:	f000 f884 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000064 	.word	0x20000064
 8000a40:	40015000 	.word	0x40015000

08000a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b35      	ldr	r3, [pc, #212]	; (8000b34 <MX_GPIO_Init+0xf0>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a34      	ldr	r2, [pc, #208]	; (8000b34 <MX_GPIO_Init+0xf0>)
 8000a64:	f043 0320 	orr.w	r3, r3, #32
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b32      	ldr	r3, [pc, #200]	; (8000b34 <MX_GPIO_Init+0xf0>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0320 	and.w	r3, r3, #32
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b2e      	ldr	r3, [pc, #184]	; (8000b34 <MX_GPIO_Init+0xf0>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a2d      	ldr	r2, [pc, #180]	; (8000b34 <MX_GPIO_Init+0xf0>)
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b2b      	ldr	r3, [pc, #172]	; (8000b34 <MX_GPIO_Init+0xf0>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <MX_GPIO_Init+0xf0>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a26      	ldr	r2, [pc, #152]	; (8000b34 <MX_GPIO_Init+0xf0>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <MX_GPIO_Init+0xf0>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <MX_GPIO_Init+0xf0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a1f      	ldr	r2, [pc, #124]	; (8000b34 <MX_GPIO_Init+0xf0>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <MX_GPIO_Init+0xf0>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2102      	movs	r1, #2
 8000ace:	481a      	ldr	r0, [pc, #104]	; (8000b38 <MX_GPIO_Init+0xf4>)
 8000ad0:	f000 ff88 	bl	80019e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4813      	ldr	r0, [pc, #76]	; (8000b38 <MX_GPIO_Init+0xf4>)
 8000aec:	f000 fcc2 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pins : memsint1_Pin memsint2_Pin */
  GPIO_InitStruct.Pin = memsint1_Pin|memsint2_Pin;
 8000af0:	2306      	movs	r3, #6
 8000af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	480d      	ldr	r0, [pc, #52]	; (8000b3c <MX_GPIO_Init+0xf8>)
 8000b06:	f000 fcb5 	bl	8001474 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2007      	movs	r0, #7
 8000b10:	f000 fc79 	bl	8001406 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b14:	2007      	movs	r0, #7
 8000b16:	f000 fc92 	bl	800143e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2008      	movs	r0, #8
 8000b20:	f000 fc71 	bl	8001406 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b24:	2008      	movs	r0, #8
 8000b26:	f000 fc8a 	bl	800143e <HAL_NVIC_EnableIRQ>

}
 8000b2a:	bf00      	nop
 8000b2c:	3728      	adds	r7, #40	; 0x28
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020800 	.word	0x40020800
 8000b3c:	40020000 	.word	0x40020000

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <Error_Handler+0x8>
	...

08000b4c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000b50:	4819      	ldr	r0, [pc, #100]	; (8000bb8 <SPIx_Init+0x6c>)
 8000b52:	f001 fdfc 	bl	800274e <HAL_SPI_GetState>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d12b      	bne.n	8000bb4 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8000b5c:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <SPIx_Init+0x6c>)
 8000b5e:	4a17      	ldr	r2, [pc, #92]	; (8000bbc <SPIx_Init+0x70>)
 8000b60:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <SPIx_Init+0x6c>)
 8000b64:	2218      	movs	r2, #24
 8000b66:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000b68:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <SPIx_Init+0x6c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000b6e:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <SPIx_Init+0x6c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000b74:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <SPIx_Init+0x6c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <SPIx_Init+0x6c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000b80:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <SPIx_Init+0x6c>)
 8000b82:	2207      	movs	r2, #7
 8000b84:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <SPIx_Init+0x6c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <SPIx_Init+0x6c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <SPIx_Init+0x6c>)
 8000b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b98:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <SPIx_Init+0x6c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <SPIx_Init+0x6c>)
 8000ba2:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ba6:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8000ba8:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <SPIx_Init+0x6c>)
 8000baa:	f000 f835 	bl	8000c18 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000bae:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <SPIx_Init+0x6c>)
 8000bb0:	f001 fb7a 	bl	80022a8 <HAL_SPI_Init>
  } 
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	200000c8 	.word	0x200000c8
 8000bbc:	40015000 	.word	0x40015000

08000bc0 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af02      	add	r7, sp, #8
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <SPIx_WriteRead+0x38>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f107 020f 	add.w	r2, r7, #15
 8000bd6:	1df9      	adds	r1, r7, #7
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	2301      	movs	r3, #1
 8000bdc:	4807      	ldr	r0, [pc, #28]	; (8000bfc <SPIx_WriteRead+0x3c>)
 8000bde:	f001 fc14 	bl	800240a <HAL_SPI_TransmitReceive>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8000be8:	f000 f80a 	bl	8000c00 <SPIx_Error>
  }
  
  return receivedbyte;
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000038 	.word	0x20000038
 8000bfc:	200000c8 	.word	0x200000c8

08000c00 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8000c04:	4803      	ldr	r0, [pc, #12]	; (8000c14 <SPIx_Error+0x14>)
 8000c06:	f001 fbd8 	bl	80023ba <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8000c0a:	f7ff ff9f 	bl	8000b4c <SPIx_Init>
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200000c8 	.word	0x200000c8

08000c18 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <SPIx_MspInit+0x6c>)
 8000c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c28:	4a16      	ldr	r2, [pc, #88]	; (8000c84 <SPIx_MspInit+0x6c>)
 8000c2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c2e:	6453      	str	r3, [r2, #68]	; 0x44
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <SPIx_MspInit+0x6c>)
 8000c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <SPIx_MspInit+0x6c>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c44:	4a0f      	ldr	r2, [pc, #60]	; (8000c84 <SPIx_MspInit+0x6c>)
 8000c46:	f043 0320 	orr.w	r3, r3, #32
 8000c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4c:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <SPIx_MspInit+0x6c>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	f003 0320 	and.w	r3, r3, #32
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8000c58:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000c62:	2302      	movs	r3, #2
 8000c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8000c66:	2301      	movs	r3, #1
 8000c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8000c6a:	2305      	movs	r3, #5
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	4804      	ldr	r0, [pc, #16]	; (8000c88 <SPIx_MspInit+0x70>)
 8000c76:	f000 fbfd 	bl	8001474 <HAL_GPIO_Init>
}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	; 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40021400 	.word	0x40021400

08000c8c <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	4b20      	ldr	r3, [pc, #128]	; (8000d18 <GYRO_IO_Init+0x8c>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a1f      	ldr	r2, [pc, #124]	; (8000d18 <GYRO_IO_Init+0x8c>)
 8000c9c:	f043 0304 	orr.w	r3, r3, #4
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <GYRO_IO_Init+0x8c>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0304 	and.w	r3, r3, #4
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4815      	ldr	r0, [pc, #84]	; (8000d1c <GYRO_IO_Init+0x90>)
 8000cc6:	f000 fbd5 	bl	8001474 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2102      	movs	r1, #2
 8000cce:	4813      	ldr	r0, [pc, #76]	; (8000d1c <GYRO_IO_Init+0x90>)
 8000cd0:	f000 fe88 	bl	80019e4 <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <GYRO_IO_Init+0x8c>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cdc:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <GYRO_IO_Init+0x8c>)
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <GYRO_IO_Init+0x8c>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8000cf0:	2306      	movs	r3, #6
 8000cf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	4619      	mov	r1, r3
 8000d06:	4806      	ldr	r0, [pc, #24]	; (8000d20 <GYRO_IO_Init+0x94>)
 8000d08:	f000 fbb4 	bl	8001474 <HAL_GPIO_Init>

  SPIx_Init();
 8000d0c:	f7ff ff1e 	bl	8000b4c <SPIx_Init>
}
 8000d10:	bf00      	nop
 8000d12:	3720      	adds	r7, #32
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020800 	.word	0x40020800
 8000d20:	40020000 	.word	0x40020000

08000d24 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	70fb      	strb	r3, [r7, #3]
 8000d30:	4613      	mov	r3, r2
 8000d32:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8000d34:	883b      	ldrh	r3, [r7, #0]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d903      	bls.n	8000d42 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8000d3a:	78fb      	ldrb	r3, [r7, #3]
 8000d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d40:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8000d42:	2200      	movs	r2, #0
 8000d44:	2102      	movs	r1, #2
 8000d46:	480f      	ldr	r0, [pc, #60]	; (8000d84 <GYRO_IO_Write+0x60>)
 8000d48:	f000 fe4c 	bl	80019e4 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8000d4c:	78fb      	ldrb	r3, [r7, #3]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ff36 	bl	8000bc0 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8000d54:	e00a      	b.n	8000d6c <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ff30 	bl	8000bc0 <SPIx_WriteRead>
    NumByteToWrite--;
 8000d60:	883b      	ldrh	r3, [r7, #0]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8000d6c:	883b      	ldrh	r3, [r7, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d1f1      	bne.n	8000d56 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8000d72:	2201      	movs	r2, #1
 8000d74:	2102      	movs	r1, #2
 8000d76:	4803      	ldr	r0, [pc, #12]	; (8000d84 <GYRO_IO_Write+0x60>)
 8000d78:	f000 fe34 	bl	80019e4 <HAL_GPIO_WritePin>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40020800 	.word	0x40020800

08000d88 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	70fb      	strb	r3, [r7, #3]
 8000d94:	4613      	mov	r3, r2
 8000d96:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8000d98:	883b      	ldrh	r3, [r7, #0]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d904      	bls.n	8000da8 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8000d9e:	78fb      	ldrb	r3, [r7, #3]
 8000da0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000da4:	70fb      	strb	r3, [r7, #3]
 8000da6:	e003      	b.n	8000db0 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8000da8:	78fb      	ldrb	r3, [r7, #3]
 8000daa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dae:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8000db0:	2200      	movs	r2, #0
 8000db2:	2102      	movs	r1, #2
 8000db4:	4810      	ldr	r0, [pc, #64]	; (8000df8 <GYRO_IO_Read+0x70>)
 8000db6:	f000 fe15 	bl	80019e4 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8000dba:	78fb      	ldrb	r3, [r7, #3]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff feff 	bl	8000bc0 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8000dc2:	e00c      	b.n	8000dde <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f7ff fefb 	bl	8000bc0 <SPIx_WriteRead>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	461a      	mov	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8000dd2:	883b      	ldrh	r3, [r7, #0]
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8000dde:	883b      	ldrh	r3, [r7, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1ef      	bne.n	8000dc4 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8000de4:	2201      	movs	r2, #1
 8000de6:	2102      	movs	r1, #2
 8000de8:	4803      	ldr	r0, [pc, #12]	; (8000df8 <GYRO_IO_Read+0x70>)
 8000dea:	f000 fdfb 	bl	80019e4 <HAL_GPIO_WritePin>
}  
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40020800 	.word	0x40020800

08000dfc <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8000e06:	2300      	movs	r3, #0
 8000e08:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	703b      	strb	r3, [r7, #0]
 8000e0e:	2300      	movs	r3, #0
 8000e10:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8000e12:	4b2b      	ldr	r3, [pc, #172]	; (8000ec0 <BSP_GYRO_Init+0xc4>)
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	4798      	blx	r3
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2bd3      	cmp	r3, #211	; 0xd3
 8000e1c:	d005      	beq.n	8000e2a <BSP_GYRO_Init+0x2e>
 8000e1e:	4b28      	ldr	r3, [pc, #160]	; (8000ec0 <BSP_GYRO_Init+0xc4>)
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	4798      	blx	r3
 8000e24:	4603      	mov	r3, r0
 8000e26:	2bd4      	cmp	r3, #212	; 0xd4
 8000e28:	d145      	bne.n	8000eb6 <BSP_GYRO_Init+0xba>
  {	
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8000e2a:	4b26      	ldr	r3, [pc, #152]	; (8000ec4 <BSP_GYRO_Init+0xc8>)
 8000e2c:	4a24      	ldr	r2, [pc, #144]	; (8000ec0 <BSP_GYRO_Init+0xc4>)
 8000e2e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8000e30:	2308      	movs	r3, #8
 8000e32:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8000e38:	2307      	movs	r3, #7
 8000e3a:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8000e3c:	2330      	movs	r3, #48	; 0x30
 8000e3e:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8000e40:	2300      	movs	r3, #0
 8000e42:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8000e44:	2300      	movs	r3, #0
 8000e46:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8000e48:	2310      	movs	r3, #16
 8000e4a:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8000e4c:	793a      	ldrb	r2, [r7, #4]
 8000e4e:	797b      	ldrb	r3, [r7, #5]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8000e54:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8000e56:	4313      	orrs	r3, r2
 8000e58:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8000e62:	7a3a      	ldrb	r2, [r7, #8]
 8000e64:	7a7b      	ldrb	r3, [r7, #9]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8000e6a:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	021b      	lsls	r3, r3, #8
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	89bb      	ldrh	r3, [r7, #12]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	81bb      	strh	r3, [r7, #12]
    
    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <BSP_GYRO_Init+0xc8>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	89ba      	ldrh	r2, [r7, #12]
 8000e84:	4610      	mov	r0, r2
 8000e86:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8000e90:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8000e92:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <BSP_GYRO_Init+0xc8>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea0:	89ba      	ldrh	r2, [r7, #12]
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <BSP_GYRO_Init+0xc8>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eae:	2010      	movs	r0, #16
 8000eb0:	4798      	blx	r3

    ret = GYRO_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	20000120 	.word	0x20000120

08000ec8 <BSP_GYRO_ReadID>:
/**
  * @brief  Read ID of gyroscope component.
  * @retval ID
  */
uint8_t BSP_GYRO_ReadID(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
  uint8_t id = 0x00;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  
  if(GyroscopeDrv->ReadID != NULL)
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <BSP_GYRO_ReadID+0x2c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d005      	beq.n	8000ee8 <BSP_GYRO_ReadID+0x20>
  {
    id = GyroscopeDrv->ReadID();
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <BSP_GYRO_ReadID+0x2c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	4798      	blx	r3
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	71fb      	strb	r3, [r7, #7]
  }  
  return id;
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000120 	.word	0x20000120

08000ef8 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <BSP_GYRO_GetXYZ+0x24>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d004      	beq.n	8000f14 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8000f0a:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <BSP_GYRO_GetXYZ+0x24>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	4798      	blx	r3
  }
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000120 	.word	0x20000120

08000f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	4a0f      	ldr	r2, [pc, #60]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f34:	6453      	str	r3, [r2, #68]	; 0x44
 8000f36:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	603b      	str	r3, [r7, #0]
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f50:	6413      	str	r3, [r2, #64]	; 0x40
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800

08000f70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a19      	ldr	r2, [pc, #100]	; (8000ff4 <HAL_SPI_MspInit+0x84>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d12c      	bne.n	8000fec <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <HAL_SPI_MspInit+0x88>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	4a17      	ldr	r2, [pc, #92]	; (8000ff8 <HAL_SPI_MspInit+0x88>)
 8000f9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <HAL_SPI_MspInit+0x88>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <HAL_SPI_MspInit+0x88>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a10      	ldr	r2, [pc, #64]	; (8000ff8 <HAL_SPI_MspInit+0x88>)
 8000fb8:	f043 0320 	orr.w	r3, r3, #32
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_SPI_MspInit+0x88>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0320 	and.w	r3, r3, #32
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000fca:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000fdc:	2305      	movs	r3, #5
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <HAL_SPI_MspInit+0x8c>)
 8000fe8:	f000 fa44 	bl	8001474 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000fec:	bf00      	nop
 8000fee:	3728      	adds	r7, #40	; 0x28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40015000 	.word	0x40015000
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40021400 	.word	0x40021400

08001000 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a08      	ldr	r2, [pc, #32]	; (8001030 <HAL_SPI_MspDeInit+0x30>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d10a      	bne.n	8001028 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <HAL_SPI_MspDeInit+0x34>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	4a07      	ldr	r2, [pc, #28]	; (8001034 <HAL_SPI_MspDeInit+0x34>)
 8001018:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800101c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 800101e:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <HAL_SPI_MspDeInit+0x38>)
 8001024:	f000 fbd2 	bl	80017cc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40015000 	.word	0x40015000
 8001034:	40023800 	.word	0x40023800
 8001038:	40021400 	.word	0x40021400

0800103c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <NMI_Handler+0x4>

08001042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001046:	e7fe      	b.n	8001046 <HardFault_Handler+0x4>

08001048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800104c:	e7fe      	b.n	800104c <MemManage_Handler+0x4>

0800104e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001052:	e7fe      	b.n	8001052 <BusFault_Handler+0x4>

08001054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <UsageFault_Handler+0x4>

0800105a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001088:	f000 f89e 	bl	80011c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(memsint1_Pin);
 8001094:	2002      	movs	r0, #2
 8001096:	f000 fcbf 	bl	8001a18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}

0800109e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(memsint2_Pin);
 80010a2:	2004      	movs	r0, #4
 80010a4:	f000 fcb8 	bl	8001a18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}

080010ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <SystemInit+0x20>)
 80010b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <SystemInit+0x20>)
 80010b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80010d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001108 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d4:	480d      	ldr	r0, [pc, #52]	; (800110c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010d6:	490e      	ldr	r1, [pc, #56]	; (8001110 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010d8:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010dc:	e002      	b.n	80010e4 <LoopCopyDataInit>

080010de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e2:	3304      	adds	r3, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e8:	d3f9      	bcc.n	80010de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ea:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010ec:	4c0b      	ldr	r4, [pc, #44]	; (800111c <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f0:	e001      	b.n	80010f6 <LoopFillZerobss>

080010f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f4:	3204      	adds	r2, #4

080010f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f8:	d3fb      	bcc.n	80010f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010fa:	f7ff ffd7 	bl	80010ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010fe:	f001 fbff 	bl	8002900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001102:	f7ff fbeb 	bl	80008dc <main>
  bx  lr    
 8001106:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001108:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800110c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001110:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8001114:	08002990 	.word	0x08002990
  ldr r2, =_sbss
 8001118:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 800111c:	20000128 	.word	0x20000128

08001120 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <ADC_IRQHandler>
	...

08001124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <HAL_Init+0x40>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0d      	ldr	r2, [pc, #52]	; (8001164 <HAL_Init+0x40>)
 800112e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001132:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <HAL_Init+0x40>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <HAL_Init+0x40>)
 800113a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800113e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <HAL_Init+0x40>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a07      	ldr	r2, [pc, #28]	; (8001164 <HAL_Init+0x40>)
 8001146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800114c:	2003      	movs	r0, #3
 800114e:	f000 f94f 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001152:	200f      	movs	r0, #15
 8001154:	f000 f808 	bl	8001168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001158:	f7ff fee2 	bl	8000f20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023c00 	.word	0x40023c00

08001168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_InitTick+0x54>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_InitTick+0x58>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001182:	fbb2 f3f3 	udiv	r3, r2, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f967 	bl	800145a <HAL_SYSTICK_Config>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e00e      	b.n	80011b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b0f      	cmp	r3, #15
 800119a:	d80a      	bhi.n	80011b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800119c:	2200      	movs	r2, #0
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f000 f92f 	bl	8001406 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a8:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <HAL_InitTick+0x5c>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	e000      	b.n	80011b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	2000003c 	.word	0x2000003c
 80011c0:	20000044 	.word	0x20000044
 80011c4:	20000040 	.word	0x20000040

080011c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_IncTick+0x20>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_IncTick+0x24>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a04      	ldr	r2, [pc, #16]	; (80011ec <HAL_IncTick+0x24>)
 80011da:	6013      	str	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000044 	.word	0x20000044
 80011ec:	20000124 	.word	0x20000124

080011f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return uwTick;
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <HAL_GetTick+0x14>)
 80011f6:	681b      	ldr	r3, [r3, #0]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000124 	.word	0x20000124

08001208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001210:	f7ff ffee 	bl	80011f0 <HAL_GetTick>
 8001214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001220:	d005      	beq.n	800122e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_Delay+0x44>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4413      	add	r3, r2
 800122c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800122e:	bf00      	nop
 8001230:	f7ff ffde 	bl	80011f0 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	429a      	cmp	r2, r3
 800123e:	d8f7      	bhi.n	8001230 <HAL_Delay+0x28>
  {
  }
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000044 	.word	0x20000044

08001250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800126c:	4013      	ands	r3, r2
 800126e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800127c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001282:	4a04      	ldr	r2, [pc, #16]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	60d3      	str	r3, [r2, #12]
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <__NVIC_GetPriorityGrouping+0x18>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	f003 0307 	and.w	r3, r3, #7
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db0b      	blt.n	80012de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	f003 021f 	and.w	r2, r3, #31
 80012cc:	4907      	ldr	r1, [pc, #28]	; (80012ec <__NVIC_EnableIRQ+0x38>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	095b      	lsrs	r3, r3, #5
 80012d4:	2001      	movs	r0, #1
 80012d6:	fa00 f202 	lsl.w	r2, r0, r2
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000e100 	.word	0xe000e100

080012f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	db0a      	blt.n	800131a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	490c      	ldr	r1, [pc, #48]	; (800133c <__NVIC_SetPriority+0x4c>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	440b      	add	r3, r1
 8001314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001318:	e00a      	b.n	8001330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4908      	ldr	r1, [pc, #32]	; (8001340 <__NVIC_SetPriority+0x50>)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	3b04      	subs	r3, #4
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	440b      	add	r3, r1
 800132e:	761a      	strb	r2, [r3, #24]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f1c3 0307 	rsb	r3, r3, #7
 800135e:	2b04      	cmp	r3, #4
 8001360:	bf28      	it	cs
 8001362:	2304      	movcs	r3, #4
 8001364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3304      	adds	r3, #4
 800136a:	2b06      	cmp	r3, #6
 800136c:	d902      	bls.n	8001374 <NVIC_EncodePriority+0x30>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3b03      	subs	r3, #3
 8001372:	e000      	b.n	8001376 <NVIC_EncodePriority+0x32>
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	f04f 32ff 	mov.w	r2, #4294967295
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138c:	f04f 31ff 	mov.w	r1, #4294967295
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43d9      	mvns	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	4313      	orrs	r3, r2
         );
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	; 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013bc:	d301      	bcc.n	80013c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013be:	2301      	movs	r3, #1
 80013c0:	e00f      	b.n	80013e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <SysTick_Config+0x40>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ca:	210f      	movs	r1, #15
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f7ff ff8e 	bl	80012f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <SysTick_Config+0x40>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <SysTick_Config+0x40>)
 80013dc:	2207      	movs	r2, #7
 80013de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	e000e010 	.word	0xe000e010

080013f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff29 	bl	8001250 <__NVIC_SetPriorityGrouping>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001406:	b580      	push	{r7, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001418:	f7ff ff3e 	bl	8001298 <__NVIC_GetPriorityGrouping>
 800141c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	6978      	ldr	r0, [r7, #20]
 8001424:	f7ff ff8e 	bl	8001344 <NVIC_EncodePriority>
 8001428:	4602      	mov	r2, r0
 800142a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142e:	4611      	mov	r1, r2
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff5d 	bl	80012f0 <__NVIC_SetPriority>
}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff31 	bl	80012b4 <__NVIC_EnableIRQ>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ffa2 	bl	80013ac <SysTick_Config>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001474:	b480      	push	{r7}
 8001476:	b089      	sub	sp, #36	; 0x24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
 800148e:	e177      	b.n	8001780 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001490:	2201      	movs	r2, #1
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	f040 8166 	bne.w	800177a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d005      	beq.n	80014c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d130      	bne.n	8001528 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	2203      	movs	r2, #3
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43db      	mvns	r3, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4013      	ands	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	68da      	ldr	r2, [r3, #12]
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014fc:	2201      	movs	r2, #1
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	091b      	lsrs	r3, r3, #4
 8001512:	f003 0201 	and.w	r2, r3, #1
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	2b03      	cmp	r3, #3
 8001532:	d017      	beq.n	8001564 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	2203      	movs	r2, #3
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d123      	bne.n	80015b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	08da      	lsrs	r2, r3, #3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3208      	adds	r2, #8
 8001578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800157c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	220f      	movs	r2, #15
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	691a      	ldr	r2, [r3, #16]
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	08da      	lsrs	r2, r3, #3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3208      	adds	r2, #8
 80015b2:	69b9      	ldr	r1, [r7, #24]
 80015b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	2203      	movs	r2, #3
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0203 	and.w	r2, r3, #3
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 80c0 	beq.w	800177a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b66      	ldr	r3, [pc, #408]	; (8001798 <HAL_GPIO_Init+0x324>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	4a65      	ldr	r2, [pc, #404]	; (8001798 <HAL_GPIO_Init+0x324>)
 8001604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001608:	6453      	str	r3, [r2, #68]	; 0x44
 800160a:	4b63      	ldr	r3, [pc, #396]	; (8001798 <HAL_GPIO_Init+0x324>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001616:	4a61      	ldr	r2, [pc, #388]	; (800179c <HAL_GPIO_Init+0x328>)
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	089b      	lsrs	r3, r3, #2
 800161c:	3302      	adds	r3, #2
 800161e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	220f      	movs	r2, #15
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43db      	mvns	r3, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4013      	ands	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a58      	ldr	r2, [pc, #352]	; (80017a0 <HAL_GPIO_Init+0x32c>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d037      	beq.n	80016b2 <HAL_GPIO_Init+0x23e>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a57      	ldr	r2, [pc, #348]	; (80017a4 <HAL_GPIO_Init+0x330>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d031      	beq.n	80016ae <HAL_GPIO_Init+0x23a>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a56      	ldr	r2, [pc, #344]	; (80017a8 <HAL_GPIO_Init+0x334>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d02b      	beq.n	80016aa <HAL_GPIO_Init+0x236>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a55      	ldr	r2, [pc, #340]	; (80017ac <HAL_GPIO_Init+0x338>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d025      	beq.n	80016a6 <HAL_GPIO_Init+0x232>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a54      	ldr	r2, [pc, #336]	; (80017b0 <HAL_GPIO_Init+0x33c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d01f      	beq.n	80016a2 <HAL_GPIO_Init+0x22e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a53      	ldr	r2, [pc, #332]	; (80017b4 <HAL_GPIO_Init+0x340>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d019      	beq.n	800169e <HAL_GPIO_Init+0x22a>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a52      	ldr	r2, [pc, #328]	; (80017b8 <HAL_GPIO_Init+0x344>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d013      	beq.n	800169a <HAL_GPIO_Init+0x226>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a51      	ldr	r2, [pc, #324]	; (80017bc <HAL_GPIO_Init+0x348>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d00d      	beq.n	8001696 <HAL_GPIO_Init+0x222>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a50      	ldr	r2, [pc, #320]	; (80017c0 <HAL_GPIO_Init+0x34c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d007      	beq.n	8001692 <HAL_GPIO_Init+0x21e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a4f      	ldr	r2, [pc, #316]	; (80017c4 <HAL_GPIO_Init+0x350>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d101      	bne.n	800168e <HAL_GPIO_Init+0x21a>
 800168a:	2309      	movs	r3, #9
 800168c:	e012      	b.n	80016b4 <HAL_GPIO_Init+0x240>
 800168e:	230a      	movs	r3, #10
 8001690:	e010      	b.n	80016b4 <HAL_GPIO_Init+0x240>
 8001692:	2308      	movs	r3, #8
 8001694:	e00e      	b.n	80016b4 <HAL_GPIO_Init+0x240>
 8001696:	2307      	movs	r3, #7
 8001698:	e00c      	b.n	80016b4 <HAL_GPIO_Init+0x240>
 800169a:	2306      	movs	r3, #6
 800169c:	e00a      	b.n	80016b4 <HAL_GPIO_Init+0x240>
 800169e:	2305      	movs	r3, #5
 80016a0:	e008      	b.n	80016b4 <HAL_GPIO_Init+0x240>
 80016a2:	2304      	movs	r3, #4
 80016a4:	e006      	b.n	80016b4 <HAL_GPIO_Init+0x240>
 80016a6:	2303      	movs	r3, #3
 80016a8:	e004      	b.n	80016b4 <HAL_GPIO_Init+0x240>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e002      	b.n	80016b4 <HAL_GPIO_Init+0x240>
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_GPIO_Init+0x240>
 80016b2:	2300      	movs	r3, #0
 80016b4:	69fa      	ldr	r2, [r7, #28]
 80016b6:	f002 0203 	and.w	r2, r2, #3
 80016ba:	0092      	lsls	r2, r2, #2
 80016bc:	4093      	lsls	r3, r2
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016c4:	4935      	ldr	r1, [pc, #212]	; (800179c <HAL_GPIO_Init+0x328>)
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	089b      	lsrs	r3, r3, #2
 80016ca:	3302      	adds	r3, #2
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016d2:	4b3d      	ldr	r3, [pc, #244]	; (80017c8 <HAL_GPIO_Init+0x354>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016f6:	4a34      	ldr	r2, [pc, #208]	; (80017c8 <HAL_GPIO_Init+0x354>)
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016fc:	4b32      	ldr	r3, [pc, #200]	; (80017c8 <HAL_GPIO_Init+0x354>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001720:	4a29      	ldr	r2, [pc, #164]	; (80017c8 <HAL_GPIO_Init+0x354>)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001726:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <HAL_GPIO_Init+0x354>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800174a:	4a1f      	ldr	r2, [pc, #124]	; (80017c8 <HAL_GPIO_Init+0x354>)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <HAL_GPIO_Init+0x354>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001774:	4a14      	ldr	r2, [pc, #80]	; (80017c8 <HAL_GPIO_Init+0x354>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3301      	adds	r3, #1
 800177e:	61fb      	str	r3, [r7, #28]
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	2b0f      	cmp	r3, #15
 8001784:	f67f ae84 	bls.w	8001490 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	40013800 	.word	0x40013800
 80017a0:	40020000 	.word	0x40020000
 80017a4:	40020400 	.word	0x40020400
 80017a8:	40020800 	.word	0x40020800
 80017ac:	40020c00 	.word	0x40020c00
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40021400 	.word	0x40021400
 80017b8:	40021800 	.word	0x40021800
 80017bc:	40021c00 	.word	0x40021c00
 80017c0:	40022000 	.word	0x40022000
 80017c4:	40022400 	.word	0x40022400
 80017c8:	40013c00 	.word	0x40013c00

080017cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b087      	sub	sp, #28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	e0d9      	b.n	800199c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017e8:	2201      	movs	r2, #1
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4013      	ands	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	429a      	cmp	r2, r3
 8001800:	f040 80c9 	bne.w	8001996 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001804:	4a6b      	ldr	r2, [pc, #428]	; (80019b4 <HAL_GPIO_DeInit+0x1e8>)
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	089b      	lsrs	r3, r3, #2
 800180a:	3302      	adds	r3, #2
 800180c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001810:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	220f      	movs	r2, #15
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	4013      	ands	r3, r2
 8001824:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a63      	ldr	r2, [pc, #396]	; (80019b8 <HAL_GPIO_DeInit+0x1ec>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d037      	beq.n	800189e <HAL_GPIO_DeInit+0xd2>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a62      	ldr	r2, [pc, #392]	; (80019bc <HAL_GPIO_DeInit+0x1f0>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d031      	beq.n	800189a <HAL_GPIO_DeInit+0xce>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a61      	ldr	r2, [pc, #388]	; (80019c0 <HAL_GPIO_DeInit+0x1f4>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d02b      	beq.n	8001896 <HAL_GPIO_DeInit+0xca>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a60      	ldr	r2, [pc, #384]	; (80019c4 <HAL_GPIO_DeInit+0x1f8>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d025      	beq.n	8001892 <HAL_GPIO_DeInit+0xc6>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a5f      	ldr	r2, [pc, #380]	; (80019c8 <HAL_GPIO_DeInit+0x1fc>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d01f      	beq.n	800188e <HAL_GPIO_DeInit+0xc2>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a5e      	ldr	r2, [pc, #376]	; (80019cc <HAL_GPIO_DeInit+0x200>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d019      	beq.n	800188a <HAL_GPIO_DeInit+0xbe>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a5d      	ldr	r2, [pc, #372]	; (80019d0 <HAL_GPIO_DeInit+0x204>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d013      	beq.n	8001886 <HAL_GPIO_DeInit+0xba>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a5c      	ldr	r2, [pc, #368]	; (80019d4 <HAL_GPIO_DeInit+0x208>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d00d      	beq.n	8001882 <HAL_GPIO_DeInit+0xb6>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a5b      	ldr	r2, [pc, #364]	; (80019d8 <HAL_GPIO_DeInit+0x20c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d007      	beq.n	800187e <HAL_GPIO_DeInit+0xb2>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a5a      	ldr	r2, [pc, #360]	; (80019dc <HAL_GPIO_DeInit+0x210>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d101      	bne.n	800187a <HAL_GPIO_DeInit+0xae>
 8001876:	2309      	movs	r3, #9
 8001878:	e012      	b.n	80018a0 <HAL_GPIO_DeInit+0xd4>
 800187a:	230a      	movs	r3, #10
 800187c:	e010      	b.n	80018a0 <HAL_GPIO_DeInit+0xd4>
 800187e:	2308      	movs	r3, #8
 8001880:	e00e      	b.n	80018a0 <HAL_GPIO_DeInit+0xd4>
 8001882:	2307      	movs	r3, #7
 8001884:	e00c      	b.n	80018a0 <HAL_GPIO_DeInit+0xd4>
 8001886:	2306      	movs	r3, #6
 8001888:	e00a      	b.n	80018a0 <HAL_GPIO_DeInit+0xd4>
 800188a:	2305      	movs	r3, #5
 800188c:	e008      	b.n	80018a0 <HAL_GPIO_DeInit+0xd4>
 800188e:	2304      	movs	r3, #4
 8001890:	e006      	b.n	80018a0 <HAL_GPIO_DeInit+0xd4>
 8001892:	2303      	movs	r3, #3
 8001894:	e004      	b.n	80018a0 <HAL_GPIO_DeInit+0xd4>
 8001896:	2302      	movs	r3, #2
 8001898:	e002      	b.n	80018a0 <HAL_GPIO_DeInit+0xd4>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <HAL_GPIO_DeInit+0xd4>
 800189e:	2300      	movs	r3, #0
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	f002 0203 	and.w	r2, r2, #3
 80018a6:	0092      	lsls	r2, r2, #2
 80018a8:	4093      	lsls	r3, r2
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d132      	bne.n	8001916 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80018b0:	4b4b      	ldr	r3, [pc, #300]	; (80019e0 <HAL_GPIO_DeInit+0x214>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	4949      	ldr	r1, [pc, #292]	; (80019e0 <HAL_GPIO_DeInit+0x214>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80018be:	4b48      	ldr	r3, [pc, #288]	; (80019e0 <HAL_GPIO_DeInit+0x214>)
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	4946      	ldr	r1, [pc, #280]	; (80019e0 <HAL_GPIO_DeInit+0x214>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80018cc:	4b44      	ldr	r3, [pc, #272]	; (80019e0 <HAL_GPIO_DeInit+0x214>)
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	4942      	ldr	r1, [pc, #264]	; (80019e0 <HAL_GPIO_DeInit+0x214>)
 80018d6:	4013      	ands	r3, r2
 80018d8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80018da:	4b41      	ldr	r3, [pc, #260]	; (80019e0 <HAL_GPIO_DeInit+0x214>)
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	493f      	ldr	r1, [pc, #252]	; (80019e0 <HAL_GPIO_DeInit+0x214>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	220f      	movs	r2, #15
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80018f8:	4a2e      	ldr	r2, [pc, #184]	; (80019b4 <HAL_GPIO_DeInit+0x1e8>)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	3302      	adds	r3, #2
 8001900:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	43da      	mvns	r2, r3
 8001908:	482a      	ldr	r0, [pc, #168]	; (80019b4 <HAL_GPIO_DeInit+0x1e8>)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	089b      	lsrs	r3, r3, #2
 800190e:	400a      	ands	r2, r1
 8001910:	3302      	adds	r3, #2
 8001912:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	2103      	movs	r1, #3
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	401a      	ands	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	08da      	lsrs	r2, r3, #3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3208      	adds	r2, #8
 8001934:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	220f      	movs	r2, #15
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	08d2      	lsrs	r2, r2, #3
 800194c:	4019      	ands	r1, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3208      	adds	r2, #8
 8001952:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68da      	ldr	r2, [r3, #12]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	2103      	movs	r1, #3
 8001960:	fa01 f303 	lsl.w	r3, r1, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	401a      	ands	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	2101      	movs	r1, #1
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	401a      	ands	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	2103      	movs	r1, #3
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	401a      	ands	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	3301      	adds	r3, #1
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	2b0f      	cmp	r3, #15
 80019a0:	f67f af22 	bls.w	80017e8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop
 80019a8:	371c      	adds	r7, #28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40013800 	.word	0x40013800
 80019b8:	40020000 	.word	0x40020000
 80019bc:	40020400 	.word	0x40020400
 80019c0:	40020800 	.word	0x40020800
 80019c4:	40020c00 	.word	0x40020c00
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40021400 	.word	0x40021400
 80019d0:	40021800 	.word	0x40021800
 80019d4:	40021c00 	.word	0x40021c00
 80019d8:	40022000 	.word	0x40022000
 80019dc:	40022400 	.word	0x40022400
 80019e0:	40013c00 	.word	0x40013c00

080019e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	807b      	strh	r3, [r7, #2]
 80019f0:	4613      	mov	r3, r2
 80019f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019f4:	787b      	ldrb	r3, [r7, #1]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019fa:	887a      	ldrh	r2, [r7, #2]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a00:	e003      	b.n	8001a0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a02:	887b      	ldrh	r3, [r7, #2]
 8001a04:	041a      	lsls	r2, r3, #16
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	619a      	str	r2, [r3, #24]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a24:	695a      	ldr	r2, [r3, #20]
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d006      	beq.n	8001a3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a2e:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a30:	88fb      	ldrh	r3, [r7, #6]
 8001a32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 f806 	bl	8001a48 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40013c00 	.word	0x40013c00

08001a48 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e267      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d075      	beq.n	8001b6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a7e:	4b88      	ldr	r3, [pc, #544]	; (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d00c      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a8a:	4b85      	ldr	r3, [pc, #532]	; (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d112      	bne.n	8001abc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a96:	4b82      	ldr	r3, [pc, #520]	; (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aa2:	d10b      	bne.n	8001abc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa4:	4b7e      	ldr	r3, [pc, #504]	; (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d05b      	beq.n	8001b68 <HAL_RCC_OscConfig+0x108>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d157      	bne.n	8001b68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e242      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac4:	d106      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x74>
 8001ac6:	4b76      	ldr	r3, [pc, #472]	; (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a75      	ldr	r2, [pc, #468]	; (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e01d      	b.n	8001b10 <HAL_RCC_OscConfig+0xb0>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001adc:	d10c      	bne.n	8001af8 <HAL_RCC_OscConfig+0x98>
 8001ade:	4b70      	ldr	r3, [pc, #448]	; (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a6f      	ldr	r2, [pc, #444]	; (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	4b6d      	ldr	r3, [pc, #436]	; (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a6c      	ldr	r2, [pc, #432]	; (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	e00b      	b.n	8001b10 <HAL_RCC_OscConfig+0xb0>
 8001af8:	4b69      	ldr	r3, [pc, #420]	; (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a68      	ldr	r2, [pc, #416]	; (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	4b66      	ldr	r3, [pc, #408]	; (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a65      	ldr	r2, [pc, #404]	; (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001b0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d013      	beq.n	8001b40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b18:	f7ff fb6a 	bl	80011f0 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b20:	f7ff fb66 	bl	80011f0 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b64      	cmp	r3, #100	; 0x64
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e207      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b32:	4b5b      	ldr	r3, [pc, #364]	; (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0xc0>
 8001b3e:	e014      	b.n	8001b6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff fb56 	bl	80011f0 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b48:	f7ff fb52 	bl	80011f0 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b64      	cmp	r3, #100	; 0x64
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e1f3      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b5a:	4b51      	ldr	r3, [pc, #324]	; (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0xe8>
 8001b66:	e000      	b.n	8001b6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d063      	beq.n	8001c3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b76:	4b4a      	ldr	r3, [pc, #296]	; (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00b      	beq.n	8001b9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b82:	4b47      	ldr	r3, [pc, #284]	; (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d11c      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b8e:	4b44      	ldr	r3, [pc, #272]	; (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d116      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b9a:	4b41      	ldr	r3, [pc, #260]	; (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d005      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x152>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d001      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e1c7      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb2:	4b3b      	ldr	r3, [pc, #236]	; (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	4937      	ldr	r1, [pc, #220]	; (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc6:	e03a      	b.n	8001c3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d020      	beq.n	8001c12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd0:	4b34      	ldr	r3, [pc, #208]	; (8001ca4 <HAL_RCC_OscConfig+0x244>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd6:	f7ff fb0b 	bl	80011f0 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bde:	f7ff fb07 	bl	80011f0 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e1a8      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf0:	4b2b      	ldr	r3, [pc, #172]	; (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0f0      	beq.n	8001bde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfc:	4b28      	ldr	r3, [pc, #160]	; (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	4925      	ldr	r1, [pc, #148]	; (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	600b      	str	r3, [r1, #0]
 8001c10:	e015      	b.n	8001c3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c12:	4b24      	ldr	r3, [pc, #144]	; (8001ca4 <HAL_RCC_OscConfig+0x244>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c18:	f7ff faea 	bl	80011f0 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c20:	f7ff fae6 	bl	80011f0 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e187      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c32:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d036      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d016      	beq.n	8001c80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c52:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <HAL_RCC_OscConfig+0x248>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c58:	f7ff faca 	bl	80011f0 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c60:	f7ff fac6 	bl	80011f0 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e167      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_RCC_OscConfig+0x240>)
 8001c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0x200>
 8001c7e:	e01b      	b.n	8001cb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_RCC_OscConfig+0x248>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c86:	f7ff fab3 	bl	80011f0 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c8c:	e00e      	b.n	8001cac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c8e:	f7ff faaf 	bl	80011f0 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d907      	bls.n	8001cac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e150      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	42470000 	.word	0x42470000
 8001ca8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cac:	4b88      	ldr	r3, [pc, #544]	; (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1ea      	bne.n	8001c8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 8097 	beq.w	8001df4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cca:	4b81      	ldr	r3, [pc, #516]	; (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10f      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	4b7d      	ldr	r3, [pc, #500]	; (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	4a7c      	ldr	r2, [pc, #496]	; (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce6:	4b7a      	ldr	r3, [pc, #488]	; (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf6:	4b77      	ldr	r3, [pc, #476]	; (8001ed4 <HAL_RCC_OscConfig+0x474>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d118      	bne.n	8001d34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d02:	4b74      	ldr	r3, [pc, #464]	; (8001ed4 <HAL_RCC_OscConfig+0x474>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a73      	ldr	r2, [pc, #460]	; (8001ed4 <HAL_RCC_OscConfig+0x474>)
 8001d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d0e:	f7ff fa6f 	bl	80011f0 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d16:	f7ff fa6b 	bl	80011f0 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e10c      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d28:	4b6a      	ldr	r3, [pc, #424]	; (8001ed4 <HAL_RCC_OscConfig+0x474>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0f0      	beq.n	8001d16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d106      	bne.n	8001d4a <HAL_RCC_OscConfig+0x2ea>
 8001d3c:	4b64      	ldr	r3, [pc, #400]	; (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d40:	4a63      	ldr	r2, [pc, #396]	; (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	6713      	str	r3, [r2, #112]	; 0x70
 8001d48:	e01c      	b.n	8001d84 <HAL_RCC_OscConfig+0x324>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	2b05      	cmp	r3, #5
 8001d50:	d10c      	bne.n	8001d6c <HAL_RCC_OscConfig+0x30c>
 8001d52:	4b5f      	ldr	r3, [pc, #380]	; (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d56:	4a5e      	ldr	r2, [pc, #376]	; (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001d58:	f043 0304 	orr.w	r3, r3, #4
 8001d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d5e:	4b5c      	ldr	r3, [pc, #368]	; (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d62:	4a5b      	ldr	r2, [pc, #364]	; (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6713      	str	r3, [r2, #112]	; 0x70
 8001d6a:	e00b      	b.n	8001d84 <HAL_RCC_OscConfig+0x324>
 8001d6c:	4b58      	ldr	r3, [pc, #352]	; (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d70:	4a57      	ldr	r2, [pc, #348]	; (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001d72:	f023 0301 	bic.w	r3, r3, #1
 8001d76:	6713      	str	r3, [r2, #112]	; 0x70
 8001d78:	4b55      	ldr	r3, [pc, #340]	; (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7c:	4a54      	ldr	r2, [pc, #336]	; (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001d7e:	f023 0304 	bic.w	r3, r3, #4
 8001d82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d015      	beq.n	8001db8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8c:	f7ff fa30 	bl	80011f0 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d92:	e00a      	b.n	8001daa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d94:	f7ff fa2c 	bl	80011f0 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e0cb      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001daa:	4b49      	ldr	r3, [pc, #292]	; (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0ee      	beq.n	8001d94 <HAL_RCC_OscConfig+0x334>
 8001db6:	e014      	b.n	8001de2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db8:	f7ff fa1a 	bl	80011f0 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dbe:	e00a      	b.n	8001dd6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dc0:	f7ff fa16 	bl	80011f0 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e0b5      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd6:	4b3e      	ldr	r3, [pc, #248]	; (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1ee      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001de2:	7dfb      	ldrb	r3, [r7, #23]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d105      	bne.n	8001df4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de8:	4b39      	ldr	r3, [pc, #228]	; (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	4a38      	ldr	r2, [pc, #224]	; (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001dee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001df2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 80a1 	beq.w	8001f40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dfe:	4b34      	ldr	r3, [pc, #208]	; (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 030c 	and.w	r3, r3, #12
 8001e06:	2b08      	cmp	r3, #8
 8001e08:	d05c      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d141      	bne.n	8001e96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e12:	4b31      	ldr	r3, [pc, #196]	; (8001ed8 <HAL_RCC_OscConfig+0x478>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7ff f9ea 	bl	80011f0 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e20:	f7ff f9e6 	bl	80011f0 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e087      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e32:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69da      	ldr	r2, [r3, #28]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	431a      	orrs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	019b      	lsls	r3, r3, #6
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e54:	085b      	lsrs	r3, r3, #1
 8001e56:	3b01      	subs	r3, #1
 8001e58:	041b      	lsls	r3, r3, #16
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e60:	061b      	lsls	r3, r3, #24
 8001e62:	491b      	ldr	r1, [pc, #108]	; (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e68:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <HAL_RCC_OscConfig+0x478>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6e:	f7ff f9bf 	bl	80011f0 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e76:	f7ff f9bb 	bl	80011f0 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e05c      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e88:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x416>
 8001e94:	e054      	b.n	8001f40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e96:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <HAL_RCC_OscConfig+0x478>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9c:	f7ff f9a8 	bl	80011f0 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea4:	f7ff f9a4 	bl	80011f0 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e045      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_RCC_OscConfig+0x470>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x444>
 8001ec2:	e03d      	b.n	8001f40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d107      	bne.n	8001edc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e038      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40007000 	.word	0x40007000
 8001ed8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001edc:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <HAL_RCC_OscConfig+0x4ec>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d028      	beq.n	8001f3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d121      	bne.n	8001f3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d11a      	bne.n	8001f3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d111      	bne.n	8001f3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f22:	085b      	lsrs	r3, r3, #1
 8001f24:	3b01      	subs	r3, #1
 8001f26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d107      	bne.n	8001f3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d001      	beq.n	8001f40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800

08001f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0cc      	b.n	80020fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f64:	4b68      	ldr	r3, [pc, #416]	; (8002108 <HAL_RCC_ClockConfig+0x1b8>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 030f 	and.w	r3, r3, #15
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d90c      	bls.n	8001f8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f72:	4b65      	ldr	r3, [pc, #404]	; (8002108 <HAL_RCC_ClockConfig+0x1b8>)
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7a:	4b63      	ldr	r3, [pc, #396]	; (8002108 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d001      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0b8      	b.n	80020fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d020      	beq.n	8001fda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fa4:	4b59      	ldr	r3, [pc, #356]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	4a58      	ldr	r2, [pc, #352]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8001faa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fbc:	4b53      	ldr	r3, [pc, #332]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	4a52      	ldr	r2, [pc, #328]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc8:	4b50      	ldr	r3, [pc, #320]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	494d      	ldr	r1, [pc, #308]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d044      	beq.n	8002070 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d107      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fee:	4b47      	ldr	r3, [pc, #284]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d119      	bne.n	800202e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e07f      	b.n	80020fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d003      	beq.n	800200e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800200a:	2b03      	cmp	r3, #3
 800200c:	d107      	bne.n	800201e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200e:	4b3f      	ldr	r3, [pc, #252]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d109      	bne.n	800202e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e06f      	b.n	80020fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201e:	4b3b      	ldr	r3, [pc, #236]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e067      	b.n	80020fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800202e:	4b37      	ldr	r3, [pc, #220]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f023 0203 	bic.w	r2, r3, #3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	4934      	ldr	r1, [pc, #208]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 800203c:	4313      	orrs	r3, r2
 800203e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002040:	f7ff f8d6 	bl	80011f0 <HAL_GetTick>
 8002044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002046:	e00a      	b.n	800205e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002048:	f7ff f8d2 	bl	80011f0 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f241 3288 	movw	r2, #5000	; 0x1388
 8002056:	4293      	cmp	r3, r2
 8002058:	d901      	bls.n	800205e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e04f      	b.n	80020fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205e:	4b2b      	ldr	r3, [pc, #172]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 020c 	and.w	r2, r3, #12
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	429a      	cmp	r2, r3
 800206e:	d1eb      	bne.n	8002048 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002070:	4b25      	ldr	r3, [pc, #148]	; (8002108 <HAL_RCC_ClockConfig+0x1b8>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d20c      	bcs.n	8002098 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207e:	4b22      	ldr	r3, [pc, #136]	; (8002108 <HAL_RCC_ClockConfig+0x1b8>)
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002086:	4b20      	ldr	r3, [pc, #128]	; (8002108 <HAL_RCC_ClockConfig+0x1b8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d001      	beq.n	8002098 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e032      	b.n	80020fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d008      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a4:	4b19      	ldr	r3, [pc, #100]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4916      	ldr	r1, [pc, #88]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d009      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020c2:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	490e      	ldr	r1, [pc, #56]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020d6:	f000 f821 	bl	800211c <HAL_RCC_GetSysClockFreq>
 80020da:	4602      	mov	r2, r0
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	490a      	ldr	r1, [pc, #40]	; (8002110 <HAL_RCC_ClockConfig+0x1c0>)
 80020e8:	5ccb      	ldrb	r3, [r1, r3]
 80020ea:	fa22 f303 	lsr.w	r3, r2, r3
 80020ee:	4a09      	ldr	r2, [pc, #36]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020f2:	4b09      	ldr	r3, [pc, #36]	; (8002118 <HAL_RCC_ClockConfig+0x1c8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff f836 	bl	8001168 <HAL_InitTick>

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40023c00 	.word	0x40023c00
 800210c:	40023800 	.word	0x40023800
 8002110:	08002970 	.word	0x08002970
 8002114:	2000003c 	.word	0x2000003c
 8002118:	20000040 	.word	0x20000040

0800211c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800211c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002120:	b090      	sub	sp, #64	; 0x40
 8002122:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	637b      	str	r3, [r7, #52]	; 0x34
 8002128:	2300      	movs	r3, #0
 800212a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800212c:	2300      	movs	r3, #0
 800212e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002134:	4b59      	ldr	r3, [pc, #356]	; (800229c <HAL_RCC_GetSysClockFreq+0x180>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 030c 	and.w	r3, r3, #12
 800213c:	2b08      	cmp	r3, #8
 800213e:	d00d      	beq.n	800215c <HAL_RCC_GetSysClockFreq+0x40>
 8002140:	2b08      	cmp	r3, #8
 8002142:	f200 80a1 	bhi.w	8002288 <HAL_RCC_GetSysClockFreq+0x16c>
 8002146:	2b00      	cmp	r3, #0
 8002148:	d002      	beq.n	8002150 <HAL_RCC_GetSysClockFreq+0x34>
 800214a:	2b04      	cmp	r3, #4
 800214c:	d003      	beq.n	8002156 <HAL_RCC_GetSysClockFreq+0x3a>
 800214e:	e09b      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002150:	4b53      	ldr	r3, [pc, #332]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002152:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002154:	e09b      	b.n	800228e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002156:	4b53      	ldr	r3, [pc, #332]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002158:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800215a:	e098      	b.n	800228e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800215c:	4b4f      	ldr	r3, [pc, #316]	; (800229c <HAL_RCC_GetSysClockFreq+0x180>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002164:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002166:	4b4d      	ldr	r3, [pc, #308]	; (800229c <HAL_RCC_GetSysClockFreq+0x180>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d028      	beq.n	80021c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002172:	4b4a      	ldr	r3, [pc, #296]	; (800229c <HAL_RCC_GetSysClockFreq+0x180>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	099b      	lsrs	r3, r3, #6
 8002178:	2200      	movs	r2, #0
 800217a:	623b      	str	r3, [r7, #32]
 800217c:	627a      	str	r2, [r7, #36]	; 0x24
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002184:	2100      	movs	r1, #0
 8002186:	4b47      	ldr	r3, [pc, #284]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002188:	fb03 f201 	mul.w	r2, r3, r1
 800218c:	2300      	movs	r3, #0
 800218e:	fb00 f303 	mul.w	r3, r0, r3
 8002192:	4413      	add	r3, r2
 8002194:	4a43      	ldr	r2, [pc, #268]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002196:	fba0 1202 	umull	r1, r2, r0, r2
 800219a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800219c:	460a      	mov	r2, r1
 800219e:	62ba      	str	r2, [r7, #40]	; 0x28
 80021a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021a2:	4413      	add	r3, r2
 80021a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a8:	2200      	movs	r2, #0
 80021aa:	61bb      	str	r3, [r7, #24]
 80021ac:	61fa      	str	r2, [r7, #28]
 80021ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80021b6:	f7fe f819 	bl	80001ec <__aeabi_uldivmod>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4613      	mov	r3, r2
 80021c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021c2:	e053      	b.n	800226c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021c4:	4b35      	ldr	r3, [pc, #212]	; (800229c <HAL_RCC_GetSysClockFreq+0x180>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	099b      	lsrs	r3, r3, #6
 80021ca:	2200      	movs	r2, #0
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	617a      	str	r2, [r7, #20]
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80021d6:	f04f 0b00 	mov.w	fp, #0
 80021da:	4652      	mov	r2, sl
 80021dc:	465b      	mov	r3, fp
 80021de:	f04f 0000 	mov.w	r0, #0
 80021e2:	f04f 0100 	mov.w	r1, #0
 80021e6:	0159      	lsls	r1, r3, #5
 80021e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021ec:	0150      	lsls	r0, r2, #5
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	ebb2 080a 	subs.w	r8, r2, sl
 80021f6:	eb63 090b 	sbc.w	r9, r3, fp
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	f04f 0300 	mov.w	r3, #0
 8002202:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002206:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800220a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800220e:	ebb2 0408 	subs.w	r4, r2, r8
 8002212:	eb63 0509 	sbc.w	r5, r3, r9
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	00eb      	lsls	r3, r5, #3
 8002220:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002224:	00e2      	lsls	r2, r4, #3
 8002226:	4614      	mov	r4, r2
 8002228:	461d      	mov	r5, r3
 800222a:	eb14 030a 	adds.w	r3, r4, sl
 800222e:	603b      	str	r3, [r7, #0]
 8002230:	eb45 030b 	adc.w	r3, r5, fp
 8002234:	607b      	str	r3, [r7, #4]
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	f04f 0300 	mov.w	r3, #0
 800223e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002242:	4629      	mov	r1, r5
 8002244:	028b      	lsls	r3, r1, #10
 8002246:	4621      	mov	r1, r4
 8002248:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800224c:	4621      	mov	r1, r4
 800224e:	028a      	lsls	r2, r1, #10
 8002250:	4610      	mov	r0, r2
 8002252:	4619      	mov	r1, r3
 8002254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002256:	2200      	movs	r2, #0
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	60fa      	str	r2, [r7, #12]
 800225c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002260:	f7fd ffc4 	bl	80001ec <__aeabi_uldivmod>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4613      	mov	r3, r2
 800226a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_RCC_GetSysClockFreq+0x180>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	0c1b      	lsrs	r3, r3, #16
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	3301      	adds	r3, #1
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800227c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800227e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002280:	fbb2 f3f3 	udiv	r3, r2, r3
 8002284:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002286:	e002      	b.n	800228e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800228a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800228c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800228e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002290:	4618      	mov	r0, r3
 8002292:	3740      	adds	r7, #64	; 0x40
 8002294:	46bd      	mov	sp, r7
 8002296:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800
 80022a0:	00f42400 	.word	0x00f42400
 80022a4:	017d7840 	.word	0x017d7840

080022a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e07b      	b.n	80023b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d108      	bne.n	80022d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022ca:	d009      	beq.n	80022e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	61da      	str	r2, [r3, #28]
 80022d2:	e005      	b.n	80022e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d106      	bne.n	8002300 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7fe fe38 	bl	8000f70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002316:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002364:	ea42 0103 	orr.w	r1, r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	0c1b      	lsrs	r3, r3, #16
 800237e:	f003 0104 	and.w	r1, r3, #4
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	f003 0210 	and.w	r2, r3, #16
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	69da      	ldr	r2, [r3, #28]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e01a      	b.n	8002402 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2202      	movs	r2, #2
 80023d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023e2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7fe fe0b 	bl	8001000 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b08c      	sub	sp, #48	; 0x30
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002418:	2301      	movs	r3, #1
 800241a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800241c:	2300      	movs	r3, #0
 800241e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_SPI_TransmitReceive+0x26>
 800242c:	2302      	movs	r3, #2
 800242e:	e18a      	b.n	8002746 <HAL_SPI_TransmitReceive+0x33c>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002438:	f7fe feda 	bl	80011f0 <HAL_GetTick>
 800243c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002444:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800244e:	887b      	ldrh	r3, [r7, #2]
 8002450:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002452:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002456:	2b01      	cmp	r3, #1
 8002458:	d00f      	beq.n	800247a <HAL_SPI_TransmitReceive+0x70>
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002460:	d107      	bne.n	8002472 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d103      	bne.n	8002472 <HAL_SPI_TransmitReceive+0x68>
 800246a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800246e:	2b04      	cmp	r3, #4
 8002470:	d003      	beq.n	800247a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002472:	2302      	movs	r3, #2
 8002474:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002478:	e15b      	b.n	8002732 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_SPI_TransmitReceive+0x82>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <HAL_SPI_TransmitReceive+0x82>
 8002486:	887b      	ldrh	r3, [r7, #2]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d103      	bne.n	8002494 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002492:	e14e      	b.n	8002732 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b04      	cmp	r3, #4
 800249e:	d003      	beq.n	80024a8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2205      	movs	r2, #5
 80024a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	887a      	ldrh	r2, [r7, #2]
 80024b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	887a      	ldrh	r2, [r7, #2]
 80024be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	887a      	ldrh	r2, [r7, #2]
 80024ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	887a      	ldrh	r2, [r7, #2]
 80024d0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e8:	2b40      	cmp	r3, #64	; 0x40
 80024ea:	d007      	beq.n	80024fc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002504:	d178      	bne.n	80025f8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <HAL_SPI_TransmitReceive+0x10a>
 800250e:	8b7b      	ldrh	r3, [r7, #26]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d166      	bne.n	80025e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002518:	881a      	ldrh	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002524:	1c9a      	adds	r2, r3, #2
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002538:	e053      	b.n	80025e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b02      	cmp	r3, #2
 8002546:	d11b      	bne.n	8002580 <HAL_SPI_TransmitReceive+0x176>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800254c:	b29b      	uxth	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d016      	beq.n	8002580 <HAL_SPI_TransmitReceive+0x176>
 8002552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002554:	2b01      	cmp	r3, #1
 8002556:	d113      	bne.n	8002580 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	881a      	ldrh	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	1c9a      	adds	r2, r3, #2
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002572:	b29b      	uxth	r3, r3
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b01      	cmp	r3, #1
 800258c:	d119      	bne.n	80025c2 <HAL_SPI_TransmitReceive+0x1b8>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002592:	b29b      	uxth	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	d014      	beq.n	80025c2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a2:	b292      	uxth	r2, r2
 80025a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025aa:	1c9a      	adds	r2, r3, #2
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025be:	2301      	movs	r3, #1
 80025c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80025c2:	f7fe fe15 	bl	80011f0 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d807      	bhi.n	80025e2 <HAL_SPI_TransmitReceive+0x1d8>
 80025d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d8:	d003      	beq.n	80025e2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80025e0:	e0a7      	b.n	8002732 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1a6      	bne.n	800253a <HAL_SPI_TransmitReceive+0x130>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1a1      	bne.n	800253a <HAL_SPI_TransmitReceive+0x130>
 80025f6:	e07c      	b.n	80026f2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d002      	beq.n	8002606 <HAL_SPI_TransmitReceive+0x1fc>
 8002600:	8b7b      	ldrh	r3, [r7, #26]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d16b      	bne.n	80026de <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	330c      	adds	r3, #12
 8002610:	7812      	ldrb	r2, [r2, #0]
 8002612:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002622:	b29b      	uxth	r3, r3
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800262c:	e057      	b.n	80026de <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b02      	cmp	r3, #2
 800263a:	d11c      	bne.n	8002676 <HAL_SPI_TransmitReceive+0x26c>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002640:	b29b      	uxth	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d017      	beq.n	8002676 <HAL_SPI_TransmitReceive+0x26c>
 8002646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002648:	2b01      	cmp	r3, #1
 800264a:	d114      	bne.n	8002676 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	330c      	adds	r3, #12
 8002656:	7812      	ldrb	r2, [r2, #0]
 8002658:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	1c5a      	adds	r2, r3, #1
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002668:	b29b      	uxth	r3, r3
 800266a:	3b01      	subs	r3, #1
 800266c:	b29a      	uxth	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d119      	bne.n	80026b8 <HAL_SPI_TransmitReceive+0x2ae>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002688:	b29b      	uxth	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d014      	beq.n	80026b8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026b4:	2301      	movs	r3, #1
 80026b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80026b8:	f7fe fd9a 	bl	80011f0 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d803      	bhi.n	80026d0 <HAL_SPI_TransmitReceive+0x2c6>
 80026c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ce:	d102      	bne.n	80026d6 <HAL_SPI_TransmitReceive+0x2cc>
 80026d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d103      	bne.n	80026de <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80026dc:	e029      	b.n	8002732 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1a2      	bne.n	800262e <HAL_SPI_TransmitReceive+0x224>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d19d      	bne.n	800262e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 f8c0 	bl	800287c <SPI_EndRxTxTransaction>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d006      	beq.n	8002710 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2220      	movs	r2, #32
 800270c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800270e:	e010      	b.n	8002732 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10b      	bne.n	8002730 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	e000      	b.n	8002732 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002730:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002742:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002746:	4618      	mov	r0, r3
 8002748:	3730      	adds	r7, #48	; 0x30
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800275c:	b2db      	uxtb	r3, r3
}
 800275e:	4618      	mov	r0, r3
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
	...

0800276c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	4613      	mov	r3, r2
 800277a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800277c:	f7fe fd38 	bl	80011f0 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002784:	1a9b      	subs	r3, r3, r2
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	4413      	add	r3, r2
 800278a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800278c:	f7fe fd30 	bl	80011f0 <HAL_GetTick>
 8002790:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002792:	4b39      	ldr	r3, [pc, #228]	; (8002878 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	015b      	lsls	r3, r3, #5
 8002798:	0d1b      	lsrs	r3, r3, #20
 800279a:	69fa      	ldr	r2, [r7, #28]
 800279c:	fb02 f303 	mul.w	r3, r2, r3
 80027a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027a2:	e054      	b.n	800284e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027aa:	d050      	beq.n	800284e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027ac:	f7fe fd20 	bl	80011f0 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	69fa      	ldr	r2, [r7, #28]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d902      	bls.n	80027c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d13d      	bne.n	800283e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80027d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027da:	d111      	bne.n	8002800 <SPI_WaitFlagStateUntilTimeout+0x94>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027e4:	d004      	beq.n	80027f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ee:	d107      	bne.n	8002800 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002808:	d10f      	bne.n	800282a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002828:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e017      	b.n	800286e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	3b01      	subs	r3, #1
 800284c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	4013      	ands	r3, r2
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	429a      	cmp	r2, r3
 800285c:	bf0c      	ite	eq
 800285e:	2301      	moveq	r3, #1
 8002860:	2300      	movne	r3, #0
 8002862:	b2db      	uxtb	r3, r3
 8002864:	461a      	mov	r2, r3
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	429a      	cmp	r2, r3
 800286a:	d19b      	bne.n	80027a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3720      	adds	r7, #32
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	2000003c 	.word	0x2000003c

0800287c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af02      	add	r7, sp, #8
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002888:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <SPI_EndRxTxTransaction+0x7c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a1b      	ldr	r2, [pc, #108]	; (80028fc <SPI_EndRxTxTransaction+0x80>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	0d5b      	lsrs	r3, r3, #21
 8002894:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002898:	fb02 f303 	mul.w	r3, r2, r3
 800289c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028a6:	d112      	bne.n	80028ce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2200      	movs	r2, #0
 80028b0:	2180      	movs	r1, #128	; 0x80
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f7ff ff5a 	bl	800276c <SPI_WaitFlagStateUntilTimeout>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d016      	beq.n	80028ec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c2:	f043 0220 	orr.w	r2, r3, #32
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e00f      	b.n	80028ee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00a      	beq.n	80028ea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e4:	2b80      	cmp	r3, #128	; 0x80
 80028e6:	d0f2      	beq.n	80028ce <SPI_EndRxTxTransaction+0x52>
 80028e8:	e000      	b.n	80028ec <SPI_EndRxTxTransaction+0x70>
        break;
 80028ea:	bf00      	nop
  }

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	2000003c 	.word	0x2000003c
 80028fc:	165e9f81 	.word	0x165e9f81

08002900 <__libc_init_array>:
 8002900:	b570      	push	{r4, r5, r6, lr}
 8002902:	4d0d      	ldr	r5, [pc, #52]	; (8002938 <__libc_init_array+0x38>)
 8002904:	4c0d      	ldr	r4, [pc, #52]	; (800293c <__libc_init_array+0x3c>)
 8002906:	1b64      	subs	r4, r4, r5
 8002908:	10a4      	asrs	r4, r4, #2
 800290a:	2600      	movs	r6, #0
 800290c:	42a6      	cmp	r6, r4
 800290e:	d109      	bne.n	8002924 <__libc_init_array+0x24>
 8002910:	4d0b      	ldr	r5, [pc, #44]	; (8002940 <__libc_init_array+0x40>)
 8002912:	4c0c      	ldr	r4, [pc, #48]	; (8002944 <__libc_init_array+0x44>)
 8002914:	f000 f820 	bl	8002958 <_init>
 8002918:	1b64      	subs	r4, r4, r5
 800291a:	10a4      	asrs	r4, r4, #2
 800291c:	2600      	movs	r6, #0
 800291e:	42a6      	cmp	r6, r4
 8002920:	d105      	bne.n	800292e <__libc_init_array+0x2e>
 8002922:	bd70      	pop	{r4, r5, r6, pc}
 8002924:	f855 3b04 	ldr.w	r3, [r5], #4
 8002928:	4798      	blx	r3
 800292a:	3601      	adds	r6, #1
 800292c:	e7ee      	b.n	800290c <__libc_init_array+0xc>
 800292e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002932:	4798      	blx	r3
 8002934:	3601      	adds	r6, #1
 8002936:	e7f2      	b.n	800291e <__libc_init_array+0x1e>
 8002938:	08002988 	.word	0x08002988
 800293c:	08002988 	.word	0x08002988
 8002940:	08002988 	.word	0x08002988
 8002944:	0800298c 	.word	0x0800298c

08002948 <memset>:
 8002948:	4402      	add	r2, r0
 800294a:	4603      	mov	r3, r0
 800294c:	4293      	cmp	r3, r2
 800294e:	d100      	bne.n	8002952 <memset+0xa>
 8002950:	4770      	bx	lr
 8002952:	f803 1b01 	strb.w	r1, [r3], #1
 8002956:	e7f9      	b.n	800294c <memset+0x4>

08002958 <_init>:
 8002958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295a:	bf00      	nop
 800295c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295e:	bc08      	pop	{r3}
 8002960:	469e      	mov	lr, r3
 8002962:	4770      	bx	lr

08002964 <_fini>:
 8002964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002966:	bf00      	nop
 8002968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800296a:	bc08      	pop	{r3}
 800296c:	469e      	mov	lr, r3
 800296e:	4770      	bx	lr
