
hope2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000933c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080094c4  080094c4  000194c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009524  08009524  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  08009524  08009524  00019524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800952c  0800952c  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800952c  0800952c  0001952c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009530  08009530  00019530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  08009534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020168  2**0
                  CONTENTS
 10 .bss          00001d84  20000168  20000168  00020168  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001eec  20001eec  00020168  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 13 .debug_info   000178f8  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d7b  00000000  00000000  00037a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c8  00000000  00000000  0003b810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001218  00000000  00000000  0003cbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002586f  00000000  00000000  0003ddf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019ef9  00000000  00000000  0006365f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cda1c  00000000  00000000  0007d558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014af74  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050f0  00000000  00000000  0014afc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000168 	.word	0x20000168
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080094ac 	.word	0x080094ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000016c 	.word	0x2000016c
 80001c4:	080094ac 	.word	0x080094ac

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <LIS302DL_Init>:
  * @brief  Set LIS302DL Initialization.
  * @param  InitStruct: contains mask of different init parameters
  * @retval None
  */
void LIS302DL_Init(uint16_t InitStruct)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80004d6:	2300      	movs	r3, #0
 80004d8:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  ACCELERO_IO_Init();
 80004da:	f000 fddd 	bl	8001098 <ACCELERO_IO_Init>

  ctrl = (uint8_t) InitStruct;
 80004de:	88fb      	ldrh	r3, [r7, #6]
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 80004e4:	f107 030f 	add.w	r3, r7, #15
 80004e8:	2201      	movs	r2, #1
 80004ea:	2120      	movs	r1, #32
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 fe31 	bl	8001154 <ACCELERO_IO_Write>
}
 80004f2:	bf00      	nop
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <LIS302DL_DeInit>:
  * @brief  LIS302DL De-Initialization.
  * @param  None
  * @retval None.
  */
void LIS302DL_DeInit(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0
  
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <LIS302DL_ReadID>:
  * @brief  Read LIS302DL device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS302DL_ReadID(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
  uint8_t tmp = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	71fb      	strb	r3, [r7, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 8000512:	f000 fdc1 	bl	8001098 <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS302DL_WHO_AM_I_ADDR, 1);
 8000516:	1dfb      	adds	r3, r7, #7
 8000518:	2201      	movs	r2, #1
 800051a:	210f      	movs	r1, #15
 800051c:	4618      	mov	r0, r3
 800051e:	f000 fe4b 	bl	80011b8 <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
 8000522:	79fb      	ldrb	r3, [r7, #7]
}
 8000524:	4618      	mov	r0, r3
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <LIS302DL_FilterConfig>:
  * @brief  Set LIS302DL Internal High Pass Filter configuration.
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LIS302DL_FilterConfig(uint8_t FilterStruct)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
  uint8_t ctrl = 0x00;
 8000536:	2300      	movs	r3, #0
 8000538:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 800053a:	f107 030f 	add.w	r3, r7, #15
 800053e:	2201      	movs	r2, #1
 8000540:	2121      	movs	r1, #33	; 0x21
 8000542:	4618      	mov	r0, r3
 8000544:	f000 fe38 	bl	80011b8 <ACCELERO_IO_Read>

  /* Clear high pass filter cut-off level, interrupt and data selection bits */
  ctrl &= (uint8_t)~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | \
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	f023 032f 	bic.w	r3, r3, #47	; 0x2f
 800054e:	b2db      	uxtb	r3, r3
 8000550:	73fb      	strb	r3, [r7, #15]
                     LIS302DL_HIGHPASSFILTER_LEVEL_3 | \
                     LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);

  ctrl |= FilterStruct;
 8000552:	7bfa      	ldrb	r2, [r7, #15]
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	4313      	orrs	r3, r2
 8000558:	b2db      	uxtb	r3, r3
 800055a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 800055c:	f107 030f 	add.w	r3, r7, #15
 8000560:	2201      	movs	r2, #1
 8000562:	2121      	movs	r1, #33	; 0x21
 8000564:	4618      	mov	r0, r3
 8000566:	f000 fdf5 	bl	8001154 <ACCELERO_IO_Write>
}
 800056a:	bf00      	nop
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <LIS302DL_InterruptConfig>:
  * @param  LIS302DL_InterruptConfig_TypeDef: pointer to a LIS302DL_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the LIS302DL Interrupt.
  * @retval None
  */
void LIS302DL_InterruptConfig(LIS302DL_InterruptConfigTypeDef *LIS302DL_IntConfigStruct)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	b084      	sub	sp, #16
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 800057a:	2300      	movs	r3, #0
 800057c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFG register */
  ACCELERO_IO_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 800057e:	f107 030f 	add.w	r3, r7, #15
 8000582:	2201      	movs	r2, #1
 8000584:	2138      	movs	r1, #56	; 0x38
 8000586:	4618      	mov	r0, r3
 8000588:	f000 fe16 	bl	80011b8 <ACCELERO_IO_Read>
  
  /* Configure latch Interrupt request, click interrupts and double click interrupts */                   
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	781a      	ldrb	r2, [r3, #0]
                   LIS302DL_IntConfigStruct->SingleClick_Axes | \
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	785b      	ldrb	r3, [r3, #1]
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 8000594:	4313      	orrs	r3, r2
 8000596:	b2da      	uxtb	r2, r3
                   LIS302DL_IntConfigStruct->DoubleClick_Axes);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	789b      	ldrb	r3, [r3, #2]
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 800059c:	4313      	orrs	r3, r2
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK_CFG register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 80005a2:	f107 030f 	add.w	r3, r7, #15
 80005a6:	2201      	movs	r2, #1
 80005a8:	2138      	movs	r1, #56	; 0x38
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 fdd2 	bl	8001154 <ACCELERO_IO_Write>
}
 80005b0:	bf00      	nop
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <LIS302DL_Click_IntConfig>:
  * @brief  Set LIS302DL Interrupt configuration
  * @param  None
  * @retval None
  */
void LIS302DL_Click_IntConfig(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80005be:	2300      	movs	r3, #0
 80005c0:	71fb      	strb	r3, [r7, #7]
  LIS302DL_InterruptConfigTypeDef   LIS302DL_InterruptStruct;
  
  ACCELERO_IO_ITConfig();
 80005c2:	f000 fd97 	bl	80010f4 <ACCELERO_IO_ITConfig>
  
  /* Set configuration of Internal High Pass Filter of LIS302DL */
  LIS302DL_InterruptStruct.Latch_Request = LIS302DL_INTERRUPTREQUEST_LATCHED;
 80005c6:	2340      	movs	r3, #64	; 0x40
 80005c8:	713b      	strb	r3, [r7, #4]
  LIS302DL_InterruptStruct.SingleClick_Axes = LIS302DL_CLICKINTERRUPT_Z_ENABLE;
 80005ca:	2310      	movs	r3, #16
 80005cc:	717b      	strb	r3, [r7, #5]
  LIS302DL_InterruptStruct.DoubleClick_Axes = LIS302DL_DOUBLECLICKINTERRUPT_Z_ENABLE;
 80005ce:	2320      	movs	r3, #32
 80005d0:	71bb      	strb	r3, [r7, #6]
  LIS302DL_InterruptConfig(&LIS302DL_InterruptStruct);
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ffcc 	bl	8000572 <LIS302DL_InterruptConfig>
  
  /* Configure Interrupt control register: enable Click interrupt on INT1 and
  INT2 on Z axis high event */
  ctrl = 0x3F;
 80005da:	233f      	movs	r3, #63	; 0x3f
 80005dc:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG3_ADDR, 1);
 80005de:	1dfb      	adds	r3, r7, #7
 80005e0:	2201      	movs	r2, #1
 80005e2:	2122      	movs	r1, #34	; 0x22
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fdb5 	bl	8001154 <ACCELERO_IO_Write>
  
  /* Enable Interrupt generation on click on Z axis */
  ctrl = 0x50;
 80005ea:	2350      	movs	r3, #80	; 0x50
 80005ec:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 80005ee:	1dfb      	adds	r3, r7, #7
 80005f0:	2201      	movs	r2, #1
 80005f2:	2138      	movs	r1, #56	; 0x38
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fdad 	bl	8001154 <ACCELERO_IO_Write>
  
  /* Configure Click Threshold on X/Y axis (10 x 0.5g) */
  ctrl = 0xAA;
 80005fa:	23aa      	movs	r3, #170	; 0xaa
 80005fc:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSY_X_REG_ADDR, 1);
 80005fe:	1dfb      	adds	r3, r7, #7
 8000600:	2201      	movs	r2, #1
 8000602:	213b      	movs	r1, #59	; 0x3b
 8000604:	4618      	mov	r0, r3
 8000606:	f000 fda5 	bl	8001154 <ACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis (10 x 0.5g) */
  ctrl = 0x0A;
 800060a:	230a      	movs	r3, #10
 800060c:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSZ_REG_ADDR, 1);
 800060e:	1dfb      	adds	r3, r7, #7
 8000610:	2201      	movs	r2, #1
 8000612:	213c      	movs	r1, #60	; 0x3c
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fd9d 	bl	8001154 <ACCELERO_IO_Write>
  
  /* Enable interrupt on Y axis high event */
  ctrl = 0x4C;
 800061a:	234c      	movs	r3, #76	; 0x4c
 800061c:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_FF_WU_CFG1_REG_ADDR, 1);
 800061e:	1dfb      	adds	r3, r7, #7
 8000620:	2201      	movs	r2, #1
 8000622:	2130      	movs	r1, #48	; 0x30
 8000624:	4618      	mov	r0, r3
 8000626:	f000 fd95 	bl	8001154 <ACCELERO_IO_Write>
  
  /* Configure Time Limit */
  ctrl = 0x03;
 800062a:	2303      	movs	r3, #3
 800062c:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_TIMELIMIT_REG_ADDR, 1);
 800062e:	1dfb      	adds	r3, r7, #7
 8000630:	2201      	movs	r2, #1
 8000632:	213d      	movs	r1, #61	; 0x3d
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fd8d 	bl	8001154 <ACCELERO_IO_Write>
  
  /* Configure Latency */
  ctrl = 0x7F;
 800063a:	237f      	movs	r3, #127	; 0x7f
 800063c:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_LATENCY_REG_ADDR, 1);
 800063e:	1dfb      	adds	r3, r7, #7
 8000640:	2201      	movs	r2, #1
 8000642:	213e      	movs	r1, #62	; 0x3e
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fd85 	bl	8001154 <ACCELERO_IO_Write>
  
  /* Configure Click Window */
  ctrl = 0x7F;
 800064a:	237f      	movs	r3, #127	; 0x7f
 800064c:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_WINDOW_REG_ADDR, 1);
 800064e:	1dfb      	adds	r3, r7, #7
 8000650:	2201      	movs	r2, #1
 8000652:	213f      	movs	r1, #63	; 0x3f
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fd7d 	bl	8001154 <ACCELERO_IO_Write>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <LIS302DL_Click_IntClear>:
  * @brief  Clear LIS302DL click Interrupt 
  * @param  None
  * @retval None
  */
void LIS302DL_Click_IntClear(void)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	b084      	sub	sp, #16
 8000666:	af00      	add	r7, sp, #0
  uint8_t buffer[6], clickreg = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	71fb      	strb	r3, [r7, #7]

  /* Read click and status registers if the available MEMS Accelerometer is LIS302DL */
  ACCELERO_IO_Read(&clickreg, LIS302DL_CLICK_SRC_REG_ADDR, 1); 
 800066c:	1dfb      	adds	r3, r7, #7
 800066e:	2201      	movs	r2, #1
 8000670:	2139      	movs	r1, #57	; 0x39
 8000672:	4618      	mov	r0, r3
 8000674:	f000 fda0 	bl	80011b8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read(buffer, LIS302DL_STATUS_REG_ADDR, 6);
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	2206      	movs	r2, #6
 800067e:	2127      	movs	r1, #39	; 0x27
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fd99 	bl	80011b8 <ACCELERO_IO_Read>
}
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <LIS302DL_RebootCmd>:
  * @brief  Reboot memory content of LIS302DL.
  * @param  None
  * @retval None
  */
void LIS302DL_RebootCmd(void)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 8000694:	1dfb      	adds	r3, r7, #7
 8000696:	2201      	movs	r2, #1
 8000698:	2121      	movs	r1, #33	; 0x21
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fd8c 	bl	80011b8 <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS302DL_BOOT_REBOOTMEMORY;
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	2201      	movs	r2, #1
 80006ae:	2121      	movs	r1, #33	; 0x21
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 fd4f 	bl	8001154 <ACCELERO_IO_Write>
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <LIS302DL_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit rappresentation)
  * @param  pfData: Data out pointer
  * @retval None
  */
void LIS302DL_ReadACC(int16_t *pData)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b088      	sub	sp, #32
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
  int8_t buffer[6];
  int16_t pnRawData[3];
  uint8_t sensitivity = LIS302DL_SENSITIVITY_2_3G;
 80006c6:	2312      	movs	r3, #18
 80006c8:	77fb      	strb	r3, [r7, #31]
  uint8_t crtl, i = 0x00;
 80006ca:	2300      	movs	r3, #0
 80006cc:	77bb      	strb	r3, [r7, #30]
  
  ACCELERO_IO_Read(&crtl, LIS302DL_CTRL_REG1_ADDR, 1);
 80006ce:	f107 030f 	add.w	r3, r7, #15
 80006d2:	2201      	movs	r2, #1
 80006d4:	2120      	movs	r1, #32
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fd6e 	bl	80011b8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)buffer, LIS302DL_OUT_X_ADDR, 6);
 80006dc:	f107 0318 	add.w	r3, r7, #24
 80006e0:	2206      	movs	r2, #6
 80006e2:	2129      	movs	r1, #41	; 0x29
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 fd67 	bl	80011b8 <ACCELERO_IO_Read>
  
  for(i=0; i<3; i++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	77bb      	strb	r3, [r7, #30]
 80006ee:	e00f      	b.n	8000710 <LIS302DL_ReadACC+0x52>
  {
    pnRawData[i] = buffer[2*i];
 80006f0:	7fbb      	ldrb	r3, [r7, #30]
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	3320      	adds	r3, #32
 80006f6:	443b      	add	r3, r7
 80006f8:	f913 2c08 	ldrsb.w	r2, [r3, #-8]
 80006fc:	7fbb      	ldrb	r3, [r7, #30]
 80006fe:	b212      	sxth	r2, r2
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	3320      	adds	r3, #32
 8000704:	443b      	add	r3, r7
 8000706:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800070a:	7fbb      	ldrb	r3, [r7, #30]
 800070c:	3301      	adds	r3, #1
 800070e:	77bb      	strb	r3, [r7, #30]
 8000710:	7fbb      	ldrb	r3, [r7, #30]
 8000712:	2b02      	cmp	r3, #2
 8000714:	d9ec      	bls.n	80006f0 <LIS302DL_ReadACC+0x32>
  }
  
  switch(crtl & LIS302DL_FULLSCALE_9_2) 
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	f003 0320 	and.w	r3, r3, #32
 800071c:	2b00      	cmp	r3, #0
 800071e:	d002      	beq.n	8000726 <LIS302DL_ReadACC+0x68>
 8000720:	2b20      	cmp	r3, #32
 8000722:	d003      	beq.n	800072c <LIS302DL_ReadACC+0x6e>
  case LIS302DL_FULLSCALE_9_2:
    sensitivity = LIS302DL_SENSITIVITY_9_2G;
    break;
    
  default:
    break;
 8000724:	e005      	b.n	8000732 <LIS302DL_ReadACC+0x74>
    sensitivity = LIS302DL_SENSITIVITY_2_3G;
 8000726:	2312      	movs	r3, #18
 8000728:	77fb      	strb	r3, [r7, #31]
    break;
 800072a:	e002      	b.n	8000732 <LIS302DL_ReadACC+0x74>
    sensitivity = LIS302DL_SENSITIVITY_9_2G;
 800072c:	2348      	movs	r3, #72	; 0x48
 800072e:	77fb      	strb	r3, [r7, #31]
    break;
 8000730:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000732:	2300      	movs	r3, #0
 8000734:	77bb      	strb	r3, [r7, #30]
 8000736:	e014      	b.n	8000762 <LIS302DL_ReadACC+0xa4>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8000738:	7fbb      	ldrb	r3, [r7, #30]
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	3320      	adds	r3, #32
 800073e:	443b      	add	r3, r7
 8000740:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8000744:	b29a      	uxth	r2, r3
 8000746:	7ffb      	ldrb	r3, [r7, #31]
 8000748:	b29b      	uxth	r3, r3
 800074a:	fb12 f303 	smulbb	r3, r2, r3
 800074e:	b299      	uxth	r1, r3
 8000750:	7fbb      	ldrb	r3, [r7, #30]
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	4413      	add	r3, r2
 8000758:	b20a      	sxth	r2, r1
 800075a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800075c:	7fbb      	ldrb	r3, [r7, #30]
 800075e:	3301      	adds	r3, #1
 8000760:	77bb      	strb	r3, [r7, #30]
 8000762:	7fbb      	ldrb	r3, [r7, #30]
 8000764:	2b02      	cmp	r3, #2
 8000766:	d9e7      	bls.n	8000738 <LIS302DL_ReadACC+0x7a>
  }
}
 8000768:	bf00      	nop
 800076a:	bf00      	nop
 800076c:	3720      	adds	r7, #32
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <LIS3DSH_Init>:
  * @brief  Set LIS3DSH Initialization.
  * @param  InitStruct: contains mask of different init parameters
  * @retval None
  */
void LIS3DSH_Init(uint16_t InitStruct)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	b084      	sub	sp, #16
 8000776:	af00      	add	r7, sp, #0
 8000778:	4603      	mov	r3, r0
 800077a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800077c:	2300      	movs	r3, #0
 800077e:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  ACCELERO_IO_Init();
 8000780:	f000 fc8a 	bl	8001098 <ACCELERO_IO_Init>

  /* Configure MEMS: power mode(ODR) and axes enable */
  ctrl = (uint8_t) (InitStruct);
 8000784:	88fb      	ldrh	r3, [r7, #6]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG4 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG4_ADDR, 1);
 800078a:	f107 030f 	add.w	r3, r7, #15
 800078e:	2201      	movs	r2, #1
 8000790:	2120      	movs	r1, #32
 8000792:	4618      	mov	r0, r3
 8000794:	f000 fcde 	bl	8001154 <ACCELERO_IO_Write>
  
  /* Configure MEMS: full scale and self test */
  ctrl = (uint8_t) (InitStruct >> 8);
 8000798:	88fb      	ldrh	r3, [r7, #6]
 800079a:	0a1b      	lsrs	r3, r3, #8
 800079c:	b29b      	uxth	r3, r3
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG5_ADDR, 1);
 80007a2:	f107 030f 	add.w	r3, r7, #15
 80007a6:	2201      	movs	r2, #1
 80007a8:	2124      	movs	r1, #36	; 0x24
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fcd2 	bl	8001154 <ACCELERO_IO_Write>
}
 80007b0:	bf00      	nop
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <LIS3DSH_DeInit>:
  * @brief  LIS3DSH De-Initialization.
  * @param  None
  * @retval None.
  */
void LIS3DSH_DeInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <LIS3DSH_ReadID>:
  * @brief  Read LIS3DSH device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS3DSH_ReadID(void)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
  uint8_t tmp = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	71fb      	strb	r3, [r7, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 80007d0:	f000 fc62 	bl	8001098 <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS3DSH_WHO_AM_I_ADDR, 1);
 80007d4:	1dfb      	adds	r3, r7, #7
 80007d6:	2201      	movs	r2, #1
 80007d8:	210f      	movs	r1, #15
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 fcec 	bl	80011b8 <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
 80007e0:	79fb      	ldrb	r3, [r7, #7]
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <LIS3DSH_InterruptConfig>:
  * @param  LIS3DSH_InterruptConfig_TypeDef: pointer to a LIS3DSH_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the LIS3DSH Interrupt.
  * @retval None
  */
void LIS3DSH_InterruptConfig(LIS3DSH_InterruptConfigTypeDef *LIS3DSH_IntConfigStruct)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b084      	sub	sp, #16
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 80007f2:	2300      	movs	r3, #0
 80007f4:	73fb      	strb	r3, [r7, #15]
  
  /* Configure Interrupt Selection , Request and Signal */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	785a      	ldrb	r2, [r3, #1]
                   LIS3DSH_IntConfigStruct->Interrupt_Request | \
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	781b      	ldrb	r3, [r3, #0]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80007fe:	4313      	orrs	r3, r2
 8000800:	b2da      	uxtb	r2, r3
                   LIS3DSH_IntConfigStruct->Interrupt_Signal);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	789b      	ldrb	r3, [r3, #2]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 8000806:	4313      	orrs	r3, r2
 8000808:	b2db      	uxtb	r3, r3
 800080a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG3_ADDR, 1);
 800080c:	f107 030f 	add.w	r3, r7, #15
 8000810:	2201      	movs	r2, #1
 8000812:	2123      	movs	r1, #35	; 0x23
 8000814:	4618      	mov	r0, r3
 8000816:	f000 fc9d 	bl	8001154 <ACCELERO_IO_Write>
  
  /* Configure State Machine 1 */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	78da      	ldrb	r2, [r3, #3]
                   LIS3DSH_IntConfigStruct->State_Machine1_Interrupt);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	791b      	ldrb	r3, [r3, #4]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 8000822:	4313      	orrs	r3, r2
 8000824:	b2db      	uxtb	r3, r3
 8000826:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG1 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);
 8000828:	f107 030f 	add.w	r3, r7, #15
 800082c:	2201      	movs	r2, #1
 800082e:	2121      	movs	r1, #33	; 0x21
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fc8f 	bl	8001154 <ACCELERO_IO_Write>
  
  /* Configure State Machine 2 */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	795a      	ldrb	r2, [r3, #5]
                   LIS3DSH_IntConfigStruct->State_Machine2_Interrupt);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	799b      	ldrb	r3, [r3, #6]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 800083e:	4313      	orrs	r3, r2
 8000840:	b2db      	uxtb	r3, r3
 8000842:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG2_ADDR, 1);
 8000844:	f107 030f 	add.w	r3, r7, #15
 8000848:	2201      	movs	r2, #1
 800084a:	2122      	movs	r1, #34	; 0x22
 800084c:	4618      	mov	r0, r3
 800084e:	f000 fc81 	bl	8001154 <ACCELERO_IO_Write>
}
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <LIS3DSH_Click_IntConfig>:
  * @brief  Set LIS3DSH for click detection
  * @param  None
  * @retval None
  */
void LIS3DSH_Click_IntConfig(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000860:	2300      	movs	r3, #0
 8000862:	71fb      	strb	r3, [r7, #7]
  LIS3DSH_InterruptConfigTypeDef   LIS3DSH_InterruptStruct; 

  ACCELERO_IO_ITConfig();
 8000864:	f000 fc46 	bl	80010f4 <ACCELERO_IO_ITConfig>

  /* Set LIS3DSH Interrupt configuration */
  LIS3DSH_InterruptStruct.Interrupt_Selection_Enable = LIS3DSH_INTERRUPT_2_ENABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	707b      	strb	r3, [r7, #1]
  LIS3DSH_InterruptStruct.Interrupt_Request = LIS3DSH_INTERRUPT_REQUEST_LATCHED;
 800086c:	2300      	movs	r3, #0
 800086e:	703b      	strb	r3, [r7, #0]
  LIS3DSH_InterruptStruct.Interrupt_Signal = LIS3DSH_INTERRUPT_SIGNAL_HIGH;
 8000870:	2340      	movs	r3, #64	; 0x40
 8000872:	70bb      	strb	r3, [r7, #2]
  LIS3DSH_InterruptStruct.State_Machine1_Enable = LIS3DSH_SM_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	70fb      	strb	r3, [r7, #3]
  LIS3DSH_InterruptStruct.State_Machine2_Enable = LIS3DSH_SM_ENABLE;
 8000878:	2301      	movs	r3, #1
 800087a:	717b      	strb	r3, [r7, #5]
  LIS3DSH_InterruptStruct.State_Machine2_Interrupt = LIS3DSH_SM_INT1;
 800087c:	2300      	movs	r3, #0
 800087e:	71bb      	strb	r3, [r7, #6]
  LIS3DSH_InterruptConfig(&LIS3DSH_InterruptStruct);
 8000880:	463b      	mov	r3, r7
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ffb1 	bl	80007ea <LIS3DSH_InterruptConfig>
    
  /* Set LIS3DSH State Machines configuration */
  ctrl=0x03; 
 8000888:	2303      	movs	r3, #3
 800088a:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM2_1_L_ADDR,1);
 800088c:	1dfb      	adds	r3, r7, #7
 800088e:	2201      	movs	r2, #1
 8000890:	2152      	movs	r1, #82	; 0x52
 8000892:	4618      	mov	r0, r3
 8000894:	f000 fc5e 	bl	8001154 <ACCELERO_IO_Write>
  ctrl=0xC8; 
 8000898:	23c8      	movs	r3, #200	; 0xc8
 800089a:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM1_1_L_ADDR,1);
 800089c:	1dfb      	adds	r3, r7, #7
 800089e:	2201      	movs	r2, #1
 80008a0:	2154      	movs	r1, #84	; 0x54
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 fc56 	bl	8001154 <ACCELERO_IO_Write>
  ctrl=0x45; 
 80008a8:	2345      	movs	r3, #69	; 0x45
 80008aa:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_THRS2_1_ADDR,1);
 80008ac:	1dfb      	adds	r3, r7, #7
 80008ae:	2201      	movs	r2, #1
 80008b0:	2156      	movs	r1, #86	; 0x56
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 fc4e 	bl	8001154 <ACCELERO_IO_Write>
  ctrl=0xFC; 
 80008b8:	23fc      	movs	r3, #252	; 0xfc
 80008ba:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_MASK1_A_ADDR,1);
 80008bc:	1dfb      	adds	r3, r7, #7
 80008be:	2201      	movs	r2, #1
 80008c0:	215a      	movs	r1, #90	; 0x5a
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 fc46 	bl	8001154 <ACCELERO_IO_Write>
  ctrl=0xA1; 
 80008c8:	23a1      	movs	r3, #161	; 0xa1
 80008ca:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT1_ADDR,1);
 80008cc:	1dfb      	adds	r3, r7, #7
 80008ce:	2201      	movs	r2, #1
 80008d0:	215b      	movs	r1, #91	; 0x5b
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 fc3e 	bl	8001154 <ACCELERO_IO_Write>
  ctrl=0x01; 
 80008d8:	2301      	movs	r3, #1
 80008da:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_PR1_ADDR,1);
 80008dc:	1dfb      	adds	r3, r7, #7
 80008de:	2201      	movs	r2, #1
 80008e0:	215c      	movs	r1, #92	; 0x5c
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 fc36 	bl	8001154 <ACCELERO_IO_Write>

  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT2_ADDR,1);
 80008e8:	1dfb      	adds	r3, r7, #7
 80008ea:	2201      	movs	r2, #1
 80008ec:	217b      	movs	r1, #123	; 0x7b
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 fc30 	bl	8001154 <ACCELERO_IO_Write>
  
  /* Configure State Machine 2 to detect single click */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_1_ADDR,1);
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	2201      	movs	r2, #1
 80008f8:	2160      	movs	r1, #96	; 0x60
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 fc2a 	bl	8001154 <ACCELERO_IO_Write>
  ctrl=0x06; 
 8000900:	2306      	movs	r3, #6
 8000902:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_2_ADDR,1);
 8000904:	1dfb      	adds	r3, r7, #7
 8000906:	2201      	movs	r2, #1
 8000908:	2161      	movs	r1, #97	; 0x61
 800090a:	4618      	mov	r0, r3
 800090c:	f000 fc22 	bl	8001154 <ACCELERO_IO_Write>
  ctrl=0x28; 
 8000910:	2328      	movs	r3, #40	; 0x28
 8000912:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_3_ADDR,1);
 8000914:	1dfb      	adds	r3, r7, #7
 8000916:	2201      	movs	r2, #1
 8000918:	2162      	movs	r1, #98	; 0x62
 800091a:	4618      	mov	r0, r3
 800091c:	f000 fc1a 	bl	8001154 <ACCELERO_IO_Write>
  ctrl=0x11; 
 8000920:	2311      	movs	r3, #17
 8000922:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_4_ADDR,1);
 8000924:	1dfb      	adds	r3, r7, #7
 8000926:	2201      	movs	r2, #1
 8000928:	2163      	movs	r1, #99	; 0x63
 800092a:	4618      	mov	r0, r3
 800092c:	f000 fc12 	bl	8001154 <ACCELERO_IO_Write>
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <LIS3DSH_RebootCmd>:
  * @brief  Reboot memory content of LIS3DSH.
  * @param  None
  * @retval None
  */
void LIS3DSH_RebootCmd(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  /* Read CTRL_REG6 register */
  ACCELERO_IO_Read(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	2201      	movs	r2, #1
 8000942:	2125      	movs	r1, #37	; 0x25
 8000944:	4618      	mov	r0, r3
 8000946:	f000 fc37 	bl	80011b8 <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS3DSH_BOOT_FORCED;
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000950:	b2db      	uxtb	r3, r3
 8000952:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG6 register */
  ACCELERO_IO_Write(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	2201      	movs	r2, #1
 8000958:	2125      	movs	r1, #37	; 0x25
 800095a:	4618      	mov	r0, r3
 800095c:	f000 fbfa 	bl	8001154 <ACCELERO_IO_Write>
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <LIS3DSH_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit representation).
  * @param  pointer on floating buffer.
  * @retval None
  */
void LIS3DSH_ReadACC(int16_t *pData)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  int8_t buffer[6];
  uint8_t crtl, i = 0x00;
 8000970:	2300      	movs	r3, #0
 8000972:	77fb      	strb	r3, [r7, #31]
  float sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8000974:	4b64      	ldr	r3, [pc, #400]	; (8000b08 <LIS3DSH_ReadACC+0x1a0>)
 8000976:	61bb      	str	r3, [r7, #24]
  float valueinfloat = 0;
 8000978:	f04f 0300 	mov.w	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
  
  ACCELERO_IO_Read(&crtl, LIS3DSH_CTRL_REG5_ADDR, 1);  
 800097e:	f107 030b 	add.w	r3, r7, #11
 8000982:	2201      	movs	r2, #1
 8000984:	2124      	movs	r1, #36	; 0x24
 8000986:	4618      	mov	r0, r3
 8000988:	f000 fc16 	bl	80011b8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	2201      	movs	r2, #1
 8000992:	2128      	movs	r1, #40	; 0x28
 8000994:	4618      	mov	r0, r3
 8000996:	f000 fc0f 	bl	80011b8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	3301      	adds	r3, #1
 80009a0:	2201      	movs	r2, #1
 80009a2:	2129      	movs	r1, #41	; 0x29
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 fc07 	bl	80011b8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	3302      	adds	r3, #2
 80009b0:	2201      	movs	r2, #1
 80009b2:	212a      	movs	r1, #42	; 0x2a
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fbff 	bl	80011b8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 80009ba:	f107 030c 	add.w	r3, r7, #12
 80009be:	3303      	adds	r3, #3
 80009c0:	2201      	movs	r2, #1
 80009c2:	212b      	movs	r1, #43	; 0x2b
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 fbf7 	bl	80011b8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	3304      	adds	r3, #4
 80009d0:	2201      	movs	r2, #1
 80009d2:	212c      	movs	r1, #44	; 0x2c
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 fbef 	bl	80011b8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	3305      	adds	r3, #5
 80009e0:	2201      	movs	r2, #1
 80009e2:	212d      	movs	r1, #45	; 0x2d
 80009e4:	4618      	mov	r0, r3
 80009e6:	f000 fbe7 	bl	80011b8 <ACCELERO_IO_Read>
  
  switch(crtl & LIS3DSH__FULLSCALE_SELECTION) 
 80009ea:	7afb      	ldrb	r3, [r7, #11]
 80009ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80009f0:	2b20      	cmp	r3, #32
 80009f2:	d854      	bhi.n	8000a9e <LIS3DSH_ReadACC+0x136>
 80009f4:	a201      	add	r2, pc, #4	; (adr r2, 80009fc <LIS3DSH_ReadACC+0x94>)
 80009f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009fa:	bf00      	nop
 80009fc:	08000a81 	.word	0x08000a81
 8000a00:	08000a9f 	.word	0x08000a9f
 8000a04:	08000a9f 	.word	0x08000a9f
 8000a08:	08000a9f 	.word	0x08000a9f
 8000a0c:	08000a9f 	.word	0x08000a9f
 8000a10:	08000a9f 	.word	0x08000a9f
 8000a14:	08000a9f 	.word	0x08000a9f
 8000a18:	08000a9f 	.word	0x08000a9f
 8000a1c:	08000a87 	.word	0x08000a87
 8000a20:	08000a9f 	.word	0x08000a9f
 8000a24:	08000a9f 	.word	0x08000a9f
 8000a28:	08000a9f 	.word	0x08000a9f
 8000a2c:	08000a9f 	.word	0x08000a9f
 8000a30:	08000a9f 	.word	0x08000a9f
 8000a34:	08000a9f 	.word	0x08000a9f
 8000a38:	08000a9f 	.word	0x08000a9f
 8000a3c:	08000a8d 	.word	0x08000a8d
 8000a40:	08000a9f 	.word	0x08000a9f
 8000a44:	08000a9f 	.word	0x08000a9f
 8000a48:	08000a9f 	.word	0x08000a9f
 8000a4c:	08000a9f 	.word	0x08000a9f
 8000a50:	08000a9f 	.word	0x08000a9f
 8000a54:	08000a9f 	.word	0x08000a9f
 8000a58:	08000a9f 	.word	0x08000a9f
 8000a5c:	08000a93 	.word	0x08000a93
 8000a60:	08000a9f 	.word	0x08000a9f
 8000a64:	08000a9f 	.word	0x08000a9f
 8000a68:	08000a9f 	.word	0x08000a9f
 8000a6c:	08000a9f 	.word	0x08000a9f
 8000a70:	08000a9f 	.word	0x08000a9f
 8000a74:	08000a9f 	.word	0x08000a9f
 8000a78:	08000a9f 	.word	0x08000a9f
 8000a7c:	08000a99 	.word	0x08000a99
  {
    /* FS bit = 000 ==> Sensitivity typical value = 0.06milligals/digit */ 
  case LIS3DSH_FULLSCALE_2:
    sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8000a80:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <LIS3DSH_ReadACC+0x1a0>)
 8000a82:	61bb      	str	r3, [r7, #24]
    break;
 8000a84:	e00c      	b.n	8000aa0 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 001 ==> Sensitivity typical value = 0.12milligals/digit */ 
  case LIS3DSH_FULLSCALE_4:
    sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8000a86:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <LIS3DSH_ReadACC+0x1a4>)
 8000a88:	61bb      	str	r3, [r7, #24]
    break;
 8000a8a:	e009      	b.n	8000aa0 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 010 ==> Sensitivity typical value = 0.18milligals/digit */ 
  case LIS3DSH_FULLSCALE_6:
    sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8000a8c:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <LIS3DSH_ReadACC+0x1a8>)
 8000a8e:	61bb      	str	r3, [r7, #24]
    break;
 8000a90:	e006      	b.n	8000aa0 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 011 ==> Sensitivity typical value = 0.24milligals/digit */ 
  case LIS3DSH_FULLSCALE_8:
    sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8000a92:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <LIS3DSH_ReadACC+0x1ac>)
 8000a94:	61bb      	str	r3, [r7, #24]
    break;
 8000a96:	e003      	b.n	8000aa0 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 100 ==> Sensitivity typical value = 0.73milligals/digit */ 
  case LIS3DSH_FULLSCALE_16:
    sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8000a98:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <LIS3DSH_ReadACC+0x1b0>)
 8000a9a:	61bb      	str	r3, [r7, #24]
    break;
 8000a9c:	e000      	b.n	8000aa0 <LIS3DSH_ReadACC+0x138>
    
  default:
    break;
 8000a9e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	77fb      	strb	r3, [r7, #31]
 8000aa4:	e027      	b.n	8000af6 <LIS3DSH_ReadACC+0x18e>
  {
    valueinfloat = ((buffer[2*i+1] << 8) + buffer[2*i]) * sensitivity;
 8000aa6:	7ffb      	ldrb	r3, [r7, #31]
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	3301      	adds	r3, #1
 8000aac:	3320      	adds	r3, #32
 8000aae:	443b      	add	r3, r7
 8000ab0:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000ab4:	021b      	lsls	r3, r3, #8
 8000ab6:	7ffa      	ldrb	r2, [r7, #31]
 8000ab8:	0052      	lsls	r2, r2, #1
 8000aba:	3220      	adds	r2, #32
 8000abc:	443a      	add	r2, r7
 8000abe:	f912 2c14 	ldrsb.w	r2, [r2, #-20]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	ee07 3a90 	vmov	s15, r3
 8000ac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000acc:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ad4:	edc7 7a05 	vstr	s15, [r7, #20]
    pData[i] = (int16_t)valueinfloat;
 8000ad8:	7ffb      	ldrb	r3, [r7, #31]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	4413      	add	r3, r2
 8000ae0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ae4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ae8:	ee17 2a90 	vmov	r2, s15
 8000aec:	b212      	sxth	r2, r2
 8000aee:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000af0:	7ffb      	ldrb	r3, [r7, #31]
 8000af2:	3301      	adds	r3, #1
 8000af4:	77fb      	strb	r3, [r7, #31]
 8000af6:	7ffb      	ldrb	r3, [r7, #31]
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d9d4      	bls.n	8000aa6 <LIS3DSH_ReadACC+0x13e>
  }
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	3720      	adds	r7, #32
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	3d75c28f 	.word	0x3d75c28f
 8000b0c:	3df5c28f 	.word	0x3df5c28f
 8000b10:	3e3851ec 	.word	0x3e3851ec
 8000b14:	3e75c28f 	.word	0x3e75c28f
 8000b18:	3f3ae148 	.word	0x3f3ae148

08000b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b22:	f000 fe19 	bl	8001758 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b26:	f000 f817 	bl	8000b58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b2a:	f000 f913 	bl	8000d54 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b2e:	f000 f87d 	bl	8000c2c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000b32:	f000 f8a9 	bl	8000c88 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000b36:	f000 f8d7 	bl	8000ce8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000b3a:	f007 ff89 	bl	8008a50 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
BSP_ACCELERO_Init();
 8000b3e:	f000 fb75 	bl	800122c <BSP_ACCELERO_Init>
uint8_t id= BSP_ACCELERO_ReadID();
 8000b42:	f000 fbff 	bl	8001344 <BSP_ACCELERO_ReadID>
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {BSP_ACCELERO_GetXYZ(pDataXYZ);
 8000b4a:	4802      	ldr	r0, [pc, #8]	; (8000b54 <main+0x38>)
 8000b4c:	f000 fc12 	bl	8001374 <BSP_ACCELERO_GetXYZ>
 8000b50:	e7fb      	b.n	8000b4a <main+0x2e>
 8000b52:	bf00      	nop
 8000b54:	20000278 	.word	0x20000278

08000b58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b094      	sub	sp, #80	; 0x50
 8000b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5e:	f107 0320 	add.w	r3, r7, #32
 8000b62:	2230      	movs	r2, #48	; 0x30
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f008 fc98 	bl	800949c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b6c:	f107 030c 	add.w	r3, r7, #12
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	4b28      	ldr	r3, [pc, #160]	; (8000c24 <SystemClock_Config+0xcc>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	4a27      	ldr	r2, [pc, #156]	; (8000c24 <SystemClock_Config+0xcc>)
 8000b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8c:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <SystemClock_Config+0xcc>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b98:	2300      	movs	r3, #0
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	4b22      	ldr	r3, [pc, #136]	; (8000c28 <SystemClock_Config+0xd0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a21      	ldr	r2, [pc, #132]	; (8000c28 <SystemClock_Config+0xd0>)
 8000ba2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <SystemClock_Config+0xd0>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bc8:	2308      	movs	r3, #8
 8000bca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bcc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000bd0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bd6:	2307      	movs	r3, #7
 8000bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bda:	f107 0320 	add.w	r3, r7, #32
 8000bde:	4618      	mov	r0, r3
 8000be0:	f003 fa76 	bl	80040d0 <HAL_RCC_OscConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000bea:	f000 f9b1 	bl	8000f50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bee:	230f      	movs	r3, #15
 8000bf0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bfa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bfe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	2105      	movs	r1, #5
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f003 fcd7 	bl	80045c0 <HAL_RCC_ClockConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c18:	f000 f99a 	bl	8000f50 <Error_Handler>
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	3750      	adds	r7, #80	; 0x50
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40007000 	.word	0x40007000

08000c2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c32:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <MX_I2C1_Init+0x54>)
 8000c34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c38:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <MX_I2C1_Init+0x58>)
 8000c3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c68:	4804      	ldr	r0, [pc, #16]	; (8000c7c <MX_I2C1_Init+0x50>)
 8000c6a:	f001 f9cf 	bl	800200c <HAL_I2C_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c74:	f000 f96c 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000184 	.word	0x20000184
 8000c80:	40005400 	.word	0x40005400
 8000c84:	000186a0 	.word	0x000186a0

08000c88 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000c8c:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <MX_I2S3_Init+0x54>)
 8000c8e:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <MX_I2S3_Init+0x58>)
 8000c90:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000c92:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <MX_I2S3_Init+0x54>)
 8000c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c98:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <MX_I2S3_Init+0x54>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_I2S3_Init+0x54>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <MX_I2S3_Init+0x54>)
 8000ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cac:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <MX_I2S3_Init+0x54>)
 8000cb0:	4a0c      	ldr	r2, [pc, #48]	; (8000ce4 <MX_I2S3_Init+0x5c>)
 8000cb2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_I2S3_Init+0x54>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <MX_I2S3_Init+0x54>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_I2S3_Init+0x54>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_I2S3_Init+0x54>)
 8000cc8:	f001 fae4 	bl	8002294 <HAL_I2S_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000cd2:	f000 f93d 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200001d8 	.word	0x200001d8
 8000ce0:	40003c00 	.word	0x40003c00
 8000ce4:	00017700 	.word	0x00017700

08000ce8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <MX_SPI1_Init+0x64>)
 8000cee:	4a18      	ldr	r2, [pc, #96]	; (8000d50 <MX_SPI1_Init+0x68>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <MX_SPI1_Init+0x64>)
 8000cf4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cf8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_SPI1_Init+0x64>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <MX_SPI1_Init+0x64>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <MX_SPI1_Init+0x64>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <MX_SPI1_Init+0x64>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <MX_SPI1_Init+0x64>)
 8000d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <MX_SPI1_Init+0x64>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d20:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <MX_SPI1_Init+0x64>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <MX_SPI1_Init+0x64>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d2c:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <MX_SPI1_Init+0x64>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <MX_SPI1_Init+0x64>)
 8000d34:	220a      	movs	r2, #10
 8000d36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d38:	4804      	ldr	r0, [pc, #16]	; (8000d4c <MX_SPI1_Init+0x64>)
 8000d3a:	f003 ff8d 	bl	8004c58 <HAL_SPI_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d44:	f000 f904 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000220 	.word	0x20000220
 8000d50:	40013000 	.word	0x40013000

08000d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08c      	sub	sp, #48	; 0x30
 8000d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
 8000d6e:	4b72      	ldr	r3, [pc, #456]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a71      	ldr	r2, [pc, #452]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000d74:	f043 0310 	orr.w	r3, r3, #16
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b6f      	ldr	r3, [pc, #444]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0310 	and.w	r3, r3, #16
 8000d82:	61bb      	str	r3, [r7, #24]
 8000d84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	4b6b      	ldr	r3, [pc, #428]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a6a      	ldr	r2, [pc, #424]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000d90:	f043 0304 	orr.w	r3, r3, #4
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b68      	ldr	r3, [pc, #416]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0304 	and.w	r3, r3, #4
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	4b64      	ldr	r3, [pc, #400]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a63      	ldr	r2, [pc, #396]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b61      	ldr	r3, [pc, #388]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b5d      	ldr	r3, [pc, #372]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a5c      	ldr	r2, [pc, #368]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b5a      	ldr	r3, [pc, #360]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	4b56      	ldr	r3, [pc, #344]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a55      	ldr	r2, [pc, #340]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b53      	ldr	r3, [pc, #332]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	4b4f      	ldr	r3, [pc, #316]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a4e      	ldr	r2, [pc, #312]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000e00:	f043 0308 	orr.w	r3, r3, #8
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b4c      	ldr	r3, [pc, #304]	; (8000f38 <MX_GPIO_Init+0x1e4>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0308 	and.w	r3, r3, #8
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2108      	movs	r1, #8
 8000e16:	4849      	ldr	r0, [pc, #292]	; (8000f3c <MX_GPIO_Init+0x1e8>)
 8000e18:	f001 f8de 	bl	8001fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2101      	movs	r1, #1
 8000e20:	4847      	ldr	r0, [pc, #284]	; (8000f40 <MX_GPIO_Init+0x1ec>)
 8000e22:	f001 f8d9 	bl	8001fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e26:	2200      	movs	r2, #0
 8000e28:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000e2c:	4845      	ldr	r0, [pc, #276]	; (8000f44 <MX_GPIO_Init+0x1f0>)
 8000e2e:	f001 f8d3 	bl	8001fd8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000e32:	2308      	movs	r3, #8
 8000e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000e42:	f107 031c 	add.w	r3, r7, #28
 8000e46:	4619      	mov	r1, r3
 8000e48:	483c      	ldr	r0, [pc, #240]	; (8000f3c <MX_GPIO_Init+0x1e8>)
 8000e4a:	f000 fe2d 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	4619      	mov	r1, r3
 8000e64:	4836      	ldr	r0, [pc, #216]	; (8000f40 <MX_GPIO_Init+0x1ec>)
 8000e66:	f000 fe1f 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000e6a:	2308      	movs	r3, #8
 8000e6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e7a:	2305      	movs	r3, #5
 8000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 031c 	add.w	r3, r7, #28
 8000e82:	4619      	mov	r1, r3
 8000e84:	482e      	ldr	r0, [pc, #184]	; (8000f40 <MX_GPIO_Init+0x1ec>)
 8000e86:	f000 fe0f 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e8e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	482a      	ldr	r0, [pc, #168]	; (8000f48 <MX_GPIO_Init+0x1f4>)
 8000ea0:	f000 fe02 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	f107 031c 	add.w	r3, r7, #28
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4825      	ldr	r0, [pc, #148]	; (8000f4c <MX_GPIO_Init+0x1f8>)
 8000eb8:	f000 fdf6 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ec0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ece:	2305      	movs	r3, #5
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	481c      	ldr	r0, [pc, #112]	; (8000f4c <MX_GPIO_Init+0x1f8>)
 8000eda:	f000 fde5 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ede:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000ee2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4813      	ldr	r0, [pc, #76]	; (8000f44 <MX_GPIO_Init+0x1f0>)
 8000ef8:	f000 fdd6 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000efc:	2320      	movs	r3, #32
 8000efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	480d      	ldr	r0, [pc, #52]	; (8000f44 <MX_GPIO_Init+0x1f0>)
 8000f10:	f000 fdca 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000f14:	2302      	movs	r3, #2
 8000f16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f18:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4619      	mov	r1, r3
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <MX_GPIO_Init+0x1e8>)
 8000f2a:	f000 fdbd 	bl	8001aa8 <HAL_GPIO_Init>

}
 8000f2e:	bf00      	nop
 8000f30:	3730      	adds	r7, #48	; 0x30
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40020800 	.word	0x40020800
 8000f44:	40020c00 	.word	0x40020c00
 8000f48:	40020000 	.word	0x40020000
 8000f4c:	40020400 	.word	0x40020400

08000f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
}
 8000f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <Error_Handler+0x8>
	...

08000f5c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000f60:	4819      	ldr	r0, [pc, #100]	; (8000fc8 <SPIx_Init+0x6c>)
 8000f62:	f004 f8cc 	bl	80050fe <HAL_SPI_GetState>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d12a      	bne.n	8000fc2 <SPIx_Init+0x66>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8000f6c:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <SPIx_Init+0x6c>)
 8000f6e:	4a17      	ldr	r2, [pc, #92]	; (8000fcc <SPIx_Init+0x70>)
 8000f70:	601a      	str	r2, [r3, #0]
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <SPIx_Init+0x6c>)
 8000f74:	2218      	movs	r2, #24
 8000f76:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <SPIx_Init+0x6c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <SPIx_Init+0x6c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f84:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <SPIx_Init+0x6c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <SPIx_Init+0x6c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8000f90:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <SPIx_Init+0x6c>)
 8000f92:	2207      	movs	r2, #7
 8000f94:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <SPIx_Init+0x6c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <SPIx_Init+0x6c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <SPIx_Init+0x6c>)
 8000fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fa8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <SPIx_Init+0x6c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <SPIx_Init+0x6c>)
 8000fb2:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fb6:	605a      	str	r2, [r3, #4]

    SPIx_MspInit();
 8000fb8:	f000 f836 	bl	8001028 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <SPIx_Init+0x6c>)
 8000fbe:	f003 fe4b 	bl	8004c58 <HAL_SPI_Init>
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000280 	.word	0x20000280
 8000fcc:	40013000 	.word	0x40013000

08000fd0 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af02      	add	r7, sp, #8
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <SPIx_WriteRead+0x38>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f107 020f 	add.w	r2, r7, #15
 8000fe6:	1df9      	adds	r1, r7, #7
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2301      	movs	r3, #1
 8000fec:	4807      	ldr	r0, [pc, #28]	; (800100c <SPIx_WriteRead+0x3c>)
 8000fee:	f003 fee4 	bl	8004dba <HAL_SPI_TransmitReceive>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8000ff8:	f000 f80a 	bl	8001010 <SPIx_Error>
  }
  
  return receivedbyte;
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000068 	.word	0x20000068
 800100c:	20000280 	.word	0x20000280

08001010 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication bus */
  HAL_SPI_DeInit(&SpiHandle);
 8001014:	4803      	ldr	r0, [pc, #12]	; (8001024 <SPIx_Error+0x14>)
 8001016:	f003 fea8 	bl	8004d6a <HAL_SPI_DeInit>
  
  /* Re-Initialize the SPI communication bus */
  SPIx_Init();
 800101a:	f7ff ff9f 	bl	8000f5c <SPIx_Init>
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000280 	.word	0x20000280

08001028 <SPIx_MspInit>:

/**
  * @brief  SPI MSP Init.
  */
static void SPIx_MspInit(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable the SPI peripheral */
  DISCOVERY_SPIx_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <SPIx_MspInit+0x68>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	4a16      	ldr	r2, [pc, #88]	; (8001090 <SPIx_MspInit+0x68>)
 8001038:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800103c:	6453      	str	r3, [r2, #68]	; 0x44
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <SPIx_MspInit+0x68>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
  
  /* Enable SCK, MOSI and MISO GPIO clocks */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <SPIx_MspInit+0x68>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a0f      	ldr	r2, [pc, #60]	; (8001090 <SPIx_MspInit+0x68>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <SPIx_MspInit+0x68>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
  
  /* SPI SCK, MOSI, MISO pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MISO_PIN | DISCOVERY_SPIx_MOSI_PIN);
 8001066:	23e0      	movs	r3, #224	; 0xe0
 8001068:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
 800106e:	2302      	movs	r3, #2
 8001070:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8001072:	2301      	movs	r3, #1
 8001074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001076:	2305      	movs	r3, #5
 8001078:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	4619      	mov	r1, r3
 8001080:	4804      	ldr	r0, [pc, #16]	; (8001094 <SPIx_MspInit+0x6c>)
 8001082:	f000 fd11 	bl	8001aa8 <HAL_GPIO_Init>
}
 8001086:	bf00      	nop
 8001088:	3720      	adds	r7, #32
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800
 8001094:	40020000 	.word	0x40020000

08001098 <ACCELERO_IO_Init>:

/**
  * @brief  Configures the Accelerometer SPI interface.
  */
void ACCELERO_IO_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Accelerometer Control pins --------------------------------*/
  /* Enable CS GPIO clock and configure GPIO pin for Accelerometer Chip select */  
  ACCELERO_CS_GPIO_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	4b12      	ldr	r3, [pc, #72]	; (80010ec <ACCELERO_IO_Init+0x54>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a11      	ldr	r2, [pc, #68]	; (80010ec <ACCELERO_IO_Init+0x54>)
 80010a8:	f043 0310 	orr.w	r3, r3, #16
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <ACCELERO_IO_Init+0x54>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PIN for LIS Chip select */
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 80010ba:	2308      	movs	r3, #8
 80010bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	2301      	movs	r3, #1
 80010c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 80010c6:	2301      	movs	r3, #1
 80010c8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	4619      	mov	r1, r3
 80010ce:	4808      	ldr	r0, [pc, #32]	; (80010f0 <ACCELERO_IO_Init+0x58>)
 80010d0:	f000 fcea 	bl	8001aa8 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  ACCELERO_CS_HIGH();
 80010d4:	2201      	movs	r2, #1
 80010d6:	2108      	movs	r1, #8
 80010d8:	4805      	ldr	r0, [pc, #20]	; (80010f0 <ACCELERO_IO_Init+0x58>)
 80010da:	f000 ff7d 	bl	8001fd8 <HAL_GPIO_WritePin>
  
  SPIx_Init();
 80010de:	f7ff ff3d 	bl	8000f5c <SPIx_Init>
}
 80010e2:	bf00      	nop
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40021000 	.word	0x40021000

080010f4 <ACCELERO_IO_ITConfig>:
/**
  * @brief  Configures the Accelerometer INT2.
  *         EXTI0 is already used by user button so INT1 is not configured here.
  */
void ACCELERO_IO_ITConfig(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT2 GPIO clock and configure GPIO PINs to detect Interrupts */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	603b      	str	r3, [r7, #0]
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <ACCELERO_IO_ITConfig+0x58>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a12      	ldr	r2, [pc, #72]	; (800114c <ACCELERO_IO_ITConfig+0x58>)
 8001104:	f043 0310 	orr.w	r3, r3, #16
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <ACCELERO_IO_ITConfig+0x58>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0310 	and.w	r3, r3, #16
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT2_PIN;
 8001116:	2302      	movs	r3, #2
 8001118:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800111a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800111e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001120:	2302      	movs	r3, #2
 8001122:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	4619      	mov	r1, r3
 800112c:	4808      	ldr	r0, [pc, #32]	; (8001150 <ACCELERO_IO_ITConfig+0x5c>)
 800112e:	f000 fcbb 	bl	8001aa8 <HAL_GPIO_Init>
  
  /* Enable and set Accelerometer INT2 to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)ACCELERO_INT2_EXTI_IRQn, 0x0F, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	210f      	movs	r1, #15
 8001136:	2007      	movs	r0, #7
 8001138:	f000 fc7f 	bl	8001a3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)ACCELERO_INT2_EXTI_IRQn);
 800113c:	2007      	movs	r0, #7
 800113e:	f000 fc98 	bl	8001a72 <HAL_NVIC_EnableIRQ>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800
 8001150:	40021000 	.word	0x40021000

08001154 <ACCELERO_IO_Write>:
  * @param  pBuffer: pointer to the buffer containing the data to be written to the Accelerometer.
  * @param  WriteAddr: Accelerometer's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void ACCELERO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	70fb      	strb	r3, [r7, #3]
 8001160:	4613      	mov	r3, r2
 8001162:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
     - When 0, the address will remain unchanged in multiple read/write commands.
     - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8001164:	883b      	ldrh	r3, [r7, #0]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d903      	bls.n	8001172 <ACCELERO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800116a:	78fb      	ldrb	r3, [r7, #3]
 800116c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001170:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 8001172:	2200      	movs	r2, #0
 8001174:	2108      	movs	r1, #8
 8001176:	480f      	ldr	r0, [pc, #60]	; (80011b4 <ACCELERO_IO_Write+0x60>)
 8001178:	f000 ff2e 	bl	8001fd8 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 800117c:	78fb      	ldrb	r3, [r7, #3]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ff26 	bl	8000fd0 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8001184:	e00a      	b.n	800119c <ACCELERO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff20 	bl	8000fd0 <SPIx_WriteRead>
    NumByteToWrite--;
 8001190:	883b      	ldrh	r3, [r7, #0]
 8001192:	3b01      	subs	r3, #1
 8001194:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3301      	adds	r3, #1
 800119a:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 800119c:	883b      	ldrh	r3, [r7, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f1      	bne.n	8001186 <ACCELERO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
 80011a2:	2201      	movs	r2, #1
 80011a4:	2108      	movs	r1, #8
 80011a6:	4803      	ldr	r0, [pc, #12]	; (80011b4 <ACCELERO_IO_Write+0x60>)
 80011a8:	f000 ff16 	bl	8001fd8 <HAL_GPIO_WritePin>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40021000 	.word	0x40021000

080011b8 <ACCELERO_IO_Read>:
  * @param  pBuffer: pointer to the buffer that receives the data read from the Accelerometer.
  * @param  ReadAddr: Accelerometer's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the Accelerometer.
  */
void ACCELERO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	70fb      	strb	r3, [r7, #3]
 80011c4:	4613      	mov	r3, r2
 80011c6:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 80011c8:	883b      	ldrh	r3, [r7, #0]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d904      	bls.n	80011d8 <ACCELERO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80011d4:	70fb      	strb	r3, [r7, #3]
 80011d6:	e003      	b.n	80011e0 <ACCELERO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80011d8:	78fb      	ldrb	r3, [r7, #3]
 80011da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011de:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 80011e0:	2200      	movs	r2, #0
 80011e2:	2108      	movs	r1, #8
 80011e4:	4810      	ldr	r0, [pc, #64]	; (8001228 <ACCELERO_IO_Read+0x70>)
 80011e6:	f000 fef7 	bl	8001fd8 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80011ea:	78fb      	ldrb	r3, [r7, #3]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff feef 	bl	8000fd0 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80011f2:	e00c      	b.n	800120e <ACCELERO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to ACCELEROMETER (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80011f4:	2000      	movs	r0, #0
 80011f6:	f7ff feeb 	bl	8000fd0 <SPIx_WriteRead>
 80011fa:	4603      	mov	r3, r0
 80011fc:	461a      	mov	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8001202:	883b      	ldrh	r3, [r7, #0]
 8001204:	3b01      	subs	r3, #1
 8001206:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3301      	adds	r3, #1
 800120c:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 800120e:	883b      	ldrh	r3, [r7, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1ef      	bne.n	80011f4 <ACCELERO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
 8001214:	2201      	movs	r2, #1
 8001216:	2108      	movs	r1, #8
 8001218:	4803      	ldr	r0, [pc, #12]	; (8001228 <ACCELERO_IO_Read+0x70>)
 800121a:	f000 fedd 	bl	8001fd8 <HAL_GPIO_WritePin>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40021000 	.word	0x40021000

0800122c <BSP_ACCELERO_Init>:
/**
  * @brief  Setx Accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{ 
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8001236:	2300      	movs	r3, #0
 8001238:	82bb      	strh	r3, [r7, #20]
  LIS302DL_InitTypeDef         lis302dl_initstruct;
  LIS302DL_FilterConfigTypeDef lis302dl_filter = {0,0,0};
 800123a:	2300      	movs	r3, #0
 800123c:	723b      	strb	r3, [r7, #8]
 800123e:	2300      	movs	r3, #0
 8001240:	727b      	strb	r3, [r7, #9]
 8001242:	2300      	movs	r3, #0
 8001244:	72bb      	strb	r3, [r7, #10]
  LIS3DSH_InitTypeDef          l1s3dsh_InitStruct;

  if(Lis302dlDrv.ReadID() == I_AM_LIS302DL)
 8001246:	4b3c      	ldr	r3, [pc, #240]	; (8001338 <BSP_ACCELERO_Init+0x10c>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	4798      	blx	r3
 800124c:	4603      	mov	r3, r0
 800124e:	2b3b      	cmp	r3, #59	; 0x3b
 8001250:	d138      	bne.n	80012c4 <BSP_ACCELERO_Init+0x98>
  {
    /* Initialize the accelerometer driver structure */
    AcceleroDrv = &Lis302dlDrv;
 8001252:	4b3a      	ldr	r3, [pc, #232]	; (800133c <BSP_ACCELERO_Init+0x110>)
 8001254:	4a38      	ldr	r2, [pc, #224]	; (8001338 <BSP_ACCELERO_Init+0x10c>)
 8001256:	601a      	str	r2, [r3, #0]

    /* Set configuration of LIS302DL MEMS Accelerometer *********************/
    lis302dl_initstruct.Power_Mode = LIS302DL_LOWPOWERMODE_ACTIVE;
 8001258:	2340      	movs	r3, #64	; 0x40
 800125a:	733b      	strb	r3, [r7, #12]
    lis302dl_initstruct.Output_DataRate = LIS302DL_DATARATE_100;
 800125c:	2300      	movs	r3, #0
 800125e:	737b      	strb	r3, [r7, #13]
    lis302dl_initstruct.Axes_Enable = LIS302DL_XYZ_ENABLE;
 8001260:	2307      	movs	r3, #7
 8001262:	73bb      	strb	r3, [r7, #14]
    lis302dl_initstruct.Full_Scale = LIS302DL_FULLSCALE_2_3;
 8001264:	2300      	movs	r3, #0
 8001266:	73fb      	strb	r3, [r7, #15]
    lis302dl_initstruct.Self_Test = LIS302DL_SELFTEST_NORMAL;
 8001268:	2300      	movs	r3, #0
 800126a:	743b      	strb	r3, [r7, #16]
    
    /* Configure MEMS: data rate, power mode, full scale, self test and axes */
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 800126c:	7b7a      	ldrb	r2, [r7, #13]
 800126e:	7b3b      	ldrb	r3, [r7, #12]
 8001270:	4313      	orrs	r3, r2
 8001272:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test | \
 8001274:	7bfb      	ldrb	r3, [r7, #15]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 8001276:	4313      	orrs	r3, r2
 8001278:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test | \
 800127a:	7c3b      	ldrb	r3, [r7, #16]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 800127c:	4313      	orrs	r3, r2
 800127e:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Axes_Enable);
 8001280:	7bbb      	ldrb	r3, [r7, #14]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 8001282:	4313      	orrs	r3, r2
 8001284:	b2db      	uxtb	r3, r3
 8001286:	82bb      	strh	r3, [r7, #20]
    
    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
 8001288:	4b2c      	ldr	r3, [pc, #176]	; (800133c <BSP_ACCELERO_Init+0x110>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	8aba      	ldrh	r2, [r7, #20]
 8001290:	4610      	mov	r0, r2
 8001292:	4798      	blx	r3
    
    /* MEMS High Pass Filter configuration */
    lis302dl_filter.HighPassFilter_Data_Selection = LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER;
 8001294:	2320      	movs	r3, #32
 8001296:	723b      	strb	r3, [r7, #8]
    lis302dl_filter.HighPassFilter_CutOff_Frequency = LIS302DL_HIGHPASSFILTER_LEVEL_1;
 8001298:	2301      	movs	r3, #1
 800129a:	727b      	strb	r3, [r7, #9]
    lis302dl_filter.HighPassFilter_Interrupt = LIS302DL_HIGHPASSFILTERINTERRUPT_1_2;
 800129c:	230c      	movs	r3, #12
 800129e:	72bb      	strb	r3, [r7, #10]
    
    /* Configure MEMS high pass filter cut-off level, interrupt and data selection bits */                     
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 80012a0:	7a3a      	ldrb	r2, [r7, #8]
                     lis302dl_filter.HighPassFilter_CutOff_Frequency | \
 80012a2:	7a7b      	ldrb	r3, [r7, #9]
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b2da      	uxtb	r2, r3
                     lis302dl_filter.HighPassFilter_Interrupt);
 80012a8:	7abb      	ldrb	r3, [r7, #10]
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AcceleroDrv->FilterConfig(ctrl);
 80012b0:	4b22      	ldr	r3, [pc, #136]	; (800133c <BSP_ACCELERO_Init+0x110>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b6:	8aba      	ldrh	r2, [r7, #20]
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	4610      	mov	r0, r2
 80012bc:	4798      	blx	r3

    ret = ACCELERO_OK;
 80012be:	2300      	movs	r3, #0
 80012c0:	75fb      	strb	r3, [r7, #23]
 80012c2:	e034      	b.n	800132e <BSP_ACCELERO_Init+0x102>
  }
  else if(Lis3dshDrv.ReadID() == I_AM_LIS3DSH)
 80012c4:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <BSP_ACCELERO_Init+0x114>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	4798      	blx	r3
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b3f      	cmp	r3, #63	; 0x3f
 80012ce:	d12c      	bne.n	800132a <BSP_ACCELERO_Init+0xfe>
  {
    /* Initialize the accelerometer driver structure */
    AcceleroDrv = &Lis3dshDrv;
 80012d0:	4b1a      	ldr	r3, [pc, #104]	; (800133c <BSP_ACCELERO_Init+0x110>)
 80012d2:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <BSP_ACCELERO_Init+0x114>)
 80012d4:	601a      	str	r2, [r3, #0]

    /* Set configuration of LIS3DSH MEMS Accelerometer **********************/
    l1s3dsh_InitStruct.Output_DataRate = LIS3DSH_DATARATE_100;
 80012d6:	2360      	movs	r3, #96	; 0x60
 80012d8:	703b      	strb	r3, [r7, #0]
    l1s3dsh_InitStruct.Axes_Enable = LIS3DSH_XYZ_ENABLE;
 80012da:	2307      	movs	r3, #7
 80012dc:	707b      	strb	r3, [r7, #1]
    l1s3dsh_InitStruct.SPI_Wire = LIS3DSH_SERIALINTERFACE_4WIRE;
 80012de:	2300      	movs	r3, #0
 80012e0:	70bb      	strb	r3, [r7, #2]
    l1s3dsh_InitStruct.Self_Test = LIS3DSH_SELFTEST_NORMAL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	70fb      	strb	r3, [r7, #3]
    l1s3dsh_InitStruct.Full_Scale = LIS3DSH_FULLSCALE_2;
 80012e6:	2300      	movs	r3, #0
 80012e8:	713b      	strb	r3, [r7, #4]
    l1s3dsh_InitStruct.Filter_BW = LIS3DSH_FILTER_BW_800;
 80012ea:	2300      	movs	r3, #0
 80012ec:	717b      	strb	r3, [r7, #5]
    
    /* Configure MEMS: power mode(ODR) and axes enable */
    ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate | \
 80012ee:	783a      	ldrb	r2, [r7, #0]
                       l1s3dsh_InitStruct.Axes_Enable);
 80012f0:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate | \
 80012f2:	4313      	orrs	r3, r2
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	82bb      	strh	r3, [r7, #20]
    
    /* Configure MEMS: full scale and self test */
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 80012f8:	78ba      	ldrb	r2, [r7, #2]
                         l1s3dsh_InitStruct.Self_Test   | \
 80012fa:	78fb      	ldrb	r3, [r7, #3]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b2da      	uxtb	r2, r3
                         l1s3dsh_InitStruct.Full_Scale  | \
 8001300:	793b      	ldrb	r3, [r7, #4]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8001302:	4313      	orrs	r3, r2
 8001304:	b2da      	uxtb	r2, r3
                         l1s3dsh_InitStruct.Filter_BW) << 8);
 8001306:	797b      	ldrb	r3, [r7, #5]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8001308:	4313      	orrs	r3, r2
 800130a:	b2db      	uxtb	r3, r3
 800130c:	b29b      	uxth	r3, r3
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	b29a      	uxth	r2, r3
 8001312:	8abb      	ldrh	r3, [r7, #20]
 8001314:	4313      	orrs	r3, r2
 8001316:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <BSP_ACCELERO_Init+0x110>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	8aba      	ldrh	r2, [r7, #20]
 8001320:	4610      	mov	r0, r2
 8001322:	4798      	blx	r3
    
    ret = ACCELERO_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	75fb      	strb	r3, [r7, #23]
 8001328:	e001      	b.n	800132e <BSP_ACCELERO_Init+0x102>
  }

  else
  {
    ret = ACCELERO_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 800132e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000000 	.word	0x20000000
 800133c:	200002d8 	.word	0x200002d8
 8001340:	20000034 	.word	0x20000034

08001344 <BSP_ACCELERO_ReadID>:
/**
  * @brief  Read ID of Accelerometer component.
  * @retval ID
  */
uint8_t BSP_ACCELERO_ReadID(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
  uint8_t id = 0x00;
 800134a:	2300      	movs	r3, #0
 800134c:	71fb      	strb	r3, [r7, #7]

  if(AcceleroDrv->ReadID != NULL)
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <BSP_ACCELERO_ReadID+0x2c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <BSP_ACCELERO_ReadID+0x20>
  {
    id = AcceleroDrv->ReadID();
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <BSP_ACCELERO_ReadID+0x2c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	4798      	blx	r3
 8001360:	4603      	mov	r3, r0
 8001362:	71fb      	strb	r3, [r7, #7]
  }  
  return id;
 8001364:	79fb      	ldrb	r3, [r7, #7]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200002d8 	.word	0x200002d8

08001374 <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.  
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	81fb      	strh	r3, [r7, #14]
  
  if(AcceleroDrv->GetXYZ != NULL)
 8001380:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <BSP_ACCELERO_GetXYZ+0x50>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	2b00      	cmp	r3, #0
 8001388:	d018      	beq.n	80013bc <BSP_ACCELERO_GetXYZ+0x48>
  {   
    AcceleroDrv->GetXYZ(pDataXYZ);
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <BSP_ACCELERO_GetXYZ+0x50>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	4798      	blx	r3
    
    /* Switch X and Y Axes in case of LIS302DL MEMS */
    if(AcceleroDrv == &Lis302dlDrv)
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <BSP_ACCELERO_GetXYZ+0x50>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <BSP_ACCELERO_GetXYZ+0x54>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d10e      	bne.n	80013bc <BSP_ACCELERO_GetXYZ+0x48>
    { 
      SwitchXY  = pDataXYZ[0];
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	801a      	strh	r2, [r3, #0]
      /* Invert Y Axis to be compliant with LIS3DSH MEMS */
      pDataXYZ[1] = -SwitchXY;
 80013ae:	89fb      	ldrh	r3, [r7, #14]
 80013b0:	425b      	negs	r3, r3
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3302      	adds	r3, #2
 80013b8:	b212      	sxth	r2, r2
 80013ba:	801a      	strh	r2, [r3, #0]
    } 
  }
}
 80013bc:	bf00      	nop
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	200002d8 	.word	0x200002d8
 80013c8:	20000000 	.word	0x20000000

080013cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <HAL_MspInit+0x4c>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <HAL_MspInit+0x4c>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e0:	6453      	str	r3, [r2, #68]	; 0x44
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <HAL_MspInit+0x4c>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_MspInit+0x4c>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	4a08      	ldr	r2, [pc, #32]	; (8001418 <HAL_MspInit+0x4c>)
 80013f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fc:	6413      	str	r3, [r2, #64]	; 0x40
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_MspInit+0x4c>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800140a:	2007      	movs	r0, #7
 800140c:	f000 fb0a 	bl	8001a24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40023800 	.word	0x40023800

0800141c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a19      	ldr	r2, [pc, #100]	; (80014a0 <HAL_I2C_MspInit+0x84>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d12c      	bne.n	8001498 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <HAL_I2C_MspInit+0x88>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a17      	ldr	r2, [pc, #92]	; (80014a4 <HAL_I2C_MspInit+0x88>)
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <HAL_I2C_MspInit+0x88>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800145a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800145e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001460:	2312      	movs	r3, #18
 8001462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001464:	2301      	movs	r3, #1
 8001466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2300      	movs	r3, #0
 800146a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800146c:	2304      	movs	r3, #4
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4619      	mov	r1, r3
 8001476:	480c      	ldr	r0, [pc, #48]	; (80014a8 <HAL_I2C_MspInit+0x8c>)
 8001478:	f000 fb16 	bl	8001aa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_I2C_MspInit+0x88>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <HAL_I2C_MspInit+0x88>)
 8001486:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800148a:	6413      	str	r3, [r2, #64]	; 0x40
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_I2C_MspInit+0x88>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001498:	bf00      	nop
 800149a:	3728      	adds	r7, #40	; 0x28
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40005400 	.word	0x40005400
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020400 	.word	0x40020400

080014ac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08e      	sub	sp, #56	; 0x38
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a31      	ldr	r2, [pc, #196]	; (800159c <HAL_I2S_MspInit+0xf0>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d15a      	bne.n	8001592 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80014dc:	2301      	movs	r3, #1
 80014de:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80014e0:	23c0      	movs	r3, #192	; 0xc0
 80014e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80014e4:	2302      	movs	r3, #2
 80014e6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4618      	mov	r0, r3
 80014ee:	f003 fa73 	bl	80049d8 <HAL_RCCEx_PeriphCLKConfig>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80014f8:	f7ff fd2a 	bl	8000f50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014fc:	2300      	movs	r3, #0
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	4b27      	ldr	r3, [pc, #156]	; (80015a0 <HAL_I2S_MspInit+0xf4>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	4a26      	ldr	r2, [pc, #152]	; (80015a0 <HAL_I2S_MspInit+0xf4>)
 8001506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800150a:	6413      	str	r3, [r2, #64]	; 0x40
 800150c:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <HAL_I2S_MspInit+0xf4>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <HAL_I2S_MspInit+0xf4>)
 800151e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001520:	4a1f      	ldr	r2, [pc, #124]	; (80015a0 <HAL_I2S_MspInit+0xf4>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6313      	str	r3, [r2, #48]	; 0x30
 8001528:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <HAL_I2S_MspInit+0xf4>)
 800152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001534:	2300      	movs	r3, #0
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <HAL_I2S_MspInit+0xf4>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153c:	4a18      	ldr	r2, [pc, #96]	; (80015a0 <HAL_I2S_MspInit+0xf4>)
 800153e:	f043 0304 	orr.w	r3, r3, #4
 8001542:	6313      	str	r3, [r2, #48]	; 0x30
 8001544:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <HAL_I2S_MspInit+0xf4>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001550:	2310      	movs	r3, #16
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001560:	2306      	movs	r3, #6
 8001562:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001568:	4619      	mov	r1, r3
 800156a:	480e      	ldr	r0, [pc, #56]	; (80015a4 <HAL_I2S_MspInit+0xf8>)
 800156c:	f000 fa9c 	bl	8001aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001570:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001582:	2306      	movs	r3, #6
 8001584:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158a:	4619      	mov	r1, r3
 800158c:	4806      	ldr	r0, [pc, #24]	; (80015a8 <HAL_I2S_MspInit+0xfc>)
 800158e:	f000 fa8b 	bl	8001aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001592:	bf00      	nop
 8001594:	3738      	adds	r7, #56	; 0x38
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40003c00 	.word	0x40003c00
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020000 	.word	0x40020000
 80015a8:	40020800 	.word	0x40020800

080015ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08a      	sub	sp, #40	; 0x28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a19      	ldr	r2, [pc, #100]	; (8001630 <HAL_SPI_MspInit+0x84>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d12b      	bne.n	8001626 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
 80015d2:	4b18      	ldr	r3, [pc, #96]	; (8001634 <HAL_SPI_MspInit+0x88>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	4a17      	ldr	r2, [pc, #92]	; (8001634 <HAL_SPI_MspInit+0x88>)
 80015d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015dc:	6453      	str	r3, [r2, #68]	; 0x44
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <HAL_SPI_MspInit+0x88>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015e6:	613b      	str	r3, [r7, #16]
 80015e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <HAL_SPI_MspInit+0x88>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a10      	ldr	r2, [pc, #64]	; (8001634 <HAL_SPI_MspInit+0x88>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <HAL_SPI_MspInit+0x88>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001606:	23e0      	movs	r3, #224	; 0xe0
 8001608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	2300      	movs	r3, #0
 8001614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001616:	2305      	movs	r3, #5
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	4805      	ldr	r0, [pc, #20]	; (8001638 <HAL_SPI_MspInit+0x8c>)
 8001622:	f000 fa41 	bl	8001aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001626:	bf00      	nop
 8001628:	3728      	adds	r7, #40	; 0x28
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40013000 	.word	0x40013000
 8001634:	40023800 	.word	0x40023800
 8001638:	40020000 	.word	0x40020000

0800163c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a08      	ldr	r2, [pc, #32]	; (800166c <HAL_SPI_MspDeInit+0x30>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d109      	bne.n	8001662 <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <HAL_SPI_MspDeInit+0x34>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	4a07      	ldr	r2, [pc, #28]	; (8001670 <HAL_SPI_MspDeInit+0x34>)
 8001654:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001658:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 800165a:	21e0      	movs	r1, #224	; 0xe0
 800165c:	4805      	ldr	r0, [pc, #20]	; (8001674 <HAL_SPI_MspDeInit+0x38>)
 800165e:	f000 fbbf 	bl	8001de0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40013000 	.word	0x40013000
 8001670:	40023800 	.word	0x40023800
 8001674:	40020000 	.word	0x40020000

08001678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800167c:	e7fe      	b.n	800167c <NMI_Handler+0x4>

0800167e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001682:	e7fe      	b.n	8001682 <HardFault_Handler+0x4>

08001684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <MemManage_Handler+0x4>

0800168a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <BusFault_Handler+0x4>

08001690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <UsageFault_Handler+0x4>

08001696 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c4:	f000 f89a 	bl	80017fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}

080016cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <OTG_FS_IRQHandler+0x10>)
 80016d2:	f001 fbcf 	bl	8002e74 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200017c0 	.word	0x200017c0

080016e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <SystemInit+0x20>)
 80016e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ea:	4a05      	ldr	r2, [pc, #20]	; (8001700 <SystemInit+0x20>)
 80016ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001704:	f8df d034 	ldr.w	sp, [pc, #52]	; 800173c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001708:	480d      	ldr	r0, [pc, #52]	; (8001740 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800170a:	490e      	ldr	r1, [pc, #56]	; (8001744 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800170c:	4a0e      	ldr	r2, [pc, #56]	; (8001748 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800170e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001710:	e002      	b.n	8001718 <LoopCopyDataInit>

08001712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001716:	3304      	adds	r3, #4

08001718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800171a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800171c:	d3f9      	bcc.n	8001712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171e:	4a0b      	ldr	r2, [pc, #44]	; (800174c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001720:	4c0b      	ldr	r4, [pc, #44]	; (8001750 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001724:	e001      	b.n	800172a <LoopFillZerobss>

08001726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001728:	3204      	adds	r2, #4

0800172a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800172a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800172c:	d3fb      	bcc.n	8001726 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800172e:	f7ff ffd7 	bl	80016e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001732:	f007 fe8f 	bl	8009454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001736:	f7ff f9f1 	bl	8000b1c <main>
  bx  lr    
 800173a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800173c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001744:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001748:	08009534 	.word	0x08009534
  ldr r2, =_sbss
 800174c:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001750:	20001eec 	.word	0x20001eec

08001754 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001754:	e7fe      	b.n	8001754 <ADC_IRQHandler>
	...

08001758 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800175c:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <HAL_Init+0x40>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0d      	ldr	r2, [pc, #52]	; (8001798 <HAL_Init+0x40>)
 8001762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001766:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <HAL_Init+0x40>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <HAL_Init+0x40>)
 800176e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001772:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <HAL_Init+0x40>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a07      	ldr	r2, [pc, #28]	; (8001798 <HAL_Init+0x40>)
 800177a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001780:	2003      	movs	r0, #3
 8001782:	f000 f94f 	bl	8001a24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001786:	2000      	movs	r0, #0
 8001788:	f000 f808 	bl	800179c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800178c:	f7ff fe1e 	bl	80013cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023c00 	.word	0x40023c00

0800179c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_InitTick+0x54>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_InitTick+0x58>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	4619      	mov	r1, r3
 80017ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f967 	bl	8001a8e <HAL_SYSTICK_Config>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e00e      	b.n	80017e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b0f      	cmp	r3, #15
 80017ce:	d80a      	bhi.n	80017e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d0:	2200      	movs	r2, #0
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	f04f 30ff 	mov.w	r0, #4294967295
 80017d8:	f000 f92f 	bl	8001a3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017dc:	4a06      	ldr	r2, [pc, #24]	; (80017f8 <HAL_InitTick+0x5c>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	e000      	b.n	80017e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	2000006c 	.word	0x2000006c
 80017f4:	20000074 	.word	0x20000074
 80017f8:	20000070 	.word	0x20000070

080017fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_IncTick+0x20>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_IncTick+0x24>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4413      	add	r3, r2
 800180c:	4a04      	ldr	r2, [pc, #16]	; (8001820 <HAL_IncTick+0x24>)
 800180e:	6013      	str	r3, [r2, #0]
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20000074 	.word	0x20000074
 8001820:	200002dc 	.word	0x200002dc

08001824 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return uwTick;
 8001828:	4b03      	ldr	r3, [pc, #12]	; (8001838 <HAL_GetTick+0x14>)
 800182a:	681b      	ldr	r3, [r3, #0]
}
 800182c:	4618      	mov	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	200002dc 	.word	0x200002dc

0800183c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001844:	f7ff ffee 	bl	8001824 <HAL_GetTick>
 8001848:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001854:	d005      	beq.n	8001862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001856:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <HAL_Delay+0x44>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	461a      	mov	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4413      	add	r3, r2
 8001860:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001862:	bf00      	nop
 8001864:	f7ff ffde 	bl	8001824 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	429a      	cmp	r2, r3
 8001872:	d8f7      	bhi.n	8001864 <HAL_Delay+0x28>
  {
  }
}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000074 	.word	0x20000074

08001884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a0:	4013      	ands	r3, r2
 80018a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b6:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	60d3      	str	r3, [r2, #12]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d0:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <__NVIC_GetPriorityGrouping+0x18>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	f003 0307 	and.w	r3, r3, #7
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	db0b      	blt.n	8001912 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	f003 021f 	and.w	r2, r3, #31
 8001900:	4907      	ldr	r1, [pc, #28]	; (8001920 <__NVIC_EnableIRQ+0x38>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	2001      	movs	r0, #1
 800190a:	fa00 f202 	lsl.w	r2, r0, r2
 800190e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000e100 	.word	0xe000e100

08001924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001934:	2b00      	cmp	r3, #0
 8001936:	db0a      	blt.n	800194e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	b2da      	uxtb	r2, r3
 800193c:	490c      	ldr	r1, [pc, #48]	; (8001970 <__NVIC_SetPriority+0x4c>)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	0112      	lsls	r2, r2, #4
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	440b      	add	r3, r1
 8001948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800194c:	e00a      	b.n	8001964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4908      	ldr	r1, [pc, #32]	; (8001974 <__NVIC_SetPriority+0x50>)
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	3b04      	subs	r3, #4
 800195c:	0112      	lsls	r2, r2, #4
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	440b      	add	r3, r1
 8001962:	761a      	strb	r2, [r3, #24]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000e100 	.word	0xe000e100
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001978:	b480      	push	{r7}
 800197a:	b089      	sub	sp, #36	; 0x24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f1c3 0307 	rsb	r3, r3, #7
 8001992:	2b04      	cmp	r3, #4
 8001994:	bf28      	it	cs
 8001996:	2304      	movcs	r3, #4
 8001998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3304      	adds	r3, #4
 800199e:	2b06      	cmp	r3, #6
 80019a0:	d902      	bls.n	80019a8 <NVIC_EncodePriority+0x30>
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3b03      	subs	r3, #3
 80019a6:	e000      	b.n	80019aa <NVIC_EncodePriority+0x32>
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	f04f 32ff 	mov.w	r2, #4294967295
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43da      	mvns	r2, r3
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	401a      	ands	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c0:	f04f 31ff 	mov.w	r1, #4294967295
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ca:	43d9      	mvns	r1, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	4313      	orrs	r3, r2
         );
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3724      	adds	r7, #36	; 0x24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019f0:	d301      	bcc.n	80019f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019f2:	2301      	movs	r3, #1
 80019f4:	e00f      	b.n	8001a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019f6:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <SysTick_Config+0x40>)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019fe:	210f      	movs	r1, #15
 8001a00:	f04f 30ff 	mov.w	r0, #4294967295
 8001a04:	f7ff ff8e 	bl	8001924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a08:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <SysTick_Config+0x40>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a0e:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <SysTick_Config+0x40>)
 8001a10:	2207      	movs	r2, #7
 8001a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	e000e010 	.word	0xe000e010

08001a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff ff29 	bl	8001884 <__NVIC_SetPriorityGrouping>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
 8001a46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a4c:	f7ff ff3e 	bl	80018cc <__NVIC_GetPriorityGrouping>
 8001a50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	68b9      	ldr	r1, [r7, #8]
 8001a56:	6978      	ldr	r0, [r7, #20]
 8001a58:	f7ff ff8e 	bl	8001978 <NVIC_EncodePriority>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a62:	4611      	mov	r1, r2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff5d 	bl	8001924 <__NVIC_SetPriority>
}
 8001a6a:	bf00      	nop
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	4603      	mov	r3, r0
 8001a7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff31 	bl	80018e8 <__NVIC_EnableIRQ>
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff ffa2 	bl	80019e0 <SysTick_Config>
 8001a9c:	4603      	mov	r3, r0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b089      	sub	sp, #36	; 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
 8001ac2:	e16b      	b.n	8001d9c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	f040 815a 	bne.w	8001d96 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d005      	beq.n	8001afa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d130      	bne.n	8001b5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	2203      	movs	r2, #3
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b30:	2201      	movs	r2, #1
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	091b      	lsrs	r3, r3, #4
 8001b46:	f003 0201 	and.w	r2, r3, #1
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d017      	beq.n	8001b98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d123      	bne.n	8001bec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	08da      	lsrs	r2, r3, #3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3208      	adds	r2, #8
 8001bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	220f      	movs	r2, #15
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	691a      	ldr	r2, [r3, #16]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	08da      	lsrs	r2, r3, #3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3208      	adds	r2, #8
 8001be6:	69b9      	ldr	r1, [r7, #24]
 8001be8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 0203 	and.w	r2, r3, #3
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 80b4 	beq.w	8001d96 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	4b60      	ldr	r3, [pc, #384]	; (8001db4 <HAL_GPIO_Init+0x30c>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	4a5f      	ldr	r2, [pc, #380]	; (8001db4 <HAL_GPIO_Init+0x30c>)
 8001c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3e:	4b5d      	ldr	r3, [pc, #372]	; (8001db4 <HAL_GPIO_Init+0x30c>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c4a:	4a5b      	ldr	r2, [pc, #364]	; (8001db8 <HAL_GPIO_Init+0x310>)
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	089b      	lsrs	r3, r3, #2
 8001c50:	3302      	adds	r3, #2
 8001c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	220f      	movs	r2, #15
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a52      	ldr	r2, [pc, #328]	; (8001dbc <HAL_GPIO_Init+0x314>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d02b      	beq.n	8001cce <HAL_GPIO_Init+0x226>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a51      	ldr	r2, [pc, #324]	; (8001dc0 <HAL_GPIO_Init+0x318>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d025      	beq.n	8001cca <HAL_GPIO_Init+0x222>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a50      	ldr	r2, [pc, #320]	; (8001dc4 <HAL_GPIO_Init+0x31c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d01f      	beq.n	8001cc6 <HAL_GPIO_Init+0x21e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a4f      	ldr	r2, [pc, #316]	; (8001dc8 <HAL_GPIO_Init+0x320>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d019      	beq.n	8001cc2 <HAL_GPIO_Init+0x21a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a4e      	ldr	r2, [pc, #312]	; (8001dcc <HAL_GPIO_Init+0x324>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d013      	beq.n	8001cbe <HAL_GPIO_Init+0x216>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a4d      	ldr	r2, [pc, #308]	; (8001dd0 <HAL_GPIO_Init+0x328>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d00d      	beq.n	8001cba <HAL_GPIO_Init+0x212>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4c      	ldr	r2, [pc, #304]	; (8001dd4 <HAL_GPIO_Init+0x32c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d007      	beq.n	8001cb6 <HAL_GPIO_Init+0x20e>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a4b      	ldr	r2, [pc, #300]	; (8001dd8 <HAL_GPIO_Init+0x330>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d101      	bne.n	8001cb2 <HAL_GPIO_Init+0x20a>
 8001cae:	2307      	movs	r3, #7
 8001cb0:	e00e      	b.n	8001cd0 <HAL_GPIO_Init+0x228>
 8001cb2:	2308      	movs	r3, #8
 8001cb4:	e00c      	b.n	8001cd0 <HAL_GPIO_Init+0x228>
 8001cb6:	2306      	movs	r3, #6
 8001cb8:	e00a      	b.n	8001cd0 <HAL_GPIO_Init+0x228>
 8001cba:	2305      	movs	r3, #5
 8001cbc:	e008      	b.n	8001cd0 <HAL_GPIO_Init+0x228>
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	e006      	b.n	8001cd0 <HAL_GPIO_Init+0x228>
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e004      	b.n	8001cd0 <HAL_GPIO_Init+0x228>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e002      	b.n	8001cd0 <HAL_GPIO_Init+0x228>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <HAL_GPIO_Init+0x228>
 8001cce:	2300      	movs	r3, #0
 8001cd0:	69fa      	ldr	r2, [r7, #28]
 8001cd2:	f002 0203 	and.w	r2, r2, #3
 8001cd6:	0092      	lsls	r2, r2, #2
 8001cd8:	4093      	lsls	r3, r2
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ce0:	4935      	ldr	r1, [pc, #212]	; (8001db8 <HAL_GPIO_Init+0x310>)
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	089b      	lsrs	r3, r3, #2
 8001ce6:	3302      	adds	r3, #2
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cee:	4b3b      	ldr	r3, [pc, #236]	; (8001ddc <HAL_GPIO_Init+0x334>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d12:	4a32      	ldr	r2, [pc, #200]	; (8001ddc <HAL_GPIO_Init+0x334>)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d18:	4b30      	ldr	r3, [pc, #192]	; (8001ddc <HAL_GPIO_Init+0x334>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d3c:	4a27      	ldr	r2, [pc, #156]	; (8001ddc <HAL_GPIO_Init+0x334>)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d42:	4b26      	ldr	r3, [pc, #152]	; (8001ddc <HAL_GPIO_Init+0x334>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d66:	4a1d      	ldr	r2, [pc, #116]	; (8001ddc <HAL_GPIO_Init+0x334>)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d6c:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <HAL_GPIO_Init+0x334>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d90:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <HAL_GPIO_Init+0x334>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	61fb      	str	r3, [r7, #28]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	2b0f      	cmp	r3, #15
 8001da0:	f67f ae90 	bls.w	8001ac4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001da4:	bf00      	nop
 8001da6:	bf00      	nop
 8001da8:	3724      	adds	r7, #36	; 0x24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40013800 	.word	0x40013800
 8001dbc:	40020000 	.word	0x40020000
 8001dc0:	40020400 	.word	0x40020400
 8001dc4:	40020800 	.word	0x40020800
 8001dc8:	40020c00 	.word	0x40020c00
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40021400 	.word	0x40021400
 8001dd4:	40021800 	.word	0x40021800
 8001dd8:	40021c00 	.word	0x40021c00
 8001ddc:	40013c00 	.word	0x40013c00

08001de0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b087      	sub	sp, #28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	e0cd      	b.n	8001f98 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	f040 80bd 	bne.w	8001f92 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001e18:	4a65      	ldr	r2, [pc, #404]	; (8001fb0 <HAL_GPIO_DeInit+0x1d0>)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	089b      	lsrs	r3, r3, #2
 8001e1e:	3302      	adds	r3, #2
 8001e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e24:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	220f      	movs	r2, #15
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	68ba      	ldr	r2, [r7, #8]
 8001e36:	4013      	ands	r3, r2
 8001e38:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a5d      	ldr	r2, [pc, #372]	; (8001fb4 <HAL_GPIO_DeInit+0x1d4>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d02b      	beq.n	8001e9a <HAL_GPIO_DeInit+0xba>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a5c      	ldr	r2, [pc, #368]	; (8001fb8 <HAL_GPIO_DeInit+0x1d8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d025      	beq.n	8001e96 <HAL_GPIO_DeInit+0xb6>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a5b      	ldr	r2, [pc, #364]	; (8001fbc <HAL_GPIO_DeInit+0x1dc>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d01f      	beq.n	8001e92 <HAL_GPIO_DeInit+0xb2>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a5a      	ldr	r2, [pc, #360]	; (8001fc0 <HAL_GPIO_DeInit+0x1e0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d019      	beq.n	8001e8e <HAL_GPIO_DeInit+0xae>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a59      	ldr	r2, [pc, #356]	; (8001fc4 <HAL_GPIO_DeInit+0x1e4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d013      	beq.n	8001e8a <HAL_GPIO_DeInit+0xaa>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a58      	ldr	r2, [pc, #352]	; (8001fc8 <HAL_GPIO_DeInit+0x1e8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00d      	beq.n	8001e86 <HAL_GPIO_DeInit+0xa6>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a57      	ldr	r2, [pc, #348]	; (8001fcc <HAL_GPIO_DeInit+0x1ec>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d007      	beq.n	8001e82 <HAL_GPIO_DeInit+0xa2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a56      	ldr	r2, [pc, #344]	; (8001fd0 <HAL_GPIO_DeInit+0x1f0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d101      	bne.n	8001e7e <HAL_GPIO_DeInit+0x9e>
 8001e7a:	2307      	movs	r3, #7
 8001e7c:	e00e      	b.n	8001e9c <HAL_GPIO_DeInit+0xbc>
 8001e7e:	2308      	movs	r3, #8
 8001e80:	e00c      	b.n	8001e9c <HAL_GPIO_DeInit+0xbc>
 8001e82:	2306      	movs	r3, #6
 8001e84:	e00a      	b.n	8001e9c <HAL_GPIO_DeInit+0xbc>
 8001e86:	2305      	movs	r3, #5
 8001e88:	e008      	b.n	8001e9c <HAL_GPIO_DeInit+0xbc>
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	e006      	b.n	8001e9c <HAL_GPIO_DeInit+0xbc>
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e004      	b.n	8001e9c <HAL_GPIO_DeInit+0xbc>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e002      	b.n	8001e9c <HAL_GPIO_DeInit+0xbc>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <HAL_GPIO_DeInit+0xbc>
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	f002 0203 	and.w	r2, r2, #3
 8001ea2:	0092      	lsls	r2, r2, #2
 8001ea4:	4093      	lsls	r3, r2
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d132      	bne.n	8001f12 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001eac:	4b49      	ldr	r3, [pc, #292]	; (8001fd4 <HAL_GPIO_DeInit+0x1f4>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	4947      	ldr	r1, [pc, #284]	; (8001fd4 <HAL_GPIO_DeInit+0x1f4>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001eba:	4b46      	ldr	r3, [pc, #280]	; (8001fd4 <HAL_GPIO_DeInit+0x1f4>)
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	4944      	ldr	r1, [pc, #272]	; (8001fd4 <HAL_GPIO_DeInit+0x1f4>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001ec8:	4b42      	ldr	r3, [pc, #264]	; (8001fd4 <HAL_GPIO_DeInit+0x1f4>)
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	4940      	ldr	r1, [pc, #256]	; (8001fd4 <HAL_GPIO_DeInit+0x1f4>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001ed6:	4b3f      	ldr	r3, [pc, #252]	; (8001fd4 <HAL_GPIO_DeInit+0x1f4>)
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	493d      	ldr	r1, [pc, #244]	; (8001fd4 <HAL_GPIO_DeInit+0x1f4>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	220f      	movs	r2, #15
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001ef4:	4a2e      	ldr	r2, [pc, #184]	; (8001fb0 <HAL_GPIO_DeInit+0x1d0>)
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	089b      	lsrs	r3, r3, #2
 8001efa:	3302      	adds	r3, #2
 8001efc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	43da      	mvns	r2, r3
 8001f04:	482a      	ldr	r0, [pc, #168]	; (8001fb0 <HAL_GPIO_DeInit+0x1d0>)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	089b      	lsrs	r3, r3, #2
 8001f0a:	400a      	ands	r2, r1
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	2103      	movs	r1, #3
 8001f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	401a      	ands	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	08da      	lsrs	r2, r3, #3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3208      	adds	r2, #8
 8001f30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	220f      	movs	r2, #15
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	08d2      	lsrs	r2, r2, #3
 8001f48:	4019      	ands	r1, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3208      	adds	r2, #8
 8001f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	2103      	movs	r1, #3
 8001f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	401a      	ands	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	fa01 f303 	lsl.w	r3, r1, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	401a      	ands	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	2103      	movs	r1, #3
 8001f86:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	401a      	ands	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	3301      	adds	r3, #1
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	2b0f      	cmp	r3, #15
 8001f9c:	f67f af2e 	bls.w	8001dfc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	371c      	adds	r7, #28
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40013800 	.word	0x40013800
 8001fb4:	40020000 	.word	0x40020000
 8001fb8:	40020400 	.word	0x40020400
 8001fbc:	40020800 	.word	0x40020800
 8001fc0:	40020c00 	.word	0x40020c00
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40021400 	.word	0x40021400
 8001fcc:	40021800 	.word	0x40021800
 8001fd0:	40021c00 	.word	0x40021c00
 8001fd4:	40013c00 	.word	0x40013c00

08001fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	807b      	strh	r3, [r7, #2]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fe8:	787b      	ldrb	r3, [r7, #1]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fee:	887a      	ldrh	r2, [r7, #2]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ff4:	e003      	b.n	8001ffe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ff6:	887b      	ldrh	r3, [r7, #2]
 8001ff8:	041a      	lsls	r2, r3, #16
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	619a      	str	r2, [r3, #24]
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
	...

0800200c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e12b      	b.n	8002276 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d106      	bne.n	8002038 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff f9f2 	bl	800141c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2224      	movs	r2, #36	; 0x24
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0201 	bic.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800205e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800206e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002070:	f002 fc9e 	bl	80049b0 <HAL_RCC_GetPCLK1Freq>
 8002074:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	4a81      	ldr	r2, [pc, #516]	; (8002280 <HAL_I2C_Init+0x274>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d807      	bhi.n	8002090 <HAL_I2C_Init+0x84>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4a80      	ldr	r2, [pc, #512]	; (8002284 <HAL_I2C_Init+0x278>)
 8002084:	4293      	cmp	r3, r2
 8002086:	bf94      	ite	ls
 8002088:	2301      	movls	r3, #1
 800208a:	2300      	movhi	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	e006      	b.n	800209e <HAL_I2C_Init+0x92>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4a7d      	ldr	r2, [pc, #500]	; (8002288 <HAL_I2C_Init+0x27c>)
 8002094:	4293      	cmp	r3, r2
 8002096:	bf94      	ite	ls
 8002098:	2301      	movls	r3, #1
 800209a:	2300      	movhi	r3, #0
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e0e7      	b.n	8002276 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4a78      	ldr	r2, [pc, #480]	; (800228c <HAL_I2C_Init+0x280>)
 80020aa:	fba2 2303 	umull	r2, r3, r2, r3
 80020ae:	0c9b      	lsrs	r3, r3, #18
 80020b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	4a6a      	ldr	r2, [pc, #424]	; (8002280 <HAL_I2C_Init+0x274>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d802      	bhi.n	80020e0 <HAL_I2C_Init+0xd4>
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	3301      	adds	r3, #1
 80020de:	e009      	b.n	80020f4 <HAL_I2C_Init+0xe8>
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020e6:	fb02 f303 	mul.w	r3, r2, r3
 80020ea:	4a69      	ldr	r2, [pc, #420]	; (8002290 <HAL_I2C_Init+0x284>)
 80020ec:	fba2 2303 	umull	r2, r3, r2, r3
 80020f0:	099b      	lsrs	r3, r3, #6
 80020f2:	3301      	adds	r3, #1
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	430b      	orrs	r3, r1
 80020fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002106:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	495c      	ldr	r1, [pc, #368]	; (8002280 <HAL_I2C_Init+0x274>)
 8002110:	428b      	cmp	r3, r1
 8002112:	d819      	bhi.n	8002148 <HAL_I2C_Init+0x13c>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	1e59      	subs	r1, r3, #1
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002122:	1c59      	adds	r1, r3, #1
 8002124:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002128:	400b      	ands	r3, r1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00a      	beq.n	8002144 <HAL_I2C_Init+0x138>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1e59      	subs	r1, r3, #1
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	fbb1 f3f3 	udiv	r3, r1, r3
 800213c:	3301      	adds	r3, #1
 800213e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002142:	e051      	b.n	80021e8 <HAL_I2C_Init+0x1dc>
 8002144:	2304      	movs	r3, #4
 8002146:	e04f      	b.n	80021e8 <HAL_I2C_Init+0x1dc>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d111      	bne.n	8002174 <HAL_I2C_Init+0x168>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1e58      	subs	r0, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6859      	ldr	r1, [r3, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	440b      	add	r3, r1
 800215e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002162:	3301      	adds	r3, #1
 8002164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002168:	2b00      	cmp	r3, #0
 800216a:	bf0c      	ite	eq
 800216c:	2301      	moveq	r3, #1
 800216e:	2300      	movne	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	e012      	b.n	800219a <HAL_I2C_Init+0x18e>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	1e58      	subs	r0, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6859      	ldr	r1, [r3, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	0099      	lsls	r1, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	fbb0 f3f3 	udiv	r3, r0, r3
 800218a:	3301      	adds	r3, #1
 800218c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002190:	2b00      	cmp	r3, #0
 8002192:	bf0c      	ite	eq
 8002194:	2301      	moveq	r3, #1
 8002196:	2300      	movne	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_I2C_Init+0x196>
 800219e:	2301      	movs	r3, #1
 80021a0:	e022      	b.n	80021e8 <HAL_I2C_Init+0x1dc>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10e      	bne.n	80021c8 <HAL_I2C_Init+0x1bc>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	1e58      	subs	r0, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6859      	ldr	r1, [r3, #4]
 80021b2:	460b      	mov	r3, r1
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	440b      	add	r3, r1
 80021b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80021bc:	3301      	adds	r3, #1
 80021be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021c6:	e00f      	b.n	80021e8 <HAL_I2C_Init+0x1dc>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	1e58      	subs	r0, r3, #1
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6859      	ldr	r1, [r3, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	0099      	lsls	r1, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	fbb0 f3f3 	udiv	r3, r0, r3
 80021de:	3301      	adds	r3, #1
 80021e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	6809      	ldr	r1, [r1, #0]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69da      	ldr	r2, [r3, #28]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002216:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6911      	ldr	r1, [r2, #16]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68d2      	ldr	r2, [r2, #12]
 8002222:	4311      	orrs	r1, r2
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	430b      	orrs	r3, r1
 800222a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	695a      	ldr	r2, [r3, #20]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0201 	orr.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2220      	movs	r2, #32
 8002262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	000186a0 	.word	0x000186a0
 8002284:	001e847f 	.word	0x001e847f
 8002288:	003d08ff 	.word	0x003d08ff
 800228c:	431bde83 	.word	0x431bde83
 8002290:	10624dd3 	.word	0x10624dd3

08002294 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b088      	sub	sp, #32
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e128      	b.n	80024f8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d109      	bne.n	80022c6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a90      	ldr	r2, [pc, #576]	; (8002500 <HAL_I2S_Init+0x26c>)
 80022be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff f8f3 	bl	80014ac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2202      	movs	r2, #2
 80022ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6812      	ldr	r2, [r2, #0]
 80022d8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80022dc:	f023 030f 	bic.w	r3, r3, #15
 80022e0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2202      	movs	r2, #2
 80022e8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d060      	beq.n	80023b4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d102      	bne.n	8002300 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80022fa:	2310      	movs	r3, #16
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	e001      	b.n	8002304 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002300:	2320      	movs	r3, #32
 8002302:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	2b20      	cmp	r3, #32
 800230a:	d802      	bhi.n	8002312 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002312:	2001      	movs	r0, #1
 8002314:	f002 fc42 	bl	8004b9c <HAL_RCCEx_GetPeriphCLKFreq>
 8002318:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002322:	d125      	bne.n	8002370 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d010      	beq.n	800234e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	fbb2 f2f3 	udiv	r2, r2, r3
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	461a      	mov	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	fbb2 f3f3 	udiv	r3, r2, r3
 8002348:	3305      	adds	r3, #5
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	e01f      	b.n	800238e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	fbb2 f2f3 	udiv	r2, r2, r3
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	461a      	mov	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	fbb2 f3f3 	udiv	r3, r2, r3
 800236a:	3305      	adds	r3, #5
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	e00e      	b.n	800238e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	fbb2 f2f3 	udiv	r2, r2, r3
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	461a      	mov	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	fbb2 f3f3 	udiv	r3, r2, r3
 800238a:	3305      	adds	r3, #5
 800238c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4a5c      	ldr	r2, [pc, #368]	; (8002504 <HAL_I2S_Init+0x270>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	08db      	lsrs	r3, r3, #3
 8002398:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	085b      	lsrs	r3, r3, #1
 80023aa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	021b      	lsls	r3, r3, #8
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	e003      	b.n	80023bc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80023b4:	2302      	movs	r3, #2
 80023b6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d902      	bls.n	80023c8 <HAL_I2S_Init+0x134>
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	2bff      	cmp	r3, #255	; 0xff
 80023c6:	d907      	bls.n	80023d8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023cc:	f043 0210 	orr.w	r2, r3, #16
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e08f      	b.n	80024f8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	ea42 0103 	orr.w	r1, r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	69fa      	ldr	r2, [r7, #28]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80023f6:	f023 030f 	bic.w	r3, r3, #15
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6851      	ldr	r1, [r2, #4]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6892      	ldr	r2, [r2, #8]
 8002402:	4311      	orrs	r1, r2
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	68d2      	ldr	r2, [r2, #12]
 8002408:	4311      	orrs	r1, r2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6992      	ldr	r2, [r2, #24]
 800240e:	430a      	orrs	r2, r1
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800241a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d161      	bne.n	80024e8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a38      	ldr	r2, [pc, #224]	; (8002508 <HAL_I2S_Init+0x274>)
 8002428:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a37      	ldr	r2, [pc, #220]	; (800250c <HAL_I2S_Init+0x278>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d101      	bne.n	8002438 <HAL_I2S_Init+0x1a4>
 8002434:	4b36      	ldr	r3, [pc, #216]	; (8002510 <HAL_I2S_Init+0x27c>)
 8002436:	e001      	b.n	800243c <HAL_I2S_Init+0x1a8>
 8002438:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6812      	ldr	r2, [r2, #0]
 8002442:	4932      	ldr	r1, [pc, #200]	; (800250c <HAL_I2S_Init+0x278>)
 8002444:	428a      	cmp	r2, r1
 8002446:	d101      	bne.n	800244c <HAL_I2S_Init+0x1b8>
 8002448:	4a31      	ldr	r2, [pc, #196]	; (8002510 <HAL_I2S_Init+0x27c>)
 800244a:	e001      	b.n	8002450 <HAL_I2S_Init+0x1bc>
 800244c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002450:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002454:	f023 030f 	bic.w	r3, r3, #15
 8002458:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a2b      	ldr	r2, [pc, #172]	; (800250c <HAL_I2S_Init+0x278>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d101      	bne.n	8002468 <HAL_I2S_Init+0x1d4>
 8002464:	4b2a      	ldr	r3, [pc, #168]	; (8002510 <HAL_I2S_Init+0x27c>)
 8002466:	e001      	b.n	800246c <HAL_I2S_Init+0x1d8>
 8002468:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800246c:	2202      	movs	r2, #2
 800246e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a25      	ldr	r2, [pc, #148]	; (800250c <HAL_I2S_Init+0x278>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d101      	bne.n	800247e <HAL_I2S_Init+0x1ea>
 800247a:	4b25      	ldr	r3, [pc, #148]	; (8002510 <HAL_I2S_Init+0x27c>)
 800247c:	e001      	b.n	8002482 <HAL_I2S_Init+0x1ee>
 800247e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800248e:	d003      	beq.n	8002498 <HAL_I2S_Init+0x204>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d103      	bne.n	80024a0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	e001      	b.n	80024a4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80024a0:	2300      	movs	r3, #0
 80024a2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80024ae:	4313      	orrs	r3, r2
 80024b0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80024b8:	4313      	orrs	r3, r2
 80024ba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80024c2:	4313      	orrs	r3, r2
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	897b      	ldrh	r3, [r7, #10]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024d0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a0d      	ldr	r2, [pc, #52]	; (800250c <HAL_I2S_Init+0x278>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d101      	bne.n	80024e0 <HAL_I2S_Init+0x24c>
 80024dc:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <HAL_I2S_Init+0x27c>)
 80024de:	e001      	b.n	80024e4 <HAL_I2S_Init+0x250>
 80024e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024e4:	897a      	ldrh	r2, [r7, #10]
 80024e6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3720      	adds	r7, #32
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	0800260b 	.word	0x0800260b
 8002504:	cccccccd 	.word	0xcccccccd
 8002508:	08002721 	.word	0x08002721
 800250c:	40003800 	.word	0x40003800
 8002510:	40003400 	.word	0x40003400

08002514 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	881a      	ldrh	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	1c9a      	adds	r2, r3, #2
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002572:	b29b      	uxth	r3, r3
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002580:	b29b      	uxth	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10e      	bne.n	80025a4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002594:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff ffb8 	bl	8002514 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80025a4:	bf00      	nop
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025be:	b292      	uxth	r2, r2
 80025c0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c6:	1c9a      	adds	r2, r3, #2
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80025de:	b29b      	uxth	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10e      	bne.n	8002602 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80025f2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff ff93 	bl	8002528 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b086      	sub	sp, #24
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b04      	cmp	r3, #4
 8002624:	d13a      	bne.n	800269c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b01      	cmp	r3, #1
 800262e:	d109      	bne.n	8002644 <I2S_IRQHandler+0x3a>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263a:	2b40      	cmp	r3, #64	; 0x40
 800263c:	d102      	bne.n	8002644 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff ffb4 	bl	80025ac <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264a:	2b40      	cmp	r3, #64	; 0x40
 800264c:	d126      	bne.n	800269c <I2S_IRQHandler+0x92>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 0320 	and.w	r3, r3, #32
 8002658:	2b20      	cmp	r3, #32
 800265a:	d11f      	bne.n	800269c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800266a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800266c:	2300      	movs	r3, #0
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	f043 0202 	orr.w	r2, r3, #2
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff ff50 	bl	800253c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d136      	bne.n	8002716 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d109      	bne.n	80026c6 <I2S_IRQHandler+0xbc>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026bc:	2b80      	cmp	r3, #128	; 0x80
 80026be:	d102      	bne.n	80026c6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff ff45 	bl	8002550 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d122      	bne.n	8002716 <I2S_IRQHandler+0x10c>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 0320 	and.w	r3, r3, #32
 80026da:	2b20      	cmp	r3, #32
 80026dc:	d11b      	bne.n	8002716 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80026ec:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002708:	f043 0204 	orr.w	r2, r3, #4
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff ff13 	bl	800253c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002716:	bf00      	nop
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a92      	ldr	r2, [pc, #584]	; (8002980 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d101      	bne.n	800273e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800273a:	4b92      	ldr	r3, [pc, #584]	; (8002984 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800273c:	e001      	b.n	8002742 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800273e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a8b      	ldr	r2, [pc, #556]	; (8002980 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d101      	bne.n	800275c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002758:	4b8a      	ldr	r3, [pc, #552]	; (8002984 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800275a:	e001      	b.n	8002760 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800275c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800276c:	d004      	beq.n	8002778 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	f040 8099 	bne.w	80028aa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b02      	cmp	r3, #2
 8002780:	d107      	bne.n	8002792 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f925 	bl	80029dc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b01      	cmp	r3, #1
 800279a:	d107      	bne.n	80027ac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f9c8 	bl	8002b3c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b2:	2b40      	cmp	r3, #64	; 0x40
 80027b4:	d13a      	bne.n	800282c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	f003 0320 	and.w	r3, r3, #32
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d035      	beq.n	800282c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a6e      	ldr	r2, [pc, #440]	; (8002980 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d101      	bne.n	80027ce <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80027ca:	4b6e      	ldr	r3, [pc, #440]	; (8002984 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80027cc:	e001      	b.n	80027d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80027ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4969      	ldr	r1, [pc, #420]	; (8002980 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80027da:	428b      	cmp	r3, r1
 80027dc:	d101      	bne.n	80027e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80027de:	4b69      	ldr	r3, [pc, #420]	; (8002984 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80027e0:	e001      	b.n	80027e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80027e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027ea:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027fa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80027fc:	2300      	movs	r3, #0
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	f043 0202 	orr.w	r2, r3, #2
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff fe88 	bl	800253c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b08      	cmp	r3, #8
 8002834:	f040 80c3 	bne.w	80029be <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f003 0320 	and.w	r3, r3, #32
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 80bd 	beq.w	80029be <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002852:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a49      	ldr	r2, [pc, #292]	; (8002980 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d101      	bne.n	8002862 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800285e:	4b49      	ldr	r3, [pc, #292]	; (8002984 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002860:	e001      	b.n	8002866 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002862:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4944      	ldr	r1, [pc, #272]	; (8002980 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800286e:	428b      	cmp	r3, r1
 8002870:	d101      	bne.n	8002876 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002872:	4b44      	ldr	r3, [pc, #272]	; (8002984 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002874:	e001      	b.n	800287a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002876:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800287a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800287e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002880:	2300      	movs	r3, #0
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	f043 0204 	orr.w	r2, r3, #4
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff fe4a 	bl	800253c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80028a8:	e089      	b.n	80029be <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d107      	bne.n	80028c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f8be 	bl	8002a40 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d107      	bne.n	80028de <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d002      	beq.n	80028de <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f8fd 	bl	8002ad8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e4:	2b40      	cmp	r3, #64	; 0x40
 80028e6:	d12f      	bne.n	8002948 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f003 0320 	and.w	r3, r3, #32
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d02a      	beq.n	8002948 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002900:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a1e      	ldr	r2, [pc, #120]	; (8002980 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d101      	bne.n	8002910 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800290c:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800290e:	e001      	b.n	8002914 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002910:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4919      	ldr	r1, [pc, #100]	; (8002980 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800291c:	428b      	cmp	r3, r1
 800291e:	d101      	bne.n	8002924 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002920:	4b18      	ldr	r3, [pc, #96]	; (8002984 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002922:	e001      	b.n	8002928 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002924:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002928:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800292c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293a:	f043 0202 	orr.w	r2, r3, #2
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff fdfa 	bl	800253c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b08      	cmp	r3, #8
 8002950:	d136      	bne.n	80029c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	f003 0320 	and.w	r3, r3, #32
 8002958:	2b00      	cmp	r3, #0
 800295a:	d031      	beq.n	80029c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a07      	ldr	r2, [pc, #28]	; (8002980 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d101      	bne.n	800296a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002966:	4b07      	ldr	r3, [pc, #28]	; (8002984 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002968:	e001      	b.n	800296e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800296a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4902      	ldr	r1, [pc, #8]	; (8002980 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002976:	428b      	cmp	r3, r1
 8002978:	d106      	bne.n	8002988 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800297a:	4b02      	ldr	r3, [pc, #8]	; (8002984 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800297c:	e006      	b.n	800298c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800297e:	bf00      	nop
 8002980:	40003800 	.word	0x40003800
 8002984:	40003400 	.word	0x40003400
 8002988:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800298c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002990:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029a0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	f043 0204 	orr.w	r2, r3, #4
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff fdc0 	bl	800253c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80029bc:	e000      	b.n	80029c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80029be:	bf00      	nop
}
 80029c0:	bf00      	nop
 80029c2:	3720      	adds	r7, #32
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	1c99      	adds	r1, r3, #2
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6251      	str	r1, [r2, #36]	; 0x24
 80029ee:	881a      	ldrh	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d113      	bne.n	8002a36 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a1c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d106      	bne.n	8002a36 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff ffc9 	bl	80029c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	1c99      	adds	r1, r3, #2
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6251      	str	r1, [r2, #36]	; 0x24
 8002a52:	8819      	ldrh	r1, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a1d      	ldr	r2, [pc, #116]	; (8002ad0 <I2SEx_TxISR_I2SExt+0x90>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d101      	bne.n	8002a62 <I2SEx_TxISR_I2SExt+0x22>
 8002a5e:	4b1d      	ldr	r3, [pc, #116]	; (8002ad4 <I2SEx_TxISR_I2SExt+0x94>)
 8002a60:	e001      	b.n	8002a66 <I2SEx_TxISR_I2SExt+0x26>
 8002a62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a66:	460a      	mov	r2, r1
 8002a68:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	3b01      	subs	r3, #1
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d121      	bne.n	8002ac6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a12      	ldr	r2, [pc, #72]	; (8002ad0 <I2SEx_TxISR_I2SExt+0x90>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d101      	bne.n	8002a90 <I2SEx_TxISR_I2SExt+0x50>
 8002a8c:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <I2SEx_TxISR_I2SExt+0x94>)
 8002a8e:	e001      	b.n	8002a94 <I2SEx_TxISR_I2SExt+0x54>
 8002a90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	490d      	ldr	r1, [pc, #52]	; (8002ad0 <I2SEx_TxISR_I2SExt+0x90>)
 8002a9c:	428b      	cmp	r3, r1
 8002a9e:	d101      	bne.n	8002aa4 <I2SEx_TxISR_I2SExt+0x64>
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <I2SEx_TxISR_I2SExt+0x94>)
 8002aa2:	e001      	b.n	8002aa8 <I2SEx_TxISR_I2SExt+0x68>
 8002aa4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002aa8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002aac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d106      	bne.n	8002ac6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff ff81 	bl	80029c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40003800 	.word	0x40003800
 8002ad4:	40003400 	.word	0x40003400

08002ad8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68d8      	ldr	r0, [r3, #12]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	1c99      	adds	r1, r3, #2
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002af0:	b282      	uxth	r2, r0
 8002af2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d113      	bne.n	8002b34 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b1a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d106      	bne.n	8002b34 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff ff4a 	bl	80029c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b34:	bf00      	nop
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a20      	ldr	r2, [pc, #128]	; (8002bcc <I2SEx_RxISR_I2SExt+0x90>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d101      	bne.n	8002b52 <I2SEx_RxISR_I2SExt+0x16>
 8002b4e:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <I2SEx_RxISR_I2SExt+0x94>)
 8002b50:	e001      	b.n	8002b56 <I2SEx_RxISR_I2SExt+0x1a>
 8002b52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b56:	68d8      	ldr	r0, [r3, #12]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	1c99      	adds	r1, r3, #2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002b62:	b282      	uxth	r2, r0
 8002b64:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d121      	bne.n	8002bc2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a12      	ldr	r2, [pc, #72]	; (8002bcc <I2SEx_RxISR_I2SExt+0x90>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d101      	bne.n	8002b8c <I2SEx_RxISR_I2SExt+0x50>
 8002b88:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <I2SEx_RxISR_I2SExt+0x94>)
 8002b8a:	e001      	b.n	8002b90 <I2SEx_RxISR_I2SExt+0x54>
 8002b8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	490d      	ldr	r1, [pc, #52]	; (8002bcc <I2SEx_RxISR_I2SExt+0x90>)
 8002b98:	428b      	cmp	r3, r1
 8002b9a:	d101      	bne.n	8002ba0 <I2SEx_RxISR_I2SExt+0x64>
 8002b9c:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <I2SEx_RxISR_I2SExt+0x94>)
 8002b9e:	e001      	b.n	8002ba4 <I2SEx_RxISR_I2SExt+0x68>
 8002ba0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ba4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ba8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d106      	bne.n	8002bc2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff ff03 	bl	80029c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40003800 	.word	0x40003800
 8002bd0:	40003400 	.word	0x40003400

08002bd4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bd6:	b08f      	sub	sp, #60	; 0x3c
 8002bd8:	af0a      	add	r7, sp, #40	; 0x28
 8002bda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e10f      	b.n	8002e06 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d106      	bne.n	8002c06 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f006 f905 	bl	8008e10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2203      	movs	r2, #3
 8002c0a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d102      	bne.n	8002c20 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f002 fc58 	bl	80054da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	603b      	str	r3, [r7, #0]
 8002c30:	687e      	ldr	r6, [r7, #4]
 8002c32:	466d      	mov	r5, sp
 8002c34:	f106 0410 	add.w	r4, r6, #16
 8002c38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c44:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c48:	1d33      	adds	r3, r6, #4
 8002c4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c4c:	6838      	ldr	r0, [r7, #0]
 8002c4e:	f002 fb2f 	bl	80052b0 <USB_CoreInit>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0d0      	b.n	8002e06 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f002 fc46 	bl	80054fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c70:	2300      	movs	r3, #0
 8002c72:	73fb      	strb	r3, [r7, #15]
 8002c74:	e04a      	b.n	8002d0c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c76:	7bfa      	ldrb	r2, [r7, #15]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	333d      	adds	r3, #61	; 0x3d
 8002c86:	2201      	movs	r2, #1
 8002c88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c8a:	7bfa      	ldrb	r2, [r7, #15]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	4413      	add	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	333c      	adds	r3, #60	; 0x3c
 8002c9a:	7bfa      	ldrb	r2, [r7, #15]
 8002c9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
 8002ca2:	b298      	uxth	r0, r3
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	3344      	adds	r3, #68	; 0x44
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cb6:	7bfa      	ldrb	r2, [r7, #15]
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	3340      	adds	r3, #64	; 0x40
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cca:	7bfa      	ldrb	r2, [r7, #15]
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	3348      	adds	r3, #72	; 0x48
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cde:	7bfa      	ldrb	r2, [r7, #15]
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	440b      	add	r3, r1
 8002cec:	334c      	adds	r3, #76	; 0x4c
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cf2:	7bfa      	ldrb	r2, [r7, #15]
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	440b      	add	r3, r1
 8002d00:	3354      	adds	r3, #84	; 0x54
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
 8002d0c:	7bfa      	ldrb	r2, [r7, #15]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d3af      	bcc.n	8002c76 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d16:	2300      	movs	r3, #0
 8002d18:	73fb      	strb	r3, [r7, #15]
 8002d1a:	e044      	b.n	8002da6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d1c:	7bfa      	ldrb	r2, [r7, #15]
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002d2e:	2200      	movs	r2, #0
 8002d30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d32:	7bfa      	ldrb	r2, [r7, #15]
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002d44:	7bfa      	ldrb	r2, [r7, #15]
 8002d46:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d48:	7bfa      	ldrb	r2, [r7, #15]
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d5e:	7bfa      	ldrb	r2, [r7, #15]
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4413      	add	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d74:	7bfa      	ldrb	r2, [r7, #15]
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d8a:	7bfa      	ldrb	r2, [r7, #15]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4413      	add	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
 8002da2:	3301      	adds	r3, #1
 8002da4:	73fb      	strb	r3, [r7, #15]
 8002da6:	7bfa      	ldrb	r2, [r7, #15]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d3b5      	bcc.n	8002d1c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	603b      	str	r3, [r7, #0]
 8002db6:	687e      	ldr	r6, [r7, #4]
 8002db8:	466d      	mov	r5, sp
 8002dba:	f106 0410 	add.w	r4, r6, #16
 8002dbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dca:	e885 0003 	stmia.w	r5, {r0, r1}
 8002dce:	1d33      	adds	r3, r6, #4
 8002dd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dd2:	6838      	ldr	r0, [r7, #0]
 8002dd4:	f002 fbde 	bl	8005594 <USB_DevInit>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d005      	beq.n	8002dea <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2202      	movs	r2, #2
 8002de2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e00d      	b.n	8002e06 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f003 fd2d 	bl	800685e <USB_DevDisconnect>

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e0e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_PCD_Start+0x1c>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e020      	b.n	8002e6c <HAL_PCD_Start+0x5e>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d109      	bne.n	8002e4e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d005      	beq.n	8002e4e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f002 fb30 	bl	80054b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f003 fcdd 	bl	800681c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e74:	b590      	push	{r4, r7, lr}
 8002e76:	b08d      	sub	sp, #52	; 0x34
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f003 fd9b 	bl	80069c6 <USB_GetMode>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f040 848a 	bne.w	80037ac <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f003 fcff 	bl	80068a0 <USB_ReadInterrupts>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 8480 	beq.w	80037aa <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	0a1b      	lsrs	r3, r3, #8
 8002eb4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f003 fcec 	bl	80068a0 <USB_ReadInterrupts>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d107      	bne.n	8002ee2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695a      	ldr	r2, [r3, #20]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f002 0202 	and.w	r2, r2, #2
 8002ee0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f003 fcda 	bl	80068a0 <USB_ReadInterrupts>
 8002eec:	4603      	mov	r3, r0
 8002eee:	f003 0310 	and.w	r3, r3, #16
 8002ef2:	2b10      	cmp	r3, #16
 8002ef4:	d161      	bne.n	8002fba <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699a      	ldr	r2, [r3, #24]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0210 	bic.w	r2, r2, #16
 8002f04:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	f003 020f 	and.w	r2, r3, #15
 8002f12:	4613      	mov	r3, r2
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	4413      	add	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	3304      	adds	r3, #4
 8002f24:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	0c5b      	lsrs	r3, r3, #17
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d124      	bne.n	8002f7c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d035      	beq.n	8002faa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	091b      	lsrs	r3, r3, #4
 8002f46:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	461a      	mov	r2, r3
 8002f50:	6a38      	ldr	r0, [r7, #32]
 8002f52:	f003 fb11 	bl	8006578 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	691a      	ldr	r2, [r3, #16]
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	091b      	lsrs	r3, r3, #4
 8002f5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f62:	441a      	add	r2, r3
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	6a1a      	ldr	r2, [r3, #32]
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	091b      	lsrs	r3, r3, #4
 8002f70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f74:	441a      	add	r2, r3
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	621a      	str	r2, [r3, #32]
 8002f7a:	e016      	b.n	8002faa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	0c5b      	lsrs	r3, r3, #17
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	2b06      	cmp	r3, #6
 8002f86:	d110      	bne.n	8002faa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f8e:	2208      	movs	r2, #8
 8002f90:	4619      	mov	r1, r3
 8002f92:	6a38      	ldr	r0, [r7, #32]
 8002f94:	f003 faf0 	bl	8006578 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	6a1a      	ldr	r2, [r3, #32]
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	091b      	lsrs	r3, r3, #4
 8002fa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fa4:	441a      	add	r2, r3
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	699a      	ldr	r2, [r3, #24]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 0210 	orr.w	r2, r2, #16
 8002fb8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f003 fc6e 	bl	80068a0 <USB_ReadInterrupts>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fce:	f040 80a7 	bne.w	8003120 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f003 fc73 	bl	80068c6 <USB_ReadDevAllOutEpInterrupt>
 8002fe0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002fe2:	e099      	b.n	8003118 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 808e 	beq.w	800310c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f003 fc97 	bl	800692e <USB_ReadDevOutEPInterrupt>
 8003000:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00c      	beq.n	8003026 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	4413      	add	r3, r2
 8003014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003018:	461a      	mov	r2, r3
 800301a:	2301      	movs	r3, #1
 800301c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800301e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 fec3 	bl	8003dac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00c      	beq.n	800304a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	4413      	add	r3, r2
 8003038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800303c:	461a      	mov	r2, r3
 800303e:	2308      	movs	r3, #8
 8003040:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003042:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 ff99 	bl	8003f7c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	2b00      	cmp	r3, #0
 8003052:	d008      	beq.n	8003066 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	4413      	add	r3, r2
 800305c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003060:	461a      	mov	r2, r3
 8003062:	2310      	movs	r3, #16
 8003064:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d030      	beq.n	80030d2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003078:	2b80      	cmp	r3, #128	; 0x80
 800307a:	d109      	bne.n	8003090 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	69fa      	ldr	r2, [r7, #28]
 8003086:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800308a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800308e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003092:	4613      	mov	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	4413      	add	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	4413      	add	r3, r2
 80030a2:	3304      	adds	r3, #4
 80030a4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	78db      	ldrb	r3, [r3, #3]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d108      	bne.n	80030c0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2200      	movs	r2, #0
 80030b2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	4619      	mov	r1, r3
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f005 ffbc 	bl	8009038 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	015a      	lsls	r2, r3, #5
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030cc:	461a      	mov	r2, r3
 80030ce:	2302      	movs	r3, #2
 80030d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f003 0320 	and.w	r3, r3, #32
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d008      	beq.n	80030ee <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e8:	461a      	mov	r2, r3
 80030ea:	2320      	movs	r3, #32
 80030ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d009      	beq.n	800310c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	015a      	lsls	r2, r3, #5
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	4413      	add	r3, r2
 8003100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003104:	461a      	mov	r2, r3
 8003106:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800310a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	3301      	adds	r3, #1
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003114:	085b      	lsrs	r3, r3, #1
 8003116:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311a:	2b00      	cmp	r3, #0
 800311c:	f47f af62 	bne.w	8002fe4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f003 fbbb 	bl	80068a0 <USB_ReadInterrupts>
 800312a:	4603      	mov	r3, r0
 800312c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003130:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003134:	f040 80db 	bne.w	80032ee <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f003 fbdc 	bl	80068fa <USB_ReadDevAllInEpInterrupt>
 8003142:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003148:	e0cd      	b.n	80032e6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800314a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 80c2 	beq.w	80032da <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	4611      	mov	r1, r2
 8003160:	4618      	mov	r0, r3
 8003162:	f003 fc02 	bl	800696a <USB_ReadDevInEPInterrupt>
 8003166:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d057      	beq.n	8003222 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	f003 030f 	and.w	r3, r3, #15
 8003178:	2201      	movs	r2, #1
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	43db      	mvns	r3, r3
 800318c:	69f9      	ldr	r1, [r7, #28]
 800318e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003192:	4013      	ands	r3, r2
 8003194:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	015a      	lsls	r2, r3, #5
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	4413      	add	r3, r2
 800319e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031a2:	461a      	mov	r2, r3
 80031a4:	2301      	movs	r3, #1
 80031a6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d132      	bne.n	8003216 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b4:	4613      	mov	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4413      	add	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	334c      	adds	r3, #76	; 0x4c
 80031c0:	6819      	ldr	r1, [r3, #0]
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c6:	4613      	mov	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4413      	add	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4403      	add	r3, r0
 80031d0:	3348      	adds	r3, #72	; 0x48
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4419      	add	r1, r3
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031da:	4613      	mov	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	4413      	add	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4403      	add	r3, r0
 80031e4:	334c      	adds	r3, #76	; 0x4c
 80031e6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d113      	bne.n	8003216 <HAL_PCD_IRQHandler+0x3a2>
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f2:	4613      	mov	r3, r2
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	4413      	add	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	3354      	adds	r3, #84	; 0x54
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d108      	bne.n	8003216 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6818      	ldr	r0, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800320e:	461a      	mov	r2, r3
 8003210:	2101      	movs	r1, #1
 8003212:	f003 fc09 	bl	8006a28 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	b2db      	uxtb	r3, r3
 800321a:	4619      	mov	r1, r3
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f005 fe86 	bl	8008f2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f003 0308 	and.w	r3, r3, #8
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	4413      	add	r3, r2
 8003234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003238:	461a      	mov	r2, r3
 800323a:	2308      	movs	r3, #8
 800323c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	4413      	add	r3, r2
 8003250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003254:	461a      	mov	r2, r3
 8003256:	2310      	movs	r3, #16
 8003258:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003260:	2b00      	cmp	r3, #0
 8003262:	d008      	beq.n	8003276 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	4413      	add	r3, r2
 800326c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003270:	461a      	mov	r2, r3
 8003272:	2340      	movs	r3, #64	; 0x40
 8003274:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d023      	beq.n	80032c8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003280:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003282:	6a38      	ldr	r0, [r7, #32]
 8003284:	f002 faea 	bl	800585c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800328a:	4613      	mov	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	4413      	add	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	3338      	adds	r3, #56	; 0x38
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	4413      	add	r3, r2
 8003298:	3304      	adds	r3, #4
 800329a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	78db      	ldrb	r3, [r3, #3]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d108      	bne.n	80032b6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	2200      	movs	r2, #0
 80032a8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	4619      	mov	r1, r3
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f005 fed3 	bl	800905c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032c2:	461a      	mov	r2, r3
 80032c4:	2302      	movs	r3, #2
 80032c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80032d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 fcdb 	bl	8003c90 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	3301      	adds	r3, #1
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e2:	085b      	lsrs	r3, r3, #1
 80032e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f47f af2e 	bne.w	800314a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f003 fad4 	bl	80068a0 <USB_ReadInterrupts>
 80032f8:	4603      	mov	r3, r0
 80032fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003302:	d122      	bne.n	800334a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	69fa      	ldr	r2, [r7, #28]
 800330e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003312:	f023 0301 	bic.w	r3, r3, #1
 8003316:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800331e:	2b01      	cmp	r3, #1
 8003320:	d108      	bne.n	8003334 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800332a:	2100      	movs	r1, #0
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 fec3 	bl	80040b8 <HAL_PCDEx_LPM_Callback>
 8003332:	e002      	b.n	800333a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f005 fe71 	bl	800901c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695a      	ldr	r2, [r3, #20]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003348:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f003 faa6 	bl	80068a0 <USB_ReadInterrupts>
 8003354:	4603      	mov	r3, r0
 8003356:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800335a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800335e:	d112      	bne.n	8003386 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b01      	cmp	r3, #1
 800336e:	d102      	bne.n	8003376 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f005 fe2d 	bl	8008fd0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695a      	ldr	r2, [r3, #20]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003384:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f003 fa88 	bl	80068a0 <USB_ReadInterrupts>
 8003390:	4603      	mov	r3, r0
 8003392:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800339a:	f040 80b7 	bne.w	800350c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	69fa      	ldr	r2, [r7, #28]
 80033a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033ac:	f023 0301 	bic.w	r3, r3, #1
 80033b0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2110      	movs	r1, #16
 80033b8:	4618      	mov	r0, r3
 80033ba:	f002 fa4f 	bl	800585c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033be:	2300      	movs	r3, #0
 80033c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033c2:	e046      	b.n	8003452 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80033c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033d0:	461a      	mov	r2, r3
 80033d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033d6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80033d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033e8:	0151      	lsls	r1, r2, #5
 80033ea:	69fa      	ldr	r2, [r7, #28]
 80033ec:	440a      	add	r2, r1
 80033ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80033f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003404:	461a      	mov	r2, r3
 8003406:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800340a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800340c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	4413      	add	r3, r2
 8003414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800341c:	0151      	lsls	r1, r2, #5
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	440a      	add	r2, r1
 8003422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003426:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800342a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800342c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342e:	015a      	lsls	r2, r3, #5
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	4413      	add	r3, r2
 8003434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800343c:	0151      	lsls	r1, r2, #5
 800343e:	69fa      	ldr	r2, [r7, #28]
 8003440:	440a      	add	r2, r1
 8003442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003446:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800344a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800344c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344e:	3301      	adds	r3, #1
 8003450:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003458:	429a      	cmp	r2, r3
 800345a:	d3b3      	bcc.n	80033c4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	69fa      	ldr	r2, [r7, #28]
 8003466:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800346a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800346e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003474:	2b00      	cmp	r3, #0
 8003476:	d016      	beq.n	80034a6 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800347e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003488:	f043 030b 	orr.w	r3, r3, #11
 800348c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003498:	69fa      	ldr	r2, [r7, #28]
 800349a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800349e:	f043 030b 	orr.w	r3, r3, #11
 80034a2:	6453      	str	r3, [r2, #68]	; 0x44
 80034a4:	e015      	b.n	80034d2 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	69fa      	ldr	r2, [r7, #28]
 80034b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034b8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80034bc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	69fa      	ldr	r2, [r7, #28]
 80034c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034cc:	f043 030b 	orr.w	r3, r3, #11
 80034d0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	69fa      	ldr	r2, [r7, #28]
 80034dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034e0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80034e4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034f6:	461a      	mov	r2, r3
 80034f8:	f003 fa96 	bl	8006a28 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695a      	ldr	r2, [r3, #20]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800350a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f003 f9c5 	bl	80068a0 <USB_ReadInterrupts>
 8003516:	4603      	mov	r3, r0
 8003518:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800351c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003520:	d124      	bne.n	800356c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f003 fa5b 	bl	80069e2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f002 fa10 	bl	8005956 <USB_GetDevSpeed>
 8003536:	4603      	mov	r3, r0
 8003538:	461a      	mov	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681c      	ldr	r4, [r3, #0]
 8003542:	f001 fa29 	bl	8004998 <HAL_RCC_GetHCLKFreq>
 8003546:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800354c:	b2db      	uxtb	r3, r3
 800354e:	461a      	mov	r2, r3
 8003550:	4620      	mov	r0, r4
 8003552:	f001 ff0f 	bl	8005374 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f005 fd11 	bl	8008f7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695a      	ldr	r2, [r3, #20]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800356a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f003 f995 	bl	80068a0 <USB_ReadInterrupts>
 8003576:	4603      	mov	r3, r0
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	2b08      	cmp	r3, #8
 800357e:	d10a      	bne.n	8003596 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f005 fcee 	bl	8008f62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695a      	ldr	r2, [r3, #20]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f002 0208 	and.w	r2, r2, #8
 8003594:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f003 f980 	bl	80068a0 <USB_ReadInterrupts>
 80035a0:	4603      	mov	r3, r0
 80035a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a6:	2b80      	cmp	r3, #128	; 0x80
 80035a8:	d122      	bne.n	80035f0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035b6:	2301      	movs	r3, #1
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ba:	e014      	b.n	80035e6 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c0:	4613      	mov	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d105      	bne.n	80035e0 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	4619      	mov	r1, r3
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fb27 	bl	8003c2e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	3301      	adds	r3, #1
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d3e5      	bcc.n	80035bc <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f003 f953 	bl	80068a0 <USB_ReadInterrupts>
 80035fa:	4603      	mov	r3, r0
 80035fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003600:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003604:	d13b      	bne.n	800367e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003606:	2301      	movs	r3, #1
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
 800360a:	e02b      	b.n	8003664 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	4413      	add	r3, r2
 8003614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	3340      	adds	r3, #64	; 0x40
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d115      	bne.n	800365e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003632:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003634:	2b00      	cmp	r3, #0
 8003636:	da12      	bge.n	800365e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363c:	4613      	mov	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	333f      	adds	r3, #63	; 0x3f
 8003648:	2201      	movs	r2, #1
 800364a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	b2db      	uxtb	r3, r3
 8003650:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003654:	b2db      	uxtb	r3, r3
 8003656:	4619      	mov	r1, r3
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 fae8 	bl	8003c2e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	3301      	adds	r3, #1
 8003662:	627b      	str	r3, [r7, #36]	; 0x24
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366a:	429a      	cmp	r2, r3
 800366c:	d3ce      	bcc.n	800360c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	695a      	ldr	r2, [r3, #20]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800367c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f003 f90c 	bl	80068a0 <USB_ReadInterrupts>
 8003688:	4603      	mov	r3, r0
 800368a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800368e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003692:	d155      	bne.n	8003740 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003694:	2301      	movs	r3, #1
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
 8003698:	e045      	b.n	8003726 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ae:	4613      	mov	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d12e      	bne.n	8003720 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80036c2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	da2b      	bge.n	8003720 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80036d4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80036d8:	429a      	cmp	r2, r3
 80036da:	d121      	bne.n	8003720 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e0:	4613      	mov	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4413      	add	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80036ee:	2201      	movs	r2, #1
 80036f0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10a      	bne.n	8003720 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	69fa      	ldr	r2, [r7, #28]
 8003714:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003718:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800371c:	6053      	str	r3, [r2, #4]
            break;
 800371e:	e007      	b.n	8003730 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	3301      	adds	r3, #1
 8003724:	627b      	str	r3, [r7, #36]	; 0x24
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800372c:	429a      	cmp	r2, r3
 800372e:	d3b4      	bcc.n	800369a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695a      	ldr	r2, [r3, #20]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800373e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f003 f8ab 	bl	80068a0 <USB_ReadInterrupts>
 800374a:	4603      	mov	r3, r0
 800374c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003754:	d10a      	bne.n	800376c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f005 fc92 	bl	8009080 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695a      	ldr	r2, [r3, #20]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800376a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f003 f895 	bl	80068a0 <USB_ReadInterrupts>
 8003776:	4603      	mov	r3, r0
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b04      	cmp	r3, #4
 800377e:	d115      	bne.n	80037ac <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f005 fc82 	bl	800909c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6859      	ldr	r1, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	605a      	str	r2, [r3, #4]
 80037a8:	e000      	b.n	80037ac <HAL_PCD_IRQHandler+0x938>
      return;
 80037aa:	bf00      	nop
    }
  }
}
 80037ac:	3734      	adds	r7, #52	; 0x34
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd90      	pop	{r4, r7, pc}

080037b2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b082      	sub	sp, #8
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	460b      	mov	r3, r1
 80037bc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <HAL_PCD_SetAddress+0x1a>
 80037c8:	2302      	movs	r3, #2
 80037ca:	e013      	b.n	80037f4 <HAL_PCD_SetAddress+0x42>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	78fa      	ldrb	r2, [r7, #3]
 80037d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	78fa      	ldrb	r2, [r7, #3]
 80037e2:	4611      	mov	r1, r2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f002 fff3 	bl	80067d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	4608      	mov	r0, r1
 8003806:	4611      	mov	r1, r2
 8003808:	461a      	mov	r2, r3
 800380a:	4603      	mov	r3, r0
 800380c:	70fb      	strb	r3, [r7, #3]
 800380e:	460b      	mov	r3, r1
 8003810:	803b      	strh	r3, [r7, #0]
 8003812:	4613      	mov	r3, r2
 8003814:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003816:	2300      	movs	r3, #0
 8003818:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800381a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800381e:	2b00      	cmp	r3, #0
 8003820:	da0f      	bge.n	8003842 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003822:	78fb      	ldrb	r3, [r7, #3]
 8003824:	f003 020f 	and.w	r2, r3, #15
 8003828:	4613      	mov	r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	4413      	add	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	3338      	adds	r3, #56	; 0x38
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	4413      	add	r3, r2
 8003836:	3304      	adds	r3, #4
 8003838:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	705a      	strb	r2, [r3, #1]
 8003840:	e00f      	b.n	8003862 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003842:	78fb      	ldrb	r3, [r7, #3]
 8003844:	f003 020f 	and.w	r2, r3, #15
 8003848:	4613      	mov	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	4413      	add	r3, r2
 8003858:	3304      	adds	r3, #4
 800385a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003862:	78fb      	ldrb	r3, [r7, #3]
 8003864:	f003 030f 	and.w	r3, r3, #15
 8003868:	b2da      	uxtb	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800386e:	883a      	ldrh	r2, [r7, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	78ba      	ldrb	r2, [r7, #2]
 8003878:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	785b      	ldrb	r3, [r3, #1]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d004      	beq.n	800388c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	b29a      	uxth	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800388c:	78bb      	ldrb	r3, [r7, #2]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d102      	bne.n	8003898 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d101      	bne.n	80038a6 <HAL_PCD_EP_Open+0xaa>
 80038a2:	2302      	movs	r3, #2
 80038a4:	e00e      	b.n	80038c4 <HAL_PCD_EP_Open+0xc8>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68f9      	ldr	r1, [r7, #12]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f002 f873 	bl	80059a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80038c2:	7afb      	ldrb	r3, [r7, #11]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	da0f      	bge.n	8003900 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038e0:	78fb      	ldrb	r3, [r7, #3]
 80038e2:	f003 020f 	and.w	r2, r3, #15
 80038e6:	4613      	mov	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	4413      	add	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	3338      	adds	r3, #56	; 0x38
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	4413      	add	r3, r2
 80038f4:	3304      	adds	r3, #4
 80038f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2201      	movs	r2, #1
 80038fc:	705a      	strb	r2, [r3, #1]
 80038fe:	e00f      	b.n	8003920 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	f003 020f 	and.w	r2, r3, #15
 8003906:	4613      	mov	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	4413      	add	r3, r2
 8003916:	3304      	adds	r3, #4
 8003918:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	b2da      	uxtb	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_PCD_EP_Close+0x6e>
 8003936:	2302      	movs	r3, #2
 8003938:	e00e      	b.n	8003958 <HAL_PCD_EP_Close+0x8c>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68f9      	ldr	r1, [r7, #12]
 8003948:	4618      	mov	r0, r3
 800394a:	f002 f8b1 	bl	8005ab0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	607a      	str	r2, [r7, #4]
 800396a:	603b      	str	r3, [r7, #0]
 800396c:	460b      	mov	r3, r1
 800396e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003970:	7afb      	ldrb	r3, [r7, #11]
 8003972:	f003 020f 	and.w	r2, r3, #15
 8003976:	4613      	mov	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	4413      	add	r3, r2
 8003986:	3304      	adds	r3, #4
 8003988:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2200      	movs	r2, #0
 800399a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	2200      	movs	r2, #0
 80039a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039a2:	7afb      	ldrb	r3, [r7, #11]
 80039a4:	f003 030f 	and.w	r3, r3, #15
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d102      	bne.n	80039bc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039bc:	7afb      	ldrb	r3, [r7, #11]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d109      	bne.n	80039da <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	461a      	mov	r2, r3
 80039d2:	6979      	ldr	r1, [r7, #20]
 80039d4:	f002 fb90 	bl	80060f8 <USB_EP0StartXfer>
 80039d8:	e008      	b.n	80039ec <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6818      	ldr	r0, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	461a      	mov	r2, r3
 80039e6:	6979      	ldr	r1, [r7, #20]
 80039e8:	f002 f93e 	bl	8005c68 <USB_EPStartXfer>
  }

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	460b      	mov	r3, r1
 8003a00:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	f003 020f 	and.w	r2, r3, #15
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4413      	add	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	440b      	add	r3, r1
 8003a14:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003a18:	681b      	ldr	r3, [r3, #0]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b086      	sub	sp, #24
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	60f8      	str	r0, [r7, #12]
 8003a2e:	607a      	str	r2, [r7, #4]
 8003a30:	603b      	str	r3, [r7, #0]
 8003a32:	460b      	mov	r3, r1
 8003a34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a36:	7afb      	ldrb	r3, [r7, #11]
 8003a38:	f003 020f 	and.w	r2, r3, #15
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	3338      	adds	r3, #56	; 0x38
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4413      	add	r3, r2
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	2201      	movs	r2, #1
 8003a64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a66:	7afb      	ldrb	r3, [r7, #11]
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d102      	bne.n	8003a80 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a80:	7afb      	ldrb	r3, [r7, #11]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	461a      	mov	r2, r3
 8003a96:	6979      	ldr	r1, [r7, #20]
 8003a98:	f002 fb2e 	bl	80060f8 <USB_EP0StartXfer>
 8003a9c:	e008      	b.n	8003ab0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	6979      	ldr	r1, [r7, #20]
 8003aac:	f002 f8dc 	bl	8005c68 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b084      	sub	sp, #16
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ac6:	78fb      	ldrb	r3, [r7, #3]
 8003ac8:	f003 020f 	and.w	r2, r3, #15
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d901      	bls.n	8003ad8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e050      	b.n	8003b7a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ad8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	da0f      	bge.n	8003b00 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	f003 020f 	and.w	r2, r3, #15
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	3338      	adds	r3, #56	; 0x38
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	4413      	add	r3, r2
 8003af4:	3304      	adds	r3, #4
 8003af6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2201      	movs	r2, #1
 8003afc:	705a      	strb	r2, [r3, #1]
 8003afe:	e00d      	b.n	8003b1c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b00:	78fa      	ldrb	r2, [r7, #3]
 8003b02:	4613      	mov	r3, r2
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	4413      	add	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	4413      	add	r3, r2
 8003b12:	3304      	adds	r3, #4
 8003b14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b22:	78fb      	ldrb	r3, [r7, #3]
 8003b24:	f003 030f 	and.w	r3, r3, #15
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d101      	bne.n	8003b3c <HAL_PCD_EP_SetStall+0x82>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	e01e      	b.n	8003b7a <HAL_PCD_EP_SetStall+0xc0>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68f9      	ldr	r1, [r7, #12]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f002 fd6c 	bl	8006628 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b50:	78fb      	ldrb	r3, [r7, #3]
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10a      	bne.n	8003b70 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	b2d9      	uxtb	r1, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f002 ff5c 	bl	8006a28 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b084      	sub	sp, #16
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b8e:	78fb      	ldrb	r3, [r7, #3]
 8003b90:	f003 020f 	and.w	r2, r3, #15
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d901      	bls.n	8003ba0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e042      	b.n	8003c26 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ba0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	da0f      	bge.n	8003bc8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ba8:	78fb      	ldrb	r3, [r7, #3]
 8003baa:	f003 020f 	and.w	r2, r3, #15
 8003bae:	4613      	mov	r3, r2
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	4413      	add	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	3338      	adds	r3, #56	; 0x38
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	4413      	add	r3, r2
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	705a      	strb	r2, [r3, #1]
 8003bc6:	e00f      	b.n	8003be8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bc8:	78fb      	ldrb	r3, [r7, #3]
 8003bca:	f003 020f 	and.w	r2, r3, #15
 8003bce:	4613      	mov	r3, r2
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	4413      	add	r3, r2
 8003bde:	3304      	adds	r3, #4
 8003be0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bee:	78fb      	ldrb	r3, [r7, #3]
 8003bf0:	f003 030f 	and.w	r3, r3, #15
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_PCD_EP_ClrStall+0x86>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e00e      	b.n	8003c26 <HAL_PCD_EP_ClrStall+0xa4>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68f9      	ldr	r1, [r7, #12]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f002 fd74 	bl	8006704 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b084      	sub	sp, #16
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
 8003c36:	460b      	mov	r3, r1
 8003c38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003c3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	da0c      	bge.n	8003c5c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c42:	78fb      	ldrb	r3, [r7, #3]
 8003c44:	f003 020f 	and.w	r2, r3, #15
 8003c48:	4613      	mov	r3, r2
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	3338      	adds	r3, #56	; 0x38
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	4413      	add	r3, r2
 8003c56:	3304      	adds	r3, #4
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	e00c      	b.n	8003c76 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c5c:	78fb      	ldrb	r3, [r7, #3]
 8003c5e:	f003 020f 	and.w	r2, r3, #15
 8003c62:	4613      	mov	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	4413      	add	r3, r2
 8003c72:	3304      	adds	r3, #4
 8003c74:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68f9      	ldr	r1, [r7, #12]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f002 fb93 	bl	80063a8 <USB_EPStopXfer>
 8003c82:	4603      	mov	r3, r0
 8003c84:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003c86:	7afb      	ldrb	r3, [r7, #11]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08a      	sub	sp, #40	; 0x28
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	4413      	add	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	3338      	adds	r3, #56	; 0x38
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a1a      	ldr	r2, [r3, #32]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d901      	bls.n	8003cc8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e06c      	b.n	8003da2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	699a      	ldr	r2, [r3, #24]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	69fa      	ldr	r2, [r7, #28]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d902      	bls.n	8003ce4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	3303      	adds	r3, #3
 8003ce8:	089b      	lsrs	r3, r3, #2
 8003cea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cec:	e02b      	b.n	8003d46 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	699a      	ldr	r2, [r3, #24]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	69fa      	ldr	r2, [r7, #28]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d902      	bls.n	8003d0a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	3303      	adds	r3, #3
 8003d0e:	089b      	lsrs	r3, r3, #2
 8003d10:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6919      	ldr	r1, [r3, #16]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	4603      	mov	r3, r0
 8003d28:	6978      	ldr	r0, [r7, #20]
 8003d2a:	f002 fbe7 	bl	80064fc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	691a      	ldr	r2, [r3, #16]
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	441a      	add	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a1a      	ldr	r2, [r3, #32]
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	441a      	add	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d809      	bhi.n	8003d70 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a1a      	ldr	r2, [r3, #32]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d203      	bcs.n	8003d70 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1be      	bne.n	8003cee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	699a      	ldr	r2, [r3, #24]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d811      	bhi.n	8003da0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	2201      	movs	r2, #1
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	43db      	mvns	r3, r3
 8003d96:	6939      	ldr	r1, [r7, #16]
 8003d98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3720      	adds	r7, #32
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
	...

08003dac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b088      	sub	sp, #32
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	333c      	adds	r3, #60	; 0x3c
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d17b      	bne.n	8003eda <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d015      	beq.n	8003e18 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	4a61      	ldr	r2, [pc, #388]	; (8003f74 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	f240 80b9 	bls.w	8003f68 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 80b3 	beq.w	8003f68 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0e:	461a      	mov	r2, r3
 8003e10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e14:	6093      	str	r3, [r2, #8]
 8003e16:	e0a7      	b.n	8003f68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	f003 0320 	and.w	r3, r3, #32
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d009      	beq.n	8003e36 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	015a      	lsls	r2, r3, #5
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2e:	461a      	mov	r2, r3
 8003e30:	2320      	movs	r3, #32
 8003e32:	6093      	str	r3, [r2, #8]
 8003e34:	e098      	b.n	8003f68 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f040 8093 	bne.w	8003f68 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	4a4b      	ldr	r2, [pc, #300]	; (8003f74 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d90f      	bls.n	8003e6a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e60:	461a      	mov	r2, r3
 8003e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e66:	6093      	str	r3, [r2, #8]
 8003e68:	e07e      	b.n	8003f68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	4413      	add	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	69da      	ldr	r2, [r3, #28]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	0159      	lsls	r1, r3, #5
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	440b      	add	r3, r1
 8003e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e96:	1ad2      	subs	r2, r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d114      	bne.n	8003ecc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d109      	bne.n	8003ebe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6818      	ldr	r0, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	f002 fdb6 	bl	8006a28 <USB_EP0_OutStart>
 8003ebc:	e006      	b.n	8003ecc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	691a      	ldr	r2, [r3, #16]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	441a      	add	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f005 f810 	bl	8008ef8 <HAL_PCD_DataOutStageCallback>
 8003ed8:	e046      	b.n	8003f68 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	4a26      	ldr	r2, [pc, #152]	; (8003f78 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d124      	bne.n	8003f2c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00a      	beq.n	8003f02 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef8:	461a      	mov	r2, r3
 8003efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003efe:	6093      	str	r3, [r2, #8]
 8003f00:	e032      	b.n	8003f68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f003 0320 	and.w	r3, r3, #32
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d008      	beq.n	8003f1e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f18:	461a      	mov	r2, r3
 8003f1a:	2320      	movs	r3, #32
 8003f1c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	4619      	mov	r1, r3
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f004 ffe7 	bl	8008ef8 <HAL_PCD_DataOutStageCallback>
 8003f2a:	e01d      	b.n	8003f68 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d114      	bne.n	8003f5c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	4613      	mov	r3, r2
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	440b      	add	r3, r1
 8003f40:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d108      	bne.n	8003f5c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f54:	461a      	mov	r2, r3
 8003f56:	2100      	movs	r1, #0
 8003f58:	f002 fd66 	bl	8006a28 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	4619      	mov	r1, r3
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f004 ffc8 	bl	8008ef8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3720      	adds	r7, #32
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	4f54300a 	.word	0x4f54300a
 8003f78:	4f54310a 	.word	0x4f54310a

08003f7c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	333c      	adds	r3, #60	; 0x3c
 8003f94:	3304      	adds	r3, #4
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4a15      	ldr	r2, [pc, #84]	; (8004004 <PCD_EP_OutSetupPacket_int+0x88>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d90e      	bls.n	8003fd0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d009      	beq.n	8003fd0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc8:	461a      	mov	r2, r3
 8003fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f004 ff7f 	bl	8008ed4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4a0a      	ldr	r2, [pc, #40]	; (8004004 <PCD_EP_OutSetupPacket_int+0x88>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d90c      	bls.n	8003ff8 <PCD_EP_OutSetupPacket_int+0x7c>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d108      	bne.n	8003ff8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	f002 fd18 	bl	8006a28 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	4f54300a 	.word	0x4f54300a

08004008 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	460b      	mov	r3, r1
 8004012:	70fb      	strb	r3, [r7, #3]
 8004014:	4613      	mov	r3, r2
 8004016:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004020:	78fb      	ldrb	r3, [r7, #3]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d107      	bne.n	8004036 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004026:	883b      	ldrh	r3, [r7, #0]
 8004028:	0419      	lsls	r1, r3, #16
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	430a      	orrs	r2, r1
 8004032:	629a      	str	r2, [r3, #40]	; 0x28
 8004034:	e028      	b.n	8004088 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403c:	0c1b      	lsrs	r3, r3, #16
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	4413      	add	r3, r2
 8004042:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004044:	2300      	movs	r3, #0
 8004046:	73fb      	strb	r3, [r7, #15]
 8004048:	e00d      	b.n	8004066 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	7bfb      	ldrb	r3, [r7, #15]
 8004050:	3340      	adds	r3, #64	; 0x40
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	0c1b      	lsrs	r3, r3, #16
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	4413      	add	r3, r2
 800405e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	3301      	adds	r3, #1
 8004064:	73fb      	strb	r3, [r7, #15]
 8004066:	7bfa      	ldrb	r2, [r7, #15]
 8004068:	78fb      	ldrb	r3, [r7, #3]
 800406a:	3b01      	subs	r3, #1
 800406c:	429a      	cmp	r2, r3
 800406e:	d3ec      	bcc.n	800404a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004070:	883b      	ldrh	r3, [r7, #0]
 8004072:	0418      	lsls	r0, r3, #16
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6819      	ldr	r1, [r3, #0]
 8004078:	78fb      	ldrb	r3, [r7, #3]
 800407a:	3b01      	subs	r3, #1
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	4302      	orrs	r2, r0
 8004080:	3340      	adds	r3, #64	; 0x40
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	440b      	add	r3, r1
 8004086:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	460b      	mov	r3, r1
 80040a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	887a      	ldrh	r2, [r7, #2]
 80040a8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e267      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d075      	beq.n	80041da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ee:	4b88      	ldr	r3, [pc, #544]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 030c 	and.w	r3, r3, #12
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d00c      	beq.n	8004114 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040fa:	4b85      	ldr	r3, [pc, #532]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004102:	2b08      	cmp	r3, #8
 8004104:	d112      	bne.n	800412c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004106:	4b82      	ldr	r3, [pc, #520]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800410e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004112:	d10b      	bne.n	800412c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004114:	4b7e      	ldr	r3, [pc, #504]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d05b      	beq.n	80041d8 <HAL_RCC_OscConfig+0x108>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d157      	bne.n	80041d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e242      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004134:	d106      	bne.n	8004144 <HAL_RCC_OscConfig+0x74>
 8004136:	4b76      	ldr	r3, [pc, #472]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a75      	ldr	r2, [pc, #468]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 800413c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	e01d      	b.n	8004180 <HAL_RCC_OscConfig+0xb0>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800414c:	d10c      	bne.n	8004168 <HAL_RCC_OscConfig+0x98>
 800414e:	4b70      	ldr	r3, [pc, #448]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a6f      	ldr	r2, [pc, #444]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	4b6d      	ldr	r3, [pc, #436]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a6c      	ldr	r2, [pc, #432]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	e00b      	b.n	8004180 <HAL_RCC_OscConfig+0xb0>
 8004168:	4b69      	ldr	r3, [pc, #420]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a68      	ldr	r2, [pc, #416]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 800416e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	4b66      	ldr	r3, [pc, #408]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a65      	ldr	r2, [pc, #404]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 800417a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800417e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d013      	beq.n	80041b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004188:	f7fd fb4c 	bl	8001824 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004190:	f7fd fb48 	bl	8001824 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b64      	cmp	r3, #100	; 0x64
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e207      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a2:	4b5b      	ldr	r3, [pc, #364]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0f0      	beq.n	8004190 <HAL_RCC_OscConfig+0xc0>
 80041ae:	e014      	b.n	80041da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b0:	f7fd fb38 	bl	8001824 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041b8:	f7fd fb34 	bl	8001824 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b64      	cmp	r3, #100	; 0x64
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e1f3      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ca:	4b51      	ldr	r3, [pc, #324]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f0      	bne.n	80041b8 <HAL_RCC_OscConfig+0xe8>
 80041d6:	e000      	b.n	80041da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d063      	beq.n	80042ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041e6:	4b4a      	ldr	r3, [pc, #296]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 030c 	and.w	r3, r3, #12
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00b      	beq.n	800420a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041f2:	4b47      	ldr	r3, [pc, #284]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d11c      	bne.n	8004238 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041fe:	4b44      	ldr	r3, [pc, #272]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d116      	bne.n	8004238 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800420a:	4b41      	ldr	r3, [pc, #260]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d005      	beq.n	8004222 <HAL_RCC_OscConfig+0x152>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d001      	beq.n	8004222 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e1c7      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004222:	4b3b      	ldr	r3, [pc, #236]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	4937      	ldr	r1, [pc, #220]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004232:	4313      	orrs	r3, r2
 8004234:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004236:	e03a      	b.n	80042ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d020      	beq.n	8004282 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004240:	4b34      	ldr	r3, [pc, #208]	; (8004314 <HAL_RCC_OscConfig+0x244>)
 8004242:	2201      	movs	r2, #1
 8004244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004246:	f7fd faed 	bl	8001824 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800424e:	f7fd fae9 	bl	8001824 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e1a8      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004260:	4b2b      	ldr	r3, [pc, #172]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f0      	beq.n	800424e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800426c:	4b28      	ldr	r3, [pc, #160]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	4925      	ldr	r1, [pc, #148]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 800427c:	4313      	orrs	r3, r2
 800427e:	600b      	str	r3, [r1, #0]
 8004280:	e015      	b.n	80042ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004282:	4b24      	ldr	r3, [pc, #144]	; (8004314 <HAL_RCC_OscConfig+0x244>)
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004288:	f7fd facc 	bl	8001824 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004290:	f7fd fac8 	bl	8001824 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e187      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042a2:	4b1b      	ldr	r3, [pc, #108]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0308 	and.w	r3, r3, #8
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d036      	beq.n	8004328 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d016      	beq.n	80042f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042c2:	4b15      	ldr	r3, [pc, #84]	; (8004318 <HAL_RCC_OscConfig+0x248>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c8:	f7fd faac 	bl	8001824 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042d0:	f7fd faa8 	bl	8001824 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e167      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042e2:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <HAL_RCC_OscConfig+0x240>)
 80042e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0f0      	beq.n	80042d0 <HAL_RCC_OscConfig+0x200>
 80042ee:	e01b      	b.n	8004328 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042f0:	4b09      	ldr	r3, [pc, #36]	; (8004318 <HAL_RCC_OscConfig+0x248>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f6:	f7fd fa95 	bl	8001824 <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042fc:	e00e      	b.n	800431c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042fe:	f7fd fa91 	bl	8001824 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d907      	bls.n	800431c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e150      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
 8004310:	40023800 	.word	0x40023800
 8004314:	42470000 	.word	0x42470000
 8004318:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800431c:	4b88      	ldr	r3, [pc, #544]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 800431e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1ea      	bne.n	80042fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 8097 	beq.w	8004464 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004336:	2300      	movs	r3, #0
 8004338:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800433a:	4b81      	ldr	r3, [pc, #516]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10f      	bne.n	8004366 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004346:	2300      	movs	r3, #0
 8004348:	60bb      	str	r3, [r7, #8]
 800434a:	4b7d      	ldr	r3, [pc, #500]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	4a7c      	ldr	r2, [pc, #496]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 8004350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004354:	6413      	str	r3, [r2, #64]	; 0x40
 8004356:	4b7a      	ldr	r3, [pc, #488]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435e:	60bb      	str	r3, [r7, #8]
 8004360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004362:	2301      	movs	r3, #1
 8004364:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004366:	4b77      	ldr	r3, [pc, #476]	; (8004544 <HAL_RCC_OscConfig+0x474>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436e:	2b00      	cmp	r3, #0
 8004370:	d118      	bne.n	80043a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004372:	4b74      	ldr	r3, [pc, #464]	; (8004544 <HAL_RCC_OscConfig+0x474>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a73      	ldr	r2, [pc, #460]	; (8004544 <HAL_RCC_OscConfig+0x474>)
 8004378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800437c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800437e:	f7fd fa51 	bl	8001824 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004386:	f7fd fa4d 	bl	8001824 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e10c      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004398:	4b6a      	ldr	r3, [pc, #424]	; (8004544 <HAL_RCC_OscConfig+0x474>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0f0      	beq.n	8004386 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d106      	bne.n	80043ba <HAL_RCC_OscConfig+0x2ea>
 80043ac:	4b64      	ldr	r3, [pc, #400]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b0:	4a63      	ldr	r2, [pc, #396]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	6713      	str	r3, [r2, #112]	; 0x70
 80043b8:	e01c      	b.n	80043f4 <HAL_RCC_OscConfig+0x324>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	2b05      	cmp	r3, #5
 80043c0:	d10c      	bne.n	80043dc <HAL_RCC_OscConfig+0x30c>
 80043c2:	4b5f      	ldr	r3, [pc, #380]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c6:	4a5e      	ldr	r2, [pc, #376]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043c8:	f043 0304 	orr.w	r3, r3, #4
 80043cc:	6713      	str	r3, [r2, #112]	; 0x70
 80043ce:	4b5c      	ldr	r3, [pc, #368]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d2:	4a5b      	ldr	r2, [pc, #364]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043d4:	f043 0301 	orr.w	r3, r3, #1
 80043d8:	6713      	str	r3, [r2, #112]	; 0x70
 80043da:	e00b      	b.n	80043f4 <HAL_RCC_OscConfig+0x324>
 80043dc:	4b58      	ldr	r3, [pc, #352]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e0:	4a57      	ldr	r2, [pc, #348]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043e2:	f023 0301 	bic.w	r3, r3, #1
 80043e6:	6713      	str	r3, [r2, #112]	; 0x70
 80043e8:	4b55      	ldr	r3, [pc, #340]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ec:	4a54      	ldr	r2, [pc, #336]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80043ee:	f023 0304 	bic.w	r3, r3, #4
 80043f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d015      	beq.n	8004428 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fc:	f7fd fa12 	bl	8001824 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004402:	e00a      	b.n	800441a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004404:	f7fd fa0e 	bl	8001824 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004412:	4293      	cmp	r3, r2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e0cb      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800441a:	4b49      	ldr	r3, [pc, #292]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 800441c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0ee      	beq.n	8004404 <HAL_RCC_OscConfig+0x334>
 8004426:	e014      	b.n	8004452 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004428:	f7fd f9fc 	bl	8001824 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800442e:	e00a      	b.n	8004446 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004430:	f7fd f9f8 	bl	8001824 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	f241 3288 	movw	r2, #5000	; 0x1388
 800443e:	4293      	cmp	r3, r2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e0b5      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004446:	4b3e      	ldr	r3, [pc, #248]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 8004448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1ee      	bne.n	8004430 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004452:	7dfb      	ldrb	r3, [r7, #23]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d105      	bne.n	8004464 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004458:	4b39      	ldr	r3, [pc, #228]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	4a38      	ldr	r2, [pc, #224]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 800445e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004462:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 80a1 	beq.w	80045b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800446e:	4b34      	ldr	r3, [pc, #208]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 030c 	and.w	r3, r3, #12
 8004476:	2b08      	cmp	r3, #8
 8004478:	d05c      	beq.n	8004534 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	2b02      	cmp	r3, #2
 8004480:	d141      	bne.n	8004506 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004482:	4b31      	ldr	r3, [pc, #196]	; (8004548 <HAL_RCC_OscConfig+0x478>)
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004488:	f7fd f9cc 	bl	8001824 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004490:	f7fd f9c8 	bl	8001824 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e087      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a2:	4b27      	ldr	r3, [pc, #156]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f0      	bne.n	8004490 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69da      	ldr	r2, [r3, #28]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	019b      	lsls	r3, r3, #6
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c4:	085b      	lsrs	r3, r3, #1
 80044c6:	3b01      	subs	r3, #1
 80044c8:	041b      	lsls	r3, r3, #16
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	061b      	lsls	r3, r3, #24
 80044d2:	491b      	ldr	r1, [pc, #108]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044d8:	4b1b      	ldr	r3, [pc, #108]	; (8004548 <HAL_RCC_OscConfig+0x478>)
 80044da:	2201      	movs	r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044de:	f7fd f9a1 	bl	8001824 <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e6:	f7fd f99d 	bl	8001824 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e05c      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f8:	4b11      	ldr	r3, [pc, #68]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0f0      	beq.n	80044e6 <HAL_RCC_OscConfig+0x416>
 8004504:	e054      	b.n	80045b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004506:	4b10      	ldr	r3, [pc, #64]	; (8004548 <HAL_RCC_OscConfig+0x478>)
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450c:	f7fd f98a 	bl	8001824 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004514:	f7fd f986 	bl	8001824 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e045      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004526:	4b06      	ldr	r3, [pc, #24]	; (8004540 <HAL_RCC_OscConfig+0x470>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0x444>
 8004532:	e03d      	b.n	80045b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d107      	bne.n	800454c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e038      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
 8004540:	40023800 	.word	0x40023800
 8004544:	40007000 	.word	0x40007000
 8004548:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800454c:	4b1b      	ldr	r3, [pc, #108]	; (80045bc <HAL_RCC_OscConfig+0x4ec>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d028      	beq.n	80045ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004564:	429a      	cmp	r2, r3
 8004566:	d121      	bne.n	80045ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004572:	429a      	cmp	r2, r3
 8004574:	d11a      	bne.n	80045ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800457c:	4013      	ands	r3, r2
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004582:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004584:	4293      	cmp	r3, r2
 8004586:	d111      	bne.n	80045ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004592:	085b      	lsrs	r3, r3, #1
 8004594:	3b01      	subs	r3, #1
 8004596:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004598:	429a      	cmp	r2, r3
 800459a:	d107      	bne.n	80045ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d001      	beq.n	80045b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	40023800 	.word	0x40023800

080045c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e0cc      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045d4:	4b68      	ldr	r3, [pc, #416]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d90c      	bls.n	80045fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e2:	4b65      	ldr	r3, [pc, #404]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ea:	4b63      	ldr	r3, [pc, #396]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d001      	beq.n	80045fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0b8      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d020      	beq.n	800464a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004614:	4b59      	ldr	r3, [pc, #356]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	4a58      	ldr	r2, [pc, #352]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 800461a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800461e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800462c:	4b53      	ldr	r3, [pc, #332]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	4a52      	ldr	r2, [pc, #328]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004636:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004638:	4b50      	ldr	r3, [pc, #320]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	494d      	ldr	r1, [pc, #308]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	4313      	orrs	r3, r2
 8004648:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d044      	beq.n	80046e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d107      	bne.n	800466e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800465e:	4b47      	ldr	r3, [pc, #284]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d119      	bne.n	800469e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e07f      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d003      	beq.n	800467e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800467a:	2b03      	cmp	r3, #3
 800467c:	d107      	bne.n	800468e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467e:	4b3f      	ldr	r3, [pc, #252]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d109      	bne.n	800469e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e06f      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800468e:	4b3b      	ldr	r3, [pc, #236]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e067      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800469e:	4b37      	ldr	r3, [pc, #220]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f023 0203 	bic.w	r2, r3, #3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	4934      	ldr	r1, [pc, #208]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046b0:	f7fd f8b8 	bl	8001824 <HAL_GetTick>
 80046b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b6:	e00a      	b.n	80046ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b8:	f7fd f8b4 	bl	8001824 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e04f      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ce:	4b2b      	ldr	r3, [pc, #172]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 020c 	and.w	r2, r3, #12
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	429a      	cmp	r2, r3
 80046de:	d1eb      	bne.n	80046b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046e0:	4b25      	ldr	r3, [pc, #148]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d20c      	bcs.n	8004708 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ee:	4b22      	ldr	r3, [pc, #136]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f6:	4b20      	ldr	r3, [pc, #128]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d001      	beq.n	8004708 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e032      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d008      	beq.n	8004726 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004714:	4b19      	ldr	r3, [pc, #100]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	4916      	ldr	r1, [pc, #88]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	4313      	orrs	r3, r2
 8004724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d009      	beq.n	8004746 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004732:	4b12      	ldr	r3, [pc, #72]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	490e      	ldr	r1, [pc, #56]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	4313      	orrs	r3, r2
 8004744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004746:	f000 f821 	bl	800478c <HAL_RCC_GetSysClockFreq>
 800474a:	4602      	mov	r2, r0
 800474c:	4b0b      	ldr	r3, [pc, #44]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	091b      	lsrs	r3, r3, #4
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	490a      	ldr	r1, [pc, #40]	; (8004780 <HAL_RCC_ClockConfig+0x1c0>)
 8004758:	5ccb      	ldrb	r3, [r1, r3]
 800475a:	fa22 f303 	lsr.w	r3, r2, r3
 800475e:	4a09      	ldr	r2, [pc, #36]	; (8004784 <HAL_RCC_ClockConfig+0x1c4>)
 8004760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004762:	4b09      	ldr	r3, [pc, #36]	; (8004788 <HAL_RCC_ClockConfig+0x1c8>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7fd f818 	bl	800179c <HAL_InitTick>

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40023c00 	.word	0x40023c00
 800477c:	40023800 	.word	0x40023800
 8004780:	0800950c 	.word	0x0800950c
 8004784:	2000006c 	.word	0x2000006c
 8004788:	20000070 	.word	0x20000070

0800478c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800478c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004790:	b094      	sub	sp, #80	; 0x50
 8004792:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004794:	2300      	movs	r3, #0
 8004796:	647b      	str	r3, [r7, #68]	; 0x44
 8004798:	2300      	movs	r3, #0
 800479a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800479c:	2300      	movs	r3, #0
 800479e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047a4:	4b79      	ldr	r3, [pc, #484]	; (800498c <HAL_RCC_GetSysClockFreq+0x200>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 030c 	and.w	r3, r3, #12
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d00d      	beq.n	80047cc <HAL_RCC_GetSysClockFreq+0x40>
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	f200 80e1 	bhi.w	8004978 <HAL_RCC_GetSysClockFreq+0x1ec>
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <HAL_RCC_GetSysClockFreq+0x34>
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d003      	beq.n	80047c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80047be:	e0db      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047c0:	4b73      	ldr	r3, [pc, #460]	; (8004990 <HAL_RCC_GetSysClockFreq+0x204>)
 80047c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80047c4:	e0db      	b.n	800497e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047c6:	4b73      	ldr	r3, [pc, #460]	; (8004994 <HAL_RCC_GetSysClockFreq+0x208>)
 80047c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047ca:	e0d8      	b.n	800497e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047cc:	4b6f      	ldr	r3, [pc, #444]	; (800498c <HAL_RCC_GetSysClockFreq+0x200>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047d6:	4b6d      	ldr	r3, [pc, #436]	; (800498c <HAL_RCC_GetSysClockFreq+0x200>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d063      	beq.n	80048aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047e2:	4b6a      	ldr	r3, [pc, #424]	; (800498c <HAL_RCC_GetSysClockFreq+0x200>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	099b      	lsrs	r3, r3, #6
 80047e8:	2200      	movs	r2, #0
 80047ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80047ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80047ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f4:	633b      	str	r3, [r7, #48]	; 0x30
 80047f6:	2300      	movs	r3, #0
 80047f8:	637b      	str	r3, [r7, #52]	; 0x34
 80047fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80047fe:	4622      	mov	r2, r4
 8004800:	462b      	mov	r3, r5
 8004802:	f04f 0000 	mov.w	r0, #0
 8004806:	f04f 0100 	mov.w	r1, #0
 800480a:	0159      	lsls	r1, r3, #5
 800480c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004810:	0150      	lsls	r0, r2, #5
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	4621      	mov	r1, r4
 8004818:	1a51      	subs	r1, r2, r1
 800481a:	6139      	str	r1, [r7, #16]
 800481c:	4629      	mov	r1, r5
 800481e:	eb63 0301 	sbc.w	r3, r3, r1
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004830:	4659      	mov	r1, fp
 8004832:	018b      	lsls	r3, r1, #6
 8004834:	4651      	mov	r1, sl
 8004836:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800483a:	4651      	mov	r1, sl
 800483c:	018a      	lsls	r2, r1, #6
 800483e:	4651      	mov	r1, sl
 8004840:	ebb2 0801 	subs.w	r8, r2, r1
 8004844:	4659      	mov	r1, fp
 8004846:	eb63 0901 	sbc.w	r9, r3, r1
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	f04f 0300 	mov.w	r3, #0
 8004852:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004856:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800485a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800485e:	4690      	mov	r8, r2
 8004860:	4699      	mov	r9, r3
 8004862:	4623      	mov	r3, r4
 8004864:	eb18 0303 	adds.w	r3, r8, r3
 8004868:	60bb      	str	r3, [r7, #8]
 800486a:	462b      	mov	r3, r5
 800486c:	eb49 0303 	adc.w	r3, r9, r3
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	f04f 0200 	mov.w	r2, #0
 8004876:	f04f 0300 	mov.w	r3, #0
 800487a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800487e:	4629      	mov	r1, r5
 8004880:	024b      	lsls	r3, r1, #9
 8004882:	4621      	mov	r1, r4
 8004884:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004888:	4621      	mov	r1, r4
 800488a:	024a      	lsls	r2, r1, #9
 800488c:	4610      	mov	r0, r2
 800488e:	4619      	mov	r1, r3
 8004890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004892:	2200      	movs	r2, #0
 8004894:	62bb      	str	r3, [r7, #40]	; 0x28
 8004896:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004898:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800489c:	f7fb fc94 	bl	80001c8 <__aeabi_uldivmod>
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	4613      	mov	r3, r2
 80048a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048a8:	e058      	b.n	800495c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048aa:	4b38      	ldr	r3, [pc, #224]	; (800498c <HAL_RCC_GetSysClockFreq+0x200>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	099b      	lsrs	r3, r3, #6
 80048b0:	2200      	movs	r2, #0
 80048b2:	4618      	mov	r0, r3
 80048b4:	4611      	mov	r1, r2
 80048b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048ba:	623b      	str	r3, [r7, #32]
 80048bc:	2300      	movs	r3, #0
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
 80048c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048c4:	4642      	mov	r2, r8
 80048c6:	464b      	mov	r3, r9
 80048c8:	f04f 0000 	mov.w	r0, #0
 80048cc:	f04f 0100 	mov.w	r1, #0
 80048d0:	0159      	lsls	r1, r3, #5
 80048d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048d6:	0150      	lsls	r0, r2, #5
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	4641      	mov	r1, r8
 80048de:	ebb2 0a01 	subs.w	sl, r2, r1
 80048e2:	4649      	mov	r1, r9
 80048e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80048e8:	f04f 0200 	mov.w	r2, #0
 80048ec:	f04f 0300 	mov.w	r3, #0
 80048f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048fc:	ebb2 040a 	subs.w	r4, r2, sl
 8004900:	eb63 050b 	sbc.w	r5, r3, fp
 8004904:	f04f 0200 	mov.w	r2, #0
 8004908:	f04f 0300 	mov.w	r3, #0
 800490c:	00eb      	lsls	r3, r5, #3
 800490e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004912:	00e2      	lsls	r2, r4, #3
 8004914:	4614      	mov	r4, r2
 8004916:	461d      	mov	r5, r3
 8004918:	4643      	mov	r3, r8
 800491a:	18e3      	adds	r3, r4, r3
 800491c:	603b      	str	r3, [r7, #0]
 800491e:	464b      	mov	r3, r9
 8004920:	eb45 0303 	adc.w	r3, r5, r3
 8004924:	607b      	str	r3, [r7, #4]
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	f04f 0300 	mov.w	r3, #0
 800492e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004932:	4629      	mov	r1, r5
 8004934:	028b      	lsls	r3, r1, #10
 8004936:	4621      	mov	r1, r4
 8004938:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800493c:	4621      	mov	r1, r4
 800493e:	028a      	lsls	r2, r1, #10
 8004940:	4610      	mov	r0, r2
 8004942:	4619      	mov	r1, r3
 8004944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004946:	2200      	movs	r2, #0
 8004948:	61bb      	str	r3, [r7, #24]
 800494a:	61fa      	str	r2, [r7, #28]
 800494c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004950:	f7fb fc3a 	bl	80001c8 <__aeabi_uldivmod>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4613      	mov	r3, r2
 800495a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800495c:	4b0b      	ldr	r3, [pc, #44]	; (800498c <HAL_RCC_GetSysClockFreq+0x200>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	0c1b      	lsrs	r3, r3, #16
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	3301      	adds	r3, #1
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800496c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800496e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004970:	fbb2 f3f3 	udiv	r3, r2, r3
 8004974:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004976:	e002      	b.n	800497e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004978:	4b05      	ldr	r3, [pc, #20]	; (8004990 <HAL_RCC_GetSysClockFreq+0x204>)
 800497a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800497c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800497e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004980:	4618      	mov	r0, r3
 8004982:	3750      	adds	r7, #80	; 0x50
 8004984:	46bd      	mov	sp, r7
 8004986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800498a:	bf00      	nop
 800498c:	40023800 	.word	0x40023800
 8004990:	00f42400 	.word	0x00f42400
 8004994:	007a1200 	.word	0x007a1200

08004998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800499c:	4b03      	ldr	r3, [pc, #12]	; (80049ac <HAL_RCC_GetHCLKFreq+0x14>)
 800499e:	681b      	ldr	r3, [r3, #0]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	2000006c 	.word	0x2000006c

080049b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049b4:	f7ff fff0 	bl	8004998 <HAL_RCC_GetHCLKFreq>
 80049b8:	4602      	mov	r2, r0
 80049ba:	4b05      	ldr	r3, [pc, #20]	; (80049d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	0a9b      	lsrs	r3, r3, #10
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	4903      	ldr	r1, [pc, #12]	; (80049d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049c6:	5ccb      	ldrb	r3, [r1, r3]
 80049c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	40023800 	.word	0x40023800
 80049d4:	0800951c 	.word	0x0800951c

080049d8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d105      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d035      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a00:	4b62      	ldr	r3, [pc, #392]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a06:	f7fc ff0d 	bl	8001824 <HAL_GetTick>
 8004a0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a0c:	e008      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a0e:	f7fc ff09 	bl	8001824 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e0b0      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a20:	4b5b      	ldr	r3, [pc, #364]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1f0      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	019a      	lsls	r2, r3, #6
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	071b      	lsls	r3, r3, #28
 8004a38:	4955      	ldr	r1, [pc, #340]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a40:	4b52      	ldr	r3, [pc, #328]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a42:	2201      	movs	r2, #1
 8004a44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a46:	f7fc feed 	bl	8001824 <HAL_GetTick>
 8004a4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a4c:	e008      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a4e:	f7fc fee9 	bl	8001824 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e090      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a60:	4b4b      	ldr	r3, [pc, #300]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d0f0      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 8083 	beq.w	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	4b44      	ldr	r3, [pc, #272]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	4a43      	ldr	r2, [pc, #268]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a88:	6413      	str	r3, [r2, #64]	; 0x40
 8004a8a:	4b41      	ldr	r3, [pc, #260]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a96:	4b3f      	ldr	r3, [pc, #252]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a3e      	ldr	r2, [pc, #248]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aa0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004aa2:	f7fc febf 	bl	8001824 <HAL_GetTick>
 8004aa6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004aa8:	e008      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004aaa:	f7fc febb 	bl	8001824 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e062      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004abc:	4b35      	ldr	r3, [pc, #212]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0f0      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ac8:	4b31      	ldr	r3, [pc, #196]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004acc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d02f      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d028      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ae6:	4b2a      	ldr	r3, [pc, #168]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004af0:	4b29      	ldr	r3, [pc, #164]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004af2:	2201      	movs	r2, #1
 8004af4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004af6:	4b28      	ldr	r3, [pc, #160]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004afc:	4a24      	ldr	r2, [pc, #144]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b02:	4b23      	ldr	r3, [pc, #140]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d114      	bne.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b0e:	f7fc fe89 	bl	8001824 <HAL_GetTick>
 8004b12:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b14:	e00a      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b16:	f7fc fe85 	bl	8001824 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e02a      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b2c:	4b18      	ldr	r3, [pc, #96]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0ee      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b44:	d10d      	bne.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004b46:	4b12      	ldr	r3, [pc, #72]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b5a:	490d      	ldr	r1, [pc, #52]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	608b      	str	r3, [r1, #8]
 8004b60:	e005      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004b62:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	4a0a      	ldr	r2, [pc, #40]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b68:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b6c:	6093      	str	r3, [r2, #8]
 8004b6e:	4b08      	ldr	r3, [pc, #32]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b7a:	4905      	ldr	r1, [pc, #20]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	42470068 	.word	0x42470068
 8004b90:	40023800 	.word	0x40023800
 8004b94:	40007000 	.word	0x40007000
 8004b98:	42470e40 	.word	0x42470e40

08004b9c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d13e      	bne.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004bba:	4b23      	ldr	r3, [pc, #140]	; (8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d005      	beq.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d12f      	bne.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004bd0:	4b1e      	ldr	r3, [pc, #120]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004bd2:	617b      	str	r3, [r7, #20]
          break;
 8004bd4:	e02f      	b.n	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004bd6:	4b1c      	ldr	r3, [pc, #112]	; (8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004be2:	d108      	bne.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004be4:	4b18      	ldr	r3, [pc, #96]	; (8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bec:	4a18      	ldr	r2, [pc, #96]	; (8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf2:	613b      	str	r3, [r7, #16]
 8004bf4:	e007      	b.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004bf6:	4b14      	ldr	r3, [pc, #80]	; (8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bfe:	4a15      	ldr	r2, [pc, #84]	; (8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c04:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004c06:	4b10      	ldr	r3, [pc, #64]	; (8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c0c:	099b      	lsrs	r3, r3, #6
 8004c0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	fb02 f303 	mul.w	r3, r2, r3
 8004c18:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004c1a:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c20:	0f1b      	lsrs	r3, r3, #28
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2c:	617b      	str	r3, [r7, #20]
          break;
 8004c2e:	e002      	b.n	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	617b      	str	r3, [r7, #20]
          break;
 8004c34:	bf00      	nop
        }
      }
      break;
 8004c36:	bf00      	nop
    }
  }
  return frequency;
 8004c38:	697b      	ldr	r3, [r7, #20]
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	371c      	adds	r7, #28
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	40023800 	.word	0x40023800
 8004c4c:	00bb8000 	.word	0x00bb8000
 8004c50:	007a1200 	.word	0x007a1200
 8004c54:	00f42400 	.word	0x00f42400

08004c58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e07b      	b.n	8004d62 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d108      	bne.n	8004c84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c7a:	d009      	beq.n	8004c90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	61da      	str	r2, [r3, #28]
 8004c82:	e005      	b.n	8004c90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d106      	bne.n	8004cb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7fc fc7e 	bl	80015ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	431a      	orrs	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d00:	431a      	orrs	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d14:	ea42 0103 	orr.w	r1, r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	0c1b      	lsrs	r3, r3, #16
 8004d2e:	f003 0104 	and.w	r1, r3, #4
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	f003 0210 	and.w	r2, r3, #16
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69da      	ldr	r2, [r3, #28]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b082      	sub	sp, #8
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e01a      	b.n	8004db2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d92:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7fc fc51 	bl	800163c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b08c      	sub	sp, #48	; 0x30
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	60f8      	str	r0, [r7, #12]
 8004dc2:	60b9      	str	r1, [r7, #8]
 8004dc4:	607a      	str	r2, [r7, #4]
 8004dc6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d101      	bne.n	8004de0 <HAL_SPI_TransmitReceive+0x26>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e18a      	b.n	80050f6 <HAL_SPI_TransmitReceive+0x33c>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004de8:	f7fc fd1c 	bl	8001824 <HAL_GetTick>
 8004dec:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004df4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004dfe:	887b      	ldrh	r3, [r7, #2]
 8004e00:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d00f      	beq.n	8004e2a <HAL_SPI_TransmitReceive+0x70>
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e10:	d107      	bne.n	8004e22 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d103      	bne.n	8004e22 <HAL_SPI_TransmitReceive+0x68>
 8004e1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d003      	beq.n	8004e2a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004e22:	2302      	movs	r3, #2
 8004e24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e28:	e15b      	b.n	80050e2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d005      	beq.n	8004e3c <HAL_SPI_TransmitReceive+0x82>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d002      	beq.n	8004e3c <HAL_SPI_TransmitReceive+0x82>
 8004e36:	887b      	ldrh	r3, [r7, #2]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d103      	bne.n	8004e44 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e42:	e14e      	b.n	80050e2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d003      	beq.n	8004e58 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2205      	movs	r2, #5
 8004e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	887a      	ldrh	r2, [r7, #2]
 8004e68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	887a      	ldrh	r2, [r7, #2]
 8004e6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	887a      	ldrh	r2, [r7, #2]
 8004e7a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	887a      	ldrh	r2, [r7, #2]
 8004e80:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e98:	2b40      	cmp	r3, #64	; 0x40
 8004e9a:	d007      	beq.n	8004eac <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eaa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb4:	d178      	bne.n	8004fa8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <HAL_SPI_TransmitReceive+0x10a>
 8004ebe:	8b7b      	ldrh	r3, [r7, #26]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d166      	bne.n	8004f92 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec8:	881a      	ldrh	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed4:	1c9a      	adds	r2, r3, #2
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ee8:	e053      	b.n	8004f92 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d11b      	bne.n	8004f30 <HAL_SPI_TransmitReceive+0x176>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d016      	beq.n	8004f30 <HAL_SPI_TransmitReceive+0x176>
 8004f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d113      	bne.n	8004f30 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0c:	881a      	ldrh	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f18:	1c9a      	adds	r2, r3, #2
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d119      	bne.n	8004f72 <HAL_SPI_TransmitReceive+0x1b8>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d014      	beq.n	8004f72 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f52:	b292      	uxth	r2, r2
 8004f54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5a:	1c9a      	adds	r2, r3, #2
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	3b01      	subs	r3, #1
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f72:	f7fc fc57 	bl	8001824 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d807      	bhi.n	8004f92 <HAL_SPI_TransmitReceive+0x1d8>
 8004f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f88:	d003      	beq.n	8004f92 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f90:	e0a7      	b.n	80050e2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1a6      	bne.n	8004eea <HAL_SPI_TransmitReceive+0x130>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1a1      	bne.n	8004eea <HAL_SPI_TransmitReceive+0x130>
 8004fa6:	e07c      	b.n	80050a2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <HAL_SPI_TransmitReceive+0x1fc>
 8004fb0:	8b7b      	ldrh	r3, [r7, #26]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d16b      	bne.n	800508e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	330c      	adds	r3, #12
 8004fc0:	7812      	ldrb	r2, [r2, #0]
 8004fc2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc8:	1c5a      	adds	r2, r3, #1
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fdc:	e057      	b.n	800508e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d11c      	bne.n	8005026 <HAL_SPI_TransmitReceive+0x26c>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d017      	beq.n	8005026 <HAL_SPI_TransmitReceive+0x26c>
 8004ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d114      	bne.n	8005026 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	330c      	adds	r3, #12
 8005006:	7812      	ldrb	r2, [r2, #0]
 8005008:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005018:	b29b      	uxth	r3, r3
 800501a:	3b01      	subs	r3, #1
 800501c:	b29a      	uxth	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005022:	2300      	movs	r3, #0
 8005024:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b01      	cmp	r3, #1
 8005032:	d119      	bne.n	8005068 <HAL_SPI_TransmitReceive+0x2ae>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005038:	b29b      	uxth	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d014      	beq.n	8005068 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005048:	b2d2      	uxtb	r2, r2
 800504a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800505a:	b29b      	uxth	r3, r3
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005064:	2301      	movs	r3, #1
 8005066:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005068:	f7fc fbdc 	bl	8001824 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005074:	429a      	cmp	r2, r3
 8005076:	d803      	bhi.n	8005080 <HAL_SPI_TransmitReceive+0x2c6>
 8005078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507e:	d102      	bne.n	8005086 <HAL_SPI_TransmitReceive+0x2cc>
 8005080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005082:	2b00      	cmp	r3, #0
 8005084:	d103      	bne.n	800508e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800508c:	e029      	b.n	80050e2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005092:	b29b      	uxth	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1a2      	bne.n	8004fde <HAL_SPI_TransmitReceive+0x224>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d19d      	bne.n	8004fde <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 f8c0 	bl	800522c <SPI_EndRxTxTransaction>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d006      	beq.n	80050c0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2220      	movs	r2, #32
 80050bc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80050be:	e010      	b.n	80050e2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10b      	bne.n	80050e0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050c8:	2300      	movs	r3, #0
 80050ca:	617b      	str	r3, [r7, #20]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	e000      	b.n	80050e2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80050e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3730      	adds	r7, #48	; 0x30
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80050fe:	b480      	push	{r7}
 8005100:	b083      	sub	sp, #12
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800510c:	b2db      	uxtb	r3, r3
}
 800510e:	4618      	mov	r0, r3
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
	...

0800511c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b088      	sub	sp, #32
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	603b      	str	r3, [r7, #0]
 8005128:	4613      	mov	r3, r2
 800512a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800512c:	f7fc fb7a 	bl	8001824 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005134:	1a9b      	subs	r3, r3, r2
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	4413      	add	r3, r2
 800513a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800513c:	f7fc fb72 	bl	8001824 <HAL_GetTick>
 8005140:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005142:	4b39      	ldr	r3, [pc, #228]	; (8005228 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	015b      	lsls	r3, r3, #5
 8005148:	0d1b      	lsrs	r3, r3, #20
 800514a:	69fa      	ldr	r2, [r7, #28]
 800514c:	fb02 f303 	mul.w	r3, r2, r3
 8005150:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005152:	e054      	b.n	80051fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515a:	d050      	beq.n	80051fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800515c:	f7fc fb62 	bl	8001824 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	69fa      	ldr	r2, [r7, #28]
 8005168:	429a      	cmp	r2, r3
 800516a:	d902      	bls.n	8005172 <SPI_WaitFlagStateUntilTimeout+0x56>
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d13d      	bne.n	80051ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005180:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800518a:	d111      	bne.n	80051b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005194:	d004      	beq.n	80051a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800519e:	d107      	bne.n	80051b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051b8:	d10f      	bne.n	80051da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e017      	b.n	800521e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	4013      	ands	r3, r2
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	429a      	cmp	r2, r3
 800520c:	bf0c      	ite	eq
 800520e:	2301      	moveq	r3, #1
 8005210:	2300      	movne	r3, #0
 8005212:	b2db      	uxtb	r3, r3
 8005214:	461a      	mov	r2, r3
 8005216:	79fb      	ldrb	r3, [r7, #7]
 8005218:	429a      	cmp	r2, r3
 800521a:	d19b      	bne.n	8005154 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3720      	adds	r7, #32
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	2000006c 	.word	0x2000006c

0800522c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af02      	add	r7, sp, #8
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005238:	4b1b      	ldr	r3, [pc, #108]	; (80052a8 <SPI_EndRxTxTransaction+0x7c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a1b      	ldr	r2, [pc, #108]	; (80052ac <SPI_EndRxTxTransaction+0x80>)
 800523e:	fba2 2303 	umull	r2, r3, r2, r3
 8005242:	0d5b      	lsrs	r3, r3, #21
 8005244:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005248:	fb02 f303 	mul.w	r3, r2, r3
 800524c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005256:	d112      	bne.n	800527e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2200      	movs	r2, #0
 8005260:	2180      	movs	r1, #128	; 0x80
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f7ff ff5a 	bl	800511c <SPI_WaitFlagStateUntilTimeout>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d016      	beq.n	800529c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005272:	f043 0220 	orr.w	r2, r3, #32
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e00f      	b.n	800529e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00a      	beq.n	800529a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	3b01      	subs	r3, #1
 8005288:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005294:	2b80      	cmp	r3, #128	; 0x80
 8005296:	d0f2      	beq.n	800527e <SPI_EndRxTxTransaction+0x52>
 8005298:	e000      	b.n	800529c <SPI_EndRxTxTransaction+0x70>
        break;
 800529a:	bf00      	nop
  }

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3718      	adds	r7, #24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	2000006c 	.word	0x2000006c
 80052ac:	165e9f81 	.word	0x165e9f81

080052b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052b0:	b084      	sub	sp, #16
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b084      	sub	sp, #16
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	f107 001c 	add.w	r0, r7, #28
 80052be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d122      	bne.n	800530e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80052dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d105      	bne.n	8005302 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f001 fbee 	bl	8006ae4 <USB_CoreReset>
 8005308:	4603      	mov	r3, r0
 800530a:	73fb      	strb	r3, [r7, #15]
 800530c:	e01a      	b.n	8005344 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f001 fbe2 	bl	8006ae4 <USB_CoreReset>
 8005320:	4603      	mov	r3, r0
 8005322:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005326:	2b00      	cmp	r3, #0
 8005328:	d106      	bne.n	8005338 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	639a      	str	r2, [r3, #56]	; 0x38
 8005336:	e005      	b.n	8005344 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005346:	2b01      	cmp	r3, #1
 8005348:	d10b      	bne.n	8005362 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f043 0206 	orr.w	r2, r3, #6
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f043 0220 	orr.w	r2, r3, #32
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005362:	7bfb      	ldrb	r3, [r7, #15]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800536e:	b004      	add	sp, #16
 8005370:	4770      	bx	lr
	...

08005374 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	4613      	mov	r3, r2
 8005380:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005382:	79fb      	ldrb	r3, [r7, #7]
 8005384:	2b02      	cmp	r3, #2
 8005386:	d165      	bne.n	8005454 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	4a41      	ldr	r2, [pc, #260]	; (8005490 <USB_SetTurnaroundTime+0x11c>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d906      	bls.n	800539e <USB_SetTurnaroundTime+0x2a>
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4a40      	ldr	r2, [pc, #256]	; (8005494 <USB_SetTurnaroundTime+0x120>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d202      	bcs.n	800539e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005398:	230f      	movs	r3, #15
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	e062      	b.n	8005464 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	4a3c      	ldr	r2, [pc, #240]	; (8005494 <USB_SetTurnaroundTime+0x120>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d306      	bcc.n	80053b4 <USB_SetTurnaroundTime+0x40>
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	4a3b      	ldr	r2, [pc, #236]	; (8005498 <USB_SetTurnaroundTime+0x124>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d202      	bcs.n	80053b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80053ae:	230e      	movs	r3, #14
 80053b0:	617b      	str	r3, [r7, #20]
 80053b2:	e057      	b.n	8005464 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4a38      	ldr	r2, [pc, #224]	; (8005498 <USB_SetTurnaroundTime+0x124>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d306      	bcc.n	80053ca <USB_SetTurnaroundTime+0x56>
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	4a37      	ldr	r2, [pc, #220]	; (800549c <USB_SetTurnaroundTime+0x128>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d202      	bcs.n	80053ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80053c4:	230d      	movs	r3, #13
 80053c6:	617b      	str	r3, [r7, #20]
 80053c8:	e04c      	b.n	8005464 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	4a33      	ldr	r2, [pc, #204]	; (800549c <USB_SetTurnaroundTime+0x128>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d306      	bcc.n	80053e0 <USB_SetTurnaroundTime+0x6c>
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	4a32      	ldr	r2, [pc, #200]	; (80054a0 <USB_SetTurnaroundTime+0x12c>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d802      	bhi.n	80053e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80053da:	230c      	movs	r3, #12
 80053dc:	617b      	str	r3, [r7, #20]
 80053de:	e041      	b.n	8005464 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	4a2f      	ldr	r2, [pc, #188]	; (80054a0 <USB_SetTurnaroundTime+0x12c>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d906      	bls.n	80053f6 <USB_SetTurnaroundTime+0x82>
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	4a2e      	ldr	r2, [pc, #184]	; (80054a4 <USB_SetTurnaroundTime+0x130>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d802      	bhi.n	80053f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80053f0:	230b      	movs	r3, #11
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	e036      	b.n	8005464 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	4a2a      	ldr	r2, [pc, #168]	; (80054a4 <USB_SetTurnaroundTime+0x130>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d906      	bls.n	800540c <USB_SetTurnaroundTime+0x98>
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	4a29      	ldr	r2, [pc, #164]	; (80054a8 <USB_SetTurnaroundTime+0x134>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d802      	bhi.n	800540c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005406:	230a      	movs	r3, #10
 8005408:	617b      	str	r3, [r7, #20]
 800540a:	e02b      	b.n	8005464 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	4a26      	ldr	r2, [pc, #152]	; (80054a8 <USB_SetTurnaroundTime+0x134>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d906      	bls.n	8005422 <USB_SetTurnaroundTime+0xae>
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	4a25      	ldr	r2, [pc, #148]	; (80054ac <USB_SetTurnaroundTime+0x138>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d202      	bcs.n	8005422 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800541c:	2309      	movs	r3, #9
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	e020      	b.n	8005464 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	4a21      	ldr	r2, [pc, #132]	; (80054ac <USB_SetTurnaroundTime+0x138>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d306      	bcc.n	8005438 <USB_SetTurnaroundTime+0xc4>
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	4a20      	ldr	r2, [pc, #128]	; (80054b0 <USB_SetTurnaroundTime+0x13c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d802      	bhi.n	8005438 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005432:	2308      	movs	r3, #8
 8005434:	617b      	str	r3, [r7, #20]
 8005436:	e015      	b.n	8005464 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	4a1d      	ldr	r2, [pc, #116]	; (80054b0 <USB_SetTurnaroundTime+0x13c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d906      	bls.n	800544e <USB_SetTurnaroundTime+0xda>
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	4a1c      	ldr	r2, [pc, #112]	; (80054b4 <USB_SetTurnaroundTime+0x140>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d202      	bcs.n	800544e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005448:	2307      	movs	r3, #7
 800544a:	617b      	str	r3, [r7, #20]
 800544c:	e00a      	b.n	8005464 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800544e:	2306      	movs	r3, #6
 8005450:	617b      	str	r3, [r7, #20]
 8005452:	e007      	b.n	8005464 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005454:	79fb      	ldrb	r3, [r7, #7]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d102      	bne.n	8005460 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800545a:	2309      	movs	r3, #9
 800545c:	617b      	str	r3, [r7, #20]
 800545e:	e001      	b.n	8005464 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005460:	2309      	movs	r3, #9
 8005462:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	68da      	ldr	r2, [r3, #12]
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	029b      	lsls	r3, r3, #10
 8005478:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800547c:	431a      	orrs	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	371c      	adds	r7, #28
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	00d8acbf 	.word	0x00d8acbf
 8005494:	00e4e1c0 	.word	0x00e4e1c0
 8005498:	00f42400 	.word	0x00f42400
 800549c:	01067380 	.word	0x01067380
 80054a0:	011a499f 	.word	0x011a499f
 80054a4:	01312cff 	.word	0x01312cff
 80054a8:	014ca43f 	.word	0x014ca43f
 80054ac:	016e3600 	.word	0x016e3600
 80054b0:	01a6ab1f 	.word	0x01a6ab1f
 80054b4:	01e84800 	.word	0x01e84800

080054b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f043 0201 	orr.w	r2, r3, #1
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054da:	b480      	push	{r7}
 80054dc:	b083      	sub	sp, #12
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f023 0201 	bic.w	r2, r3, #1
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	460b      	mov	r3, r1
 8005506:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005518:	78fb      	ldrb	r3, [r7, #3]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d115      	bne.n	800554a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800552a:	2001      	movs	r0, #1
 800552c:	f7fc f986 	bl	800183c <HAL_Delay>
      ms++;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	3301      	adds	r3, #1
 8005534:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f001 fa45 	bl	80069c6 <USB_GetMode>
 800553c:	4603      	mov	r3, r0
 800553e:	2b01      	cmp	r3, #1
 8005540:	d01e      	beq.n	8005580 <USB_SetCurrentMode+0x84>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2b31      	cmp	r3, #49	; 0x31
 8005546:	d9f0      	bls.n	800552a <USB_SetCurrentMode+0x2e>
 8005548:	e01a      	b.n	8005580 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800554a:	78fb      	ldrb	r3, [r7, #3]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d115      	bne.n	800557c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800555c:	2001      	movs	r0, #1
 800555e:	f7fc f96d 	bl	800183c <HAL_Delay>
      ms++;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	3301      	adds	r3, #1
 8005566:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f001 fa2c 	bl	80069c6 <USB_GetMode>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d005      	beq.n	8005580 <USB_SetCurrentMode+0x84>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2b31      	cmp	r3, #49	; 0x31
 8005578:	d9f0      	bls.n	800555c <USB_SetCurrentMode+0x60>
 800557a:	e001      	b.n	8005580 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e005      	b.n	800558c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2b32      	cmp	r3, #50	; 0x32
 8005584:	d101      	bne.n	800558a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e000      	b.n	800558c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005594:	b084      	sub	sp, #16
 8005596:	b580      	push	{r7, lr}
 8005598:	b086      	sub	sp, #24
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
 800559e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80055a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80055ae:	2300      	movs	r3, #0
 80055b0:	613b      	str	r3, [r7, #16]
 80055b2:	e009      	b.n	80055c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	3340      	adds	r3, #64	; 0x40
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	2200      	movs	r2, #0
 80055c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	3301      	adds	r3, #1
 80055c6:	613b      	str	r3, [r7, #16]
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	2b0e      	cmp	r3, #14
 80055cc:	d9f2      	bls.n	80055b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80055ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d11c      	bne.n	800560e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055e2:	f043 0302 	orr.w	r3, r3, #2
 80055e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005604:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	639a      	str	r2, [r3, #56]	; 0x38
 800560c:	e00b      	b.n	8005626 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005612:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800562c:	461a      	mov	r2, r3
 800562e:	2300      	movs	r3, #0
 8005630:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005638:	4619      	mov	r1, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005640:	461a      	mov	r2, r3
 8005642:	680b      	ldr	r3, [r1, #0]
 8005644:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005648:	2b01      	cmp	r3, #1
 800564a:	d10c      	bne.n	8005666 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800564c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564e:	2b00      	cmp	r3, #0
 8005650:	d104      	bne.n	800565c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005652:	2100      	movs	r1, #0
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f965 	bl	8005924 <USB_SetDevSpeed>
 800565a:	e008      	b.n	800566e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800565c:	2101      	movs	r1, #1
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f960 	bl	8005924 <USB_SetDevSpeed>
 8005664:	e003      	b.n	800566e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005666:	2103      	movs	r1, #3
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f95b 	bl	8005924 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800566e:	2110      	movs	r1, #16
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f8f3 	bl	800585c <USB_FlushTxFifo>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f91f 	bl	80058c4 <USB_FlushRxFifo>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005696:	461a      	mov	r2, r3
 8005698:	2300      	movs	r3, #0
 800569a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a2:	461a      	mov	r2, r3
 80056a4:	2300      	movs	r3, #0
 80056a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ae:	461a      	mov	r2, r3
 80056b0:	2300      	movs	r3, #0
 80056b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056b4:	2300      	movs	r3, #0
 80056b6:	613b      	str	r3, [r7, #16]
 80056b8:	e043      	b.n	8005742 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	015a      	lsls	r2, r3, #5
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	4413      	add	r3, r2
 80056c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056d0:	d118      	bne.n	8005704 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10a      	bne.n	80056ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e4:	461a      	mov	r2, r3
 80056e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056ea:	6013      	str	r3, [r2, #0]
 80056ec:	e013      	b.n	8005716 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fa:	461a      	mov	r2, r3
 80056fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005700:	6013      	str	r3, [r2, #0]
 8005702:	e008      	b.n	8005716 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	4413      	add	r3, r2
 800570c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005710:	461a      	mov	r2, r3
 8005712:	2300      	movs	r3, #0
 8005714:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	4413      	add	r3, r2
 800571e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005722:	461a      	mov	r2, r3
 8005724:	2300      	movs	r3, #0
 8005726:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005734:	461a      	mov	r2, r3
 8005736:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800573a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	3301      	adds	r3, #1
 8005740:	613b      	str	r3, [r7, #16]
 8005742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	429a      	cmp	r2, r3
 8005748:	d3b7      	bcc.n	80056ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800574a:	2300      	movs	r3, #0
 800574c:	613b      	str	r3, [r7, #16]
 800574e:	e043      	b.n	80057d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	4413      	add	r3, r2
 8005758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005762:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005766:	d118      	bne.n	800579a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10a      	bne.n	8005784 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	4413      	add	r3, r2
 8005776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800577a:	461a      	mov	r2, r3
 800577c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005780:	6013      	str	r3, [r2, #0]
 8005782:	e013      	b.n	80057ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005790:	461a      	mov	r2, r3
 8005792:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	e008      	b.n	80057ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a6:	461a      	mov	r2, r3
 80057a8:	2300      	movs	r3, #0
 80057aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b8:	461a      	mov	r2, r3
 80057ba:	2300      	movs	r3, #0
 80057bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ca:	461a      	mov	r2, r3
 80057cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	3301      	adds	r3, #1
 80057d6:	613b      	str	r3, [r7, #16]
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d3b7      	bcc.n	8005750 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005800:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005804:	2b00      	cmp	r3, #0
 8005806:	d105      	bne.n	8005814 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	f043 0210 	orr.w	r2, r3, #16
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	699a      	ldr	r2, [r3, #24]
 8005818:	4b0f      	ldr	r3, [pc, #60]	; (8005858 <USB_DevInit+0x2c4>)
 800581a:	4313      	orrs	r3, r2
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005822:	2b00      	cmp	r3, #0
 8005824:	d005      	beq.n	8005832 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	f043 0208 	orr.w	r2, r3, #8
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005834:	2b01      	cmp	r3, #1
 8005836:	d107      	bne.n	8005848 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005840:	f043 0304 	orr.w	r3, r3, #4
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005848:	7dfb      	ldrb	r3, [r7, #23]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005854:	b004      	add	sp, #16
 8005856:	4770      	bx	lr
 8005858:	803c3800 	.word	0x803c3800

0800585c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005866:	2300      	movs	r3, #0
 8005868:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	3301      	adds	r3, #1
 800586e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4a13      	ldr	r2, [pc, #76]	; (80058c0 <USB_FlushTxFifo+0x64>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d901      	bls.n	800587c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e01b      	b.n	80058b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	2b00      	cmp	r3, #0
 8005882:	daf2      	bge.n	800586a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005884:	2300      	movs	r3, #0
 8005886:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	019b      	lsls	r3, r3, #6
 800588c:	f043 0220 	orr.w	r2, r3, #32
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	3301      	adds	r3, #1
 8005898:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	4a08      	ldr	r2, [pc, #32]	; (80058c0 <USB_FlushTxFifo+0x64>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d901      	bls.n	80058a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e006      	b.n	80058b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f003 0320 	and.w	r3, r3, #32
 80058ae:	2b20      	cmp	r3, #32
 80058b0:	d0f0      	beq.n	8005894 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	00030d40 	.word	0x00030d40

080058c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	3301      	adds	r3, #1
 80058d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4a11      	ldr	r2, [pc, #68]	; (8005920 <USB_FlushRxFifo+0x5c>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d901      	bls.n	80058e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e018      	b.n	8005914 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	daf2      	bge.n	80058d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2210      	movs	r2, #16
 80058f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	3301      	adds	r3, #1
 80058f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	4a08      	ldr	r2, [pc, #32]	; (8005920 <USB_FlushRxFifo+0x5c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d901      	bls.n	8005906 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e006      	b.n	8005914 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f003 0310 	and.w	r3, r3, #16
 800590e:	2b10      	cmp	r3, #16
 8005910:	d0f0      	beq.n	80058f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	00030d40 	.word	0x00030d40

08005924 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	460b      	mov	r3, r1
 800592e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	78fb      	ldrb	r3, [r7, #3]
 800593e:	68f9      	ldr	r1, [r7, #12]
 8005940:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005944:	4313      	orrs	r3, r2
 8005946:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005956:	b480      	push	{r7}
 8005958:	b087      	sub	sp, #28
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f003 0306 	and.w	r3, r3, #6
 800596e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d102      	bne.n	800597c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005976:	2300      	movs	r3, #0
 8005978:	75fb      	strb	r3, [r7, #23]
 800597a:	e00a      	b.n	8005992 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2b02      	cmp	r3, #2
 8005980:	d002      	beq.n	8005988 <USB_GetDevSpeed+0x32>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2b06      	cmp	r3, #6
 8005986:	d102      	bne.n	800598e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005988:	2302      	movs	r3, #2
 800598a:	75fb      	strb	r3, [r7, #23]
 800598c:	e001      	b.n	8005992 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800598e:	230f      	movs	r3, #15
 8005990:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005992:	7dfb      	ldrb	r3, [r7, #23]
}
 8005994:	4618      	mov	r0, r3
 8005996:	371c      	adds	r7, #28
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	785b      	ldrb	r3, [r3, #1]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d13a      	bne.n	8005a32 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c2:	69da      	ldr	r2, [r3, #28]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	f003 030f 	and.w	r3, r3, #15
 80059cc:	2101      	movs	r1, #1
 80059ce:	fa01 f303 	lsl.w	r3, r1, r3
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	68f9      	ldr	r1, [r7, #12]
 80059d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059da:	4313      	orrs	r3, r2
 80059dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d155      	bne.n	8005aa0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	791b      	ldrb	r3, [r3, #4]
 8005a0e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a10:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	059b      	lsls	r3, r3, #22
 8005a16:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	0151      	lsls	r1, r2, #5
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	440a      	add	r2, r1
 8005a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a2e:	6013      	str	r3, [r2, #0]
 8005a30:	e036      	b.n	8005aa0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a38:	69da      	ldr	r2, [r3, #28]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	2101      	movs	r1, #1
 8005a44:	fa01 f303 	lsl.w	r3, r1, r3
 8005a48:	041b      	lsls	r3, r3, #16
 8005a4a:	68f9      	ldr	r1, [r7, #12]
 8005a4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a50:	4313      	orrs	r3, r2
 8005a52:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d11a      	bne.n	8005aa0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	791b      	ldrb	r3, [r3, #4]
 8005a84:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a86:	430b      	orrs	r3, r1
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	0151      	lsls	r1, r2, #5
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	440a      	add	r2, r1
 8005a92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a9e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
	...

08005ab0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	785b      	ldrb	r3, [r3, #1]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d161      	bne.n	8005b90 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ade:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ae2:	d11f      	bne.n	8005b24 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	0151      	lsls	r1, r2, #5
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	440a      	add	r2, r1
 8005afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005afe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b02:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	0151      	lsls	r1, r2, #5
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	440a      	add	r2, r1
 8005b1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	f003 030f 	and.w	r3, r3, #15
 8005b34:	2101      	movs	r1, #1
 8005b36:	fa01 f303 	lsl.w	r3, r1, r3
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	43db      	mvns	r3, r3
 8005b3e:	68f9      	ldr	r1, [r7, #12]
 8005b40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b44:	4013      	ands	r3, r2
 8005b46:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4e:	69da      	ldr	r2, [r3, #28]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	f003 030f 	and.w	r3, r3, #15
 8005b58:	2101      	movs	r1, #1
 8005b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	43db      	mvns	r3, r3
 8005b62:	68f9      	ldr	r1, [r7, #12]
 8005b64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b68:	4013      	ands	r3, r2
 8005b6a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	015a      	lsls	r2, r3, #5
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	0159      	lsls	r1, r3, #5
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	440b      	add	r3, r1
 8005b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b86:	4619      	mov	r1, r3
 8005b88:	4b35      	ldr	r3, [pc, #212]	; (8005c60 <USB_DeactivateEndpoint+0x1b0>)
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	600b      	str	r3, [r1, #0]
 8005b8e:	e060      	b.n	8005c52 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ba6:	d11f      	bne.n	8005be8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	0151      	lsls	r1, r2, #5
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	440a      	add	r2, r1
 8005bbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bc6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	0151      	lsls	r1, r2, #5
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	440a      	add	r2, r1
 8005bde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005be2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005be6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	f003 030f 	and.w	r3, r3, #15
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8005bfe:	041b      	lsls	r3, r3, #16
 8005c00:	43db      	mvns	r3, r3
 8005c02:	68f9      	ldr	r1, [r7, #12]
 8005c04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c08:	4013      	ands	r3, r2
 8005c0a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c12:	69da      	ldr	r2, [r3, #28]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	f003 030f 	and.w	r3, r3, #15
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c22:	041b      	lsls	r3, r3, #16
 8005c24:	43db      	mvns	r3, r3
 8005c26:	68f9      	ldr	r1, [r7, #12]
 8005c28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	0159      	lsls	r1, r3, #5
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	440b      	add	r3, r1
 8005c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	4b05      	ldr	r3, [pc, #20]	; (8005c64 <USB_DeactivateEndpoint+0x1b4>)
 8005c4e:	4013      	ands	r3, r2
 8005c50:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	ec337800 	.word	0xec337800
 8005c64:	eff37800 	.word	0xeff37800

08005c68 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08a      	sub	sp, #40	; 0x28
 8005c6c:	af02      	add	r7, sp, #8
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	4613      	mov	r3, r2
 8005c74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	785b      	ldrb	r3, [r3, #1]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	f040 815c 	bne.w	8005f42 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d132      	bne.n	8005cf8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	0151      	lsls	r1, r2, #5
 8005ca4:	69fa      	ldr	r2, [r7, #28]
 8005ca6:	440a      	add	r2, r1
 8005ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	0151      	lsls	r1, r2, #5
 8005cc8:	69fa      	ldr	r2, [r7, #28]
 8005cca:	440a      	add	r2, r1
 8005ccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	0151      	lsls	r1, r2, #5
 8005ce8:	69fa      	ldr	r2, [r7, #28]
 8005cea:	440a      	add	r2, r1
 8005cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf0:	0cdb      	lsrs	r3, r3, #19
 8005cf2:	04db      	lsls	r3, r3, #19
 8005cf4:	6113      	str	r3, [r2, #16]
 8005cf6:	e074      	b.n	8005de2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	0151      	lsls	r1, r2, #5
 8005d0a:	69fa      	ldr	r2, [r7, #28]
 8005d0c:	440a      	add	r2, r1
 8005d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d12:	0cdb      	lsrs	r3, r3, #19
 8005d14:	04db      	lsls	r3, r3, #19
 8005d16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	0151      	lsls	r1, r2, #5
 8005d2a:	69fa      	ldr	r2, [r7, #28]
 8005d2c:	440a      	add	r2, r1
 8005d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d48:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	6999      	ldr	r1, [r3, #24]
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	440b      	add	r3, r1
 8005d54:	1e59      	subs	r1, r3, #1
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d5e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d60:	4b9d      	ldr	r3, [pc, #628]	; (8005fd8 <USB_EPStartXfer+0x370>)
 8005d62:	400b      	ands	r3, r1
 8005d64:	69b9      	ldr	r1, [r7, #24]
 8005d66:	0148      	lsls	r0, r1, #5
 8005d68:	69f9      	ldr	r1, [r7, #28]
 8005d6a:	4401      	add	r1, r0
 8005d6c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d70:	4313      	orrs	r3, r2
 8005d72:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d80:	691a      	ldr	r2, [r3, #16]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d8a:	69b9      	ldr	r1, [r7, #24]
 8005d8c:	0148      	lsls	r0, r1, #5
 8005d8e:	69f9      	ldr	r1, [r7, #28]
 8005d90:	4401      	add	r1, r0
 8005d92:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d96:	4313      	orrs	r3, r2
 8005d98:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	791b      	ldrb	r3, [r3, #4]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d11f      	bne.n	8005de2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	0151      	lsls	r1, r2, #5
 8005db4:	69fa      	ldr	r2, [r7, #28]
 8005db6:	440a      	add	r2, r1
 8005db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dbc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005dc0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	0151      	lsls	r1, r2, #5
 8005dd4:	69fa      	ldr	r2, [r7, #28]
 8005dd6:	440a      	add	r2, r1
 8005dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ddc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005de0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005de2:	79fb      	ldrb	r3, [r7, #7]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d14b      	bne.n	8005e80 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d009      	beq.n	8005e04 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	791b      	ldrb	r3, [r3, #4]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d128      	bne.n	8005e5e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d110      	bne.n	8005e3e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	0151      	lsls	r1, r2, #5
 8005e2e:	69fa      	ldr	r2, [r7, #28]
 8005e30:	440a      	add	r2, r1
 8005e32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	e00f      	b.n	8005e5e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	0151      	lsls	r1, r2, #5
 8005e50:	69fa      	ldr	r2, [r7, #28]
 8005e52:	440a      	add	r2, r1
 8005e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e5c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	0151      	lsls	r1, r2, #5
 8005e70:	69fa      	ldr	r2, [r7, #28]
 8005e72:	440a      	add	r2, r1
 8005e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	e133      	b.n	80060e8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69ba      	ldr	r2, [r7, #24]
 8005e90:	0151      	lsls	r1, r2, #5
 8005e92:	69fa      	ldr	r2, [r7, #28]
 8005e94:	440a      	add	r2, r1
 8005e96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e9e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	791b      	ldrb	r3, [r3, #4]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d015      	beq.n	8005ed4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 811b 	beq.w	80060e8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	2101      	movs	r1, #1
 8005ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec8:	69f9      	ldr	r1, [r7, #28]
 8005eca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	634b      	str	r3, [r1, #52]	; 0x34
 8005ed2:	e109      	b.n	80060e8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d110      	bne.n	8005f06 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	0151      	lsls	r1, r2, #5
 8005ef6:	69fa      	ldr	r2, [r7, #28]
 8005ef8:	440a      	add	r2, r1
 8005efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005efe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f02:	6013      	str	r3, [r2, #0]
 8005f04:	e00f      	b.n	8005f26 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	0151      	lsls	r1, r2, #5
 8005f18:	69fa      	ldr	r2, [r7, #28]
 8005f1a:	440a      	add	r2, r1
 8005f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f24:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	6919      	ldr	r1, [r3, #16]
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	781a      	ldrb	r2, [r3, #0]
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	b298      	uxth	r0, r3
 8005f34:	79fb      	ldrb	r3, [r7, #7]
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	4603      	mov	r3, r0
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f000 fade 	bl	80064fc <USB_WritePacket>
 8005f40:	e0d2      	b.n	80060e8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	0151      	lsls	r1, r2, #5
 8005f54:	69fa      	ldr	r2, [r7, #28]
 8005f56:	440a      	add	r2, r1
 8005f58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f5c:	0cdb      	lsrs	r3, r3, #19
 8005f5e:	04db      	lsls	r3, r3, #19
 8005f60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	0151      	lsls	r1, r2, #5
 8005f74:	69fa      	ldr	r2, [r7, #28]
 8005f76:	440a      	add	r2, r1
 8005f78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f84:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d126      	bne.n	8005fdc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9a:	691a      	ldr	r2, [r3, #16]
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fa4:	69b9      	ldr	r1, [r7, #24]
 8005fa6:	0148      	lsls	r0, r1, #5
 8005fa8:	69f9      	ldr	r1, [r7, #28]
 8005faa:	4401      	add	r1, r0
 8005fac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	69ba      	ldr	r2, [r7, #24]
 8005fc4:	0151      	lsls	r1, r2, #5
 8005fc6:	69fa      	ldr	r2, [r7, #28]
 8005fc8:	440a      	add	r2, r1
 8005fca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fd2:	6113      	str	r3, [r2, #16]
 8005fd4:	e03a      	b.n	800604c <USB_EPStartXfer+0x3e4>
 8005fd6:	bf00      	nop
 8005fd8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	699a      	ldr	r2, [r3, #24]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	1e5a      	subs	r2, r3, #1
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	8afa      	ldrh	r2, [r7, #22]
 8005ff8:	fb03 f202 	mul.w	r2, r3, r2
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600c:	691a      	ldr	r2, [r3, #16]
 800600e:	8afb      	ldrh	r3, [r7, #22]
 8006010:	04d9      	lsls	r1, r3, #19
 8006012:	4b38      	ldr	r3, [pc, #224]	; (80060f4 <USB_EPStartXfer+0x48c>)
 8006014:	400b      	ands	r3, r1
 8006016:	69b9      	ldr	r1, [r7, #24]
 8006018:	0148      	lsls	r0, r1, #5
 800601a:	69f9      	ldr	r1, [r7, #28]
 800601c:	4401      	add	r1, r0
 800601e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006022:	4313      	orrs	r3, r2
 8006024:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	015a      	lsls	r2, r3, #5
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	4413      	add	r3, r2
 800602e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006032:	691a      	ldr	r2, [r3, #16]
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	69db      	ldr	r3, [r3, #28]
 8006038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800603c:	69b9      	ldr	r1, [r7, #24]
 800603e:	0148      	lsls	r0, r1, #5
 8006040:	69f9      	ldr	r1, [r7, #28]
 8006042:	4401      	add	r1, r0
 8006044:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006048:	4313      	orrs	r3, r2
 800604a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800604c:	79fb      	ldrb	r3, [r7, #7]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d10d      	bne.n	800606e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d009      	beq.n	800606e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	6919      	ldr	r1, [r3, #16]
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	4413      	add	r3, r2
 8006066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606a:	460a      	mov	r2, r1
 800606c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	791b      	ldrb	r3, [r3, #4]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d128      	bne.n	80060c8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006082:	2b00      	cmp	r3, #0
 8006084:	d110      	bne.n	80060a8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	015a      	lsls	r2, r3, #5
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	4413      	add	r3, r2
 800608e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	0151      	lsls	r1, r2, #5
 8006098:	69fa      	ldr	r2, [r7, #28]
 800609a:	440a      	add	r2, r1
 800609c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060a4:	6013      	str	r3, [r2, #0]
 80060a6:	e00f      	b.n	80060c8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	015a      	lsls	r2, r3, #5
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	4413      	add	r3, r2
 80060b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	0151      	lsls	r1, r2, #5
 80060ba:	69fa      	ldr	r2, [r7, #28]
 80060bc:	440a      	add	r2, r1
 80060be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060c6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	0151      	lsls	r1, r2, #5
 80060da:	69fa      	ldr	r2, [r7, #28]
 80060dc:	440a      	add	r2, r1
 80060de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3720      	adds	r7, #32
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	1ff80000 	.word	0x1ff80000

080060f8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	4613      	mov	r3, r2
 8006104:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	785b      	ldrb	r3, [r3, #1]
 8006114:	2b01      	cmp	r3, #1
 8006116:	f040 80ce 	bne.w	80062b6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d132      	bne.n	8006188 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	4413      	add	r3, r2
 800612a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	0151      	lsls	r1, r2, #5
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	440a      	add	r2, r1
 8006138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800613c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006140:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006144:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	4413      	add	r3, r2
 800614e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	0151      	lsls	r1, r2, #5
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	440a      	add	r2, r1
 800615c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006160:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006164:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	4413      	add	r3, r2
 800616e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	0151      	lsls	r1, r2, #5
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	440a      	add	r2, r1
 800617c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006180:	0cdb      	lsrs	r3, r3, #19
 8006182:	04db      	lsls	r3, r3, #19
 8006184:	6113      	str	r3, [r2, #16]
 8006186:	e04e      	b.n	8006226 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	015a      	lsls	r2, r3, #5
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	4413      	add	r3, r2
 8006190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	0151      	lsls	r1, r2, #5
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	440a      	add	r2, r1
 800619e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061a2:	0cdb      	lsrs	r3, r3, #19
 80061a4:	04db      	lsls	r3, r3, #19
 80061a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	0151      	lsls	r1, r2, #5
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	440a      	add	r2, r1
 80061be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061ca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	699a      	ldr	r2, [r3, #24]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d903      	bls.n	80061e0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	68da      	ldr	r2, [r3, #12]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	0151      	lsls	r1, r2, #5
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	440a      	add	r2, r1
 80061f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620c:	691a      	ldr	r2, [r3, #16]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006216:	6939      	ldr	r1, [r7, #16]
 8006218:	0148      	lsls	r0, r1, #5
 800621a:	6979      	ldr	r1, [r7, #20]
 800621c:	4401      	add	r1, r0
 800621e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006222:	4313      	orrs	r3, r2
 8006224:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006226:	79fb      	ldrb	r3, [r7, #7]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d11e      	bne.n	800626a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d009      	beq.n	8006248 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	4413      	add	r3, r2
 800623c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006240:	461a      	mov	r2, r3
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	4413      	add	r3, r2
 8006250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	0151      	lsls	r1, r2, #5
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	440a      	add	r2, r1
 800625e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006262:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006266:	6013      	str	r3, [r2, #0]
 8006268:	e097      	b.n	800639a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	4413      	add	r3, r2
 8006272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	0151      	lsls	r1, r2, #5
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	440a      	add	r2, r1
 8006280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006284:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006288:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 8083 	beq.w	800639a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800629a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	f003 030f 	and.w	r3, r3, #15
 80062a4:	2101      	movs	r1, #1
 80062a6:	fa01 f303 	lsl.w	r3, r1, r3
 80062aa:	6979      	ldr	r1, [r7, #20]
 80062ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062b0:	4313      	orrs	r3, r2
 80062b2:	634b      	str	r3, [r1, #52]	; 0x34
 80062b4:	e071      	b.n	800639a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	015a      	lsls	r2, r3, #5
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	0151      	lsls	r1, r2, #5
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	440a      	add	r2, r1
 80062cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062d0:	0cdb      	lsrs	r3, r3, #19
 80062d2:	04db      	lsls	r3, r3, #19
 80062d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	0151      	lsls	r1, r2, #5
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	440a      	add	r2, r1
 80062ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d003      	beq.n	800630a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	68da      	ldr	r2, [r3, #12]
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	68da      	ldr	r2, [r3, #12]
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	0151      	lsls	r1, r2, #5
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	440a      	add	r2, r1
 8006328:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800632c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006330:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	4413      	add	r3, r2
 800633a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633e:	691a      	ldr	r2, [r3, #16]
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006348:	6939      	ldr	r1, [r7, #16]
 800634a:	0148      	lsls	r0, r1, #5
 800634c:	6979      	ldr	r1, [r7, #20]
 800634e:	4401      	add	r1, r0
 8006350:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006354:	4313      	orrs	r3, r2
 8006356:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006358:	79fb      	ldrb	r3, [r7, #7]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d10d      	bne.n	800637a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d009      	beq.n	800637a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	6919      	ldr	r1, [r3, #16]
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	4413      	add	r3, r2
 8006372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006376:	460a      	mov	r2, r1
 8006378:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	0151      	lsls	r1, r2, #5
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	440a      	add	r2, r1
 8006390:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006394:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006398:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	371c      	adds	r7, #28
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80063b6:	2300      	movs	r3, #0
 80063b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	785b      	ldrb	r3, [r3, #1]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d14a      	bne.n	800645c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063de:	f040 8086 	bne.w	80064ee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	7812      	ldrb	r2, [r2, #0]
 80063f6:	0151      	lsls	r1, r2, #5
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	440a      	add	r2, r1
 80063fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006400:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006404:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	4413      	add	r3, r2
 8006410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	7812      	ldrb	r2, [r2, #0]
 800641a:	0151      	lsls	r1, r2, #5
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	440a      	add	r2, r1
 8006420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006424:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006428:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	3301      	adds	r3, #1
 800642e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f242 7210 	movw	r2, #10000	; 0x2710
 8006436:	4293      	cmp	r3, r2
 8006438:	d902      	bls.n	8006440 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	75fb      	strb	r3, [r7, #23]
          break;
 800643e:	e056      	b.n	80064ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	015a      	lsls	r2, r3, #5
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	4413      	add	r3, r2
 800644a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006454:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006458:	d0e7      	beq.n	800642a <USB_EPStopXfer+0x82>
 800645a:	e048      	b.n	80064ee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	015a      	lsls	r2, r3, #5
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	4413      	add	r3, r2
 8006466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006470:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006474:	d13b      	bne.n	80064ee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	4413      	add	r3, r2
 8006480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	7812      	ldrb	r2, [r2, #0]
 800648a:	0151      	lsls	r1, r2, #5
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	440a      	add	r2, r1
 8006490:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006494:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006498:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	7812      	ldrb	r2, [r2, #0]
 80064ae:	0151      	lsls	r1, r2, #5
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	440a      	add	r2, r1
 80064b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	3301      	adds	r3, #1
 80064c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d902      	bls.n	80064d4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	75fb      	strb	r3, [r7, #23]
          break;
 80064d2:	e00c      	b.n	80064ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064ec:	d0e7      	beq.n	80064be <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80064ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	371c      	adds	r7, #28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b089      	sub	sp, #36	; 0x24
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	4611      	mov	r1, r2
 8006508:	461a      	mov	r2, r3
 800650a:	460b      	mov	r3, r1
 800650c:	71fb      	strb	r3, [r7, #7]
 800650e:	4613      	mov	r3, r2
 8006510:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800651a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800651e:	2b00      	cmp	r3, #0
 8006520:	d123      	bne.n	800656a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006522:	88bb      	ldrh	r3, [r7, #4]
 8006524:	3303      	adds	r3, #3
 8006526:	089b      	lsrs	r3, r3, #2
 8006528:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800652a:	2300      	movs	r3, #0
 800652c:	61bb      	str	r3, [r7, #24]
 800652e:	e018      	b.n	8006562 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006530:	79fb      	ldrb	r3, [r7, #7]
 8006532:	031a      	lsls	r2, r3, #12
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	4413      	add	r3, r2
 8006538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800653c:	461a      	mov	r2, r3
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	3301      	adds	r3, #1
 8006548:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	3301      	adds	r3, #1
 800654e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	3301      	adds	r3, #1
 8006554:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	3301      	adds	r3, #1
 800655a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	3301      	adds	r3, #1
 8006560:	61bb      	str	r3, [r7, #24]
 8006562:	69ba      	ldr	r2, [r7, #24]
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	429a      	cmp	r2, r3
 8006568:	d3e2      	bcc.n	8006530 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3724      	adds	r7, #36	; 0x24
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006578:	b480      	push	{r7}
 800657a:	b08b      	sub	sp, #44	; 0x2c
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	4613      	mov	r3, r2
 8006584:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800658e:	88fb      	ldrh	r3, [r7, #6]
 8006590:	089b      	lsrs	r3, r3, #2
 8006592:	b29b      	uxth	r3, r3
 8006594:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006596:	88fb      	ldrh	r3, [r7, #6]
 8006598:	f003 0303 	and.w	r3, r3, #3
 800659c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800659e:	2300      	movs	r3, #0
 80065a0:	623b      	str	r3, [r7, #32]
 80065a2:	e014      	b.n	80065ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	3301      	adds	r3, #1
 80065b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	3301      	adds	r3, #1
 80065ba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065be:	3301      	adds	r3, #1
 80065c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c4:	3301      	adds	r3, #1
 80065c6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80065c8:	6a3b      	ldr	r3, [r7, #32]
 80065ca:	3301      	adds	r3, #1
 80065cc:	623b      	str	r3, [r7, #32]
 80065ce:	6a3a      	ldr	r2, [r7, #32]
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d3e6      	bcc.n	80065a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80065d6:	8bfb      	ldrh	r3, [r7, #30]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d01e      	beq.n	800661a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80065dc:	2300      	movs	r3, #0
 80065de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065e6:	461a      	mov	r2, r3
 80065e8:	f107 0310 	add.w	r3, r7, #16
 80065ec:	6812      	ldr	r2, [r2, #0]
 80065ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	00db      	lsls	r3, r3, #3
 80065f8:	fa22 f303 	lsr.w	r3, r2, r3
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	701a      	strb	r2, [r3, #0]
      i++;
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	3301      	adds	r3, #1
 8006606:	623b      	str	r3, [r7, #32]
      pDest++;
 8006608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660a:	3301      	adds	r3, #1
 800660c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800660e:	8bfb      	ldrh	r3, [r7, #30]
 8006610:	3b01      	subs	r3, #1
 8006612:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006614:	8bfb      	ldrh	r3, [r7, #30]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1ea      	bne.n	80065f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800661c:	4618      	mov	r0, r3
 800661e:	372c      	adds	r7, #44	; 0x2c
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	785b      	ldrb	r3, [r3, #1]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d12c      	bne.n	800669e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4413      	add	r3, r2
 800664c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	db12      	blt.n	800667c <USB_EPSetStall+0x54>
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00f      	beq.n	800667c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	4413      	add	r3, r2
 8006664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	0151      	lsls	r1, r2, #5
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	440a      	add	r2, r1
 8006672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006676:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800667a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	0151      	lsls	r1, r2, #5
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	440a      	add	r2, r1
 8006692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006696:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800669a:	6013      	str	r3, [r2, #0]
 800669c:	e02b      	b.n	80066f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	db12      	blt.n	80066d6 <USB_EPSetStall+0xae>
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00f      	beq.n	80066d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	0151      	lsls	r1, r2, #5
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	440a      	add	r2, r1
 80066cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	0151      	lsls	r1, r2, #5
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	440a      	add	r2, r1
 80066ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	785b      	ldrb	r3, [r3, #1]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d128      	bne.n	8006772 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4413      	add	r3, r2
 8006728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	0151      	lsls	r1, r2, #5
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	440a      	add	r2, r1
 8006736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800673a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800673e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	791b      	ldrb	r3, [r3, #4]
 8006744:	2b03      	cmp	r3, #3
 8006746:	d003      	beq.n	8006750 <USB_EPClearStall+0x4c>
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	791b      	ldrb	r3, [r3, #4]
 800674c:	2b02      	cmp	r3, #2
 800674e:	d138      	bne.n	80067c2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4413      	add	r3, r2
 8006758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	0151      	lsls	r1, r2, #5
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	440a      	add	r2, r1
 8006766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800676a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800676e:	6013      	str	r3, [r2, #0]
 8006770:	e027      	b.n	80067c2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	4413      	add	r3, r2
 800677a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	0151      	lsls	r1, r2, #5
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	440a      	add	r2, r1
 8006788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800678c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006790:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	791b      	ldrb	r3, [r3, #4]
 8006796:	2b03      	cmp	r3, #3
 8006798:	d003      	beq.n	80067a2 <USB_EPClearStall+0x9e>
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	791b      	ldrb	r3, [r3, #4]
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d10f      	bne.n	80067c2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	0151      	lsls	r1, r2, #5
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	440a      	add	r2, r1
 80067b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067c0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	460b      	mov	r3, r1
 80067da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80067f2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	78fb      	ldrb	r3, [r7, #3]
 80067fe:	011b      	lsls	r3, r3, #4
 8006800:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006804:	68f9      	ldr	r1, [r7, #12]
 8006806:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800680a:	4313      	orrs	r3, r2
 800680c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006836:	f023 0303 	bic.w	r3, r3, #3
 800683a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800684a:	f023 0302 	bic.w	r3, r3, #2
 800684e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800685e:	b480      	push	{r7}
 8006860:	b085      	sub	sp, #20
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006878:	f023 0303 	bic.w	r3, r3, #3
 800687c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800688c:	f043 0302 	orr.w	r3, r3, #2
 8006890:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	4013      	ands	r3, r2
 80068b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80068b8:	68fb      	ldr	r3, [r7, #12]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b085      	sub	sp, #20
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	4013      	ands	r3, r2
 80068e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	0c1b      	lsrs	r3, r3, #16
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b085      	sub	sp, #20
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006916:	69db      	ldr	r3, [r3, #28]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	4013      	ands	r3, r2
 800691c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	b29b      	uxth	r3, r3
}
 8006922:	4618      	mov	r0, r3
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800692e:	b480      	push	{r7}
 8006930:	b085      	sub	sp, #20
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	460b      	mov	r3, r1
 8006938:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800693e:	78fb      	ldrb	r3, [r7, #3]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	4413      	add	r3, r2
 8006946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	4013      	ands	r3, r2
 800695a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800695c:	68bb      	ldr	r3, [r7, #8]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800696a:	b480      	push	{r7}
 800696c:	b087      	sub	sp, #28
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
 8006972:	460b      	mov	r3, r1
 8006974:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800698a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800698c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800698e:	78fb      	ldrb	r3, [r7, #3]
 8006990:	f003 030f 	and.w	r3, r3, #15
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	fa22 f303 	lsr.w	r3, r2, r3
 800699a:	01db      	lsls	r3, r3, #7
 800699c:	b2db      	uxtb	r3, r3
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80069a4:	78fb      	ldrb	r3, [r7, #3]
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	4013      	ands	r3, r2
 80069b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069b8:	68bb      	ldr	r3, [r7, #8]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	371c      	adds	r7, #28
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b083      	sub	sp, #12
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	f003 0301 	and.w	r3, r3, #1
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b085      	sub	sp, #20
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006a00:	f023 0307 	bic.w	r3, r3, #7
 8006a04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b087      	sub	sp, #28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	460b      	mov	r3, r1
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	333c      	adds	r3, #60	; 0x3c
 8006a3e:	3304      	adds	r3, #4
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	4a26      	ldr	r2, [pc, #152]	; (8006ae0 <USB_EP0_OutStart+0xb8>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d90a      	bls.n	8006a62 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a5c:	d101      	bne.n	8006a62 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	e037      	b.n	8006ad2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a68:	461a      	mov	r2, r3
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a90:	f043 0318 	orr.w	r3, r3, #24
 8006a94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aa4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006aa8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006aaa:	7afb      	ldrb	r3, [r7, #11]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d10f      	bne.n	8006ad0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006ace:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	371c      	adds	r7, #28
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	4f54300a 	.word	0x4f54300a

08006ae4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006aec:	2300      	movs	r3, #0
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	3301      	adds	r3, #1
 8006af4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	4a13      	ldr	r2, [pc, #76]	; (8006b48 <USB_CoreReset+0x64>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d901      	bls.n	8006b02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e01b      	b.n	8006b3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	daf2      	bge.n	8006af0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	f043 0201 	orr.w	r2, r3, #1
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	4a09      	ldr	r2, [pc, #36]	; (8006b48 <USB_CoreReset+0x64>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d901      	bls.n	8006b2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e006      	b.n	8006b3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	f003 0301 	and.w	r3, r3, #1
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d0f0      	beq.n	8006b1a <USB_CoreReset+0x36>

  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	00030d40 	.word	0x00030d40

08006b4c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	460b      	mov	r3, r1
 8006b56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006b58:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006b5c:	f002 fc36 	bl	80093cc <USBD_static_malloc>
 8006b60:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d109      	bne.n	8006b7c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	32b0      	adds	r2, #176	; 0xb0
 8006b72:	2100      	movs	r1, #0
 8006b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006b78:	2302      	movs	r3, #2
 8006b7a:	e0d4      	b.n	8006d26 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006b7c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006b80:	2100      	movs	r1, #0
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f002 fc8a 	bl	800949c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	32b0      	adds	r2, #176	; 0xb0
 8006b92:	68f9      	ldr	r1, [r7, #12]
 8006b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	32b0      	adds	r2, #176	; 0xb0
 8006ba2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	7c1b      	ldrb	r3, [r3, #16]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d138      	bne.n	8006c26 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006bb4:	4b5e      	ldr	r3, [pc, #376]	; (8006d30 <USBD_CDC_Init+0x1e4>)
 8006bb6:	7819      	ldrb	r1, [r3, #0]
 8006bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f002 fae1 	bl	8009186 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006bc4:	4b5a      	ldr	r3, [pc, #360]	; (8006d30 <USBD_CDC_Init+0x1e4>)
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	f003 020f 	and.w	r2, r3, #15
 8006bcc:	6879      	ldr	r1, [r7, #4]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4413      	add	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	440b      	add	r3, r1
 8006bd8:	3324      	adds	r3, #36	; 0x24
 8006bda:	2201      	movs	r2, #1
 8006bdc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006bde:	4b55      	ldr	r3, [pc, #340]	; (8006d34 <USBD_CDC_Init+0x1e8>)
 8006be0:	7819      	ldrb	r1, [r3, #0]
 8006be2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006be6:	2202      	movs	r2, #2
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f002 facc 	bl	8009186 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006bee:	4b51      	ldr	r3, [pc, #324]	; (8006d34 <USBD_CDC_Init+0x1e8>)
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	f003 020f 	and.w	r2, r3, #15
 8006bf6:	6879      	ldr	r1, [r7, #4]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	440b      	add	r3, r1
 8006c02:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c06:	2201      	movs	r2, #1
 8006c08:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c0a:	4b4b      	ldr	r3, [pc, #300]	; (8006d38 <USBD_CDC_Init+0x1ec>)
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	f003 020f 	and.w	r2, r3, #15
 8006c12:	6879      	ldr	r1, [r7, #4]
 8006c14:	4613      	mov	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	440b      	add	r3, r1
 8006c1e:	3326      	adds	r3, #38	; 0x26
 8006c20:	2210      	movs	r2, #16
 8006c22:	801a      	strh	r2, [r3, #0]
 8006c24:	e035      	b.n	8006c92 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006c26:	4b42      	ldr	r3, [pc, #264]	; (8006d30 <USBD_CDC_Init+0x1e4>)
 8006c28:	7819      	ldrb	r1, [r3, #0]
 8006c2a:	2340      	movs	r3, #64	; 0x40
 8006c2c:	2202      	movs	r2, #2
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f002 faa9 	bl	8009186 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006c34:	4b3e      	ldr	r3, [pc, #248]	; (8006d30 <USBD_CDC_Init+0x1e4>)
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	f003 020f 	and.w	r2, r3, #15
 8006c3c:	6879      	ldr	r1, [r7, #4]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	440b      	add	r3, r1
 8006c48:	3324      	adds	r3, #36	; 0x24
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006c4e:	4b39      	ldr	r3, [pc, #228]	; (8006d34 <USBD_CDC_Init+0x1e8>)
 8006c50:	7819      	ldrb	r1, [r3, #0]
 8006c52:	2340      	movs	r3, #64	; 0x40
 8006c54:	2202      	movs	r2, #2
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f002 fa95 	bl	8009186 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c5c:	4b35      	ldr	r3, [pc, #212]	; (8006d34 <USBD_CDC_Init+0x1e8>)
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	f003 020f 	and.w	r2, r3, #15
 8006c64:	6879      	ldr	r1, [r7, #4]
 8006c66:	4613      	mov	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	440b      	add	r3, r1
 8006c70:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c74:	2201      	movs	r2, #1
 8006c76:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c78:	4b2f      	ldr	r3, [pc, #188]	; (8006d38 <USBD_CDC_Init+0x1ec>)
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	f003 020f 	and.w	r2, r3, #15
 8006c80:	6879      	ldr	r1, [r7, #4]
 8006c82:	4613      	mov	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	440b      	add	r3, r1
 8006c8c:	3326      	adds	r3, #38	; 0x26
 8006c8e:	2210      	movs	r2, #16
 8006c90:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c92:	4b29      	ldr	r3, [pc, #164]	; (8006d38 <USBD_CDC_Init+0x1ec>)
 8006c94:	7819      	ldrb	r1, [r3, #0]
 8006c96:	2308      	movs	r3, #8
 8006c98:	2203      	movs	r2, #3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f002 fa73 	bl	8009186 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006ca0:	4b25      	ldr	r3, [pc, #148]	; (8006d38 <USBD_CDC_Init+0x1ec>)
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	f003 020f 	and.w	r2, r3, #15
 8006ca8:	6879      	ldr	r1, [r7, #4]
 8006caa:	4613      	mov	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4413      	add	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	440b      	add	r3, r1
 8006cb4:	3324      	adds	r3, #36	; 0x24
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	33b0      	adds	r3, #176	; 0xb0
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d101      	bne.n	8006cf4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	e018      	b.n	8006d26 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	7c1b      	ldrb	r3, [r3, #16]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10a      	bne.n	8006d12 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006cfc:	4b0d      	ldr	r3, [pc, #52]	; (8006d34 <USBD_CDC_Init+0x1e8>)
 8006cfe:	7819      	ldrb	r1, [r3, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f002 fb2a 	bl	8009364 <USBD_LL_PrepareReceive>
 8006d10:	e008      	b.n	8006d24 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d12:	4b08      	ldr	r3, [pc, #32]	; (8006d34 <USBD_CDC_Init+0x1e8>)
 8006d14:	7819      	ldrb	r1, [r3, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d1c:	2340      	movs	r3, #64	; 0x40
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f002 fb20 	bl	8009364 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	200000ff 	.word	0x200000ff
 8006d34:	20000100 	.word	0x20000100
 8006d38:	20000101 	.word	0x20000101

08006d3c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	460b      	mov	r3, r1
 8006d46:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006d48:	4b3a      	ldr	r3, [pc, #232]	; (8006e34 <USBD_CDC_DeInit+0xf8>)
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f002 fa3f 	bl	80091d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006d54:	4b37      	ldr	r3, [pc, #220]	; (8006e34 <USBD_CDC_DeInit+0xf8>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	f003 020f 	and.w	r2, r3, #15
 8006d5c:	6879      	ldr	r1, [r7, #4]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	440b      	add	r3, r1
 8006d68:	3324      	adds	r3, #36	; 0x24
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006d6e:	4b32      	ldr	r3, [pc, #200]	; (8006e38 <USBD_CDC_DeInit+0xfc>)
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	4619      	mov	r1, r3
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f002 fa2c 	bl	80091d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006d7a:	4b2f      	ldr	r3, [pc, #188]	; (8006e38 <USBD_CDC_DeInit+0xfc>)
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	f003 020f 	and.w	r2, r3, #15
 8006d82:	6879      	ldr	r1, [r7, #4]
 8006d84:	4613      	mov	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	440b      	add	r3, r1
 8006d8e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d92:	2200      	movs	r2, #0
 8006d94:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006d96:	4b29      	ldr	r3, [pc, #164]	; (8006e3c <USBD_CDC_DeInit+0x100>)
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f002 fa18 	bl	80091d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006da2:	4b26      	ldr	r3, [pc, #152]	; (8006e3c <USBD_CDC_DeInit+0x100>)
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	f003 020f 	and.w	r2, r3, #15
 8006daa:	6879      	ldr	r1, [r7, #4]
 8006dac:	4613      	mov	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	440b      	add	r3, r1
 8006db6:	3324      	adds	r3, #36	; 0x24
 8006db8:	2200      	movs	r2, #0
 8006dba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006dbc:	4b1f      	ldr	r3, [pc, #124]	; (8006e3c <USBD_CDC_DeInit+0x100>)
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	f003 020f 	and.w	r2, r3, #15
 8006dc4:	6879      	ldr	r1, [r7, #4]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	440b      	add	r3, r1
 8006dd0:	3326      	adds	r3, #38	; 0x26
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	32b0      	adds	r2, #176	; 0xb0
 8006de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d01f      	beq.n	8006e28 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	33b0      	adds	r3, #176	; 0xb0
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4413      	add	r3, r2
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	32b0      	adds	r2, #176	; 0xb0
 8006e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f002 faec 	bl	80093e8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	32b0      	adds	r2, #176	; 0xb0
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	200000ff 	.word	0x200000ff
 8006e38:	20000100 	.word	0x20000100
 8006e3c:	20000101 	.word	0x20000101

08006e40 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	32b0      	adds	r2, #176	; 0xb0
 8006e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e58:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e62:	2300      	movs	r3, #0
 8006e64:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e0bf      	b.n	8006ff0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d050      	beq.n	8006f1e <USBD_CDC_Setup+0xde>
 8006e7c:	2b20      	cmp	r3, #32
 8006e7e:	f040 80af 	bne.w	8006fe0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	88db      	ldrh	r3, [r3, #6]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d03a      	beq.n	8006f00 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	b25b      	sxtb	r3, r3
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	da1b      	bge.n	8006ecc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	33b0      	adds	r3, #176	; 0xb0
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4413      	add	r3, r2
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006eaa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006eac:	683a      	ldr	r2, [r7, #0]
 8006eae:	88d2      	ldrh	r2, [r2, #6]
 8006eb0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	88db      	ldrh	r3, [r3, #6]
 8006eb6:	2b07      	cmp	r3, #7
 8006eb8:	bf28      	it	cs
 8006eba:	2307      	movcs	r3, #7
 8006ebc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	89fa      	ldrh	r2, [r7, #14]
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f001 fd43 	bl	8008950 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006eca:	e090      	b.n	8006fee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	785a      	ldrb	r2, [r3, #1]
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	88db      	ldrh	r3, [r3, #6]
 8006eda:	2b3f      	cmp	r3, #63	; 0x3f
 8006edc:	d803      	bhi.n	8006ee6 <USBD_CDC_Setup+0xa6>
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	88db      	ldrh	r3, [r3, #6]
 8006ee2:	b2da      	uxtb	r2, r3
 8006ee4:	e000      	b.n	8006ee8 <USBD_CDC_Setup+0xa8>
 8006ee6:	2240      	movs	r2, #64	; 0x40
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006eee:	6939      	ldr	r1, [r7, #16]
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f001 fd55 	bl	80089a8 <USBD_CtlPrepareRx>
      break;
 8006efe:	e076      	b.n	8006fee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	33b0      	adds	r3, #176	; 0xb0
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	7850      	ldrb	r0, [r2, #1]
 8006f16:	2200      	movs	r2, #0
 8006f18:	6839      	ldr	r1, [r7, #0]
 8006f1a:	4798      	blx	r3
      break;
 8006f1c:	e067      	b.n	8006fee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	785b      	ldrb	r3, [r3, #1]
 8006f22:	2b0b      	cmp	r3, #11
 8006f24:	d851      	bhi.n	8006fca <USBD_CDC_Setup+0x18a>
 8006f26:	a201      	add	r2, pc, #4	; (adr r2, 8006f2c <USBD_CDC_Setup+0xec>)
 8006f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2c:	08006f5d 	.word	0x08006f5d
 8006f30:	08006fd9 	.word	0x08006fd9
 8006f34:	08006fcb 	.word	0x08006fcb
 8006f38:	08006fcb 	.word	0x08006fcb
 8006f3c:	08006fcb 	.word	0x08006fcb
 8006f40:	08006fcb 	.word	0x08006fcb
 8006f44:	08006fcb 	.word	0x08006fcb
 8006f48:	08006fcb 	.word	0x08006fcb
 8006f4c:	08006fcb 	.word	0x08006fcb
 8006f50:	08006fcb 	.word	0x08006fcb
 8006f54:	08006f87 	.word	0x08006f87
 8006f58:	08006fb1 	.word	0x08006fb1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b03      	cmp	r3, #3
 8006f66:	d107      	bne.n	8006f78 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006f68:	f107 030a 	add.w	r3, r7, #10
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	4619      	mov	r1, r3
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f001 fced 	bl	8008950 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f76:	e032      	b.n	8006fde <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f001 fc77 	bl	800886e <USBD_CtlError>
            ret = USBD_FAIL;
 8006f80:	2303      	movs	r3, #3
 8006f82:	75fb      	strb	r3, [r7, #23]
          break;
 8006f84:	e02b      	b.n	8006fde <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b03      	cmp	r3, #3
 8006f90:	d107      	bne.n	8006fa2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006f92:	f107 030d 	add.w	r3, r7, #13
 8006f96:	2201      	movs	r2, #1
 8006f98:	4619      	mov	r1, r3
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f001 fcd8 	bl	8008950 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fa0:	e01d      	b.n	8006fde <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f001 fc62 	bl	800886e <USBD_CtlError>
            ret = USBD_FAIL;
 8006faa:	2303      	movs	r3, #3
 8006fac:	75fb      	strb	r3, [r7, #23]
          break;
 8006fae:	e016      	b.n	8006fde <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	2b03      	cmp	r3, #3
 8006fba:	d00f      	beq.n	8006fdc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006fbc:	6839      	ldr	r1, [r7, #0]
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f001 fc55 	bl	800886e <USBD_CtlError>
            ret = USBD_FAIL;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006fc8:	e008      	b.n	8006fdc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006fca:	6839      	ldr	r1, [r7, #0]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f001 fc4e 	bl	800886e <USBD_CtlError>
          ret = USBD_FAIL;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	75fb      	strb	r3, [r7, #23]
          break;
 8006fd6:	e002      	b.n	8006fde <USBD_CDC_Setup+0x19e>
          break;
 8006fd8:	bf00      	nop
 8006fda:	e008      	b.n	8006fee <USBD_CDC_Setup+0x1ae>
          break;
 8006fdc:	bf00      	nop
      }
      break;
 8006fde:	e006      	b.n	8006fee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f001 fc43 	bl	800886e <USBD_CtlError>
      ret = USBD_FAIL;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	75fb      	strb	r3, [r7, #23]
      break;
 8006fec:	bf00      	nop
  }

  return (uint8_t)ret;
 8006fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3718      	adds	r7, #24
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	460b      	mov	r3, r1
 8007002:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800700a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	32b0      	adds	r2, #176	; 0xb0
 8007016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800701e:	2303      	movs	r3, #3
 8007020:	e065      	b.n	80070ee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	32b0      	adds	r2, #176	; 0xb0
 800702c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007030:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007032:	78fb      	ldrb	r3, [r7, #3]
 8007034:	f003 020f 	and.w	r2, r3, #15
 8007038:	6879      	ldr	r1, [r7, #4]
 800703a:	4613      	mov	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	440b      	add	r3, r1
 8007044:	3318      	adds	r3, #24
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d02f      	beq.n	80070ac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800704c:	78fb      	ldrb	r3, [r7, #3]
 800704e:	f003 020f 	and.w	r2, r3, #15
 8007052:	6879      	ldr	r1, [r7, #4]
 8007054:	4613      	mov	r3, r2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	4413      	add	r3, r2
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	440b      	add	r3, r1
 800705e:	3318      	adds	r3, #24
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	78fb      	ldrb	r3, [r7, #3]
 8007064:	f003 010f 	and.w	r1, r3, #15
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	460b      	mov	r3, r1
 800706c:	00db      	lsls	r3, r3, #3
 800706e:	440b      	add	r3, r1
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4403      	add	r3, r0
 8007074:	3348      	adds	r3, #72	; 0x48
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	fbb2 f1f3 	udiv	r1, r2, r3
 800707c:	fb01 f303 	mul.w	r3, r1, r3
 8007080:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007082:	2b00      	cmp	r3, #0
 8007084:	d112      	bne.n	80070ac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007086:	78fb      	ldrb	r3, [r7, #3]
 8007088:	f003 020f 	and.w	r2, r3, #15
 800708c:	6879      	ldr	r1, [r7, #4]
 800708e:	4613      	mov	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4413      	add	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	440b      	add	r3, r1
 8007098:	3318      	adds	r3, #24
 800709a:	2200      	movs	r2, #0
 800709c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800709e:	78f9      	ldrb	r1, [r7, #3]
 80070a0:	2300      	movs	r3, #0
 80070a2:	2200      	movs	r2, #0
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f002 f93c 	bl	8009322 <USBD_LL_Transmit>
 80070aa:	e01f      	b.n	80070ec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	33b0      	adds	r3, #176	; 0xb0
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d010      	beq.n	80070ec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	33b0      	adds	r3, #176	; 0xb0
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4413      	add	r3, r2
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80070e8:	78fa      	ldrb	r2, [r7, #3]
 80070ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b084      	sub	sp, #16
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	460b      	mov	r3, r1
 8007100:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	32b0      	adds	r2, #176	; 0xb0
 800710c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007110:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	32b0      	adds	r2, #176	; 0xb0
 800711c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d101      	bne.n	8007128 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007124:	2303      	movs	r3, #3
 8007126:	e01a      	b.n	800715e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007128:	78fb      	ldrb	r3, [r7, #3]
 800712a:	4619      	mov	r1, r3
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f002 f93a 	bl	80093a6 <USBD_LL_GetRxDataSize>
 8007132:	4602      	mov	r2, r0
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	33b0      	adds	r3, #176	; 0xb0
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007158:	4611      	mov	r1, r2
 800715a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b084      	sub	sp, #16
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	32b0      	adds	r2, #176	; 0xb0
 8007178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800717c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d101      	bne.n	8007188 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007184:	2303      	movs	r3, #3
 8007186:	e025      	b.n	80071d4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	33b0      	adds	r3, #176	; 0xb0
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d01a      	beq.n	80071d2 <USBD_CDC_EP0_RxReady+0x6c>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80071a2:	2bff      	cmp	r3, #255	; 0xff
 80071a4:	d015      	beq.n	80071d2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	33b0      	adds	r3, #176	; 0xb0
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4413      	add	r3, r2
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80071be:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80071c6:	b292      	uxth	r2, r2
 80071c8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	22ff      	movs	r2, #255	; 0xff
 80071ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80071e4:	2182      	movs	r1, #130	; 0x82
 80071e6:	4818      	ldr	r0, [pc, #96]	; (8007248 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80071e8:	f000 fd09 	bl	8007bfe <USBD_GetEpDesc>
 80071ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80071ee:	2101      	movs	r1, #1
 80071f0:	4815      	ldr	r0, [pc, #84]	; (8007248 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80071f2:	f000 fd04 	bl	8007bfe <USBD_GetEpDesc>
 80071f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80071f8:	2181      	movs	r1, #129	; 0x81
 80071fa:	4813      	ldr	r0, [pc, #76]	; (8007248 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80071fc:	f000 fcff 	bl	8007bfe <USBD_GetEpDesc>
 8007200:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	2210      	movs	r2, #16
 800720c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d006      	beq.n	8007222 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	2200      	movs	r2, #0
 8007218:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800721c:	711a      	strb	r2, [r3, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d006      	beq.n	8007236 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007230:	711a      	strb	r2, [r3, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2243      	movs	r2, #67	; 0x43
 800723a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800723c:	4b02      	ldr	r3, [pc, #8]	; (8007248 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800723e:	4618      	mov	r0, r3
 8007240:	3718      	adds	r7, #24
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	200000bc 	.word	0x200000bc

0800724c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b086      	sub	sp, #24
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007254:	2182      	movs	r1, #130	; 0x82
 8007256:	4818      	ldr	r0, [pc, #96]	; (80072b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007258:	f000 fcd1 	bl	8007bfe <USBD_GetEpDesc>
 800725c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800725e:	2101      	movs	r1, #1
 8007260:	4815      	ldr	r0, [pc, #84]	; (80072b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007262:	f000 fccc 	bl	8007bfe <USBD_GetEpDesc>
 8007266:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007268:	2181      	movs	r1, #129	; 0x81
 800726a:	4813      	ldr	r0, [pc, #76]	; (80072b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800726c:	f000 fcc7 	bl	8007bfe <USBD_GetEpDesc>
 8007270:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	2210      	movs	r2, #16
 800727c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d006      	beq.n	8007292 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	2200      	movs	r2, #0
 8007288:	711a      	strb	r2, [r3, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f042 0202 	orr.w	r2, r2, #2
 8007290:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d006      	beq.n	80072a6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	711a      	strb	r2, [r3, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	f042 0202 	orr.w	r2, r2, #2
 80072a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2243      	movs	r2, #67	; 0x43
 80072aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80072ac:	4b02      	ldr	r3, [pc, #8]	; (80072b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	200000bc 	.word	0x200000bc

080072bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80072c4:	2182      	movs	r1, #130	; 0x82
 80072c6:	4818      	ldr	r0, [pc, #96]	; (8007328 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80072c8:	f000 fc99 	bl	8007bfe <USBD_GetEpDesc>
 80072cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80072ce:	2101      	movs	r1, #1
 80072d0:	4815      	ldr	r0, [pc, #84]	; (8007328 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80072d2:	f000 fc94 	bl	8007bfe <USBD_GetEpDesc>
 80072d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80072d8:	2181      	movs	r1, #129	; 0x81
 80072da:	4813      	ldr	r0, [pc, #76]	; (8007328 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80072dc:	f000 fc8f 	bl	8007bfe <USBD_GetEpDesc>
 80072e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d002      	beq.n	80072ee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	2210      	movs	r2, #16
 80072ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d006      	beq.n	8007302 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072fc:	711a      	strb	r2, [r3, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d006      	beq.n	8007316 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007310:	711a      	strb	r2, [r3, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2243      	movs	r2, #67	; 0x43
 800731a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800731c:	4b02      	ldr	r3, [pc, #8]	; (8007328 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800731e:	4618      	mov	r0, r3
 8007320:	3718      	adds	r7, #24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	200000bc 	.word	0x200000bc

0800732c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	220a      	movs	r2, #10
 8007338:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800733a:	4b03      	ldr	r3, [pc, #12]	; (8007348 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800733c:	4618      	mov	r0, r3
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr
 8007348:	20000078 	.word	0x20000078

0800734c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d101      	bne.n	8007360 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800735c:	2303      	movs	r3, #3
 800735e:	e009      	b.n	8007374 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	33b0      	adds	r3, #176	; 0xb0
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4413      	add	r3, r2
 800736e:	683a      	ldr	r2, [r7, #0]
 8007370:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007380:	b480      	push	{r7}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	32b0      	adds	r2, #176	; 0xb0
 8007396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800739a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d101      	bne.n	80073a6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e008      	b.n	80073b8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	371c      	adds	r7, #28
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	32b0      	adds	r2, #176	; 0xb0
 80073d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e004      	b.n	80073f2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
	...

08007400 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	32b0      	adds	r2, #176	; 0xb0
 8007412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007416:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	32b0      	adds	r2, #176	; 0xb0
 8007422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d101      	bne.n	800742e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800742a:	2303      	movs	r3, #3
 800742c:	e018      	b.n	8007460 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	7c1b      	ldrb	r3, [r3, #16]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10a      	bne.n	800744c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007436:	4b0c      	ldr	r3, [pc, #48]	; (8007468 <USBD_CDC_ReceivePacket+0x68>)
 8007438:	7819      	ldrb	r1, [r3, #0]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007440:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f001 ff8d 	bl	8009364 <USBD_LL_PrepareReceive>
 800744a:	e008      	b.n	800745e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800744c:	4b06      	ldr	r3, [pc, #24]	; (8007468 <USBD_CDC_ReceivePacket+0x68>)
 800744e:	7819      	ldrb	r1, [r3, #0]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007456:	2340      	movs	r3, #64	; 0x40
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f001 ff83 	bl	8009364 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	20000100 	.word	0x20000100

0800746c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b086      	sub	sp, #24
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	4613      	mov	r3, r2
 8007478:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d101      	bne.n	8007484 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007480:	2303      	movs	r3, #3
 8007482:	e01f      	b.n	80074c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d003      	beq.n	80074aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	79fa      	ldrb	r2, [r7, #7]
 80074b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f001 fdfd 	bl	80090b8 <USBD_LL_Init>
 80074be:	4603      	mov	r3, r0
 80074c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80074c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3718      	adds	r7, #24
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074d6:	2300      	movs	r3, #0
 80074d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e025      	b.n	8007530 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	683a      	ldr	r2, [r7, #0]
 80074e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	32ae      	adds	r2, #174	; 0xae
 80074f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00f      	beq.n	8007520 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	32ae      	adds	r2, #174	; 0xae
 800750a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800750e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007510:	f107 020e 	add.w	r2, r7, #14
 8007514:	4610      	mov	r0, r2
 8007516:	4798      	blx	r3
 8007518:	4602      	mov	r2, r0
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007526:	1c5a      	adds	r2, r3, #1
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f001 fe05 	bl	8009150 <USBD_LL_Start>
 8007546:	4603      	mov	r3, r0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007558:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800755a:	4618      	mov	r0, r3
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b084      	sub	sp, #16
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
 800756e:	460b      	mov	r3, r1
 8007570:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800757c:	2b00      	cmp	r3, #0
 800757e:	d009      	beq.n	8007594 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	78fa      	ldrb	r2, [r7, #3]
 800758a:	4611      	mov	r1, r2
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	4798      	blx	r3
 8007590:	4603      	mov	r3, r0
 8007592:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007594:	7bfb      	ldrb	r3, [r7, #15]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b084      	sub	sp, #16
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
 80075a6:	460b      	mov	r3, r1
 80075a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80075aa:	2300      	movs	r3, #0
 80075ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	78fa      	ldrb	r2, [r7, #3]
 80075b8:	4611      	mov	r1, r2
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	4798      	blx	r3
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80075c4:	2303      	movs	r3, #3
 80075c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b084      	sub	sp, #16
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
 80075da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075e2:	6839      	ldr	r1, [r7, #0]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f001 f908 	bl	80087fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2201      	movs	r2, #1
 80075ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80075f8:	461a      	mov	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007606:	f003 031f 	and.w	r3, r3, #31
 800760a:	2b02      	cmp	r3, #2
 800760c:	d01a      	beq.n	8007644 <USBD_LL_SetupStage+0x72>
 800760e:	2b02      	cmp	r3, #2
 8007610:	d822      	bhi.n	8007658 <USBD_LL_SetupStage+0x86>
 8007612:	2b00      	cmp	r3, #0
 8007614:	d002      	beq.n	800761c <USBD_LL_SetupStage+0x4a>
 8007616:	2b01      	cmp	r3, #1
 8007618:	d00a      	beq.n	8007630 <USBD_LL_SetupStage+0x5e>
 800761a:	e01d      	b.n	8007658 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007622:	4619      	mov	r1, r3
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fb5f 	bl	8007ce8 <USBD_StdDevReq>
 800762a:	4603      	mov	r3, r0
 800762c:	73fb      	strb	r3, [r7, #15]
      break;
 800762e:	e020      	b.n	8007672 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007636:	4619      	mov	r1, r3
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fbc7 	bl	8007dcc <USBD_StdItfReq>
 800763e:	4603      	mov	r3, r0
 8007640:	73fb      	strb	r3, [r7, #15]
      break;
 8007642:	e016      	b.n	8007672 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800764a:	4619      	mov	r1, r3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fc29 	bl	8007ea4 <USBD_StdEPReq>
 8007652:	4603      	mov	r3, r0
 8007654:	73fb      	strb	r3, [r7, #15]
      break;
 8007656:	e00c      	b.n	8007672 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800765e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007662:	b2db      	uxtb	r3, r3
 8007664:	4619      	mov	r1, r3
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f001 fdd2 	bl	8009210 <USBD_LL_StallEP>
 800766c:	4603      	mov	r3, r0
 800766e:	73fb      	strb	r3, [r7, #15]
      break;
 8007670:	bf00      	nop
  }

  return ret;
 8007672:	7bfb      	ldrb	r3, [r7, #15]
}
 8007674:	4618      	mov	r0, r3
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	460b      	mov	r3, r1
 8007686:	607a      	str	r2, [r7, #4]
 8007688:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800768a:	2300      	movs	r3, #0
 800768c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800768e:	7afb      	ldrb	r3, [r7, #11]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d16e      	bne.n	8007772 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800769a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	f040 8098 	bne.w	80077d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	689a      	ldr	r2, [r3, #8]
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d913      	bls.n	80076dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	689a      	ldr	r2, [r3, #8]
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	1ad2      	subs	r2, r2, r3
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	68da      	ldr	r2, [r3, #12]
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	4293      	cmp	r3, r2
 80076cc:	bf28      	it	cs
 80076ce:	4613      	movcs	r3, r2
 80076d0:	461a      	mov	r2, r3
 80076d2:	6879      	ldr	r1, [r7, #4]
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f001 f984 	bl	80089e2 <USBD_CtlContinueRx>
 80076da:	e07d      	b.n	80077d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80076e2:	f003 031f 	and.w	r3, r3, #31
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d014      	beq.n	8007714 <USBD_LL_DataOutStage+0x98>
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d81d      	bhi.n	800772a <USBD_LL_DataOutStage+0xae>
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d002      	beq.n	80076f8 <USBD_LL_DataOutStage+0x7c>
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d003      	beq.n	80076fe <USBD_LL_DataOutStage+0x82>
 80076f6:	e018      	b.n	800772a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80076f8:	2300      	movs	r3, #0
 80076fa:	75bb      	strb	r3, [r7, #22]
            break;
 80076fc:	e018      	b.n	8007730 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007704:	b2db      	uxtb	r3, r3
 8007706:	4619      	mov	r1, r3
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f000 fa5e 	bl	8007bca <USBD_CoreFindIF>
 800770e:	4603      	mov	r3, r0
 8007710:	75bb      	strb	r3, [r7, #22]
            break;
 8007712:	e00d      	b.n	8007730 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800771a:	b2db      	uxtb	r3, r3
 800771c:	4619      	mov	r1, r3
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f000 fa60 	bl	8007be4 <USBD_CoreFindEP>
 8007724:	4603      	mov	r3, r0
 8007726:	75bb      	strb	r3, [r7, #22]
            break;
 8007728:	e002      	b.n	8007730 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800772a:	2300      	movs	r3, #0
 800772c:	75bb      	strb	r3, [r7, #22]
            break;
 800772e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007730:	7dbb      	ldrb	r3, [r7, #22]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d119      	bne.n	800776a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b03      	cmp	r3, #3
 8007740:	d113      	bne.n	800776a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007742:	7dba      	ldrb	r2, [r7, #22]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	32ae      	adds	r2, #174	; 0xae
 8007748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00b      	beq.n	800776a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007752:	7dba      	ldrb	r2, [r7, #22]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800775a:	7dba      	ldrb	r2, [r7, #22]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	32ae      	adds	r2, #174	; 0xae
 8007760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f001 f94a 	bl	8008a04 <USBD_CtlSendStatus>
 8007770:	e032      	b.n	80077d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007772:	7afb      	ldrb	r3, [r7, #11]
 8007774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007778:	b2db      	uxtb	r3, r3
 800777a:	4619      	mov	r1, r3
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f000 fa31 	bl	8007be4 <USBD_CoreFindEP>
 8007782:	4603      	mov	r3, r0
 8007784:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007786:	7dbb      	ldrb	r3, [r7, #22]
 8007788:	2bff      	cmp	r3, #255	; 0xff
 800778a:	d025      	beq.n	80077d8 <USBD_LL_DataOutStage+0x15c>
 800778c:	7dbb      	ldrb	r3, [r7, #22]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d122      	bne.n	80077d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b03      	cmp	r3, #3
 800779c:	d117      	bne.n	80077ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800779e:	7dba      	ldrb	r2, [r7, #22]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	32ae      	adds	r2, #174	; 0xae
 80077a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00f      	beq.n	80077ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80077ae:	7dba      	ldrb	r2, [r7, #22]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80077b6:	7dba      	ldrb	r2, [r7, #22]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	32ae      	adds	r2, #174	; 0xae
 80077bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	7afa      	ldrb	r2, [r7, #11]
 80077c4:	4611      	mov	r1, r2
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	4798      	blx	r3
 80077ca:	4603      	mov	r3, r0
 80077cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80077ce:	7dfb      	ldrb	r3, [r7, #23]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d001      	beq.n	80077d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80077d4:	7dfb      	ldrb	r3, [r7, #23]
 80077d6:	e000      	b.n	80077da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b086      	sub	sp, #24
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	60f8      	str	r0, [r7, #12]
 80077ea:	460b      	mov	r3, r1
 80077ec:	607a      	str	r2, [r7, #4]
 80077ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80077f0:	7afb      	ldrb	r3, [r7, #11]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d16f      	bne.n	80078d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	3314      	adds	r3, #20
 80077fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007802:	2b02      	cmp	r3, #2
 8007804:	d15a      	bne.n	80078bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	689a      	ldr	r2, [r3, #8]
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	429a      	cmp	r2, r3
 8007810:	d914      	bls.n	800783c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	689a      	ldr	r2, [r3, #8]
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	1ad2      	subs	r2, r2, r3
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	461a      	mov	r2, r3
 8007826:	6879      	ldr	r1, [r7, #4]
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f001 f8ac 	bl	8008986 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800782e:	2300      	movs	r3, #0
 8007830:	2200      	movs	r2, #0
 8007832:	2100      	movs	r1, #0
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f001 fd95 	bl	8009364 <USBD_LL_PrepareReceive>
 800783a:	e03f      	b.n	80078bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	68da      	ldr	r2, [r3, #12]
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	429a      	cmp	r2, r3
 8007846:	d11c      	bne.n	8007882 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	685a      	ldr	r2, [r3, #4]
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007850:	429a      	cmp	r2, r3
 8007852:	d316      	bcc.n	8007882 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	685a      	ldr	r2, [r3, #4]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800785e:	429a      	cmp	r2, r3
 8007860:	d20f      	bcs.n	8007882 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007862:	2200      	movs	r2, #0
 8007864:	2100      	movs	r1, #0
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f001 f88d 	bl	8008986 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007874:	2300      	movs	r3, #0
 8007876:	2200      	movs	r2, #0
 8007878:	2100      	movs	r1, #0
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f001 fd72 	bl	8009364 <USBD_LL_PrepareReceive>
 8007880:	e01c      	b.n	80078bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b03      	cmp	r3, #3
 800788c:	d10f      	bne.n	80078ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d009      	beq.n	80078ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80078ae:	2180      	movs	r1, #128	; 0x80
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f001 fcad 	bl	8009210 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f001 f8b7 	bl	8008a2a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d03a      	beq.n	800793c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f7ff fe42 	bl	8007550 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80078d4:	e032      	b.n	800793c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80078d6:	7afb      	ldrb	r3, [r7, #11]
 80078d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	4619      	mov	r1, r3
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 f97f 	bl	8007be4 <USBD_CoreFindEP>
 80078e6:	4603      	mov	r3, r0
 80078e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078ea:	7dfb      	ldrb	r3, [r7, #23]
 80078ec:	2bff      	cmp	r3, #255	; 0xff
 80078ee:	d025      	beq.n	800793c <USBD_LL_DataInStage+0x15a>
 80078f0:	7dfb      	ldrb	r3, [r7, #23]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d122      	bne.n	800793c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b03      	cmp	r3, #3
 8007900:	d11c      	bne.n	800793c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007902:	7dfa      	ldrb	r2, [r7, #23]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	32ae      	adds	r2, #174	; 0xae
 8007908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d014      	beq.n	800793c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007912:	7dfa      	ldrb	r2, [r7, #23]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800791a:	7dfa      	ldrb	r2, [r7, #23]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	32ae      	adds	r2, #174	; 0xae
 8007920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007924:	695b      	ldr	r3, [r3, #20]
 8007926:	7afa      	ldrb	r2, [r7, #11]
 8007928:	4611      	mov	r1, r2
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	4798      	blx	r3
 800792e:	4603      	mov	r3, r0
 8007930:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007932:	7dbb      	ldrb	r3, [r7, #22]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d001      	beq.n	800793c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007938:	7dbb      	ldrb	r3, [r7, #22]
 800793a:	e000      	b.n	800793e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3718      	adds	r7, #24
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b084      	sub	sp, #16
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800797e:	2b00      	cmp	r3, #0
 8007980:	d014      	beq.n	80079ac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00e      	beq.n	80079ac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	6852      	ldr	r2, [r2, #4]
 800799a:	b2d2      	uxtb	r2, r2
 800799c:	4611      	mov	r1, r2
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	4798      	blx	r3
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80079a8:	2303      	movs	r3, #3
 80079aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079ac:	2340      	movs	r3, #64	; 0x40
 80079ae:	2200      	movs	r2, #0
 80079b0:	2100      	movs	r1, #0
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f001 fbe7 	bl	8009186 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2240      	movs	r2, #64	; 0x40
 80079c4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079c8:	2340      	movs	r3, #64	; 0x40
 80079ca:	2200      	movs	r2, #0
 80079cc:	2180      	movs	r1, #128	; 0x80
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f001 fbd9 	bl	8009186 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2240      	movs	r2, #64	; 0x40
 80079de:	621a      	str	r2, [r3, #32]

  return ret;
 80079e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80079ea:	b480      	push	{r7}
 80079ec:	b083      	sub	sp, #12
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
 80079f2:	460b      	mov	r3, r1
 80079f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	78fa      	ldrb	r2, [r7, #3]
 80079fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b083      	sub	sp, #12
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a18:	b2da      	uxtb	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2204      	movs	r2, #4
 8007a24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	370c      	adds	r7, #12
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a36:	b480      	push	{r7}
 8007a38:	b083      	sub	sp, #12
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b04      	cmp	r3, #4
 8007a48:	d106      	bne.n	8007a58 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	370c      	adds	r7, #12
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b082      	sub	sp, #8
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	d110      	bne.n	8007a9c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00b      	beq.n	8007a9c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a8a:	69db      	ldr	r3, [r3, #28]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d005      	beq.n	8007a9c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a96:	69db      	ldr	r3, [r3, #28]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3708      	adds	r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b082      	sub	sp, #8
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	460b      	mov	r3, r1
 8007ab0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	32ae      	adds	r2, #174	; 0xae
 8007abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d101      	bne.n	8007ac8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e01c      	b.n	8007b02 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b03      	cmp	r3, #3
 8007ad2:	d115      	bne.n	8007b00 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	32ae      	adds	r2, #174	; 0xae
 8007ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae2:	6a1b      	ldr	r3, [r3, #32]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00b      	beq.n	8007b00 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	32ae      	adds	r2, #174	; 0xae
 8007af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af6:	6a1b      	ldr	r3, [r3, #32]
 8007af8:	78fa      	ldrb	r2, [r7, #3]
 8007afa:	4611      	mov	r1, r2
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b082      	sub	sp, #8
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
 8007b12:	460b      	mov	r3, r1
 8007b14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	32ae      	adds	r2, #174	; 0xae
 8007b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d101      	bne.n	8007b2c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e01c      	b.n	8007b66 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	2b03      	cmp	r3, #3
 8007b36:	d115      	bne.n	8007b64 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	32ae      	adds	r2, #174	; 0xae
 8007b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00b      	beq.n	8007b64 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	32ae      	adds	r2, #174	; 0xae
 8007b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5c:	78fa      	ldrb	r2, [r7, #3]
 8007b5e:	4611      	mov	r1, r2
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007b6e:	b480      	push	{r7}
 8007b70:	b083      	sub	sp, #12
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00e      	beq.n	8007bc0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	6852      	ldr	r2, [r2, #4]
 8007bae:	b2d2      	uxtb	r2, r2
 8007bb0:	4611      	mov	r1, r2
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	4798      	blx	r3
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d001      	beq.n	8007bc0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b083      	sub	sp, #12
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007bd6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	460b      	mov	r3, r1
 8007bee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007bf0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	370c      	adds	r7, #12
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr

08007bfe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b086      	sub	sp, #24
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	460b      	mov	r3, r1
 8007c08:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007c12:	2300      	movs	r3, #0
 8007c14:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	885b      	ldrh	r3, [r3, #2]
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d920      	bls.n	8007c68 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007c2e:	e013      	b.n	8007c58 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007c30:	f107 030a 	add.w	r3, r7, #10
 8007c34:	4619      	mov	r1, r3
 8007c36:	6978      	ldr	r0, [r7, #20]
 8007c38:	f000 f81b 	bl	8007c72 <USBD_GetNextDesc>
 8007c3c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	785b      	ldrb	r3, [r3, #1]
 8007c42:	2b05      	cmp	r3, #5
 8007c44:	d108      	bne.n	8007c58 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	789b      	ldrb	r3, [r3, #2]
 8007c4e:	78fa      	ldrb	r2, [r7, #3]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d008      	beq.n	8007c66 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007c54:	2300      	movs	r3, #0
 8007c56:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	885b      	ldrh	r3, [r3, #2]
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	897b      	ldrh	r3, [r7, #10]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d8e5      	bhi.n	8007c30 <USBD_GetEpDesc+0x32>
 8007c64:	e000      	b.n	8007c68 <USBD_GetEpDesc+0x6a>
          break;
 8007c66:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007c68:	693b      	ldr	r3, [r7, #16]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3718      	adds	r7, #24
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007c72:	b480      	push	{r7}
 8007c74:	b085      	sub	sp, #20
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
 8007c7a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	881a      	ldrh	r2, [r3, #0]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	4413      	add	r3, r2
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	461a      	mov	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3714      	adds	r7, #20
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b087      	sub	sp, #28
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007cca:	8a3b      	ldrh	r3, [r7, #16]
 8007ccc:	021b      	lsls	r3, r3, #8
 8007cce:	b21a      	sxth	r2, r3
 8007cd0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	b21b      	sxth	r3, r3
 8007cd8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007cda:	89fb      	ldrh	r3, [r7, #14]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	371c      	adds	r7, #28
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cfe:	2b40      	cmp	r3, #64	; 0x40
 8007d00:	d005      	beq.n	8007d0e <USBD_StdDevReq+0x26>
 8007d02:	2b40      	cmp	r3, #64	; 0x40
 8007d04:	d857      	bhi.n	8007db6 <USBD_StdDevReq+0xce>
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00f      	beq.n	8007d2a <USBD_StdDevReq+0x42>
 8007d0a:	2b20      	cmp	r3, #32
 8007d0c:	d153      	bne.n	8007db6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	32ae      	adds	r2, #174	; 0xae
 8007d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	6839      	ldr	r1, [r7, #0]
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	4798      	blx	r3
 8007d24:	4603      	mov	r3, r0
 8007d26:	73fb      	strb	r3, [r7, #15]
      break;
 8007d28:	e04a      	b.n	8007dc0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	785b      	ldrb	r3, [r3, #1]
 8007d2e:	2b09      	cmp	r3, #9
 8007d30:	d83b      	bhi.n	8007daa <USBD_StdDevReq+0xc2>
 8007d32:	a201      	add	r2, pc, #4	; (adr r2, 8007d38 <USBD_StdDevReq+0x50>)
 8007d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d38:	08007d8d 	.word	0x08007d8d
 8007d3c:	08007da1 	.word	0x08007da1
 8007d40:	08007dab 	.word	0x08007dab
 8007d44:	08007d97 	.word	0x08007d97
 8007d48:	08007dab 	.word	0x08007dab
 8007d4c:	08007d6b 	.word	0x08007d6b
 8007d50:	08007d61 	.word	0x08007d61
 8007d54:	08007dab 	.word	0x08007dab
 8007d58:	08007d83 	.word	0x08007d83
 8007d5c:	08007d75 	.word	0x08007d75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d60:	6839      	ldr	r1, [r7, #0]
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 fa3c 	bl	80081e0 <USBD_GetDescriptor>
          break;
 8007d68:	e024      	b.n	8007db4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 fba1 	bl	80084b4 <USBD_SetAddress>
          break;
 8007d72:	e01f      	b.n	8007db4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007d74:	6839      	ldr	r1, [r7, #0]
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fbe0 	bl	800853c <USBD_SetConfig>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	73fb      	strb	r3, [r7, #15]
          break;
 8007d80:	e018      	b.n	8007db4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d82:	6839      	ldr	r1, [r7, #0]
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 fc83 	bl	8008690 <USBD_GetConfig>
          break;
 8007d8a:	e013      	b.n	8007db4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d8c:	6839      	ldr	r1, [r7, #0]
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fcb4 	bl	80086fc <USBD_GetStatus>
          break;
 8007d94:	e00e      	b.n	8007db4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d96:	6839      	ldr	r1, [r7, #0]
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fce3 	bl	8008764 <USBD_SetFeature>
          break;
 8007d9e:	e009      	b.n	8007db4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fd07 	bl	80087b6 <USBD_ClrFeature>
          break;
 8007da8:	e004      	b.n	8007db4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007daa:	6839      	ldr	r1, [r7, #0]
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fd5e 	bl	800886e <USBD_CtlError>
          break;
 8007db2:	bf00      	nop
      }
      break;
 8007db4:	e004      	b.n	8007dc0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007db6:	6839      	ldr	r1, [r7, #0]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 fd58 	bl	800886e <USBD_CtlError>
      break;
 8007dbe:	bf00      	nop
  }

  return ret;
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop

08007dcc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007de2:	2b40      	cmp	r3, #64	; 0x40
 8007de4:	d005      	beq.n	8007df2 <USBD_StdItfReq+0x26>
 8007de6:	2b40      	cmp	r3, #64	; 0x40
 8007de8:	d852      	bhi.n	8007e90 <USBD_StdItfReq+0xc4>
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <USBD_StdItfReq+0x26>
 8007dee:	2b20      	cmp	r3, #32
 8007df0:	d14e      	bne.n	8007e90 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d840      	bhi.n	8007e82 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	889b      	ldrh	r3, [r3, #4]
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d836      	bhi.n	8007e78 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	889b      	ldrh	r3, [r3, #4]
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	4619      	mov	r1, r3
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f7ff fed9 	bl	8007bca <USBD_CoreFindIF>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e1c:	7bbb      	ldrb	r3, [r7, #14]
 8007e1e:	2bff      	cmp	r3, #255	; 0xff
 8007e20:	d01d      	beq.n	8007e5e <USBD_StdItfReq+0x92>
 8007e22:	7bbb      	ldrb	r3, [r7, #14]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d11a      	bne.n	8007e5e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007e28:	7bba      	ldrb	r2, [r7, #14]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	32ae      	adds	r2, #174	; 0xae
 8007e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00f      	beq.n	8007e58 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007e38:	7bba      	ldrb	r2, [r7, #14]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e40:	7bba      	ldrb	r2, [r7, #14]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	32ae      	adds	r2, #174	; 0xae
 8007e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	6839      	ldr	r1, [r7, #0]
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	4798      	blx	r3
 8007e52:	4603      	mov	r3, r0
 8007e54:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e56:	e004      	b.n	8007e62 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e5c:	e001      	b.n	8007e62 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	88db      	ldrh	r3, [r3, #6]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d110      	bne.n	8007e8c <USBD_StdItfReq+0xc0>
 8007e6a:	7bfb      	ldrb	r3, [r7, #15]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10d      	bne.n	8007e8c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fdc7 	bl	8008a04 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007e76:	e009      	b.n	8007e8c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 fcf7 	bl	800886e <USBD_CtlError>
          break;
 8007e80:	e004      	b.n	8007e8c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007e82:	6839      	ldr	r1, [r7, #0]
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fcf2 	bl	800886e <USBD_CtlError>
          break;
 8007e8a:	e000      	b.n	8007e8e <USBD_StdItfReq+0xc2>
          break;
 8007e8c:	bf00      	nop
      }
      break;
 8007e8e:	e004      	b.n	8007e9a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fceb 	bl	800886e <USBD_CtlError>
      break;
 8007e98:	bf00      	nop
  }

  return ret;
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	889b      	ldrh	r3, [r3, #4]
 8007eb6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ec0:	2b40      	cmp	r3, #64	; 0x40
 8007ec2:	d007      	beq.n	8007ed4 <USBD_StdEPReq+0x30>
 8007ec4:	2b40      	cmp	r3, #64	; 0x40
 8007ec6:	f200 817f 	bhi.w	80081c8 <USBD_StdEPReq+0x324>
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d02a      	beq.n	8007f24 <USBD_StdEPReq+0x80>
 8007ece:	2b20      	cmp	r3, #32
 8007ed0:	f040 817a 	bne.w	80081c8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ed4:	7bbb      	ldrb	r3, [r7, #14]
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f7ff fe83 	bl	8007be4 <USBD_CoreFindEP>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ee2:	7b7b      	ldrb	r3, [r7, #13]
 8007ee4:	2bff      	cmp	r3, #255	; 0xff
 8007ee6:	f000 8174 	beq.w	80081d2 <USBD_StdEPReq+0x32e>
 8007eea:	7b7b      	ldrb	r3, [r7, #13]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f040 8170 	bne.w	80081d2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007ef2:	7b7a      	ldrb	r2, [r7, #13]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007efa:	7b7a      	ldrb	r2, [r7, #13]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	32ae      	adds	r2, #174	; 0xae
 8007f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f000 8163 	beq.w	80081d2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007f0c:	7b7a      	ldrb	r2, [r7, #13]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	32ae      	adds	r2, #174	; 0xae
 8007f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	6839      	ldr	r1, [r7, #0]
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	4798      	blx	r3
 8007f1e:	4603      	mov	r3, r0
 8007f20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f22:	e156      	b.n	80081d2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	785b      	ldrb	r3, [r3, #1]
 8007f28:	2b03      	cmp	r3, #3
 8007f2a:	d008      	beq.n	8007f3e <USBD_StdEPReq+0x9a>
 8007f2c:	2b03      	cmp	r3, #3
 8007f2e:	f300 8145 	bgt.w	80081bc <USBD_StdEPReq+0x318>
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f000 809b 	beq.w	800806e <USBD_StdEPReq+0x1ca>
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d03c      	beq.n	8007fb6 <USBD_StdEPReq+0x112>
 8007f3c:	e13e      	b.n	80081bc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	d002      	beq.n	8007f50 <USBD_StdEPReq+0xac>
 8007f4a:	2b03      	cmp	r3, #3
 8007f4c:	d016      	beq.n	8007f7c <USBD_StdEPReq+0xd8>
 8007f4e:	e02c      	b.n	8007faa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f50:	7bbb      	ldrb	r3, [r7, #14]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00d      	beq.n	8007f72 <USBD_StdEPReq+0xce>
 8007f56:	7bbb      	ldrb	r3, [r7, #14]
 8007f58:	2b80      	cmp	r3, #128	; 0x80
 8007f5a:	d00a      	beq.n	8007f72 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f5c:	7bbb      	ldrb	r3, [r7, #14]
 8007f5e:	4619      	mov	r1, r3
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f001 f955 	bl	8009210 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f66:	2180      	movs	r1, #128	; 0x80
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f001 f951 	bl	8009210 <USBD_LL_StallEP>
 8007f6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f70:	e020      	b.n	8007fb4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fc7a 	bl	800886e <USBD_CtlError>
              break;
 8007f7a:	e01b      	b.n	8007fb4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	885b      	ldrh	r3, [r3, #2]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10e      	bne.n	8007fa2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f84:	7bbb      	ldrb	r3, [r7, #14]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00b      	beq.n	8007fa2 <USBD_StdEPReq+0xfe>
 8007f8a:	7bbb      	ldrb	r3, [r7, #14]
 8007f8c:	2b80      	cmp	r3, #128	; 0x80
 8007f8e:	d008      	beq.n	8007fa2 <USBD_StdEPReq+0xfe>
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	88db      	ldrh	r3, [r3, #6]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d104      	bne.n	8007fa2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f98:	7bbb      	ldrb	r3, [r7, #14]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f001 f937 	bl	8009210 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fd2e 	bl	8008a04 <USBD_CtlSendStatus>

              break;
 8007fa8:	e004      	b.n	8007fb4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fc5e 	bl	800886e <USBD_CtlError>
              break;
 8007fb2:	bf00      	nop
          }
          break;
 8007fb4:	e107      	b.n	80081c6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d002      	beq.n	8007fc8 <USBD_StdEPReq+0x124>
 8007fc2:	2b03      	cmp	r3, #3
 8007fc4:	d016      	beq.n	8007ff4 <USBD_StdEPReq+0x150>
 8007fc6:	e04b      	b.n	8008060 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fc8:	7bbb      	ldrb	r3, [r7, #14]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00d      	beq.n	8007fea <USBD_StdEPReq+0x146>
 8007fce:	7bbb      	ldrb	r3, [r7, #14]
 8007fd0:	2b80      	cmp	r3, #128	; 0x80
 8007fd2:	d00a      	beq.n	8007fea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fd4:	7bbb      	ldrb	r3, [r7, #14]
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f001 f919 	bl	8009210 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fde:	2180      	movs	r1, #128	; 0x80
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f001 f915 	bl	8009210 <USBD_LL_StallEP>
 8007fe6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fe8:	e040      	b.n	800806c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007fea:	6839      	ldr	r1, [r7, #0]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fc3e 	bl	800886e <USBD_CtlError>
              break;
 8007ff2:	e03b      	b.n	800806c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	885b      	ldrh	r3, [r3, #2]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d136      	bne.n	800806a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ffc:	7bbb      	ldrb	r3, [r7, #14]
 8007ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008002:	2b00      	cmp	r3, #0
 8008004:	d004      	beq.n	8008010 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008006:	7bbb      	ldrb	r3, [r7, #14]
 8008008:	4619      	mov	r1, r3
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f001 f91f 	bl	800924e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fcf7 	bl	8008a04 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008016:	7bbb      	ldrb	r3, [r7, #14]
 8008018:	4619      	mov	r1, r3
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f7ff fde2 	bl	8007be4 <USBD_CoreFindEP>
 8008020:	4603      	mov	r3, r0
 8008022:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008024:	7b7b      	ldrb	r3, [r7, #13]
 8008026:	2bff      	cmp	r3, #255	; 0xff
 8008028:	d01f      	beq.n	800806a <USBD_StdEPReq+0x1c6>
 800802a:	7b7b      	ldrb	r3, [r7, #13]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d11c      	bne.n	800806a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008030:	7b7a      	ldrb	r2, [r7, #13]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008038:	7b7a      	ldrb	r2, [r7, #13]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	32ae      	adds	r2, #174	; 0xae
 800803e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d010      	beq.n	800806a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008048:	7b7a      	ldrb	r2, [r7, #13]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	32ae      	adds	r2, #174	; 0xae
 800804e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	6839      	ldr	r1, [r7, #0]
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	4798      	blx	r3
 800805a:	4603      	mov	r3, r0
 800805c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800805e:	e004      	b.n	800806a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fc03 	bl	800886e <USBD_CtlError>
              break;
 8008068:	e000      	b.n	800806c <USBD_StdEPReq+0x1c8>
              break;
 800806a:	bf00      	nop
          }
          break;
 800806c:	e0ab      	b.n	80081c6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008074:	b2db      	uxtb	r3, r3
 8008076:	2b02      	cmp	r3, #2
 8008078:	d002      	beq.n	8008080 <USBD_StdEPReq+0x1dc>
 800807a:	2b03      	cmp	r3, #3
 800807c:	d032      	beq.n	80080e4 <USBD_StdEPReq+0x240>
 800807e:	e097      	b.n	80081b0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008080:	7bbb      	ldrb	r3, [r7, #14]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d007      	beq.n	8008096 <USBD_StdEPReq+0x1f2>
 8008086:	7bbb      	ldrb	r3, [r7, #14]
 8008088:	2b80      	cmp	r3, #128	; 0x80
 800808a:	d004      	beq.n	8008096 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800808c:	6839      	ldr	r1, [r7, #0]
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fbed 	bl	800886e <USBD_CtlError>
                break;
 8008094:	e091      	b.n	80081ba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008096:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800809a:	2b00      	cmp	r3, #0
 800809c:	da0b      	bge.n	80080b6 <USBD_StdEPReq+0x212>
 800809e:	7bbb      	ldrb	r3, [r7, #14]
 80080a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080a4:	4613      	mov	r3, r2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	4413      	add	r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	3310      	adds	r3, #16
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	4413      	add	r3, r2
 80080b2:	3304      	adds	r3, #4
 80080b4:	e00b      	b.n	80080ce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080b6:	7bbb      	ldrb	r3, [r7, #14]
 80080b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080bc:	4613      	mov	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	4413      	add	r3, r2
 80080cc:	3304      	adds	r3, #4
 80080ce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	2200      	movs	r2, #0
 80080d4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	2202      	movs	r2, #2
 80080da:	4619      	mov	r1, r3
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 fc37 	bl	8008950 <USBD_CtlSendData>
              break;
 80080e2:	e06a      	b.n	80081ba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80080e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	da11      	bge.n	8008110 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80080ec:	7bbb      	ldrb	r3, [r7, #14]
 80080ee:	f003 020f 	and.w	r2, r3, #15
 80080f2:	6879      	ldr	r1, [r7, #4]
 80080f4:	4613      	mov	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	440b      	add	r3, r1
 80080fe:	3324      	adds	r3, #36	; 0x24
 8008100:	881b      	ldrh	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d117      	bne.n	8008136 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fbb0 	bl	800886e <USBD_CtlError>
                  break;
 800810e:	e054      	b.n	80081ba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008110:	7bbb      	ldrb	r3, [r7, #14]
 8008112:	f003 020f 	and.w	r2, r3, #15
 8008116:	6879      	ldr	r1, [r7, #4]
 8008118:	4613      	mov	r3, r2
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	4413      	add	r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	440b      	add	r3, r1
 8008122:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008126:	881b      	ldrh	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d104      	bne.n	8008136 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800812c:	6839      	ldr	r1, [r7, #0]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 fb9d 	bl	800886e <USBD_CtlError>
                  break;
 8008134:	e041      	b.n	80081ba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008136:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800813a:	2b00      	cmp	r3, #0
 800813c:	da0b      	bge.n	8008156 <USBD_StdEPReq+0x2b2>
 800813e:	7bbb      	ldrb	r3, [r7, #14]
 8008140:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008144:	4613      	mov	r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	4413      	add	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	3310      	adds	r3, #16
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	4413      	add	r3, r2
 8008152:	3304      	adds	r3, #4
 8008154:	e00b      	b.n	800816e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008156:	7bbb      	ldrb	r3, [r7, #14]
 8008158:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800815c:	4613      	mov	r3, r2
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	4413      	add	r3, r2
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	4413      	add	r3, r2
 800816c:	3304      	adds	r3, #4
 800816e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008170:	7bbb      	ldrb	r3, [r7, #14]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d002      	beq.n	800817c <USBD_StdEPReq+0x2d8>
 8008176:	7bbb      	ldrb	r3, [r7, #14]
 8008178:	2b80      	cmp	r3, #128	; 0x80
 800817a:	d103      	bne.n	8008184 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	2200      	movs	r2, #0
 8008180:	601a      	str	r2, [r3, #0]
 8008182:	e00e      	b.n	80081a2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008184:	7bbb      	ldrb	r3, [r7, #14]
 8008186:	4619      	mov	r1, r3
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f001 f87f 	bl	800928c <USBD_LL_IsStallEP>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d003      	beq.n	800819c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	2201      	movs	r2, #1
 8008198:	601a      	str	r2, [r3, #0]
 800819a:	e002      	b.n	80081a2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2200      	movs	r2, #0
 80081a0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	2202      	movs	r2, #2
 80081a6:	4619      	mov	r1, r3
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 fbd1 	bl	8008950 <USBD_CtlSendData>
              break;
 80081ae:	e004      	b.n	80081ba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fb5b 	bl	800886e <USBD_CtlError>
              break;
 80081b8:	bf00      	nop
          }
          break;
 80081ba:	e004      	b.n	80081c6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80081bc:	6839      	ldr	r1, [r7, #0]
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fb55 	bl	800886e <USBD_CtlError>
          break;
 80081c4:	bf00      	nop
      }
      break;
 80081c6:	e005      	b.n	80081d4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80081c8:	6839      	ldr	r1, [r7, #0]
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fb4f 	bl	800886e <USBD_CtlError>
      break;
 80081d0:	e000      	b.n	80081d4 <USBD_StdEPReq+0x330>
      break;
 80081d2:	bf00      	nop
  }

  return ret;
 80081d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
	...

080081e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081ea:	2300      	movs	r3, #0
 80081ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80081ee:	2300      	movs	r3, #0
 80081f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80081f2:	2300      	movs	r3, #0
 80081f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	885b      	ldrh	r3, [r3, #2]
 80081fa:	0a1b      	lsrs	r3, r3, #8
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	3b01      	subs	r3, #1
 8008200:	2b06      	cmp	r3, #6
 8008202:	f200 8128 	bhi.w	8008456 <USBD_GetDescriptor+0x276>
 8008206:	a201      	add	r2, pc, #4	; (adr r2, 800820c <USBD_GetDescriptor+0x2c>)
 8008208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820c:	08008229 	.word	0x08008229
 8008210:	08008241 	.word	0x08008241
 8008214:	08008281 	.word	0x08008281
 8008218:	08008457 	.word	0x08008457
 800821c:	08008457 	.word	0x08008457
 8008220:	080083f7 	.word	0x080083f7
 8008224:	08008423 	.word	0x08008423
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	7c12      	ldrb	r2, [r2, #16]
 8008234:	f107 0108 	add.w	r1, r7, #8
 8008238:	4610      	mov	r0, r2
 800823a:	4798      	blx	r3
 800823c:	60f8      	str	r0, [r7, #12]
      break;
 800823e:	e112      	b.n	8008466 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	7c1b      	ldrb	r3, [r3, #16]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10d      	bne.n	8008264 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800824e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008250:	f107 0208 	add.w	r2, r7, #8
 8008254:	4610      	mov	r0, r2
 8008256:	4798      	blx	r3
 8008258:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	3301      	adds	r3, #1
 800825e:	2202      	movs	r2, #2
 8008260:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008262:	e100      	b.n	8008466 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800826a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826c:	f107 0208 	add.w	r2, r7, #8
 8008270:	4610      	mov	r0, r2
 8008272:	4798      	blx	r3
 8008274:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	3301      	adds	r3, #1
 800827a:	2202      	movs	r2, #2
 800827c:	701a      	strb	r2, [r3, #0]
      break;
 800827e:	e0f2      	b.n	8008466 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	885b      	ldrh	r3, [r3, #2]
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b05      	cmp	r3, #5
 8008288:	f200 80ac 	bhi.w	80083e4 <USBD_GetDescriptor+0x204>
 800828c:	a201      	add	r2, pc, #4	; (adr r2, 8008294 <USBD_GetDescriptor+0xb4>)
 800828e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008292:	bf00      	nop
 8008294:	080082ad 	.word	0x080082ad
 8008298:	080082e1 	.word	0x080082e1
 800829c:	08008315 	.word	0x08008315
 80082a0:	08008349 	.word	0x08008349
 80082a4:	0800837d 	.word	0x0800837d
 80082a8:	080083b1 	.word	0x080083b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00b      	beq.n	80082d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	7c12      	ldrb	r2, [r2, #16]
 80082c4:	f107 0108 	add.w	r1, r7, #8
 80082c8:	4610      	mov	r0, r2
 80082ca:	4798      	blx	r3
 80082cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082ce:	e091      	b.n	80083f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082d0:	6839      	ldr	r1, [r7, #0]
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 facb 	bl	800886e <USBD_CtlError>
            err++;
 80082d8:	7afb      	ldrb	r3, [r7, #11]
 80082da:	3301      	adds	r3, #1
 80082dc:	72fb      	strb	r3, [r7, #11]
          break;
 80082de:	e089      	b.n	80083f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00b      	beq.n	8008304 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	7c12      	ldrb	r2, [r2, #16]
 80082f8:	f107 0108 	add.w	r1, r7, #8
 80082fc:	4610      	mov	r0, r2
 80082fe:	4798      	blx	r3
 8008300:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008302:	e077      	b.n	80083f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008304:	6839      	ldr	r1, [r7, #0]
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fab1 	bl	800886e <USBD_CtlError>
            err++;
 800830c:	7afb      	ldrb	r3, [r7, #11]
 800830e:	3301      	adds	r3, #1
 8008310:	72fb      	strb	r3, [r7, #11]
          break;
 8008312:	e06f      	b.n	80083f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00b      	beq.n	8008338 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	7c12      	ldrb	r2, [r2, #16]
 800832c:	f107 0108 	add.w	r1, r7, #8
 8008330:	4610      	mov	r0, r2
 8008332:	4798      	blx	r3
 8008334:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008336:	e05d      	b.n	80083f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008338:	6839      	ldr	r1, [r7, #0]
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fa97 	bl	800886e <USBD_CtlError>
            err++;
 8008340:	7afb      	ldrb	r3, [r7, #11]
 8008342:	3301      	adds	r3, #1
 8008344:	72fb      	strb	r3, [r7, #11]
          break;
 8008346:	e055      	b.n	80083f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00b      	beq.n	800836c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800835a:	691b      	ldr	r3, [r3, #16]
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	7c12      	ldrb	r2, [r2, #16]
 8008360:	f107 0108 	add.w	r1, r7, #8
 8008364:	4610      	mov	r0, r2
 8008366:	4798      	blx	r3
 8008368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800836a:	e043      	b.n	80083f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800836c:	6839      	ldr	r1, [r7, #0]
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fa7d 	bl	800886e <USBD_CtlError>
            err++;
 8008374:	7afb      	ldrb	r3, [r7, #11]
 8008376:	3301      	adds	r3, #1
 8008378:	72fb      	strb	r3, [r7, #11]
          break;
 800837a:	e03b      	b.n	80083f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008382:	695b      	ldr	r3, [r3, #20]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00b      	beq.n	80083a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800838e:	695b      	ldr	r3, [r3, #20]
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	7c12      	ldrb	r2, [r2, #16]
 8008394:	f107 0108 	add.w	r1, r7, #8
 8008398:	4610      	mov	r0, r2
 800839a:	4798      	blx	r3
 800839c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800839e:	e029      	b.n	80083f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083a0:	6839      	ldr	r1, [r7, #0]
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fa63 	bl	800886e <USBD_CtlError>
            err++;
 80083a8:	7afb      	ldrb	r3, [r7, #11]
 80083aa:	3301      	adds	r3, #1
 80083ac:	72fb      	strb	r3, [r7, #11]
          break;
 80083ae:	e021      	b.n	80083f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00b      	beq.n	80083d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	7c12      	ldrb	r2, [r2, #16]
 80083c8:	f107 0108 	add.w	r1, r7, #8
 80083cc:	4610      	mov	r0, r2
 80083ce:	4798      	blx	r3
 80083d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083d2:	e00f      	b.n	80083f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083d4:	6839      	ldr	r1, [r7, #0]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fa49 	bl	800886e <USBD_CtlError>
            err++;
 80083dc:	7afb      	ldrb	r3, [r7, #11]
 80083de:	3301      	adds	r3, #1
 80083e0:	72fb      	strb	r3, [r7, #11]
          break;
 80083e2:	e007      	b.n	80083f4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80083e4:	6839      	ldr	r1, [r7, #0]
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fa41 	bl	800886e <USBD_CtlError>
          err++;
 80083ec:	7afb      	ldrb	r3, [r7, #11]
 80083ee:	3301      	adds	r3, #1
 80083f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80083f2:	bf00      	nop
      }
      break;
 80083f4:	e037      	b.n	8008466 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	7c1b      	ldrb	r3, [r3, #16]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d109      	bne.n	8008412 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008406:	f107 0208 	add.w	r2, r7, #8
 800840a:	4610      	mov	r0, r2
 800840c:	4798      	blx	r3
 800840e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008410:	e029      	b.n	8008466 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008412:	6839      	ldr	r1, [r7, #0]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fa2a 	bl	800886e <USBD_CtlError>
        err++;
 800841a:	7afb      	ldrb	r3, [r7, #11]
 800841c:	3301      	adds	r3, #1
 800841e:	72fb      	strb	r3, [r7, #11]
      break;
 8008420:	e021      	b.n	8008466 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	7c1b      	ldrb	r3, [r3, #16]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10d      	bne.n	8008446 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008432:	f107 0208 	add.w	r2, r7, #8
 8008436:	4610      	mov	r0, r2
 8008438:	4798      	blx	r3
 800843a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	3301      	adds	r3, #1
 8008440:	2207      	movs	r2, #7
 8008442:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008444:	e00f      	b.n	8008466 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fa10 	bl	800886e <USBD_CtlError>
        err++;
 800844e:	7afb      	ldrb	r3, [r7, #11]
 8008450:	3301      	adds	r3, #1
 8008452:	72fb      	strb	r3, [r7, #11]
      break;
 8008454:	e007      	b.n	8008466 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fa08 	bl	800886e <USBD_CtlError>
      err++;
 800845e:	7afb      	ldrb	r3, [r7, #11]
 8008460:	3301      	adds	r3, #1
 8008462:	72fb      	strb	r3, [r7, #11]
      break;
 8008464:	bf00      	nop
  }

  if (err != 0U)
 8008466:	7afb      	ldrb	r3, [r7, #11]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d11e      	bne.n	80084aa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	88db      	ldrh	r3, [r3, #6]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d016      	beq.n	80084a2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008474:	893b      	ldrh	r3, [r7, #8]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00e      	beq.n	8008498 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	88da      	ldrh	r2, [r3, #6]
 800847e:	893b      	ldrh	r3, [r7, #8]
 8008480:	4293      	cmp	r3, r2
 8008482:	bf28      	it	cs
 8008484:	4613      	movcs	r3, r2
 8008486:	b29b      	uxth	r3, r3
 8008488:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800848a:	893b      	ldrh	r3, [r7, #8]
 800848c:	461a      	mov	r2, r3
 800848e:	68f9      	ldr	r1, [r7, #12]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fa5d 	bl	8008950 <USBD_CtlSendData>
 8008496:	e009      	b.n	80084ac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f9e7 	bl	800886e <USBD_CtlError>
 80084a0:	e004      	b.n	80084ac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 faae 	bl	8008a04 <USBD_CtlSendStatus>
 80084a8:	e000      	b.n	80084ac <USBD_GetDescriptor+0x2cc>
    return;
 80084aa:	bf00      	nop
  }
}
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop

080084b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	889b      	ldrh	r3, [r3, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d131      	bne.n	800852a <USBD_SetAddress+0x76>
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	88db      	ldrh	r3, [r3, #6]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d12d      	bne.n	800852a <USBD_SetAddress+0x76>
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	885b      	ldrh	r3, [r3, #2]
 80084d2:	2b7f      	cmp	r3, #127	; 0x7f
 80084d4:	d829      	bhi.n	800852a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	885b      	ldrh	r3, [r3, #2]
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b03      	cmp	r3, #3
 80084ec:	d104      	bne.n	80084f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80084ee:	6839      	ldr	r1, [r7, #0]
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f9bc 	bl	800886e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084f6:	e01d      	b.n	8008534 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	7bfa      	ldrb	r2, [r7, #15]
 80084fc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008500:	7bfb      	ldrb	r3, [r7, #15]
 8008502:	4619      	mov	r1, r3
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 feed 	bl	80092e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fa7a 	bl	8008a04 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008510:	7bfb      	ldrb	r3, [r7, #15]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d004      	beq.n	8008520 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2202      	movs	r2, #2
 800851a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800851e:	e009      	b.n	8008534 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008528:	e004      	b.n	8008534 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800852a:	6839      	ldr	r1, [r7, #0]
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 f99e 	bl	800886e <USBD_CtlError>
  }
}
 8008532:	bf00      	nop
 8008534:	bf00      	nop
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008546:	2300      	movs	r3, #0
 8008548:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	885b      	ldrh	r3, [r3, #2]
 800854e:	b2da      	uxtb	r2, r3
 8008550:	4b4e      	ldr	r3, [pc, #312]	; (800868c <USBD_SetConfig+0x150>)
 8008552:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008554:	4b4d      	ldr	r3, [pc, #308]	; (800868c <USBD_SetConfig+0x150>)
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d905      	bls.n	8008568 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800855c:	6839      	ldr	r1, [r7, #0]
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f985 	bl	800886e <USBD_CtlError>
    return USBD_FAIL;
 8008564:	2303      	movs	r3, #3
 8008566:	e08c      	b.n	8008682 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800856e:	b2db      	uxtb	r3, r3
 8008570:	2b02      	cmp	r3, #2
 8008572:	d002      	beq.n	800857a <USBD_SetConfig+0x3e>
 8008574:	2b03      	cmp	r3, #3
 8008576:	d029      	beq.n	80085cc <USBD_SetConfig+0x90>
 8008578:	e075      	b.n	8008666 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800857a:	4b44      	ldr	r3, [pc, #272]	; (800868c <USBD_SetConfig+0x150>)
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d020      	beq.n	80085c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008582:	4b42      	ldr	r3, [pc, #264]	; (800868c <USBD_SetConfig+0x150>)
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	461a      	mov	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800858c:	4b3f      	ldr	r3, [pc, #252]	; (800868c <USBD_SetConfig+0x150>)
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	4619      	mov	r1, r3
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7fe ffe7 	bl	8007566 <USBD_SetClassConfig>
 8008598:	4603      	mov	r3, r0
 800859a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800859c:	7bfb      	ldrb	r3, [r7, #15]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d008      	beq.n	80085b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80085a2:	6839      	ldr	r1, [r7, #0]
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f962 	bl	800886e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2202      	movs	r2, #2
 80085ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085b2:	e065      	b.n	8008680 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fa25 	bl	8008a04 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2203      	movs	r2, #3
 80085be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80085c2:	e05d      	b.n	8008680 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fa1d 	bl	8008a04 <USBD_CtlSendStatus>
      break;
 80085ca:	e059      	b.n	8008680 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80085cc:	4b2f      	ldr	r3, [pc, #188]	; (800868c <USBD_SetConfig+0x150>)
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d112      	bne.n	80085fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2202      	movs	r2, #2
 80085d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80085dc:	4b2b      	ldr	r3, [pc, #172]	; (800868c <USBD_SetConfig+0x150>)
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	461a      	mov	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80085e6:	4b29      	ldr	r3, [pc, #164]	; (800868c <USBD_SetConfig+0x150>)
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	4619      	mov	r1, r3
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f7fe ffd6 	bl	800759e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fa06 	bl	8008a04 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085f8:	e042      	b.n	8008680 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80085fa:	4b24      	ldr	r3, [pc, #144]	; (800868c <USBD_SetConfig+0x150>)
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	461a      	mov	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	429a      	cmp	r2, r3
 8008606:	d02a      	beq.n	800865e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	b2db      	uxtb	r3, r3
 800860e:	4619      	mov	r1, r3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f7fe ffc4 	bl	800759e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008616:	4b1d      	ldr	r3, [pc, #116]	; (800868c <USBD_SetConfig+0x150>)
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	461a      	mov	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008620:	4b1a      	ldr	r3, [pc, #104]	; (800868c <USBD_SetConfig+0x150>)
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	4619      	mov	r1, r3
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f7fe ff9d 	bl	8007566 <USBD_SetClassConfig>
 800862c:	4603      	mov	r3, r0
 800862e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008630:	7bfb      	ldrb	r3, [r7, #15]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00f      	beq.n	8008656 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008636:	6839      	ldr	r1, [r7, #0]
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f918 	bl	800886e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	b2db      	uxtb	r3, r3
 8008644:	4619      	mov	r1, r3
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f7fe ffa9 	bl	800759e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2202      	movs	r2, #2
 8008650:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008654:	e014      	b.n	8008680 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f9d4 	bl	8008a04 <USBD_CtlSendStatus>
      break;
 800865c:	e010      	b.n	8008680 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f9d0 	bl	8008a04 <USBD_CtlSendStatus>
      break;
 8008664:	e00c      	b.n	8008680 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008666:	6839      	ldr	r1, [r7, #0]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 f900 	bl	800886e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800866e:	4b07      	ldr	r3, [pc, #28]	; (800868c <USBD_SetConfig+0x150>)
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	4619      	mov	r1, r3
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7fe ff92 	bl	800759e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800867a:	2303      	movs	r3, #3
 800867c:	73fb      	strb	r3, [r7, #15]
      break;
 800867e:	bf00      	nop
  }

  return ret;
 8008680:	7bfb      	ldrb	r3, [r7, #15]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	200002e0 	.word	0x200002e0

08008690 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	88db      	ldrh	r3, [r3, #6]
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d004      	beq.n	80086ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80086a2:	6839      	ldr	r1, [r7, #0]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 f8e2 	bl	800886e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80086aa:	e023      	b.n	80086f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	dc02      	bgt.n	80086be <USBD_GetConfig+0x2e>
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	dc03      	bgt.n	80086c4 <USBD_GetConfig+0x34>
 80086bc:	e015      	b.n	80086ea <USBD_GetConfig+0x5a>
 80086be:	2b03      	cmp	r3, #3
 80086c0:	d00b      	beq.n	80086da <USBD_GetConfig+0x4a>
 80086c2:	e012      	b.n	80086ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	3308      	adds	r3, #8
 80086ce:	2201      	movs	r2, #1
 80086d0:	4619      	mov	r1, r3
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f93c 	bl	8008950 <USBD_CtlSendData>
        break;
 80086d8:	e00c      	b.n	80086f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	3304      	adds	r3, #4
 80086de:	2201      	movs	r2, #1
 80086e0:	4619      	mov	r1, r3
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f934 	bl	8008950 <USBD_CtlSendData>
        break;
 80086e8:	e004      	b.n	80086f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f8be 	bl	800886e <USBD_CtlError>
        break;
 80086f2:	bf00      	nop
}
 80086f4:	bf00      	nop
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800870c:	b2db      	uxtb	r3, r3
 800870e:	3b01      	subs	r3, #1
 8008710:	2b02      	cmp	r3, #2
 8008712:	d81e      	bhi.n	8008752 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	88db      	ldrh	r3, [r3, #6]
 8008718:	2b02      	cmp	r3, #2
 800871a:	d004      	beq.n	8008726 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800871c:	6839      	ldr	r1, [r7, #0]
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f8a5 	bl	800886e <USBD_CtlError>
        break;
 8008724:	e01a      	b.n	800875c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2201      	movs	r2, #1
 800872a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008732:	2b00      	cmp	r3, #0
 8008734:	d005      	beq.n	8008742 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	f043 0202 	orr.w	r2, r3, #2
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	330c      	adds	r3, #12
 8008746:	2202      	movs	r2, #2
 8008748:	4619      	mov	r1, r3
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f900 	bl	8008950 <USBD_CtlSendData>
      break;
 8008750:	e004      	b.n	800875c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f88a 	bl	800886e <USBD_CtlError>
      break;
 800875a:	bf00      	nop
  }
}
 800875c:	bf00      	nop
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	885b      	ldrh	r3, [r3, #2]
 8008772:	2b01      	cmp	r3, #1
 8008774:	d107      	bne.n	8008786 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2201      	movs	r2, #1
 800877a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f940 	bl	8008a04 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008784:	e013      	b.n	80087ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	885b      	ldrh	r3, [r3, #2]
 800878a:	2b02      	cmp	r3, #2
 800878c:	d10b      	bne.n	80087a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	889b      	ldrh	r3, [r3, #4]
 8008792:	0a1b      	lsrs	r3, r3, #8
 8008794:	b29b      	uxth	r3, r3
 8008796:	b2da      	uxtb	r2, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 f930 	bl	8008a04 <USBD_CtlSendStatus>
}
 80087a4:	e003      	b.n	80087ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80087a6:	6839      	ldr	r1, [r7, #0]
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f860 	bl	800886e <USBD_CtlError>
}
 80087ae:	bf00      	nop
 80087b0:	3708      	adds	r7, #8
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b082      	sub	sp, #8
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
 80087be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	3b01      	subs	r3, #1
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d80b      	bhi.n	80087e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	885b      	ldrh	r3, [r3, #2]
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d10c      	bne.n	80087f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f910 	bl	8008a04 <USBD_CtlSendStatus>
      }
      break;
 80087e4:	e004      	b.n	80087f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80087e6:	6839      	ldr	r1, [r7, #0]
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 f840 	bl	800886e <USBD_CtlError>
      break;
 80087ee:	e000      	b.n	80087f2 <USBD_ClrFeature+0x3c>
      break;
 80087f0:	bf00      	nop
  }
}
 80087f2:	bf00      	nop
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b084      	sub	sp, #16
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
 8008802:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	781a      	ldrb	r2, [r3, #0]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	3301      	adds	r3, #1
 8008814:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	781a      	ldrb	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	3301      	adds	r3, #1
 8008822:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f7ff fa41 	bl	8007cac <SWAPBYTE>
 800882a:	4603      	mov	r3, r0
 800882c:	461a      	mov	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	3301      	adds	r3, #1
 8008836:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	3301      	adds	r3, #1
 800883c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f7ff fa34 	bl	8007cac <SWAPBYTE>
 8008844:	4603      	mov	r3, r0
 8008846:	461a      	mov	r2, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	3301      	adds	r3, #1
 8008850:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	3301      	adds	r3, #1
 8008856:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f7ff fa27 	bl	8007cac <SWAPBYTE>
 800885e:	4603      	mov	r3, r0
 8008860:	461a      	mov	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	80da      	strh	r2, [r3, #6]
}
 8008866:	bf00      	nop
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b082      	sub	sp, #8
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
 8008876:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008878:	2180      	movs	r1, #128	; 0x80
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fcc8 	bl	8009210 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008880:	2100      	movs	r1, #0
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fcc4 	bl	8009210 <USBD_LL_StallEP>
}
 8008888:	bf00      	nop
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800889c:	2300      	movs	r3, #0
 800889e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d036      	beq.n	8008914 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80088aa:	6938      	ldr	r0, [r7, #16]
 80088ac:	f000 f836 	bl	800891c <USBD_GetLen>
 80088b0:	4603      	mov	r3, r0
 80088b2:	3301      	adds	r3, #1
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	005b      	lsls	r3, r3, #1
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80088be:	7dfb      	ldrb	r3, [r7, #23]
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	4413      	add	r3, r2
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	7812      	ldrb	r2, [r2, #0]
 80088c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80088ca:	7dfb      	ldrb	r3, [r7, #23]
 80088cc:	3301      	adds	r3, #1
 80088ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80088d0:	7dfb      	ldrb	r3, [r7, #23]
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	4413      	add	r3, r2
 80088d6:	2203      	movs	r2, #3
 80088d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80088da:	7dfb      	ldrb	r3, [r7, #23]
 80088dc:	3301      	adds	r3, #1
 80088de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80088e0:	e013      	b.n	800890a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80088e2:	7dfb      	ldrb	r3, [r7, #23]
 80088e4:	68ba      	ldr	r2, [r7, #8]
 80088e6:	4413      	add	r3, r2
 80088e8:	693a      	ldr	r2, [r7, #16]
 80088ea:	7812      	ldrb	r2, [r2, #0]
 80088ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	3301      	adds	r3, #1
 80088f2:	613b      	str	r3, [r7, #16]
    idx++;
 80088f4:	7dfb      	ldrb	r3, [r7, #23]
 80088f6:	3301      	adds	r3, #1
 80088f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80088fa:	7dfb      	ldrb	r3, [r7, #23]
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	4413      	add	r3, r2
 8008900:	2200      	movs	r2, #0
 8008902:	701a      	strb	r2, [r3, #0]
    idx++;
 8008904:	7dfb      	ldrb	r3, [r7, #23]
 8008906:	3301      	adds	r3, #1
 8008908:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d1e7      	bne.n	80088e2 <USBD_GetString+0x52>
 8008912:	e000      	b.n	8008916 <USBD_GetString+0x86>
    return;
 8008914:	bf00      	nop
  }
}
 8008916:	3718      	adds	r7, #24
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800891c:	b480      	push	{r7}
 800891e:	b085      	sub	sp, #20
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008924:	2300      	movs	r3, #0
 8008926:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800892c:	e005      	b.n	800893a <USBD_GetLen+0x1e>
  {
    len++;
 800892e:	7bfb      	ldrb	r3, [r7, #15]
 8008930:	3301      	adds	r3, #1
 8008932:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	3301      	adds	r3, #1
 8008938:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1f5      	bne.n	800892e <USBD_GetLen+0x12>
  }

  return len;
 8008942:	7bfb      	ldrb	r3, [r7, #15]
}
 8008944:	4618      	mov	r0, r3
 8008946:	3714      	adds	r7, #20
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2202      	movs	r2, #2
 8008960:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	2100      	movs	r1, #0
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f000 fcd3 	bl	8009322 <USBD_LL_Transmit>

  return USBD_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b084      	sub	sp, #16
 800898a:	af00      	add	r7, sp, #0
 800898c:	60f8      	str	r0, [r7, #12]
 800898e:	60b9      	str	r1, [r7, #8]
 8008990:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	2100      	movs	r1, #0
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f000 fcc2 	bl	8009322 <USBD_LL_Transmit>

  return USBD_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2203      	movs	r2, #3
 80089b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	2100      	movs	r1, #0
 80089d2:	68f8      	ldr	r0, [r7, #12]
 80089d4:	f000 fcc6 	bl	8009364 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b084      	sub	sp, #16
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	60f8      	str	r0, [r7, #12]
 80089ea:	60b9      	str	r1, [r7, #8]
 80089ec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	68ba      	ldr	r2, [r7, #8]
 80089f2:	2100      	movs	r1, #0
 80089f4:	68f8      	ldr	r0, [r7, #12]
 80089f6:	f000 fcb5 	bl	8009364 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089fa:	2300      	movs	r3, #0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2204      	movs	r2, #4
 8008a10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a14:	2300      	movs	r3, #0
 8008a16:	2200      	movs	r2, #0
 8008a18:	2100      	movs	r1, #0
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fc81 	bl	8009322 <USBD_LL_Transmit>

  return USBD_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b082      	sub	sp, #8
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2205      	movs	r2, #5
 8008a36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	2100      	movs	r1, #0
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 fc8f 	bl	8009364 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008a54:	2200      	movs	r2, #0
 8008a56:	4912      	ldr	r1, [pc, #72]	; (8008aa0 <MX_USB_DEVICE_Init+0x50>)
 8008a58:	4812      	ldr	r0, [pc, #72]	; (8008aa4 <MX_USB_DEVICE_Init+0x54>)
 8008a5a:	f7fe fd07 	bl	800746c <USBD_Init>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d001      	beq.n	8008a68 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008a64:	f7f8 fa74 	bl	8000f50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008a68:	490f      	ldr	r1, [pc, #60]	; (8008aa8 <MX_USB_DEVICE_Init+0x58>)
 8008a6a:	480e      	ldr	r0, [pc, #56]	; (8008aa4 <MX_USB_DEVICE_Init+0x54>)
 8008a6c:	f7fe fd2e 	bl	80074cc <USBD_RegisterClass>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d001      	beq.n	8008a7a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008a76:	f7f8 fa6b 	bl	8000f50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008a7a:	490c      	ldr	r1, [pc, #48]	; (8008aac <MX_USB_DEVICE_Init+0x5c>)
 8008a7c:	4809      	ldr	r0, [pc, #36]	; (8008aa4 <MX_USB_DEVICE_Init+0x54>)
 8008a7e:	f7fe fc65 	bl	800734c <USBD_CDC_RegisterInterface>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d001      	beq.n	8008a8c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008a88:	f7f8 fa62 	bl	8000f50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008a8c:	4805      	ldr	r0, [pc, #20]	; (8008aa4 <MX_USB_DEVICE_Init+0x54>)
 8008a8e:	f7fe fd53 	bl	8007538 <USBD_Start>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d001      	beq.n	8008a9c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008a98:	f7f8 fa5a 	bl	8000f50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008a9c:	bf00      	nop
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	20000118 	.word	0x20000118
 8008aa4:	200002e4 	.word	0x200002e4
 8008aa8:	20000084 	.word	0x20000084
 8008aac:	20000104 	.word	0x20000104

08008ab0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	4905      	ldr	r1, [pc, #20]	; (8008acc <CDC_Init_FS+0x1c>)
 8008ab8:	4805      	ldr	r0, [pc, #20]	; (8008ad0 <CDC_Init_FS+0x20>)
 8008aba:	f7fe fc61 	bl	8007380 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008abe:	4905      	ldr	r1, [pc, #20]	; (8008ad4 <CDC_Init_FS+0x24>)
 8008ac0:	4803      	ldr	r0, [pc, #12]	; (8008ad0 <CDC_Init_FS+0x20>)
 8008ac2:	f7fe fc7f 	bl	80073c4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008ac6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	20000dc0 	.word	0x20000dc0
 8008ad0:	200002e4 	.word	0x200002e4
 8008ad4:	200005c0 	.word	0x200005c0

08008ad8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008adc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	4603      	mov	r3, r0
 8008af0:	6039      	str	r1, [r7, #0]
 8008af2:	71fb      	strb	r3, [r7, #7]
 8008af4:	4613      	mov	r3, r2
 8008af6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008af8:	79fb      	ldrb	r3, [r7, #7]
 8008afa:	2b23      	cmp	r3, #35	; 0x23
 8008afc:	d84a      	bhi.n	8008b94 <CDC_Control_FS+0xac>
 8008afe:	a201      	add	r2, pc, #4	; (adr r2, 8008b04 <CDC_Control_FS+0x1c>)
 8008b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b04:	08008b95 	.word	0x08008b95
 8008b08:	08008b95 	.word	0x08008b95
 8008b0c:	08008b95 	.word	0x08008b95
 8008b10:	08008b95 	.word	0x08008b95
 8008b14:	08008b95 	.word	0x08008b95
 8008b18:	08008b95 	.word	0x08008b95
 8008b1c:	08008b95 	.word	0x08008b95
 8008b20:	08008b95 	.word	0x08008b95
 8008b24:	08008b95 	.word	0x08008b95
 8008b28:	08008b95 	.word	0x08008b95
 8008b2c:	08008b95 	.word	0x08008b95
 8008b30:	08008b95 	.word	0x08008b95
 8008b34:	08008b95 	.word	0x08008b95
 8008b38:	08008b95 	.word	0x08008b95
 8008b3c:	08008b95 	.word	0x08008b95
 8008b40:	08008b95 	.word	0x08008b95
 8008b44:	08008b95 	.word	0x08008b95
 8008b48:	08008b95 	.word	0x08008b95
 8008b4c:	08008b95 	.word	0x08008b95
 8008b50:	08008b95 	.word	0x08008b95
 8008b54:	08008b95 	.word	0x08008b95
 8008b58:	08008b95 	.word	0x08008b95
 8008b5c:	08008b95 	.word	0x08008b95
 8008b60:	08008b95 	.word	0x08008b95
 8008b64:	08008b95 	.word	0x08008b95
 8008b68:	08008b95 	.word	0x08008b95
 8008b6c:	08008b95 	.word	0x08008b95
 8008b70:	08008b95 	.word	0x08008b95
 8008b74:	08008b95 	.word	0x08008b95
 8008b78:	08008b95 	.word	0x08008b95
 8008b7c:	08008b95 	.word	0x08008b95
 8008b80:	08008b95 	.word	0x08008b95
 8008b84:	08008b95 	.word	0x08008b95
 8008b88:	08008b95 	.word	0x08008b95
 8008b8c:	08008b95 	.word	0x08008b95
 8008b90:	08008b95 	.word	0x08008b95
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008b94:	bf00      	nop
  }

  return (USBD_OK);
 8008b96:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008bae:	6879      	ldr	r1, [r7, #4]
 8008bb0:	4805      	ldr	r0, [pc, #20]	; (8008bc8 <CDC_Receive_FS+0x24>)
 8008bb2:	f7fe fc07 	bl	80073c4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008bb6:	4804      	ldr	r0, [pc, #16]	; (8008bc8 <CDC_Receive_FS+0x24>)
 8008bb8:	f7fe fc22 	bl	8007400 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008bbc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	200002e4 	.word	0x200002e4

08008bcc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b087      	sub	sp, #28
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008bde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	371c      	adds	r7, #28
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr
	...

08008bf0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	6039      	str	r1, [r7, #0]
 8008bfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	2212      	movs	r2, #18
 8008c00:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008c02:	4b03      	ldr	r3, [pc, #12]	; (8008c10 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr
 8008c10:	20000134 	.word	0x20000134

08008c14 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	6039      	str	r1, [r7, #0]
 8008c1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	2204      	movs	r2, #4
 8008c24:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008c26:	4b03      	ldr	r3, [pc, #12]	; (8008c34 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr
 8008c34:	20000148 	.word	0x20000148

08008c38 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	4603      	mov	r3, r0
 8008c40:	6039      	str	r1, [r7, #0]
 8008c42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c44:	79fb      	ldrb	r3, [r7, #7]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d105      	bne.n	8008c56 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c4a:	683a      	ldr	r2, [r7, #0]
 8008c4c:	4907      	ldr	r1, [pc, #28]	; (8008c6c <USBD_FS_ProductStrDescriptor+0x34>)
 8008c4e:	4808      	ldr	r0, [pc, #32]	; (8008c70 <USBD_FS_ProductStrDescriptor+0x38>)
 8008c50:	f7ff fe1e 	bl	8008890 <USBD_GetString>
 8008c54:	e004      	b.n	8008c60 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	4904      	ldr	r1, [pc, #16]	; (8008c6c <USBD_FS_ProductStrDescriptor+0x34>)
 8008c5a:	4805      	ldr	r0, [pc, #20]	; (8008c70 <USBD_FS_ProductStrDescriptor+0x38>)
 8008c5c:	f7ff fe18 	bl	8008890 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c60:	4b02      	ldr	r3, [pc, #8]	; (8008c6c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	200015c0 	.word	0x200015c0
 8008c70:	080094c4 	.word	0x080094c4

08008c74 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	6039      	str	r1, [r7, #0]
 8008c7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008c80:	683a      	ldr	r2, [r7, #0]
 8008c82:	4904      	ldr	r1, [pc, #16]	; (8008c94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008c84:	4804      	ldr	r0, [pc, #16]	; (8008c98 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008c86:	f7ff fe03 	bl	8008890 <USBD_GetString>
  return USBD_StrDesc;
 8008c8a:	4b02      	ldr	r3, [pc, #8]	; (8008c94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3708      	adds	r7, #8
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	200015c0 	.word	0x200015c0
 8008c98:	080094dc 	.word	0x080094dc

08008c9c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	6039      	str	r1, [r7, #0]
 8008ca6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	221a      	movs	r2, #26
 8008cac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008cae:	f000 f843 	bl	8008d38 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008cb2:	4b02      	ldr	r3, [pc, #8]	; (8008cbc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3708      	adds	r7, #8
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	2000014c 	.word	0x2000014c

08008cc0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	6039      	str	r1, [r7, #0]
 8008cca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008ccc:	79fb      	ldrb	r3, [r7, #7]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d105      	bne.n	8008cde <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008cd2:	683a      	ldr	r2, [r7, #0]
 8008cd4:	4907      	ldr	r1, [pc, #28]	; (8008cf4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008cd6:	4808      	ldr	r0, [pc, #32]	; (8008cf8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008cd8:	f7ff fdda 	bl	8008890 <USBD_GetString>
 8008cdc:	e004      	b.n	8008ce8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008cde:	683a      	ldr	r2, [r7, #0]
 8008ce0:	4904      	ldr	r1, [pc, #16]	; (8008cf4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ce2:	4805      	ldr	r0, [pc, #20]	; (8008cf8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ce4:	f7ff fdd4 	bl	8008890 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ce8:	4b02      	ldr	r3, [pc, #8]	; (8008cf4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3708      	adds	r7, #8
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	200015c0 	.word	0x200015c0
 8008cf8:	080094f0 	.word	0x080094f0

08008cfc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	4603      	mov	r3, r0
 8008d04:	6039      	str	r1, [r7, #0]
 8008d06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d08:	79fb      	ldrb	r3, [r7, #7]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d105      	bne.n	8008d1a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	4907      	ldr	r1, [pc, #28]	; (8008d30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d12:	4808      	ldr	r0, [pc, #32]	; (8008d34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d14:	f7ff fdbc 	bl	8008890 <USBD_GetString>
 8008d18:	e004      	b.n	8008d24 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d1a:	683a      	ldr	r2, [r7, #0]
 8008d1c:	4904      	ldr	r1, [pc, #16]	; (8008d30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d1e:	4805      	ldr	r0, [pc, #20]	; (8008d34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d20:	f7ff fdb6 	bl	8008890 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d24:	4b02      	ldr	r3, [pc, #8]	; (8008d30 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	200015c0 	.word	0x200015c0
 8008d34:	080094fc 	.word	0x080094fc

08008d38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d3e:	4b0f      	ldr	r3, [pc, #60]	; (8008d7c <Get_SerialNum+0x44>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008d44:	4b0e      	ldr	r3, [pc, #56]	; (8008d80 <Get_SerialNum+0x48>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008d4a:	4b0e      	ldr	r3, [pc, #56]	; (8008d84 <Get_SerialNum+0x4c>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4413      	add	r3, r2
 8008d56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d009      	beq.n	8008d72 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008d5e:	2208      	movs	r2, #8
 8008d60:	4909      	ldr	r1, [pc, #36]	; (8008d88 <Get_SerialNum+0x50>)
 8008d62:	68f8      	ldr	r0, [r7, #12]
 8008d64:	f000 f814 	bl	8008d90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008d68:	2204      	movs	r2, #4
 8008d6a:	4908      	ldr	r1, [pc, #32]	; (8008d8c <Get_SerialNum+0x54>)
 8008d6c:	68b8      	ldr	r0, [r7, #8]
 8008d6e:	f000 f80f 	bl	8008d90 <IntToUnicode>
  }
}
 8008d72:	bf00      	nop
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	1fff7a10 	.word	0x1fff7a10
 8008d80:	1fff7a14 	.word	0x1fff7a14
 8008d84:	1fff7a18 	.word	0x1fff7a18
 8008d88:	2000014e 	.word	0x2000014e
 8008d8c:	2000015e 	.word	0x2000015e

08008d90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b087      	sub	sp, #28
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008da2:	2300      	movs	r3, #0
 8008da4:	75fb      	strb	r3, [r7, #23]
 8008da6:	e027      	b.n	8008df8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	0f1b      	lsrs	r3, r3, #28
 8008dac:	2b09      	cmp	r3, #9
 8008dae:	d80b      	bhi.n	8008dc8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	0f1b      	lsrs	r3, r3, #28
 8008db4:	b2da      	uxtb	r2, r3
 8008db6:	7dfb      	ldrb	r3, [r7, #23]
 8008db8:	005b      	lsls	r3, r3, #1
 8008dba:	4619      	mov	r1, r3
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	440b      	add	r3, r1
 8008dc0:	3230      	adds	r2, #48	; 0x30
 8008dc2:	b2d2      	uxtb	r2, r2
 8008dc4:	701a      	strb	r2, [r3, #0]
 8008dc6:	e00a      	b.n	8008dde <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	0f1b      	lsrs	r3, r3, #28
 8008dcc:	b2da      	uxtb	r2, r3
 8008dce:	7dfb      	ldrb	r3, [r7, #23]
 8008dd0:	005b      	lsls	r3, r3, #1
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	440b      	add	r3, r1
 8008dd8:	3237      	adds	r2, #55	; 0x37
 8008dda:	b2d2      	uxtb	r2, r2
 8008ddc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	011b      	lsls	r3, r3, #4
 8008de2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008de4:	7dfb      	ldrb	r3, [r7, #23]
 8008de6:	005b      	lsls	r3, r3, #1
 8008de8:	3301      	adds	r3, #1
 8008dea:	68ba      	ldr	r2, [r7, #8]
 8008dec:	4413      	add	r3, r2
 8008dee:	2200      	movs	r2, #0
 8008df0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008df2:	7dfb      	ldrb	r3, [r7, #23]
 8008df4:	3301      	adds	r3, #1
 8008df6:	75fb      	strb	r3, [r7, #23]
 8008df8:	7dfa      	ldrb	r2, [r7, #23]
 8008dfa:	79fb      	ldrb	r3, [r7, #7]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d3d3      	bcc.n	8008da8 <IntToUnicode+0x18>
  }
}
 8008e00:	bf00      	nop
 8008e02:	bf00      	nop
 8008e04:	371c      	adds	r7, #28
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
	...

08008e10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b08a      	sub	sp, #40	; 0x28
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e18:	f107 0314 	add.w	r3, r7, #20
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	601a      	str	r2, [r3, #0]
 8008e20:	605a      	str	r2, [r3, #4]
 8008e22:	609a      	str	r2, [r3, #8]
 8008e24:	60da      	str	r2, [r3, #12]
 8008e26:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e30:	d147      	bne.n	8008ec2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e32:	2300      	movs	r3, #0
 8008e34:	613b      	str	r3, [r7, #16]
 8008e36:	4b25      	ldr	r3, [pc, #148]	; (8008ecc <HAL_PCD_MspInit+0xbc>)
 8008e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3a:	4a24      	ldr	r2, [pc, #144]	; (8008ecc <HAL_PCD_MspInit+0xbc>)
 8008e3c:	f043 0301 	orr.w	r3, r3, #1
 8008e40:	6313      	str	r3, [r2, #48]	; 0x30
 8008e42:	4b22      	ldr	r3, [pc, #136]	; (8008ecc <HAL_PCD_MspInit+0xbc>)
 8008e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	613b      	str	r3, [r7, #16]
 8008e4c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008e4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e54:	2300      	movs	r3, #0
 8008e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008e5c:	f107 0314 	add.w	r3, r7, #20
 8008e60:	4619      	mov	r1, r3
 8008e62:	481b      	ldr	r0, [pc, #108]	; (8008ed0 <HAL_PCD_MspInit+0xc0>)
 8008e64:	f7f8 fe20 	bl	8001aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008e68:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e6e:	2302      	movs	r3, #2
 8008e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e72:	2300      	movs	r3, #0
 8008e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e76:	2300      	movs	r3, #0
 8008e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008e7a:	230a      	movs	r3, #10
 8008e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e7e:	f107 0314 	add.w	r3, r7, #20
 8008e82:	4619      	mov	r1, r3
 8008e84:	4812      	ldr	r0, [pc, #72]	; (8008ed0 <HAL_PCD_MspInit+0xc0>)
 8008e86:	f7f8 fe0f 	bl	8001aa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e8a:	4b10      	ldr	r3, [pc, #64]	; (8008ecc <HAL_PCD_MspInit+0xbc>)
 8008e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e8e:	4a0f      	ldr	r2, [pc, #60]	; (8008ecc <HAL_PCD_MspInit+0xbc>)
 8008e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e94:	6353      	str	r3, [r2, #52]	; 0x34
 8008e96:	2300      	movs	r3, #0
 8008e98:	60fb      	str	r3, [r7, #12]
 8008e9a:	4b0c      	ldr	r3, [pc, #48]	; (8008ecc <HAL_PCD_MspInit+0xbc>)
 8008e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e9e:	4a0b      	ldr	r2, [pc, #44]	; (8008ecc <HAL_PCD_MspInit+0xbc>)
 8008ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8008ea6:	4b09      	ldr	r3, [pc, #36]	; (8008ecc <HAL_PCD_MspInit+0xbc>)
 8008ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008eae:	60fb      	str	r3, [r7, #12]
 8008eb0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	2043      	movs	r0, #67	; 0x43
 8008eb8:	f7f8 fdbf 	bl	8001a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008ebc:	2043      	movs	r0, #67	; 0x43
 8008ebe:	f7f8 fdd8 	bl	8001a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008ec2:	bf00      	nop
 8008ec4:	3728      	adds	r7, #40	; 0x28
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	40023800 	.word	0x40023800
 8008ed0:	40020000 	.word	0x40020000

08008ed4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008ee8:	4619      	mov	r1, r3
 8008eea:	4610      	mov	r0, r2
 8008eec:	f7fe fb71 	bl	80075d2 <USBD_LL_SetupStage>
}
 8008ef0:	bf00      	nop
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	460b      	mov	r3, r1
 8008f02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008f0a:	78fa      	ldrb	r2, [r7, #3]
 8008f0c:	6879      	ldr	r1, [r7, #4]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	00db      	lsls	r3, r3, #3
 8008f12:	4413      	add	r3, r2
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	440b      	add	r3, r1
 8008f18:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	78fb      	ldrb	r3, [r7, #3]
 8008f20:	4619      	mov	r1, r3
 8008f22:	f7fe fbab 	bl	800767c <USBD_LL_DataOutStage>
}
 8008f26:	bf00      	nop
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b082      	sub	sp, #8
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	460b      	mov	r3, r1
 8008f38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008f40:	78fa      	ldrb	r2, [r7, #3]
 8008f42:	6879      	ldr	r1, [r7, #4]
 8008f44:	4613      	mov	r3, r2
 8008f46:	00db      	lsls	r3, r3, #3
 8008f48:	4413      	add	r3, r2
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	440b      	add	r3, r1
 8008f4e:	334c      	adds	r3, #76	; 0x4c
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	78fb      	ldrb	r3, [r7, #3]
 8008f54:	4619      	mov	r1, r3
 8008f56:	f7fe fc44 	bl	80077e2 <USBD_LL_DataInStage>
}
 8008f5a:	bf00      	nop
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b082      	sub	sp, #8
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7fe fd78 	bl	8007a66 <USBD_LL_SOF>
}
 8008f76:	bf00      	nop
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b084      	sub	sp, #16
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008f86:	2301      	movs	r3, #1
 8008f88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d102      	bne.n	8008f98 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008f92:	2300      	movs	r3, #0
 8008f94:	73fb      	strb	r3, [r7, #15]
 8008f96:	e008      	b.n	8008faa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d102      	bne.n	8008fa6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	73fb      	strb	r3, [r7, #15]
 8008fa4:	e001      	b.n	8008faa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008fa6:	f7f7 ffd3 	bl	8000f50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008fb0:	7bfa      	ldrb	r2, [r7, #15]
 8008fb2:	4611      	mov	r1, r2
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7fe fd18 	bl	80079ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7fe fcc0 	bl	8007946 <USBD_LL_Reset>
}
 8008fc6:	bf00      	nop
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
	...

08008fd0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7fe fd13 	bl	8007a0a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	6812      	ldr	r2, [r2, #0]
 8008ff2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ff6:	f043 0301 	orr.w	r3, r3, #1
 8008ffa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6a1b      	ldr	r3, [r3, #32]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d005      	beq.n	8009010 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009004:	4b04      	ldr	r3, [pc, #16]	; (8009018 <HAL_PCD_SuspendCallback+0x48>)
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	4a03      	ldr	r2, [pc, #12]	; (8009018 <HAL_PCD_SuspendCallback+0x48>)
 800900a:	f043 0306 	orr.w	r3, r3, #6
 800900e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009010:	bf00      	nop
 8009012:	3708      	adds	r7, #8
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	e000ed00 	.word	0xe000ed00

0800901c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800902a:	4618      	mov	r0, r3
 800902c:	f7fe fd03 	bl	8007a36 <USBD_LL_Resume>
}
 8009030:	bf00      	nop
 8009032:	3708      	adds	r7, #8
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	460b      	mov	r3, r1
 8009042:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800904a:	78fa      	ldrb	r2, [r7, #3]
 800904c:	4611      	mov	r1, r2
 800904e:	4618      	mov	r0, r3
 8009050:	f7fe fd5b 	bl	8007b0a <USBD_LL_IsoOUTIncomplete>
}
 8009054:	bf00      	nop
 8009056:	3708      	adds	r7, #8
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	460b      	mov	r3, r1
 8009066:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800906e:	78fa      	ldrb	r2, [r7, #3]
 8009070:	4611      	mov	r1, r2
 8009072:	4618      	mov	r0, r3
 8009074:	f7fe fd17 	bl	8007aa6 <USBD_LL_IsoINIncomplete>
}
 8009078:	bf00      	nop
 800907a:	3708      	adds	r7, #8
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800908e:	4618      	mov	r0, r3
 8009090:	f7fe fd6d 	bl	8007b6e <USBD_LL_DevConnected>
}
 8009094:	bf00      	nop
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7fe fd6a 	bl	8007b84 <USBD_LL_DevDisconnected>
}
 80090b0:	bf00      	nop
 80090b2:	3708      	adds	r7, #8
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d13c      	bne.n	8009142 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80090c8:	4a20      	ldr	r2, [pc, #128]	; (800914c <USBD_LL_Init+0x94>)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4a1e      	ldr	r2, [pc, #120]	; (800914c <USBD_LL_Init+0x94>)
 80090d4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80090d8:	4b1c      	ldr	r3, [pc, #112]	; (800914c <USBD_LL_Init+0x94>)
 80090da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80090de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80090e0:	4b1a      	ldr	r3, [pc, #104]	; (800914c <USBD_LL_Init+0x94>)
 80090e2:	2204      	movs	r2, #4
 80090e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80090e6:	4b19      	ldr	r3, [pc, #100]	; (800914c <USBD_LL_Init+0x94>)
 80090e8:	2202      	movs	r2, #2
 80090ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80090ec:	4b17      	ldr	r3, [pc, #92]	; (800914c <USBD_LL_Init+0x94>)
 80090ee:	2200      	movs	r2, #0
 80090f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80090f2:	4b16      	ldr	r3, [pc, #88]	; (800914c <USBD_LL_Init+0x94>)
 80090f4:	2202      	movs	r2, #2
 80090f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80090f8:	4b14      	ldr	r3, [pc, #80]	; (800914c <USBD_LL_Init+0x94>)
 80090fa:	2200      	movs	r2, #0
 80090fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80090fe:	4b13      	ldr	r3, [pc, #76]	; (800914c <USBD_LL_Init+0x94>)
 8009100:	2200      	movs	r2, #0
 8009102:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009104:	4b11      	ldr	r3, [pc, #68]	; (800914c <USBD_LL_Init+0x94>)
 8009106:	2200      	movs	r2, #0
 8009108:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800910a:	4b10      	ldr	r3, [pc, #64]	; (800914c <USBD_LL_Init+0x94>)
 800910c:	2201      	movs	r2, #1
 800910e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009110:	4b0e      	ldr	r3, [pc, #56]	; (800914c <USBD_LL_Init+0x94>)
 8009112:	2200      	movs	r2, #0
 8009114:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009116:	480d      	ldr	r0, [pc, #52]	; (800914c <USBD_LL_Init+0x94>)
 8009118:	f7f9 fd5c 	bl	8002bd4 <HAL_PCD_Init>
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d001      	beq.n	8009126 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009122:	f7f7 ff15 	bl	8000f50 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009126:	2180      	movs	r1, #128	; 0x80
 8009128:	4808      	ldr	r0, [pc, #32]	; (800914c <USBD_LL_Init+0x94>)
 800912a:	f7fa ffb4 	bl	8004096 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800912e:	2240      	movs	r2, #64	; 0x40
 8009130:	2100      	movs	r1, #0
 8009132:	4806      	ldr	r0, [pc, #24]	; (800914c <USBD_LL_Init+0x94>)
 8009134:	f7fa ff68 	bl	8004008 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009138:	2280      	movs	r2, #128	; 0x80
 800913a:	2101      	movs	r1, #1
 800913c:	4803      	ldr	r0, [pc, #12]	; (800914c <USBD_LL_Init+0x94>)
 800913e:	f7fa ff63 	bl	8004008 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	200017c0 	.word	0x200017c0

08009150 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009158:	2300      	movs	r3, #0
 800915a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800915c:	2300      	movs	r3, #0
 800915e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009166:	4618      	mov	r0, r3
 8009168:	f7f9 fe51 	bl	8002e0e <HAL_PCD_Start>
 800916c:	4603      	mov	r3, r0
 800916e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009170:	7bfb      	ldrb	r3, [r7, #15]
 8009172:	4618      	mov	r0, r3
 8009174:	f000 f942 	bl	80093fc <USBD_Get_USB_Status>
 8009178:	4603      	mov	r3, r0
 800917a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800917c:	7bbb      	ldrb	r3, [r7, #14]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b084      	sub	sp, #16
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	4608      	mov	r0, r1
 8009190:	4611      	mov	r1, r2
 8009192:	461a      	mov	r2, r3
 8009194:	4603      	mov	r3, r0
 8009196:	70fb      	strb	r3, [r7, #3]
 8009198:	460b      	mov	r3, r1
 800919a:	70bb      	strb	r3, [r7, #2]
 800919c:	4613      	mov	r3, r2
 800919e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091a0:	2300      	movs	r3, #0
 80091a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091a4:	2300      	movs	r3, #0
 80091a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80091ae:	78bb      	ldrb	r3, [r7, #2]
 80091b0:	883a      	ldrh	r2, [r7, #0]
 80091b2:	78f9      	ldrb	r1, [r7, #3]
 80091b4:	f7fa fb22 	bl	80037fc <HAL_PCD_EP_Open>
 80091b8:	4603      	mov	r3, r0
 80091ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091bc:	7bfb      	ldrb	r3, [r7, #15]
 80091be:	4618      	mov	r0, r3
 80091c0:	f000 f91c 	bl	80093fc <USBD_Get_USB_Status>
 80091c4:	4603      	mov	r3, r0
 80091c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b084      	sub	sp, #16
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
 80091da:	460b      	mov	r3, r1
 80091dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091de:	2300      	movs	r3, #0
 80091e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091e2:	2300      	movs	r3, #0
 80091e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091ec:	78fa      	ldrb	r2, [r7, #3]
 80091ee:	4611      	mov	r1, r2
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7fa fb6b 	bl	80038cc <HAL_PCD_EP_Close>
 80091f6:	4603      	mov	r3, r0
 80091f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091fa:	7bfb      	ldrb	r3, [r7, #15]
 80091fc:	4618      	mov	r0, r3
 80091fe:	f000 f8fd 	bl	80093fc <USBD_Get_USB_Status>
 8009202:	4603      	mov	r3, r0
 8009204:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009206:	7bbb      	ldrb	r3, [r7, #14]
}
 8009208:	4618      	mov	r0, r3
 800920a:	3710      	adds	r7, #16
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	460b      	mov	r3, r1
 800921a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800921c:	2300      	movs	r3, #0
 800921e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009220:	2300      	movs	r3, #0
 8009222:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800922a:	78fa      	ldrb	r2, [r7, #3]
 800922c:	4611      	mov	r1, r2
 800922e:	4618      	mov	r0, r3
 8009230:	f7fa fc43 	bl	8003aba <HAL_PCD_EP_SetStall>
 8009234:	4603      	mov	r3, r0
 8009236:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009238:	7bfb      	ldrb	r3, [r7, #15]
 800923a:	4618      	mov	r0, r3
 800923c:	f000 f8de 	bl	80093fc <USBD_Get_USB_Status>
 8009240:	4603      	mov	r3, r0
 8009242:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009244:	7bbb      	ldrb	r3, [r7, #14]
}
 8009246:	4618      	mov	r0, r3
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b084      	sub	sp, #16
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	460b      	mov	r3, r1
 8009258:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800925a:	2300      	movs	r3, #0
 800925c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800925e:	2300      	movs	r3, #0
 8009260:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009268:	78fa      	ldrb	r2, [r7, #3]
 800926a:	4611      	mov	r1, r2
 800926c:	4618      	mov	r0, r3
 800926e:	f7fa fc88 	bl	8003b82 <HAL_PCD_EP_ClrStall>
 8009272:	4603      	mov	r3, r0
 8009274:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009276:	7bfb      	ldrb	r3, [r7, #15]
 8009278:	4618      	mov	r0, r3
 800927a:	f000 f8bf 	bl	80093fc <USBD_Get_USB_Status>
 800927e:	4603      	mov	r3, r0
 8009280:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009282:	7bbb      	ldrb	r3, [r7, #14]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3710      	adds	r7, #16
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	460b      	mov	r3, r1
 8009296:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800929e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80092a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	da0b      	bge.n	80092c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80092a8:	78fb      	ldrb	r3, [r7, #3]
 80092aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092ae:	68f9      	ldr	r1, [r7, #12]
 80092b0:	4613      	mov	r3, r2
 80092b2:	00db      	lsls	r3, r3, #3
 80092b4:	4413      	add	r3, r2
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	440b      	add	r3, r1
 80092ba:	333e      	adds	r3, #62	; 0x3e
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	e00b      	b.n	80092d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80092c0:	78fb      	ldrb	r3, [r7, #3]
 80092c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092c6:	68f9      	ldr	r1, [r7, #12]
 80092c8:	4613      	mov	r3, r2
 80092ca:	00db      	lsls	r3, r3, #3
 80092cc:	4413      	add	r3, r2
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	440b      	add	r3, r1
 80092d2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80092d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3714      	adds	r7, #20
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	460b      	mov	r3, r1
 80092ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092f0:	2300      	movs	r3, #0
 80092f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092f4:	2300      	movs	r3, #0
 80092f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092fe:	78fa      	ldrb	r2, [r7, #3]
 8009300:	4611      	mov	r1, r2
 8009302:	4618      	mov	r0, r3
 8009304:	f7fa fa55 	bl	80037b2 <HAL_PCD_SetAddress>
 8009308:	4603      	mov	r3, r0
 800930a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800930c:	7bfb      	ldrb	r3, [r7, #15]
 800930e:	4618      	mov	r0, r3
 8009310:	f000 f874 	bl	80093fc <USBD_Get_USB_Status>
 8009314:	4603      	mov	r3, r0
 8009316:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009318:	7bbb      	ldrb	r3, [r7, #14]
}
 800931a:	4618      	mov	r0, r3
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}

08009322 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009322:	b580      	push	{r7, lr}
 8009324:	b086      	sub	sp, #24
 8009326:	af00      	add	r7, sp, #0
 8009328:	60f8      	str	r0, [r7, #12]
 800932a:	607a      	str	r2, [r7, #4]
 800932c:	603b      	str	r3, [r7, #0]
 800932e:	460b      	mov	r3, r1
 8009330:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009332:	2300      	movs	r3, #0
 8009334:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009336:	2300      	movs	r3, #0
 8009338:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009340:	7af9      	ldrb	r1, [r7, #11]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	f7fa fb6e 	bl	8003a26 <HAL_PCD_EP_Transmit>
 800934a:	4603      	mov	r3, r0
 800934c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800934e:	7dfb      	ldrb	r3, [r7, #23]
 8009350:	4618      	mov	r0, r3
 8009352:	f000 f853 	bl	80093fc <USBD_Get_USB_Status>
 8009356:	4603      	mov	r3, r0
 8009358:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800935a:	7dbb      	ldrb	r3, [r7, #22]
}
 800935c:	4618      	mov	r0, r3
 800935e:	3718      	adds	r7, #24
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b086      	sub	sp, #24
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	607a      	str	r2, [r7, #4]
 800936e:	603b      	str	r3, [r7, #0]
 8009370:	460b      	mov	r3, r1
 8009372:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009374:	2300      	movs	r3, #0
 8009376:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009378:	2300      	movs	r3, #0
 800937a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009382:	7af9      	ldrb	r1, [r7, #11]
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	f7fa faea 	bl	8003960 <HAL_PCD_EP_Receive>
 800938c:	4603      	mov	r3, r0
 800938e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009390:	7dfb      	ldrb	r3, [r7, #23]
 8009392:	4618      	mov	r0, r3
 8009394:	f000 f832 	bl	80093fc <USBD_Get_USB_Status>
 8009398:	4603      	mov	r3, r0
 800939a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800939c:	7dbb      	ldrb	r3, [r7, #22]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3718      	adds	r7, #24
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b082      	sub	sp, #8
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
 80093ae:	460b      	mov	r3, r1
 80093b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093b8:	78fa      	ldrb	r2, [r7, #3]
 80093ba:	4611      	mov	r1, r2
 80093bc:	4618      	mov	r0, r3
 80093be:	f7fa fb1a 	bl	80039f6 <HAL_PCD_EP_GetRxCount>
 80093c2:	4603      	mov	r3, r0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80093d4:	4b03      	ldr	r3, [pc, #12]	; (80093e4 <USBD_static_malloc+0x18>)
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	370c      	adds	r7, #12
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	20001ccc 	.word	0x20001ccc

080093e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]

}
 80093f0:	bf00      	nop
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b085      	sub	sp, #20
 8009400:	af00      	add	r7, sp, #0
 8009402:	4603      	mov	r3, r0
 8009404:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009406:	2300      	movs	r3, #0
 8009408:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800940a:	79fb      	ldrb	r3, [r7, #7]
 800940c:	2b03      	cmp	r3, #3
 800940e:	d817      	bhi.n	8009440 <USBD_Get_USB_Status+0x44>
 8009410:	a201      	add	r2, pc, #4	; (adr r2, 8009418 <USBD_Get_USB_Status+0x1c>)
 8009412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009416:	bf00      	nop
 8009418:	08009429 	.word	0x08009429
 800941c:	0800942f 	.word	0x0800942f
 8009420:	08009435 	.word	0x08009435
 8009424:	0800943b 	.word	0x0800943b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009428:	2300      	movs	r3, #0
 800942a:	73fb      	strb	r3, [r7, #15]
    break;
 800942c:	e00b      	b.n	8009446 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800942e:	2303      	movs	r3, #3
 8009430:	73fb      	strb	r3, [r7, #15]
    break;
 8009432:	e008      	b.n	8009446 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009434:	2301      	movs	r3, #1
 8009436:	73fb      	strb	r3, [r7, #15]
    break;
 8009438:	e005      	b.n	8009446 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800943a:	2303      	movs	r3, #3
 800943c:	73fb      	strb	r3, [r7, #15]
    break;
 800943e:	e002      	b.n	8009446 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009440:	2303      	movs	r3, #3
 8009442:	73fb      	strb	r3, [r7, #15]
    break;
 8009444:	bf00      	nop
  }
  return usb_status;
 8009446:	7bfb      	ldrb	r3, [r7, #15]
}
 8009448:	4618      	mov	r0, r3
 800944a:	3714      	adds	r7, #20
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <__libc_init_array>:
 8009454:	b570      	push	{r4, r5, r6, lr}
 8009456:	4d0d      	ldr	r5, [pc, #52]	; (800948c <__libc_init_array+0x38>)
 8009458:	4c0d      	ldr	r4, [pc, #52]	; (8009490 <__libc_init_array+0x3c>)
 800945a:	1b64      	subs	r4, r4, r5
 800945c:	10a4      	asrs	r4, r4, #2
 800945e:	2600      	movs	r6, #0
 8009460:	42a6      	cmp	r6, r4
 8009462:	d109      	bne.n	8009478 <__libc_init_array+0x24>
 8009464:	4d0b      	ldr	r5, [pc, #44]	; (8009494 <__libc_init_array+0x40>)
 8009466:	4c0c      	ldr	r4, [pc, #48]	; (8009498 <__libc_init_array+0x44>)
 8009468:	f000 f820 	bl	80094ac <_init>
 800946c:	1b64      	subs	r4, r4, r5
 800946e:	10a4      	asrs	r4, r4, #2
 8009470:	2600      	movs	r6, #0
 8009472:	42a6      	cmp	r6, r4
 8009474:	d105      	bne.n	8009482 <__libc_init_array+0x2e>
 8009476:	bd70      	pop	{r4, r5, r6, pc}
 8009478:	f855 3b04 	ldr.w	r3, [r5], #4
 800947c:	4798      	blx	r3
 800947e:	3601      	adds	r6, #1
 8009480:	e7ee      	b.n	8009460 <__libc_init_array+0xc>
 8009482:	f855 3b04 	ldr.w	r3, [r5], #4
 8009486:	4798      	blx	r3
 8009488:	3601      	adds	r6, #1
 800948a:	e7f2      	b.n	8009472 <__libc_init_array+0x1e>
 800948c:	0800952c 	.word	0x0800952c
 8009490:	0800952c 	.word	0x0800952c
 8009494:	0800952c 	.word	0x0800952c
 8009498:	08009530 	.word	0x08009530

0800949c <memset>:
 800949c:	4402      	add	r2, r0
 800949e:	4603      	mov	r3, r0
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d100      	bne.n	80094a6 <memset+0xa>
 80094a4:	4770      	bx	lr
 80094a6:	f803 1b01 	strb.w	r1, [r3], #1
 80094aa:	e7f9      	b.n	80094a0 <memset+0x4>

080094ac <_init>:
 80094ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ae:	bf00      	nop
 80094b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094b2:	bc08      	pop	{r3}
 80094b4:	469e      	mov	lr, r3
 80094b6:	4770      	bx	lr

080094b8 <_fini>:
 80094b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ba:	bf00      	nop
 80094bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094be:	bc08      	pop	{r3}
 80094c0:	469e      	mov	lr, r3
 80094c2:	4770      	bx	lr
