/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 04.05.2022 11:59:35

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 272;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[11];
TfLiteEvalTensor tflEvalTensors[11];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,18 } };
const TfArray<1, float> quant0_scale = { 1, { 6.0352935791015625, } };
const TfArray<1, int> quant0_zero = { 1, { -114 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int8_t tensor_data1[40*18] = { 
  -88, -77, -19, -101, -101, 112, -81, 47, 113, 86, 102, 116, -68, -115, -46, -75, 20, 38, 
  17, 2, 25, 78, -99, 65, -25, -69, -46, 85, -8, -97, 39, 31, -65, 98, -118, -111, 
  -1, -96, 0, -117, -77, -41, -90, 65, -84, 102, 82, -61, -55, 13, -20, -80, -107, -82, 
  -124, -88, 32, -90, 28, 0, 15, 20, -33, 111, -112, 123, -22, 18, 93, -5, 18, -28, 
  5, -78, 43, -89, 19, 44, -4, -109, -56, 32, 15, -43, -9, 101, 116, 12, -65, -59, 
  62, -23, -3, 30, -2, -60, 112, 90, -63, 83, -60, -24, -83, 21, 67, 56, 6, -35, 
  -92, -15, -47, 36, -57, -102, -122, 106, -25, 33, 23, 113, 31, -60, 31, 54, -77, -44, 
  -41, -83, -101, 18, 98, 77, -88, -68, -2, 7, -38, -118, -19, 85, 45, -108, -108, 13, 
  25, 66, 70, -52, 72, -127, -4, -102, 16, 75, 6, -28, -65, -84, 91, -56, -32, 79, 
  2, 0, -103, -2, 50, 7, -51, -2, 36, 107, 66, -6, 101, -53, 110, -88, -15, -16, 
  -105, -108, 110, 33, 25, 4, 16, -6, -82, -45, -58, 72, -60, -80, 38, 110, -106, 102, 
  92, 7, 7, 21, 107, -32, 5, -61, 11, 84, 73, -10, 76, -13, -83, -117, -68, 82, 
  37, 29, 85, 23, -9, -18, -97, 116, 53, -126, -105, 101, -111, -82, 87, 72, -31, -114, 
  15, -42, 14, 62, 31, 116, 61, -1, -74, 35, -125, 49, -119, 61, 104, -119, 29, 83, 
  -72, 122, 58, 62, 12, -103, -100, 12, -66, -52, 26, -70, 70, -91, -51, 19, 87, 98, 
  -75, -38, -30, -74, -17, -72, -49, 121, -10, 76, 29, 30, -55, 74, 11, -113, -107, 79, 
  -102, 90, -7, -24, 2, 3, -80, -63, 84, -113, -41, -57, 66, -10, 120, -2, 5, 29, 
  -52, -122, 108, 22, -76, 11, 28, -26, 5, -63, -117, 69, 110, -92, 72, 74, 16, -109, 
  -82, 98, 74, -3, -33, -104, 91, -53, -48, -102, 77, -37, -78, 92, 24, 68, 100, 52, 
  -19, 66, 38, 18, 90, -17, 8, 83, 40, 51, -56, 118, 99, -21, -96, -100, 105, 52, 
  -85, 15, 10, -89, 18, -61, 107, 120, -39, -79, -111, -89, -71, 50, -43, -108, 107, -51, 
  24, -42, 112, 97, 84, -61, -107, -45, -105, 51, -62, -72, -73, 62, 3, 108, -17, 103, 
  -120, 51, 28, -29, 12, -30, -27, -102, -29, -118, -17, 24, 102, -63, -73, 91, 48, 40, 
  -40, 62, 34, 12, 116, -108, 48, -49, -28, 65, -66, -12, 106, -29, 21, 84, -89, 90, 
  67, 84, 113, -49, 45, 8, -27, 2, -50, 21, -42, 31, -57, 57, 3, -67, 75, -42, 
  -70, -16, 46, 40, -98, -75, -59, 27, 44, 102, -110, -39, 55, -45, 40, 115, 115, 76, 
  110, -44, 36, -28, 66, -93, -87, 29, 58, -43, -15, -92, 2, 20, -34, -36, -10, -52, 
  110, -18, 105, -123, -85, -73, -63, -2, -104, -44, -87, -32, -115, 48, 78, 93, -53, 31, 
  55, -124, 60, -19, -103, 120, -42, -83, -17, 5, -42, -61, 114, 21, 2, 51, 42, 41, 
  13, 72, -14, -57, -10, -48, -16, -40, 100, -110, -66, 94, -102, -65, 61, 26, -79, 95, 
  -101, -92, -41, -4, 83, 104, 103, -90, 75, -13, 6, -110, 39, 68, -101, -21, -2, 45, 
  65, -15, 121, 84, 121, 101, -85, 60, 71, 88, -42, 29, -87, 103, 75, 47, -38, -95, 
  83, -70, -39, -53, 113, -60, 101, -118, -7, -26, -25, -20, -14, 37, -51, -41, 102, -68, 
  30, 82, -30, -24, 92, 107, -51, 26, -64, 99, -45, -48, 98, 21, -54, 124, 59, 59, 
  -122, -58, -42, 76, -45, -21, -33, -19, -56, -71, 51, 44, 5, -17, 8, -3, 80, -118, 
  112, 49, 103, -66, 106, 53, -40, -86, 81, 79, -46, -101, -41, 52, 8, -105, 79, -42, 
  110, 10, 0, -53, 27, -98, -104, 47, 60, -9, -121, 93, 52, 4, 115, -17, 66, 35, 
  7, -105, -51, 87, 10, 53, -37, -36, -20, 97, -34, -100, -15, 119, 64, 22, 28, -113, 
  -27, 106, 44, -84, -31, -85, -13, 85, -23, -22, -107, 117, -104, -34, -10, 46, 11, 76, 
  56, 58, -4, -105, 111, 93, -36, 40, -114, -18, 69, -107, 114, 114, -121, -87, 64, 16, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 40,18 } };
const TfArray<1, float> quant1_scale = { 1, { 0.0025984242092818022, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(16) int32_t tensor_data2[40] = { 0, 0, 0, 0, 1, 0, 0, 0, -1, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 2, 0, -1, 0, 0, 1, 0, 0, -1, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension2 = { 1, { 40 } };
const TfArray<1, float> quant2_scale = { 1, { 0.015682252123951912, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[20*40] = { 
  -79, 35, 103, -34, -103, -39, 110, -34, -107, -35, 90, -101, -61, 110, -94, -64, 41, 112, 110, 82, -35, -116, -63, 57, -83, -107, 97, -36, 10, 77, 76, -107, -97, -116, -47, 45, 78, -26, -3, -46, 
  -80, -62, 30, 85, -44, 19, -29, -94, -50, 59, 43, 2, -20, -36, -3, -76, 79, 3, 58, -50, -116, 58, 117, 21, 20, 105, 15, 53, 1, 45, 120, -51, -43, 127, -31, -82, -81, 124, 55, 41, 
  -104, 29, 78, 42, 87, -71, 39, 38, -37, -118, 109, -15, 68, -73, -2, 74, 11, -82, 115, -23, 77, -10, 79, 25, -10, -73, 34, 100, -35, -14, -77, 25, 57, 13, 62, 85, 50, 32, 109, 63, 
  -81, -74, -17, 78, 107, 94, 2, -29, 26, 32, -67, 87, -9, -114, 33, 52, -52, 27, 98, 37, -105, -84, 64, -68, -9, -44, -72, 48, 27, 36, 6, 30, -38, -118, -42, -65, -7, 15, 32, -93, 
  12, -66, -121, -49, -79, 6, -105, -19, 16, 111, 67, 44, 110, -1, 47, 85, -72, -87, 7, 102, 51, -83, 50, -59, -120, 60, 67, 105, -90, 69, 43, -123, -38, 78, -123, 90, -28, 63, 69, 0, 
  74, -97, -84, 4, 115, -126, -94, -62, -105, -105, 76, -18, -74, -101, -115, 110, 77, -26, 84, 116, 79, 52, 1, 44, -12, -81, -57, 127, -54, -30, 98, -70, -71, -42, 33, -24, 20, -123, 17, -16, 
  99, 14, 76, 17, 53, -59, -122, -8, 50, 46, 107, -90, -120, 7, 101, -104, 79, -39, 6, 79, 17, 78, -69, 104, 25, 43, -106, -72, 69, -2, -85, 14, -96, 105, -111, 3, 52, -15, -4, 59, 
  -67, -68, -25, -36, 106, 78, -22, -27, -70, -51, 96, 96, -125, 56, -84, 17, 67, -99, -79, 0, 15, -65, -114, -39, 3, 22, 4, 118, 60, -24, 75, 16, 64, -63, 34, 2, -18, 40, 44, -106, 
  -83, 9, 114, 69, -26, 50, 108, -20, -97, -2, -114, 41, 77, 2, 96, 109, -19, 71, 11, -34, -106, 12, -5, -20, 23, 26, 9, 2, -24, 28, -66, -27, -47, 0, 46, -112, -18, -104, 16, -47, 
  -34, 26, -89, 85, 93, -24, -103, -99, 119, -39, 44, -88, -66, -44, 37, 0, 24, 46, 20, -101, 74, 71, 64, -66, -36, 58, 72, 9, 32, -17, -87, -82, -32, -119, -20, -55, 60, 113, 111, -122, 
  -4, 21, -74, 21, -112, -68, 99, 1, 17, 15, -57, -23, -103, -60, -52, -45, -53, 58, 11, 25, 105, 104, 60, 27, -78, 8, -38, -82, -2, -60, -50, -107, -124, 121, 103, -34, -107, 72, 12, 5, 
  15, 47, 11, -56, -91, -94, -37, -105, 78, -106, 102, 76, 124, 84, 63, 12, 108, 44, -55, 50, 33, 20, 100, 93, 9, -44, 109, 119, 33, -48, 39, -27, 63, -77, 37, 109, 42, 97, -126, 100, 
  84, -62, -2, -54, 92, -55, -116, -40, 120, -35, -81, 73, 54, -76, 103, -114, -19, 89, 108, -48, 78, 99, -80, -109, -27, 6, -57, 16, -126, -56, -114, 95, 120, -112, 96, -74, -78, 41, 0, -15, 
  -25, -100, 56, 89, -93, 47, -78, 120, 32, -85, 100, 112, -93, 104, 52, 17, -13, -84, 75, -96, -24, 88, -119, 11, 107, -68, -16, 11, -111, -16, -56, 4, 121, 126, 39, 71, -9, 117, -80, 7, 
  8, -93, 105, -7, 120, -119, 44, 23, -109, 29, 121, 117, -58, -96, -4, -119, -9, 51, -34, 65, -1, 125, -120, -53, 72, 80, -15, -60, -43, -61, 117, 5, 62, 84, -19, 40, -125, 87, -10, -67, 
  96, 11, -24, -31, -118, 116, 57, 96, -13, 83, 66, 14, 5, -117, -76, 97, -44, 89, 91, -43, 31, 111, 100, 90, 22, 15, 83, 115, -72, 0, 18, -100, 24, -47, 110, 8, 102, 29, 75, -127, 
  -40, 96, -34, 54, 100, 72, -10, -11, -29, -59, 37, 71, 72, -105, 66, -67, 104, -81, 45, -103, -73, -5, 71, 88, 102, -90, -60, 68, -58, 74, -41, 47, 48, -41, 84, 5, 33, -21, 2, -84, 
  110, -116, -20, -97, 83, 112, -6, -47, 21, 55, 54, -101, 73, 7, 100, 68, -29, -85, 30, 75, -14, 19, 99, 4, 39, -12, 65, 58, 30, -17, 58, 51, -27, -2, -4, -45, 101, 79, 4, 32, 
  75, 57, -4, -121, -93, 90, 121, 58, 106, -2, 38, -8, -37, 92, -13, -86, 27, -20, -47, -108, 114, -95, -81, -70, -82, 112, -124, 49, 37, 2, -125, 84, -21, -14, -95, -76, -102, -102, -26, 35, 
  39, 94, 72, -67, -43, 37, -41, 26, 114, 114, -9, 117, 3, -107, -116, -101, 80, -59, 34, -2, -41, 57, 18, -53, 121, -42, -58, -52, -35, -61, 40, 123, -33, -72, -72, -29, -4, -108, -122, -26, 
};
const TfArray<2, int> tensor_dimension3 = { 2, { 20,40 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0024897775147110224, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[20] = { 0, 0, -2, 0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, -1, -1, 0, -1, 0, };
const TfArray<1, int> tensor_dimension4 = { 1, { 20 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0114485714584589, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[5*20] = { 
  -24, -12, -80, -4, -25, 85, -10, -121, 44, -41, -122, 20, 1, -89, -108, -10, -85, 84, -79, 43, 
  69, -113, 66, 1, 36, 23, -116, 33, -106, 30, 50, 111, 43, 88, 4, 112, -50, 39, -37, 26, 
  -127, 105, 56, 30, 48, -15, 18, 114, 118, -71, 102, -90, 112, -62, 23, -25, 20, 122, 120, 68, 
  -114, 7, 60, 47, -10, 13, 71, -97, -78, -80, 122, 82, 40, -75, -13, 63, 79, -91, -31, -111, 
  -13, 102, 79, -3, -92, -59, 33, 115, -24, -102, -91, -27, 76, 98, -123, -107, -20, 11, 17, 121, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 5,20 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0038471764419227839, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[5] = { 3, -1, 0, 0, 0, };
const TfArray<1, int> tensor_dimension6 = { 1, { 5 } };
const TfArray<1, float> quant6_scale = { 1, { 0.013689561747014523, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,40 } };
const TfArray<1, float> quant7_scale = { 1, { 4.5982308387756348, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,20 } };
const TfArray<1, float> quant8_scale = { 1, { 3.5583400726318359, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,5 } };
const TfArray<1, float> quant9_scale = { 1, { 0.50497043132781982, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,5 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,1,2 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,3,4 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,5,6 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension0, 18, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 720, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension7, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension8, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 11;
  for(size_t i = 0; i < 11; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 4; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
