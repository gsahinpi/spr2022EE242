
hwsolution3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c010  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f3c  0801c1a0  0801c1a0  0002c1a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f0dc  0801f0dc  000302cc  2**0
                  CONTENTS
  4 .ARM          00000008  0801f0dc  0801f0dc  0002f0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f0e4  0801f0e4  000302cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801f0e4  0801f0e4  0002f0e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801f0f0  0801f0f0  0002f0f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0801f0f8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302cc  2**0
                  CONTENTS
 10 .bss          00002700  200002d0  200002d0  000302d0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200029d0  200029d0  000302d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0010e815  00000000  00000000  000302fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000118df  00000000  00000000  0013eb11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000053c0  00000000  00000000  001503f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000051c8  00000000  00000000  001557b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000332ad  00000000  00000000  0015a978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00054aec  00000000  00000000  0018dc25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00188ef9  00000000  00000000  001e2711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0036b60a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00019194  00000000  00000000  0036b65c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801c188 	.word	0x0801c188

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	0801c188 	.word	0x0801c188

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strcmp>:
 8000270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000278:	2a01      	cmp	r2, #1
 800027a:	bf28      	it	cs
 800027c:	429a      	cmpcs	r2, r3
 800027e:	d0f7      	beq.n	8000270 <strcmp>
 8000280:	1ad0      	subs	r0, r2, r3
 8000282:	4770      	bx	lr

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_ldivmod>:
 8000c9c:	b97b      	cbnz	r3, 8000cbe <__aeabi_ldivmod+0x22>
 8000c9e:	b972      	cbnz	r2, 8000cbe <__aeabi_ldivmod+0x22>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bfbe      	ittt	lt
 8000ca4:	2000      	movlt	r0, #0
 8000ca6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000caa:	e006      	blt.n	8000cba <__aeabi_ldivmod+0x1e>
 8000cac:	bf08      	it	eq
 8000cae:	2800      	cmpeq	r0, #0
 8000cb0:	bf1c      	itt	ne
 8000cb2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb6:	f04f 30ff 	movne.w	r0, #4294967295
 8000cba:	f000 b9f5 	b.w	80010a8 <__aeabi_idiv0>
 8000cbe:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	db09      	blt.n	8000cde <__aeabi_ldivmod+0x42>
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db1a      	blt.n	8000d04 <__aeabi_ldivmod+0x68>
 8000cce:	f000 f883 	bl	8000dd8 <__udivmoddi4>
 8000cd2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cda:	b004      	add	sp, #16
 8000cdc:	4770      	bx	lr
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db1b      	blt.n	8000d20 <__aeabi_ldivmod+0x84>
 8000ce8:	f000 f876 	bl	8000dd8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	4252      	negs	r2, r2
 8000cfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d02:	4770      	bx	lr
 8000d04:	4252      	negs	r2, r2
 8000d06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0a:	f000 f865 	bl	8000dd8 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4240      	negs	r0, r0
 8000d1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f857 	bl	8000dd8 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4252      	negs	r2, r2
 8000d36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_uldivmod>:
 8000d3c:	b953      	cbnz	r3, 8000d54 <__aeabi_uldivmod+0x18>
 8000d3e:	b94a      	cbnz	r2, 8000d54 <__aeabi_uldivmod+0x18>
 8000d40:	2900      	cmp	r1, #0
 8000d42:	bf08      	it	eq
 8000d44:	2800      	cmpeq	r0, #0
 8000d46:	bf1c      	itt	ne
 8000d48:	f04f 31ff 	movne.w	r1, #4294967295
 8000d4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d50:	f000 b9aa 	b.w	80010a8 <__aeabi_idiv0>
 8000d54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d5c:	f000 f83c 	bl	8000dd8 <__udivmoddi4>
 8000d60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d68:	b004      	add	sp, #16
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_d2lz>:
 8000d6c:	b538      	push	{r3, r4, r5, lr}
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2300      	movs	r3, #0
 8000d72:	4604      	mov	r4, r0
 8000d74:	460d      	mov	r5, r1
 8000d76:	f7ff febb 	bl	8000af0 <__aeabi_dcmplt>
 8000d7a:	b928      	cbnz	r0, 8000d88 <__aeabi_d2lz+0x1c>
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	4629      	mov	r1, r5
 8000d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d84:	f000 b80a 	b.w	8000d9c <__aeabi_d2ulz>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8e:	f000 f805 	bl	8000d9c <__aeabi_d2ulz>
 8000d92:	4240      	negs	r0, r0
 8000d94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d98:	bd38      	pop	{r3, r4, r5, pc}
 8000d9a:	bf00      	nop

08000d9c <__aeabi_d2ulz>:
 8000d9c:	b5d0      	push	{r4, r6, r7, lr}
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__aeabi_d2ulz+0x34>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	4606      	mov	r6, r0
 8000da4:	460f      	mov	r7, r1
 8000da6:	f7ff fc31 	bl	800060c <__aeabi_dmul>
 8000daa:	f7ff ff07 	bl	8000bbc <__aeabi_d2uiz>
 8000dae:	4604      	mov	r4, r0
 8000db0:	f7ff fbb2 	bl	8000518 <__aeabi_ui2d>
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <__aeabi_d2ulz+0x38>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f7ff fc28 	bl	800060c <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	4639      	mov	r1, r7
 8000dc4:	f7ff fa6a 	bl	800029c <__aeabi_dsub>
 8000dc8:	f7ff fef8 	bl	8000bbc <__aeabi_d2uiz>
 8000dcc:	4621      	mov	r1, r4
 8000dce:	bdd0      	pop	{r4, r6, r7, pc}
 8000dd0:	3df00000 	.word	0x3df00000
 8000dd4:	41f00000 	.word	0x41f00000

08000dd8 <__udivmoddi4>:
 8000dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ddc:	9d08      	ldr	r5, [sp, #32]
 8000dde:	4604      	mov	r4, r0
 8000de0:	468e      	mov	lr, r1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d14d      	bne.n	8000e82 <__udivmoddi4+0xaa>
 8000de6:	428a      	cmp	r2, r1
 8000de8:	4694      	mov	ip, r2
 8000dea:	d969      	bls.n	8000ec0 <__udivmoddi4+0xe8>
 8000dec:	fab2 f282 	clz	r2, r2
 8000df0:	b152      	cbz	r2, 8000e08 <__udivmoddi4+0x30>
 8000df2:	fa01 f302 	lsl.w	r3, r1, r2
 8000df6:	f1c2 0120 	rsb	r1, r2, #32
 8000dfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e02:	ea41 0e03 	orr.w	lr, r1, r3
 8000e06:	4094      	lsls	r4, r2
 8000e08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e0c:	0c21      	lsrs	r1, r4, #16
 8000e0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000e12:	fa1f f78c 	uxth.w	r7, ip
 8000e16:	fb08 e316 	mls	r3, r8, r6, lr
 8000e1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1e:	fb06 f107 	mul.w	r1, r6, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d90a      	bls.n	8000e3c <__udivmoddi4+0x64>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2e:	f080 811f 	bcs.w	8001070 <__udivmoddi4+0x298>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 811c 	bls.w	8001070 <__udivmoddi4+0x298>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e4c:	fb00 f707 	mul.w	r7, r0, r7
 8000e50:	42a7      	cmp	r7, r4
 8000e52:	d90a      	bls.n	8000e6a <__udivmoddi4+0x92>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5c:	f080 810a 	bcs.w	8001074 <__udivmoddi4+0x29c>
 8000e60:	42a7      	cmp	r7, r4
 8000e62:	f240 8107 	bls.w	8001074 <__udivmoddi4+0x29c>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6e:	1be4      	subs	r4, r4, r7
 8000e70:	2600      	movs	r6, #0
 8000e72:	b11d      	cbz	r5, 8000e7c <__udivmoddi4+0xa4>
 8000e74:	40d4      	lsrs	r4, r2
 8000e76:	2300      	movs	r3, #0
 8000e78:	e9c5 4300 	strd	r4, r3, [r5]
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d909      	bls.n	8000e9a <__udivmoddi4+0xc2>
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	f000 80ef 	beq.w	800106a <__udivmoddi4+0x292>
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e92:	4630      	mov	r0, r6
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	fab3 f683 	clz	r6, r3
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d14a      	bne.n	8000f38 <__udivmoddi4+0x160>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d302      	bcc.n	8000eac <__udivmoddi4+0xd4>
 8000ea6:	4282      	cmp	r2, r0
 8000ea8:	f200 80f9 	bhi.w	800109e <__udivmoddi4+0x2c6>
 8000eac:	1a84      	subs	r4, r0, r2
 8000eae:	eb61 0303 	sbc.w	r3, r1, r3
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	469e      	mov	lr, r3
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d0e0      	beq.n	8000e7c <__udivmoddi4+0xa4>
 8000eba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ebe:	e7dd      	b.n	8000e7c <__udivmoddi4+0xa4>
 8000ec0:	b902      	cbnz	r2, 8000ec4 <__udivmoddi4+0xec>
 8000ec2:	deff      	udf	#255	; 0xff
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	f040 8092 	bne.w	8000ff2 <__udivmoddi4+0x21a>
 8000ece:	eba1 010c 	sub.w	r1, r1, ip
 8000ed2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed6:	fa1f fe8c 	uxth.w	lr, ip
 8000eda:	2601      	movs	r6, #1
 8000edc:	0c20      	lsrs	r0, r4, #16
 8000ede:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ee2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eea:	fb0e f003 	mul.w	r0, lr, r3
 8000eee:	4288      	cmp	r0, r1
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x12c>
 8000ef2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000efa:	d202      	bcs.n	8000f02 <__udivmoddi4+0x12a>
 8000efc:	4288      	cmp	r0, r1
 8000efe:	f200 80cb 	bhi.w	8001098 <__udivmoddi4+0x2c0>
 8000f02:	4643      	mov	r3, r8
 8000f04:	1a09      	subs	r1, r1, r0
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000f10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f14:	fb0e fe00 	mul.w	lr, lr, r0
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x156>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f24:	d202      	bcs.n	8000f2c <__udivmoddi4+0x154>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	f200 80bb 	bhi.w	80010a2 <__udivmoddi4+0x2ca>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	eba4 040e 	sub.w	r4, r4, lr
 8000f32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f36:	e79c      	b.n	8000e72 <__udivmoddi4+0x9a>
 8000f38:	f1c6 0720 	rsb	r7, r6, #32
 8000f3c:	40b3      	lsls	r3, r6
 8000f3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f46:	fa20 f407 	lsr.w	r4, r0, r7
 8000f4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	40f9      	lsrs	r1, r7
 8000f52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f56:	fa00 f306 	lsl.w	r3, r0, r6
 8000f5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5e:	0c20      	lsrs	r0, r4, #16
 8000f60:	fa1f fe8c 	uxth.w	lr, ip
 8000f64:	fb09 1118 	mls	r1, r9, r8, r1
 8000f68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f70:	4288      	cmp	r0, r1
 8000f72:	fa02 f206 	lsl.w	r2, r2, r6
 8000f76:	d90b      	bls.n	8000f90 <__udivmoddi4+0x1b8>
 8000f78:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f80:	f080 8088 	bcs.w	8001094 <__udivmoddi4+0x2bc>
 8000f84:	4288      	cmp	r0, r1
 8000f86:	f240 8085 	bls.w	8001094 <__udivmoddi4+0x2bc>
 8000f8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8e:	4461      	add	r1, ip
 8000f90:	1a09      	subs	r1, r1, r0
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f98:	fb09 1110 	mls	r1, r9, r0, r1
 8000f9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fa0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa4:	458e      	cmp	lr, r1
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x1e2>
 8000fa8:	eb1c 0101 	adds.w	r1, ip, r1
 8000fac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fb0:	d26c      	bcs.n	800108c <__udivmoddi4+0x2b4>
 8000fb2:	458e      	cmp	lr, r1
 8000fb4:	d96a      	bls.n	800108c <__udivmoddi4+0x2b4>
 8000fb6:	3802      	subs	r0, #2
 8000fb8:	4461      	add	r1, ip
 8000fba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000fc2:	eba1 010e 	sub.w	r1, r1, lr
 8000fc6:	42a1      	cmp	r1, r4
 8000fc8:	46c8      	mov	r8, r9
 8000fca:	46a6      	mov	lr, r4
 8000fcc:	d356      	bcc.n	800107c <__udivmoddi4+0x2a4>
 8000fce:	d053      	beq.n	8001078 <__udivmoddi4+0x2a0>
 8000fd0:	b15d      	cbz	r5, 8000fea <__udivmoddi4+0x212>
 8000fd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000fda:	fa01 f707 	lsl.w	r7, r1, r7
 8000fde:	fa22 f306 	lsr.w	r3, r2, r6
 8000fe2:	40f1      	lsrs	r1, r6
 8000fe4:	431f      	orrs	r7, r3
 8000fe6:	e9c5 7100 	strd	r7, r1, [r5]
 8000fea:	2600      	movs	r6, #0
 8000fec:	4631      	mov	r1, r6
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	f1c2 0320 	rsb	r3, r2, #32
 8000ff6:	40d8      	lsrs	r0, r3
 8000ff8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ffc:	fa21 f303 	lsr.w	r3, r1, r3
 8001000:	4091      	lsls	r1, r2
 8001002:	4301      	orrs	r1, r0
 8001004:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001008:	fa1f fe8c 	uxth.w	lr, ip
 800100c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001010:	fb07 3610 	mls	r6, r7, r0, r3
 8001014:	0c0b      	lsrs	r3, r1, #16
 8001016:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800101a:	fb00 f60e 	mul.w	r6, r0, lr
 800101e:	429e      	cmp	r6, r3
 8001020:	fa04 f402 	lsl.w	r4, r4, r2
 8001024:	d908      	bls.n	8001038 <__udivmoddi4+0x260>
 8001026:	eb1c 0303 	adds.w	r3, ip, r3
 800102a:	f100 38ff 	add.w	r8, r0, #4294967295
 800102e:	d22f      	bcs.n	8001090 <__udivmoddi4+0x2b8>
 8001030:	429e      	cmp	r6, r3
 8001032:	d92d      	bls.n	8001090 <__udivmoddi4+0x2b8>
 8001034:	3802      	subs	r0, #2
 8001036:	4463      	add	r3, ip
 8001038:	1b9b      	subs	r3, r3, r6
 800103a:	b289      	uxth	r1, r1
 800103c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001040:	fb07 3316 	mls	r3, r7, r6, r3
 8001044:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001048:	fb06 f30e 	mul.w	r3, r6, lr
 800104c:	428b      	cmp	r3, r1
 800104e:	d908      	bls.n	8001062 <__udivmoddi4+0x28a>
 8001050:	eb1c 0101 	adds.w	r1, ip, r1
 8001054:	f106 38ff 	add.w	r8, r6, #4294967295
 8001058:	d216      	bcs.n	8001088 <__udivmoddi4+0x2b0>
 800105a:	428b      	cmp	r3, r1
 800105c:	d914      	bls.n	8001088 <__udivmoddi4+0x2b0>
 800105e:	3e02      	subs	r6, #2
 8001060:	4461      	add	r1, ip
 8001062:	1ac9      	subs	r1, r1, r3
 8001064:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001068:	e738      	b.n	8000edc <__udivmoddi4+0x104>
 800106a:	462e      	mov	r6, r5
 800106c:	4628      	mov	r0, r5
 800106e:	e705      	b.n	8000e7c <__udivmoddi4+0xa4>
 8001070:	4606      	mov	r6, r0
 8001072:	e6e3      	b.n	8000e3c <__udivmoddi4+0x64>
 8001074:	4618      	mov	r0, r3
 8001076:	e6f8      	b.n	8000e6a <__udivmoddi4+0x92>
 8001078:	454b      	cmp	r3, r9
 800107a:	d2a9      	bcs.n	8000fd0 <__udivmoddi4+0x1f8>
 800107c:	ebb9 0802 	subs.w	r8, r9, r2
 8001080:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001084:	3801      	subs	r0, #1
 8001086:	e7a3      	b.n	8000fd0 <__udivmoddi4+0x1f8>
 8001088:	4646      	mov	r6, r8
 800108a:	e7ea      	b.n	8001062 <__udivmoddi4+0x28a>
 800108c:	4620      	mov	r0, r4
 800108e:	e794      	b.n	8000fba <__udivmoddi4+0x1e2>
 8001090:	4640      	mov	r0, r8
 8001092:	e7d1      	b.n	8001038 <__udivmoddi4+0x260>
 8001094:	46d0      	mov	r8, sl
 8001096:	e77b      	b.n	8000f90 <__udivmoddi4+0x1b8>
 8001098:	3b02      	subs	r3, #2
 800109a:	4461      	add	r1, ip
 800109c:	e732      	b.n	8000f04 <__udivmoddi4+0x12c>
 800109e:	4630      	mov	r0, r6
 80010a0:	e709      	b.n	8000eb6 <__udivmoddi4+0xde>
 80010a2:	4464      	add	r4, ip
 80010a4:	3802      	subs	r0, #2
 80010a6:	e742      	b.n	8000f2e <__udivmoddi4+0x156>

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <_Z15LIS3DSH_WriteIOhPhh>:
static float __Z_Scale = 1.0f;
//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 80010c0:	2200      	movs	r2, #0
 80010c2:	2108      	movs	r1, #8
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <_Z15LIS3DSH_WriteIOhPhh+0x4c>)
 80010c6:	f003 faf3 	bl	80046b0 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 80010ca:	f107 010f 	add.w	r1, r7, #15
 80010ce:	230a      	movs	r3, #10
 80010d0:	2201      	movs	r2, #1
 80010d2:	480a      	ldr	r0, [pc, #40]	; (80010fc <_Z15LIS3DSH_WriteIOhPhh+0x50>)
 80010d4:	f005 fa7b 	bl	80065ce <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	230a      	movs	r3, #10
 80010de:	6839      	ldr	r1, [r7, #0]
 80010e0:	4806      	ldr	r0, [pc, #24]	; (80010fc <_Z15LIS3DSH_WriteIOhPhh+0x50>)
 80010e2:	f005 fa74 	bl	80065ce <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 80010e6:	2201      	movs	r2, #1
 80010e8:	2108      	movs	r1, #8
 80010ea:	4803      	ldr	r0, [pc, #12]	; (80010f8 <_Z15LIS3DSH_WriteIOhPhh+0x4c>)
 80010ec:	f003 fae0 	bl	80046b0 <HAL_GPIO_WritePin>
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40021000 	.word	0x40021000
 80010fc:	200002ec 	.word	0x200002ec

08001100 <_Z14LIS3DSH_ReadIOhPhh>:
//2. Read IO
void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	4613      	mov	r3, r2
 800110e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001116:	b2db      	uxtb	r3, r3
 8001118:	723b      	strb	r3, [r7, #8]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 800111a:	2200      	movs	r2, #0
 800111c:	2108      	movs	r1, #8
 800111e:	4818      	ldr	r0, [pc, #96]	; (8001180 <_Z14LIS3DSH_ReadIOhPhh+0x80>)
 8001120:	f003 fac6 	bl	80046b0 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8001124:	f107 0108 	add.w	r1, r7, #8
 8001128:	230a      	movs	r3, #10
 800112a:	2201      	movs	r2, #1
 800112c:	4815      	ldr	r0, [pc, #84]	; (8001184 <_Z14LIS3DSH_ReadIOhPhh+0x84>)
 800112e:	f005 fa4e 	bl	80065ce <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	b29a      	uxth	r2, r3
 8001136:	f107 0108 	add.w	r1, r7, #8
 800113a:	230a      	movs	r3, #10
 800113c:	4811      	ldr	r0, [pc, #68]	; (8001184 <_Z14LIS3DSH_ReadIOhPhh+0x84>)
 800113e:	f005 fb82 	bl	8006846 <HAL_SPI_Receive>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8001142:	2201      	movs	r2, #1
 8001144:	2108      	movs	r1, #8
 8001146:	480e      	ldr	r0, [pc, #56]	; (8001180 <_Z14LIS3DSH_ReadIOhPhh+0x80>)
 8001148:	f003 fab2 	bl	80046b0 <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<(size&0x3); i++)
 800114c:	2300      	movs	r3, #0
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	7bfa      	ldrb	r2, [r7, #15]
 8001152:	79bb      	ldrb	r3, [r7, #6]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	429a      	cmp	r2, r3
 800115a:	da0c      	bge.n	8001176 <_Z14LIS3DSH_ReadIOhPhh+0x76>
	{
		dataR[i] = spiBuf[i];
 800115c:	7bfa      	ldrb	r2, [r7, #15]
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	6839      	ldr	r1, [r7, #0]
 8001162:	440b      	add	r3, r1
 8001164:	3210      	adds	r2, #16
 8001166:	443a      	add	r2, r7
 8001168:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800116c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	3301      	adds	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e7ec      	b.n	8001150 <_Z14LIS3DSH_ReadIOhPhh+0x50>
	}
}
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000
 8001184:	200002ec 	.word	0x200002ec

08001188 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef>:
//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	73fb      	strb	r3, [r7, #15]

	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 8001196:	2258      	movs	r2, #88	; 0x58
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	4855      	ldr	r0, [pc, #340]	; (80012f0 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x168>)
 800119c:	f019 fdb8 	bl	801ad10 <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	78db      	ldrb	r3, [r3, #3]
 80011a4:	f003 0307 	and.w	r3, r3, #7
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	f023 030f 	bic.w	r3, r3, #15
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	4313      	orrs	r3, r2
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 80011c4:	f107 030f 	add.w	r3, r7, #15
 80011c8:	2201      	movs	r2, #1
 80011ca:	4619      	mov	r1, r3
 80011cc:	2020      	movs	r0, #32
 80011ce:	f7ff ff6d 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>

	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	789b      	ldrb	r3, [r3, #2]
 80011da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	785b      	ldrb	r3, [r3, #1]
 80011ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 80011fa:	f107 030f 	add.w	r3, r7, #15
 80011fe:	2201      	movs	r2, #1
 8001200:	4619      	mov	r1, r3
 8001202:	2024      	movs	r0, #36	; 0x24
 8001204:	f7ff ff52 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>

	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	791b      	ldrb	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d008      	beq.n	8001222 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x9a>
	{
		spiData = 0x88;
 8001210:	2388      	movs	r3, #136	; 0x88
 8001212:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 8001214:	f107 030f 	add.w	r3, r7, #15
 8001218:	2201      	movs	r2, #1
 800121a:	4619      	mov	r1, r3
 800121c:	2023      	movs	r0, #35	; 0x23
 800121e:	f7ff ff45 	bl	80010ac <_Z15LIS3DSH_WriteIOhPhh>
	}

	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	785b      	ldrb	r3, [r3, #1]
 8001226:	2b20      	cmp	r3, #32
 8001228:	d858      	bhi.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>
 800122a:	a201      	add	r2, pc, #4	; (adr r2, 8001230 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0xa8>)
 800122c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001230:	080012b5 	.word	0x080012b5
 8001234:	080012dd 	.word	0x080012dd
 8001238:	080012dd 	.word	0x080012dd
 800123c:	080012dd 	.word	0x080012dd
 8001240:	080012dd 	.word	0x080012dd
 8001244:	080012dd 	.word	0x080012dd
 8001248:	080012dd 	.word	0x080012dd
 800124c:	080012dd 	.word	0x080012dd
 8001250:	080012bd 	.word	0x080012bd
 8001254:	080012dd 	.word	0x080012dd
 8001258:	080012dd 	.word	0x080012dd
 800125c:	080012dd 	.word	0x080012dd
 8001260:	080012dd 	.word	0x080012dd
 8001264:	080012dd 	.word	0x080012dd
 8001268:	080012dd 	.word	0x080012dd
 800126c:	080012dd 	.word	0x080012dd
 8001270:	080012c5 	.word	0x080012c5
 8001274:	080012dd 	.word	0x080012dd
 8001278:	080012dd 	.word	0x080012dd
 800127c:	080012dd 	.word	0x080012dd
 8001280:	080012dd 	.word	0x080012dd
 8001284:	080012dd 	.word	0x080012dd
 8001288:	080012dd 	.word	0x080012dd
 800128c:	080012dd 	.word	0x080012dd
 8001290:	080012cd 	.word	0x080012cd
 8001294:	080012dd 	.word	0x080012dd
 8001298:	080012dd 	.word	0x080012dd
 800129c:	080012dd 	.word	0x080012dd
 80012a0:	080012dd 	.word	0x080012dd
 80012a4:	080012dd 	.word	0x080012dd
 80012a8:	080012dd 	.word	0x080012dd
 80012ac:	080012dd 	.word	0x080012dd
 80012b0:	080012d5 	.word	0x080012d5
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012b6:	4a10      	ldr	r2, [pc, #64]	; (80012f8 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x170>)
 80012b8:	601a      	str	r2, [r3, #0]
			break;
 80012ba:	e00f      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 80012bc:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012be:	4a0f      	ldr	r2, [pc, #60]	; (80012fc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x174>)
 80012c0:	601a      	str	r2, [r3, #0]
			break;
 80012c2:	e00b      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012c6:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x178>)
 80012c8:	601a      	str	r2, [r3, #0]
			break;
 80012ca:	e007      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012ce:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x17c>)
 80012d0:	601a      	str	r2, [r3, #0]
			break;
 80012d2:	e003      	b.n	80012dc <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x154>

		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x16c>)
 80012d6:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x180>)
 80012d8:	601a      	str	r2, [r3, #0]
			break;
 80012da:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 80012dc:	2201      	movs	r2, #1
 80012de:	2108      	movs	r1, #8
 80012e0:	480a      	ldr	r0, [pc, #40]	; (800130c <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef+0x184>)
 80012e2:	f003 f9e5 	bl	80046b0 <HAL_GPIO_WritePin>
}
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200002ec 	.word	0x200002ec
 80012f4:	20000000 	.word	0x20000000
 80012f8:	3d75c28f 	.word	0x3d75c28f
 80012fc:	3df5c28f 	.word	0x3df5c28f
 8001300:	3e3851ec 	.word	0x3e3851ec
 8001304:	3e75c28f 	.word	0x3e75c28f
 8001308:	3f3ae148 	.word	0x3f3ae148
 800130c:	40021000 	.word	0x40021000

08001310 <_Z18LIS3DSH_GetDataRawv>:

//2. Get Accelerometer raw data
LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	//Read X data
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	2202      	movs	r2, #2
 800131e:	4619      	mov	r1, r3
 8001320:	2028      	movs	r0, #40	; 0x28
 8001322:	f7ff feed 	bl	8001100 <_Z14LIS3DSH_ReadIOhPhh>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 8001326:	7b7b      	ldrb	r3, [r7, #13]
 8001328:	b29b      	uxth	r3, r3
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b29a      	uxth	r2, r3
 800132e:	7b3b      	ldrb	r3, [r7, #12]
 8001330:	b29b      	uxth	r3, r3
 8001332:	4413      	add	r3, r2
 8001334:	b29b      	uxth	r3, r3
 8001336:	b21a      	sxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	801a      	strh	r2, [r3, #0]

	//Read Y data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	2202      	movs	r2, #2
 8001342:	4619      	mov	r1, r3
 8001344:	202a      	movs	r0, #42	; 0x2a
 8001346:	f7ff fedb 	bl	8001100 <_Z14LIS3DSH_ReadIOhPhh>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 800134a:	7b7b      	ldrb	r3, [r7, #13]
 800134c:	b29b      	uxth	r3, r3
 800134e:	021b      	lsls	r3, r3, #8
 8001350:	b29a      	uxth	r2, r3
 8001352:	7b3b      	ldrb	r3, [r7, #12]
 8001354:	b29b      	uxth	r3, r3
 8001356:	4413      	add	r3, r2
 8001358:	b29b      	uxth	r3, r3
 800135a:	b21a      	sxth	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	805a      	strh	r2, [r3, #2]

	//Read Z data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	2202      	movs	r2, #2
 8001366:	4619      	mov	r1, r3
 8001368:	202c      	movs	r0, #44	; 0x2c
 800136a:	f7ff fec9 	bl	8001100 <_Z14LIS3DSH_ReadIOhPhh>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 800136e:	7b7b      	ldrb	r3, [r7, #13]
 8001370:	b29b      	uxth	r3, r3
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	b29a      	uxth	r2, r3
 8001376:	7b3b      	ldrb	r3, [r7, #12]
 8001378:	b29b      	uxth	r3, r3
 800137a:	4413      	add	r3, r2
 800137c:	b29b      	uxth	r3, r3
 800137e:	b21a      	sxth	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	809a      	strh	r2, [r3, #4]

	return tempDataRaw;
 8001384:	bf00      	nop

}
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <_Z21LIS3DSH_GetDataScaledv>:
//3. Get Accelerometer mg data
LIS3DSH_DataScaled LIS3DSH_GetDataScaled(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	; 0x30
 8001394:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ffb8 	bl	8001310 <_Z18LIS3DSH_GetDataRawv>
	//Scale data and return
	LIS3DSH_DataScaled tempScaledData;
	tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
 80013a0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013a4:	ee07 3a90 	vmov	s15, r3
 80013a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ac:	4b31      	ldr	r3, [pc, #196]	; (8001474 <_Z21LIS3DSH_GetDataScaledv+0xe4>)
 80013ae:	edd3 7a00 	vldr	s15, [r3]
 80013b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013b6:	4b30      	ldr	r3, [pc, #192]	; (8001478 <_Z21LIS3DSH_GetDataScaledv+0xe8>)
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800147c <_Z21LIS3DSH_GetDataScaledv+0xec>
 80013c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80013c8:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <_Z21LIS3DSH_GetDataScaledv+0xf0>)
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d2:	edc7 7a04 	vstr	s15, [r7, #16]
	tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
 80013d6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013da:	ee07 3a90 	vmov	s15, r3
 80013de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <_Z21LIS3DSH_GetDataScaledv+0xe4>)
 80013e4:	edd3 7a00 	vldr	s15, [r3]
 80013e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ec:	4b25      	ldr	r3, [pc, #148]	; (8001484 <_Z21LIS3DSH_GetDataScaledv+0xf4>)
 80013ee:	edd3 7a00 	vldr	s15, [r3]
 80013f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f6:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800147c <_Z21LIS3DSH_GetDataScaledv+0xec>
 80013fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80013fe:	4b22      	ldr	r3, [pc, #136]	; (8001488 <_Z21LIS3DSH_GetDataScaledv+0xf8>)
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001408:	edc7 7a05 	vstr	s15, [r7, #20]
	tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
 800140c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001410:	ee07 3a90 	vmov	s15, r3
 8001414:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001418:	4b16      	ldr	r3, [pc, #88]	; (8001474 <_Z21LIS3DSH_GetDataScaledv+0xe4>)
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001422:	4b1a      	ldr	r3, [pc, #104]	; (800148c <_Z21LIS3DSH_GetDataScaledv+0xfc>)
 8001424:	edd3 7a00 	vldr	s15, [r3]
 8001428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800142c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800147c <_Z21LIS3DSH_GetDataScaledv+0xec>
 8001430:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001434:	4b16      	ldr	r3, [pc, #88]	; (8001490 <_Z21LIS3DSH_GetDataScaledv+0x100>)
 8001436:	edd3 7a00 	vldr	s15, [r3]
 800143a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143e:	edc7 7a06 	vstr	s15, [r7, #24]

	return tempScaledData;
 8001442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001446:	f107 0210 	add.w	r2, r7, #16
 800144a:	ca07      	ldmia	r2, {r0, r1, r2}
 800144c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001452:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001456:	ee06 1a90 	vmov	s13, r1
 800145a:	ee07 2a10 	vmov	s14, r2
 800145e:	ee07 3a90 	vmov	s15, r3
}
 8001462:	eeb0 0a66 	vmov.f32	s0, s13
 8001466:	eef0 0a47 	vmov.f32	s1, s14
 800146a:	eeb0 1a67 	vmov.f32	s2, s15
 800146e:	3730      	adds	r7, #48	; 0x30
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000000 	.word	0x20000000
 8001478:	20000004 	.word	0x20000004
 800147c:	00000000 	.word	0x00000000
 8001480:	20000344 	.word	0x20000344
 8001484:	20000008 	.word	0x20000008
 8001488:	20000348 	.word	0x20000348
 800148c:	2000000c 	.word	0x2000000c
 8001490:	2000034c 	.word	0x2000034c

08001494 <_Z16LIS3DSH_PollDRDYm>:
//4. Poll for Data Ready
bool LIS3DSH_PollDRDY(uint32_t msTimeout)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	uint8_t Acc_status;
	uint32_t startTick = HAL_GetTick();
 800149c:	f002 fe0e 	bl	80040bc <HAL_GetTick>
 80014a0:	60f8      	str	r0, [r7, #12]
	do
	{
		//Read status register with a timeout
		LIS3DSH_ReadIO(0x27, &Acc_status, 1);
 80014a2:	f107 030b 	add.w	r3, r7, #11
 80014a6:	2201      	movs	r2, #1
 80014a8:	4619      	mov	r1, r3
 80014aa:	2027      	movs	r0, #39	; 0x27
 80014ac:	f7ff fe28 	bl	8001100 <_Z14LIS3DSH_ReadIOhPhh>
		if(Acc_status & 0x07)break;
 80014b0:	7afb      	ldrb	r3, [r7, #11]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d112      	bne.n	80014e0 <_Z16LIS3DSH_PollDRDYm+0x4c>

	}while((Acc_status & 0x07)==0 && (HAL_GetTick() - startTick) < msTimeout);
 80014ba:	7afb      	ldrb	r3, [r7, #11]
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d109      	bne.n	80014d8 <_Z16LIS3DSH_PollDRDYm+0x44>
 80014c4:	f002 fdfa 	bl	80040bc <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d901      	bls.n	80014d8 <_Z16LIS3DSH_PollDRDYm+0x44>
 80014d4:	2301      	movs	r3, #1
 80014d6:	e000      	b.n	80014da <_Z16LIS3DSH_PollDRDYm+0x46>
 80014d8:	2300      	movs	r3, #0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <_Z16LIS3DSH_PollDRDYm+0x4e>
	do
 80014de:	e7e0      	b.n	80014a2 <_Z16LIS3DSH_PollDRDYm+0xe>
		if(Acc_status & 0x07)break;
 80014e0:	bf00      	nop
	if(Acc_status & 0x07)
 80014e2:	7afb      	ldrb	r3, [r7, #11]
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <_Z16LIS3DSH_PollDRDYm+0x5c>
	{
		return true;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e000      	b.n	80014f2 <_Z16LIS3DSH_PollDRDYm+0x5e>
	}
	return false;
 80014f0:	2300      	movs	r3, #0

}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	ed87 0a01 	vstr	s0, [r7, #4]
 8001504:	ed97 0a01 	vldr	s0, [r7, #4]
 8001508:	f018 fa08 	bl	801991c <expf>
 800150c:	eef0 7a40 	vmov.f32	s15, s0
 8001510:	eeb0 0a67 	vmov.f32	s0, s15
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	ed87 0a01 	vstr	s0, [r7, #4]
 8001524:	ed97 0a01 	vldr	s0, [r7, #4]
 8001528:	f018 fa5c 	bl	80199e4 <sqrtf>
 800152c:	eef0 7a40 	vmov.f32	s15, s0
 8001530:	eeb0 0a67 	vmov.f32	s0, s15
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	ed87 0a01 	vstr	s0, [r7, #4]
 8001544:	ed97 0a01 	vldr	s0, [r7, #4]
 8001548:	f018 f954 	bl	80197f4 <roundf>
 800154c:	eef0 7a40 	vmov.f32	s15, s0
 8001550:	eeb0 0a67 	vmov.f32	s0, s15
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j>:
 * @param input Array of input values
 * @param scale Array of scale values (obtain from StandardScaler in Python)
 * @param mean Array of mean values (obtain from StandardScaler in Python)
 * @param input_size Size of input, scale and mean arrays
 */
void standard_scaler(float *input, const float *scale, const float *mean, size_t input_size) {
 800155a:	b480      	push	{r7}
 800155c:	b087      	sub	sp, #28
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	603b      	str	r3, [r7, #0]
    for (size_t ix = 0; ix < input_size; ix++) {
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	d21f      	bcs.n	80015b4 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j+0x5a>
        input[ix] = (input[ix] - mean[ix]) / scale[ix];
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	4413      	add	r3, r2
 800157c:	ed93 7a00 	vldr	s14, [r3]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	4413      	add	r3, r2
 8001588:	edd3 7a00 	vldr	s15, [r3]
 800158c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	4413      	add	r3, r2
 8001598:	ed93 7a00 	vldr	s14, [r3]
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	4413      	add	r3, r2
 80015a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015a8:	edc3 7a00 	vstr	s15, [r3]
    for (size_t ix = 0; ix < input_size; ix++) {
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	3301      	adds	r3, #1
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	e7db      	b.n	800156c <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j+0x12>
    }
}
 80015b4:	bf00      	nop
 80015b6:	371c      	adds	r7, #28
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t>:
 * Calculate the distance between input vector and the cluster
 * @param input Array of input values (already scaled by standard_scaler)
 * @param input_size Size of the input array
 * @param cluster A cluster (number of centroids should match input_size)
 */
float calculate_cluster_distance(float *input, size_t input_size, const ei_classifier_anom_cluster_t *cluster) {
 80015c0:	b5b0      	push	{r4, r5, r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
    // todo: check input_size and centroid size?

    float dist = 0.0f;
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
    for (size_t ix = 0; ix < input_size; ix++) {
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d229      	bcs.n	8001632 <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t+0x72>
        dist += pow(input[ix] - cluster->centroid[ix], 2);
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	4413      	add	r3, r2
 80015e6:	ed93 7a00 	vldr	s14, [r3]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	edd3 7a00 	vldr	s15, [r3]
 80015f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015fa:	2002      	movs	r0, #2
 80015fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001600:	f001 fc7d 	bl	8002efe <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001604:	ec55 4b10 	vmov	r4, r5, d0
 8001608:	6978      	ldr	r0, [r7, #20]
 800160a:	f7fe ffa7 	bl	800055c <__aeabi_f2d>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4620      	mov	r0, r4
 8001614:	4629      	mov	r1, r5
 8001616:	f7fe fe43 	bl	80002a0 <__adddf3>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	f7ff faeb 	bl	8000bfc <__aeabi_d2f>
 8001626:	4603      	mov	r3, r0
 8001628:	617b      	str	r3, [r7, #20]
    for (size_t ix = 0; ix < input_size; ix++) {
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	3301      	adds	r3, #1
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	e7d1      	b.n	80015d6 <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t+0x16>
    }
    return sqrt(dist) - cluster->max_error;
 8001632:	ed97 0a05 	vldr	s0, [r7, #20]
 8001636:	f7ff ff70 	bl	800151a <_ZSt4sqrtf>
 800163a:	eeb0 7a40 	vmov.f32	s14, s0
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001644:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001648:	eeb0 0a67 	vmov.f32	s0, s15
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001654 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj>:
 * @param input Array of input values (already scaled by standard_scaler)
 * @param input_size Size of the input array
 * @param clusters Array of clusters
 * @param cluster_size Size of cluster array
 */
float get_min_distance_to_cluster(float *input, size_t input_size, const ei_classifier_anom_cluster_t *clusters, size_t cluster_size) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	603b      	str	r3, [r7, #0]
    float min = 1000.0f;
 8001662:	4b16      	ldr	r3, [pc, #88]	; (80016bc <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x68>)
 8001664:	61fb      	str	r3, [r7, #28]
    for (size_t ix = 0; ix < cluster_size; ix++) {
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d21b      	bcs.n	80016aa <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x56>
        float dist = calculate_cluster_distance(input, input_size, &clusters[ix]);
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	224c      	movs	r2, #76	; 0x4c
 8001676:	fb02 f303 	mul.w	r3, r2, r3
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	461a      	mov	r2, r3
 8001680:	68b9      	ldr	r1, [r7, #8]
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f7ff ff9c 	bl	80015c0 <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t>
 8001688:	ed87 0a05 	vstr	s0, [r7, #20]
        if (dist < min) {
 800168c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001690:	edd7 7a07 	vldr	s15, [r7, #28]
 8001694:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169c:	d501      	bpl.n	80016a2 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x4e>
            min = dist;
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	61fb      	str	r3, [r7, #28]
    for (size_t ix = 0; ix < cluster_size; ix++) {
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	3301      	adds	r3, #1
 80016a6:	61bb      	str	r3, [r7, #24]
 80016a8:	e7df      	b.n	800166a <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x16>
        }
    }
    return min;
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	ee07 3a90 	vmov	s15, r3
}
 80016b0:	eeb0 0a67 	vmov.f32	s0, s15
 80016b4:	3720      	adds	r7, #32
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	447a0000 	.word	0x447a0000

080016c0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4618      	mov	r0, r3
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d005      	beq.n	800173c <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	2203      	movs	r2, #3
 800173a:	4798      	blx	r3
    }
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b00      	cmp	r3, #0
 8001754:	bf0c      	ite	eq
 8001756:	2301      	moveq	r3, #1
 8001758:	2300      	movne	r3, #0
 800175a:	b2db      	uxtb	r3, r3
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
 8001774:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d006      	beq.n	800178a <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2200      	movs	r2, #0
 8001786:	731a      	strb	r2, [r3, #12]
 8001788:	e00e      	b.n	80017a8 <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	fb02 f303 	mul.w	r3, r2, r3
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	2101      	movs	r1, #1
 8001796:	4618      	mov	r0, r3
 8001798:	f010 f8ca 	bl	8011930 <_Z9ei_callocjj>
 800179c:	4602      	mov	r2, r0
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2201      	movs	r2, #1
 80017a6:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d008      	beq.n	80017e0 <_ZN2ei9ei_matrixD1Ev+0x22>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	7b1b      	ldrb	r3, [r3, #12]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d004      	beq.n	80017e0 <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f010 f8b6 	bl	801194c <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <_ZN2ei12ei_matrix_i8C1EmmPa>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix_i8(
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b084      	sub	sp, #16
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d006      	beq.n	800180c <_ZN2ei12ei_matrix_i8C1EmmPa+0x22>
            buffer = a_buffer;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	731a      	strb	r2, [r3, #12]
 800180a:	e00d      	b.n	8001828 <_ZN2ei12ei_matrix_i8C1EmmPa+0x3e>
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	fb02 f303 	mul.w	r3, r2, r3
 8001814:	2101      	movs	r1, #1
 8001816:	4618      	mov	r0, r3
 8001818:	f010 f88a 	bl	8011930 <_Z9ei_callocjj>
 800181c:	4602      	mov	r2, r0
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2201      	movs	r2, #1
 8001826:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(int8_t), buffer);
            }
#endif
        }
    }
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <_ZN2ei12ei_matrix_i8D1Ev>:

    ~ei_matrix_i8() {
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d008      	beq.n	8001860 <_ZN2ei12ei_matrix_i8D1Ev+0x22>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	7b1b      	ldrb	r3, [r3, #12]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d004      	beq.n	8001860 <_ZN2ei12ei_matrix_i8D1Ev+0x22>
            ei_free(buffer);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f010 f876 	bl	801194c <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(int8_t), buffer);
            }
#endif
        }
    }
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
 800186e:	e7fe      	b.n	800186e <_ZSt25__throw_bad_function_callv+0x4>

08001870 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_calloc(size_t align, size_t size)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	1e5a      	subs	r2, r3, #1
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4013      	ands	r3, r2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d005      	beq.n	8001896 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x26>
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x78>)
 800188c:	4a17      	ldr	r2, [pc, #92]	; (80018ec <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x7c>)
 800188e:	213c      	movs	r1, #60	; 0x3c
 8001890:	4817      	ldr	r0, [pc, #92]	; (80018f0 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x80>)
 8001892:	f019 f9c7 	bl	801ac24 <__assert_func>

	if(align && size)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d01f      	beq.n	80018dc <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d01c      	beq.n	80018dc <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3301      	adds	r3, #1
 80018a6:	613b      	str	r3, [r7, #16]
		void * p = ei_calloc(size + hdr_size, 1);
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	4413      	add	r3, r2
 80018ae:	2101      	movs	r1, #1
 80018b0:	4618      	mov	r0, r3
 80018b2:	f010 f83d 	bl	8011930 <_Z9ei_callocjj>
 80018b6:	60f8      	str	r0, [r7, #12]

		if(p)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00e      	beq.n	80018dc <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4413      	add	r3, r2
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	425b      	negs	r3, r3
 80018ca:	4013      	ands	r3, r2
 80018cc:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	1ad2      	subs	r2, r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	3b02      	subs	r3, #2
 80018d8:	b292      	uxth	r2, r2
 80018da:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 80018dc:	697b      	ldr	r3, [r7, #20]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	0801c1cc 	.word	0x0801c1cc
 80018ec:	0801c1e8 	.word	0x0801c1e8
 80018f0:	0801c220 	.word	0x0801c220

080018f4 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	assert(ptr);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d105      	bne.n	800190e <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 8001904:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 8001906:	215f      	movs	r1, #95	; 0x5f
 8001908:	480b      	ldr	r0, [pc, #44]	; (8001938 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 800190a:	f019 f98b 	bl	801ac24 <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 8001914:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 8001916:	89fb      	ldrh	r3, [r7, #14]
 8001918:	425b      	negs	r3, r3
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 8001920:	68b8      	ldr	r0, [r7, #8]
 8001922:	f010 f813 	bl	801194c <_Z7ei_freePv>
}
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	0801c2a8 	.word	0x0801c2a8
 8001934:	0801c2ac 	.word	0x0801c2ac
 8001938:	0801c220 	.word	0x0801c220

0800193c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	ed87 0a00 	vstr	s0, [r7]
        if (scale == 1.0f) return EIDSP_OK;
 8001948:	edd7 7a00 	vldr	s15, [r7]
 800194c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001950:	eef4 7a47 	vcmp.f32	s15, s14
 8001954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001958:	d101      	bne.n	800195e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x22>
 800195a:	2300      	movs	r3, #0
 800195c:	e033      	b.n	80019c6 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001966:	d204      	bcs.n	8001972 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x36>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001970:	d301      	bcc.n	8001976 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x3a>
            return EIDSP_NARROWING;
 8001972:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x94>)
 8001974:	e027      	b.n	80019c6 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	b29b      	uxth	r3, r3
 800197c:	82bb      	strh	r3, [r7, #20]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	b29b      	uxth	r3, r3
 8001984:	82fb      	strh	r3, [r7, #22]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	61bb      	str	r3, [r7, #24]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	b29b      	uxth	r3, r3
 8001992:	81bb      	strh	r3, [r7, #12]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	b29b      	uxth	r3, r3
 800199a:	81fb      	strh	r3, [r7, #14]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	613b      	str	r3, [r7, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 80019a2:	f107 020c 	add.w	r2, r7, #12
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	4611      	mov	r1, r2
 80019ac:	ed97 0a00 	vldr	s0, [r7]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f008 ff41 	bl	800a838 <arm_mat_scale_f32>
 80019b6:	4603      	mov	r3, r0
 80019b8:	61fb      	str	r3, [r7, #28]
        if (status != ARM_MATH_SUCCESS) {
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x88>
            return status;
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	e000      	b.n	80019c6 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
#else
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
 80019c4:	2300      	movs	r3, #0
    }
 80019c6:	4618      	mov	r0, r3
 80019c8:	3720      	adds	r7, #32
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	fffffc0c 	.word	0xfffffc0c

080019d4 <_ZZN2ei5numpy18signal_from_bufferEPKfjPNS_11ei_signal_tEENKUljjPfE_clEjjS5_>:
    {
        signal->total_length = data_size;
#ifdef __MBED__
        signal->get_data = mbed::callback(&numpy::signal_get_data, data);
#else
        signal->get_data = [data](size_t offset, size_t length, float *out_ptr) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
 80019e0:	603b      	str	r3, [r7, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6818      	ldr	r0, [r3, #0]
            return numpy::signal_get_data(data, offset, length, out_ptr);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	68b9      	ldr	r1, [r7, #8]
 80019ec:	f000 f81c 	bl	8001a28 <_ZN2ei5numpy15signal_get_dataEPKfjjPf>
 80019f0:	4603      	mov	r3, r0
        };
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <_ZN2ei5numpy18signal_from_bufferEPKfjPNS_11ei_signal_tE>:
    static int signal_from_buffer(const float *data, size_t data_size, signal_t *signal)
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
        signal->total_length = data_size;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68ba      	ldr	r2, [r7, #8]
 8001a0a:	611a      	str	r2, [r3, #16]
        };
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	4619      	mov	r1, r3
 8001a18:	4610      	mov	r0, r2
 8001a1a:	f001 fa91 	bl	8002f40 <_ZNSt8functionIFijjPfEEaSIZN2ei5numpy18signal_from_bufferEPKfjPNS4_11ei_signal_tEEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSG_JjjS0_EEEE5valueERS2_E4typeEOSE_>
#endif
        return EIDSP_OK;
 8001a1e:	2300      	movs	r3, #0
    }
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <_ZN2ei5numpy15signal_get_dataEPKfjjPf>:
        ei_dsp_free(cfg, kiss_fftr_mem_length);

        return EIDSP_OK;
    }

    static int signal_get_data(const float *in_buffer, size_t offset, size_t length, float *out_ptr)
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	603b      	str	r3, [r7, #0]
    {
        memcpy(out_ptr, in_buffer + offset, length * sizeof(float));
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	18d1      	adds	r1, r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	461a      	mov	r2, r3
 8001a44:	6838      	ldr	r0, [r7, #0]
 8001a46:	f019 f963 	bl	801ad10 <memcpy>
        return 0;
 8001a4a:	2300      	movs	r3, #0
    }
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fe5e 	bl	8001720 <_ZNSt14_Function_baseD1Ev>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <_ZN2ei11ei_signal_tC1Ev>:
typedef struct ei_signal_t {
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f001 faae 	bl	8002fda <_ZNSt8functionIFijjPfEEC1Ev>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <_ZN2ei11ei_signal_tD1Ev>:
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff ffde 	bl	8001a54 <_ZNSt8functionIFijjPfEED1Ev>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
    return EIDSP_OK;
}



__attribute__((unused)) int extract_raw_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 8001aa4:	b590      	push	{r4, r7, lr}
 8001aa6:	b08f      	sub	sp, #60	; 0x3c
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
 8001ab0:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_raw_t config = *((ei_dsp_config_raw_t*)config_ptr);
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aba:	ca07      	ldmia	r2, {r0, r1, r2}
 8001abc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // input matrix from the raw signal
    matrix_t input_matrix(signal->total_length / config.axes, config.axes);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ac6:	fbb3 f1f2 	udiv	r1, r3, r2
 8001aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001acc:	461a      	mov	r2, r3
 8001ace:	f107 0014 	add.w	r0, r7, #20
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f7ff fe48 	bl	8001768 <_ZN2ei9ei_matrixC1EmmPf>
    if (!input_matrix.buffer) {
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3e>
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001ade:	4c1f      	ldr	r4, [pc, #124]	; (8001b5c <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xb8>)
 8001ae0:	e031      	b.n	8001b46 <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xa2>
    }
    signal->get_data(0, signal->total_length, input_matrix.buffer);
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	691a      	ldr	r2, [r3, #16]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	2100      	movs	r1, #0
 8001aec:	f001 fa47 	bl	8002f7e <_ZNKSt8functionIFijjPfEEclEjjS0_>

    // scale the signal
    int ret = numpy::scale(&input_matrix, config.scale_axes);
 8001af0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	eeb0 0a67 	vmov.f32	s0, s15
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff1d 	bl	800193c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8001b02:	6338      	str	r0, [r7, #48]	; 0x30
    if (ret != EIDSP_OK) {
 8001b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6a>
        EIDSP_ERR(ret);
 8001b0a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8001b0c:	e01b      	b.n	8001b46 <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xa2>

    // Because of rounding errors during re-sampling the output size of the block might be
    // smaller than the input of the block. Make sure we don't write outside of the bounds
    // of the array:
    // https://forum.edgeimpulse.com/t/using-custom-sensors-on-raspberry-pi-4/3506/7
    size_t els_to_copy = signal->total_length;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	637b      	str	r3, [r7, #52]	; 0x34
    if (els_to_copy > output_matrix->rows * output_matrix->cols) {
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	68ba      	ldr	r2, [r7, #8]
 8001b1a:	6892      	ldr	r2, [r2, #8]
 8001b1c:	fb02 f303 	mul.w	r3, r2, r3
 8001b20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d906      	bls.n	8001b34 <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x90>
        els_to_copy = output_matrix->rows * output_matrix->cols;
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	6892      	ldr	r2, [r2, #8]
 8001b2e:	fb02 f303 	mul.w	r3, r2, r3
 8001b32:	637b      	str	r3, [r7, #52]	; 0x34
    }

    memcpy(output_matrix->buffer, input_matrix.buffer, els_to_copy * sizeof(float));
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	6818      	ldr	r0, [r3, #0]
 8001b38:	6979      	ldr	r1, [r7, #20]
 8001b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	461a      	mov	r2, r3
 8001b40:	f019 f8e6 	bl	801ad10 <memcpy>

    return EIDSP_OK;
 8001b44:	2400      	movs	r4, #0
    matrix_t input_matrix(signal->total_length / config.axes, config.axes);
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fe37 	bl	80017be <_ZN2ei9ei_matrixD1Ev>
}
 8001b50:	4623      	mov	r3, r4
 8001b52:	4618      	mov	r0, r3
 8001b54:	373c      	adds	r7, #60	; 0x3c
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd90      	pop	{r4, r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	fffffc16 	.word	0xfffffc16

08001b60 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf>:
    return EIDSP_OK;
}

#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1

__attribute__((unused)) int extract_image_features_quantized(signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, const float frequency) {
 8001b60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b64:	b09e      	sub	sp, #120	; 0x78
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	60f8      	str	r0, [r7, #12]
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
 8001b6e:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b78:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 8001b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b80:	49c3      	ldr	r1, [pc, #780]	; (8001e90 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x330>)
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fb74 	bl	8000270 <strcmp>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x32>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x34>
 8001b92:	2303      	movs	r3, #3
 8001b94:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

    if (output_matrix->rows * output_matrix->cols != static_cast<uint32_t>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count)) {
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	6892      	ldr	r2, [r2, #8]
 8001ba0:	fb02 f303 	mul.w	r3, r2, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00f      	beq.n	8001bc8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x68>
        ei_printf("out_matrix = %d items\n", static_cast<int>(output_matrix->rows * output_matrix->cols));
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	68ba      	ldr	r2, [r7, #8]
 8001bae:	6892      	ldr	r2, [r2, #8]
 8001bb0:	fb02 f303 	mul.w	r3, r2, r3
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	48b7      	ldr	r0, [pc, #732]	; (8001e94 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x334>)
 8001bb8:	f000 ff87 	bl	8002aca <_Z9ei_printfPKcz>
        ei_printf("calculated size = %d items\n", static_cast<int>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count));
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	48b6      	ldr	r0, [pc, #728]	; (8001e98 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x338>)
 8001bc0:	f000 ff83 	bl	8002aca <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001bc4:	4cb5      	ldr	r4, [pc, #724]	; (8001e9c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x33c>)
 8001bc6:	e189      	b.n	8001edc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x37c>
    }

    size_t output_ix = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	673b      	str	r3, [r7, #112]	; 0x70

    const int32_t iRedToGray = (int32_t)(0.299f * 65536.0f);
 8001bcc:	f644 438b 	movw	r3, #19595	; 0x4c8b
 8001bd0:	66fb      	str	r3, [r7, #108]	; 0x6c
    const int32_t iGreenToGray = (int32_t)(0.587f * 65536.0f);
 8001bd2:	f249 6345 	movw	r3, #38469	; 0x9645
 8001bd6:	66bb      	str	r3, [r7, #104]	; 0x68
    const int32_t iBlueToGray = (int32_t)(0.114f * 65536.0f);
 8001bd8:	f641 532f 	movw	r3, #7471	; 0x1d2f
 8001bdc:	667b      	str	r3, [r7, #100]	; 0x64

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 8001bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001be2:	663b      	str	r3, [r7, #96]	; 0x60
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8001bea:	2300      	movs	r3, #0
 8001bec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	f080 8170 	bcs.w	8001eda <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x37a>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c00:	d803      	bhi.n	8001c0a <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xaa>
 8001c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	e001      	b.n	8001c0e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xae>
 8001c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c0e:	65bb      	str	r3, [r7, #88]	; 0x58

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 8001c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c12:	461a      	mov	r2, r3
 8001c14:	f107 0014 	add.w	r0, r7, #20
 8001c18:	2300      	movs	r3, #0
 8001c1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001c1c:	f7ff fda4 	bl	8001768 <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d102      	bne.n	8001c2c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xcc>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001c26:	4c9e      	ldr	r4, [pc, #632]	; (8001ea0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x340>)
 8001c28:	2500      	movs	r5, #0
 8001c2a:	e14a      	b.n	8001ec2 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x362>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c32:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001c34:	f001 f9a3 	bl	8002f7e <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8001c38:	2300      	movs	r3, #0
 8001c3a:	657b      	str	r3, [r7, #84]	; 0x54
 8001c3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c40:	429a      	cmp	r2, r3
 8001c42:	f080 8139 	bcs.w	8001eb8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x358>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	edd3 7a00 	vldr	s15, [r3]
 8001c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c56:	ee17 3a90 	vmov	r3, s15
 8001c5a:	653b      	str	r3, [r7, #80]	; 0x50

            if (channel_count == 3) {
 8001c5c:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	f040 80a5 	bne.w	8001db0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x250>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8001c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c68:	0c1b      	lsrs	r3, r3, #16
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	ee07 3a90 	vmov	s15, r3
 8001c70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c74:	eddf 6a8b 	vldr	s13, [pc, #556]	; 8001ea4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 8001c78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c7c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8001c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c82:	0a1b      	lsrs	r3, r3, #8
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	ee07 3a90 	vmov	s15, r3
 8001c8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c8e:	eddf 6a85 	vldr	s13, [pc, #532]	; 8001ea4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 8001c92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c96:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8001c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	ee07 3a90 	vmov	s15, r3
 8001ca2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ca6:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8001ea4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 8001caa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cae:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8001cb2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001cb4:	f7fe fc52 	bl	800055c <__aeabi_f2d>
 8001cb8:	a373      	add	r3, pc, #460	; (adr r3, 8001e88 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x328>)
 8001cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbe:	f7fe fdcf 	bl	8000860 <__aeabi_ddiv>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	ec43 2b17 	vmov	d7, r2, r3
 8001cca:	eeb0 0a47 	vmov.f32	s0, s14
 8001cce:	eef0 0a67 	vmov.f32	s1, s15
 8001cd2:	f017 fd49 	bl	8019768 <round>
 8001cd6:	ec51 0b10 	vmov	r0, r1, d0
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	4b72      	ldr	r3, [pc, #456]	; (8001ea8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x348>)
 8001ce0:	f7fe fadc 	bl	800029c <__aeabi_dsub>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4690      	mov	r8, r2
 8001cea:	4699      	mov	r9, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cf2:	1c59      	adds	r1, r3, #1
 8001cf4:	6739      	str	r1, [r7, #112]	; 0x70
 8001cf6:	18d5      	adds	r5, r2, r3
 8001cf8:	4640      	mov	r0, r8
 8001cfa:	4649      	mov	r1, r9
 8001cfc:	f7fe ff36 	bl	8000b6c <__aeabi_d2iz>
 8001d00:	4603      	mov	r3, r0
 8001d02:	b25b      	sxtb	r3, r3
 8001d04:	702b      	strb	r3, [r5, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8001d06:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001d08:	f7fe fc28 	bl	800055c <__aeabi_f2d>
 8001d0c:	a35e      	add	r3, pc, #376	; (adr r3, 8001e88 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x328>)
 8001d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d12:	f7fe fda5 	bl	8000860 <__aeabi_ddiv>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	ec43 2b17 	vmov	d7, r2, r3
 8001d1e:	eeb0 0a47 	vmov.f32	s0, s14
 8001d22:	eef0 0a67 	vmov.f32	s1, s15
 8001d26:	f017 fd1f 	bl	8019768 <round>
 8001d2a:	ec51 0b10 	vmov	r0, r1, d0
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	4b5d      	ldr	r3, [pc, #372]	; (8001ea8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x348>)
 8001d34:	f7fe fab2 	bl	800029c <__aeabi_dsub>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4690      	mov	r8, r2
 8001d3e:	4699      	mov	r9, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d46:	1c59      	adds	r1, r3, #1
 8001d48:	6739      	str	r1, [r7, #112]	; 0x70
 8001d4a:	18d5      	adds	r5, r2, r3
 8001d4c:	4640      	mov	r0, r8
 8001d4e:	4649      	mov	r1, r9
 8001d50:	f7fe ff0c 	bl	8000b6c <__aeabi_d2iz>
 8001d54:	4603      	mov	r3, r0
 8001d56:	b25b      	sxtb	r3, r3
 8001d58:	702b      	strb	r3, [r5, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8001d5a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d5c:	f7fe fbfe 	bl	800055c <__aeabi_f2d>
 8001d60:	a349      	add	r3, pc, #292	; (adr r3, 8001e88 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x328>)
 8001d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d66:	f7fe fd7b 	bl	8000860 <__aeabi_ddiv>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	ec43 2b17 	vmov	d7, r2, r3
 8001d72:	eeb0 0a47 	vmov.f32	s0, s14
 8001d76:	eef0 0a67 	vmov.f32	s1, s15
 8001d7a:	f017 fcf5 	bl	8019768 <round>
 8001d7e:	ec51 0b10 	vmov	r0, r1, d0
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	4b48      	ldr	r3, [pc, #288]	; (8001ea8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x348>)
 8001d88:	f7fe fa88 	bl	800029c <__aeabi_dsub>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4690      	mov	r8, r2
 8001d92:	4699      	mov	r9, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d9a:	1c59      	adds	r1, r3, #1
 8001d9c:	6739      	str	r1, [r7, #112]	; 0x70
 8001d9e:	18d5      	adds	r5, r2, r3
 8001da0:	4640      	mov	r0, r8
 8001da2:	4649      	mov	r1, r9
 8001da4:	f7fe fee2 	bl	8000b6c <__aeabi_d2iz>
 8001da8:	4603      	mov	r3, r0
 8001daa:	b25b      	sxtb	r3, r3
 8001dac:	702b      	strb	r3, [r5, #0]
 8001dae:	e067      	b.n	8001e80 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x320>
                    else if (gray > 127) gray = 127;
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(gray);
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8001db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001db2:	0c1b      	lsrs	r3, r3, #16
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	ee07 3a90 	vmov	s15, r3
 8001dba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dbe:	eddf 6a39 	vldr	s13, [pc, #228]	; 8001ea4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 8001dc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dc6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8001dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dcc:	0a1b      	lsrs	r3, r3, #8
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	ee07 3a90 	vmov	s15, r3
 8001dd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dd8:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001ea4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 8001ddc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001de0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8001de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	ee07 3a90 	vmov	s15, r3
 8001dec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001df0:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001ea4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 8001df4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001df8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8001dfc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001e00:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001eac <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x34c>
 8001e04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e08:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e0c:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001eb0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x350>
 8001e10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e18:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e1c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001eb4 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x354>
 8001e20:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e28:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8001e2c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001e2e:	f7fe fb95 	bl	800055c <__aeabi_f2d>
 8001e32:	a315      	add	r3, pc, #84	; (adr r3, 8001e88 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x328>)
 8001e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e38:	f7fe fd12 	bl	8000860 <__aeabi_ddiv>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	ec43 2b17 	vmov	d7, r2, r3
 8001e44:	eeb0 0a47 	vmov.f32	s0, s14
 8001e48:	eef0 0a67 	vmov.f32	s1, s15
 8001e4c:	f017 fc8c 	bl	8019768 <round>
 8001e50:	ec51 0b10 	vmov	r0, r1, d0
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x348>)
 8001e5a:	f7fe fa1f 	bl	800029c <__aeabi_dsub>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4690      	mov	r8, r2
 8001e64:	4699      	mov	r9, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e6c:	1c59      	adds	r1, r3, #1
 8001e6e:	6739      	str	r1, [r7, #112]	; 0x70
 8001e70:	18d5      	adds	r5, r2, r3
 8001e72:	4640      	mov	r0, r8
 8001e74:	4649      	mov	r1, r9
 8001e76:	f7fe fe79 	bl	8000b6c <__aeabi_d2iz>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	b25b      	sxtb	r3, r3
 8001e7e:	702b      	strb	r3, [r5, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8001e80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e82:	3301      	adds	r3, #1
 8001e84:	657b      	str	r3, [r7, #84]	; 0x54
 8001e86:	e6d9      	b.n	8001c3c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xdc>
 8001e88:	00000000 	.word	0x00000000
 8001e8c:	40182424 	.word	0x40182424
 8001e90:	0801c574 	.word	0x0801c574
 8001e94:	0801c580 	.word	0x0801c580
 8001e98:	0801c598 	.word	0x0801c598
 8001e9c:	fffffc14 	.word	0xfffffc14
 8001ea0:	fffffc16 	.word	0xfffffc16
 8001ea4:	437f0000 	.word	0x437f0000
 8001ea8:	405c8000 	.word	0x405c8000
 8001eac:	3e991687 	.word	0x3e991687
 8001eb0:	3f1645a2 	.word	0x3f1645a2
 8001eb4:	3de978d5 	.word	0x3de978d5
                }
            }
        }

        bytes_left -= elements_to_read;
 8001eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec0:	2501      	movs	r5, #1
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff fc79 	bl	80017be <_ZN2ei9ei_matrixD1Ev>
 8001ecc:	2d01      	cmp	r5, #1
 8001ece:	d105      	bne.n	8001edc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x37c>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8001ed0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ed2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ed6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ed8:	e689      	b.n	8001bee <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x8e>
    }

    return EIDSP_OK;
 8001eda:	2400      	movs	r4, #0
}
 8001edc:	4623      	mov	r3, r4
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3778      	adds	r7, #120	; 0x78
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001ee8 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhj>:

using namespace ei;

class SignalWithAxes {
public:
    SignalWithAxes(signal_t *original_signal, uint8_t *axes, size_t axes_count):
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
 8001ef4:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	330c      	adds	r3, #12
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fdae 	bl	8001a6e <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _original_signal->total_length / EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	603b      	str	r3, [r7, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	68b9      	ldr	r1, [r7, #8]
 8001f34:	f000 f832 	bl	8001f9c <_ZN14SignalWithAxes8get_dataEjjPf>
 8001f38:	4603      	mov	r3, r0
        };
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
        if (this->_axes_count == EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b03      	cmp	r3, #3
 8001f52:	d102      	bne.n	8001f5a <_ZN14SignalWithAxes10get_signalEv+0x16>
            return this->_original_signal;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	e019      	b.n	8001f8e <_ZN14SignalWithAxes10get_signalEv+0x4a>
        wrapped_signal.total_length = _original_signal->total_length / EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME * _axes_count;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	4a0d      	ldr	r2, [pc, #52]	; (8001f98 <_ZN14SignalWithAxes10get_signalEv+0x54>)
 8001f62:	fba2 2303 	umull	r2, r3, r2, r3
 8001f66:	085b      	lsrs	r3, r3, #1
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6892      	ldr	r2, [r2, #8]
 8001f6c:	fb03 f202 	mul.w	r2, r3, r2
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	61da      	str	r2, [r3, #28]
        };
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f103 020c 	add.w	r2, r3, #12
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	f107 030c 	add.w	r3, r7, #12
 8001f82:	4619      	mov	r1, r3
 8001f84:	4610      	mov	r0, r2
 8001f86:	f001 f835 	bl	8002ff4 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>
#endif
        return &wrapped_signal;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	330c      	adds	r3, #12
    }
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	aaaaaaab 	.word	0xaaaaaaab

08001f9c <_ZN14SignalWithAxes8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08a      	sub	sp, #40	; 0x28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
 8001fa8:	603b      	str	r3, [r7, #0]
        size_t offset_on_original_signal = offset / _axes_count * EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4413      	add	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        size_t length_on_original_signal = length / _axes_count * EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4413      	add	r3, r2
 8001fcc:	617b      	str	r3, [r7, #20]

        size_t out_ptr_ix = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	623b      	str	r3, [r7, #32]
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	4413      	add	r3, r2
 8001fdc:	6a3a      	ldr	r2, [r7, #32]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d228      	bcs.n	8002034 <_ZN14SignalWithAxes8get_dataEjjPf+0x98>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	69fa      	ldr	r2, [r7, #28]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d21d      	bcs.n	800202c <_ZN14SignalWithAxes8get_dataEjjPf+0x90>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	18d1      	adds	r1, r2, r3
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	627a      	str	r2, [r7, #36]	; 0x24
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	4413      	add	r3, r2
 8002012:	2201      	movs	r2, #1
 8002014:	f000 ffb3 	bl	8002f7e <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8002018:	6138      	str	r0, [r7, #16]
                if (r != 0) {
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <_ZN14SignalWithAxes8get_dataEjjPf+0x88>
                    return r;
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	e008      	b.n	8002036 <_ZN14SignalWithAxes8get_dataEjjPf+0x9a>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	3301      	adds	r3, #1
 8002028:	61fb      	str	r3, [r7, #28]
 800202a:	e7dc      	b.n	8001fe6 <_ZN14SignalWithAxes8get_dataEjjPf+0x4a>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	3303      	adds	r3, #3
 8002030:	623b      	str	r3, [r7, #32]
 8002032:	e7d0      	b.n	8001fd6 <_ZN14SignalWithAxes8get_dataEjjPf+0x3a>
                }
            }
        }

        return 0;
 8002034:	2300      	movs	r3, #0
    }
 8002036:	4618      	mov	r0, r3
 8002038:	3728      	adds	r7, #40	; 0x28
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <_ZN14SignalWithAxesD1Ev>:
class SignalWithAxes {
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	330c      	adds	r3, #12
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fd1c 	bl	8001a88 <_ZN2ei11ei_signal_tD1Ev>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb>:
#else

/**
 * Fill the result structure from a quantized output tensor
 */
__attribute__((unused)) static void fill_result_struct_i8(ei_impulse_result_t *result, int8_t *data, float zero_point, float scale, bool debug) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b088      	sub	sp, #32
 8002060:	af00      	add	r7, sp, #0
 8002062:	6178      	str	r0, [r7, #20]
 8002064:	6139      	str	r1, [r7, #16]
 8002066:	ed87 0a03 	vstr	s0, [r7, #12]
 800206a:	edc7 0a02 	vstr	s1, [r7, #8]
 800206e:	4613      	mov	r3, r2
 8002070:	71fb      	strb	r3, [r7, #7]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	2b04      	cmp	r3, #4
 800207a:	d837      	bhi.n	80020ec <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x90>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	4413      	add	r3, r2
 8002082:	f993 3000 	ldrsb.w	r3, [r3]
 8002086:	ee07 3a90 	vmov	s15, r3
 800208a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800208e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002096:	ed97 7a02 	vldr	s14, [r7, #8]
 800209a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209e:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00e      	beq.n	80020c6 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x6a>
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
 80020a8:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x98>)
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b0:	4619      	mov	r1, r3
 80020b2:	4811      	ldr	r0, [pc, #68]	; (80020f8 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x9c>)
 80020b4:	f000 fd09 	bl	8002aca <_Z9ei_printfPKcz>
            ei_printf_float(value);
 80020b8:	ed97 0a06 	vldr	s0, [r7, #24]
 80020bc:	f00f fb28 	bl	8011710 <_Z15ei_printf_floatf>
            ei_printf("\n");
 80020c0:	480e      	ldr	r0, [pc, #56]	; (80020fc <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0xa0>)
 80020c2:	f000 fd02 	bl	8002aca <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = ei_classifier_inferencing_categories[ix];
 80020c6:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x98>)
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	69fa      	ldr	r2, [r7, #28]
 80020d2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4413      	add	r3, r2
 80020de:	3304      	adds	r3, #4
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	3301      	adds	r3, #1
 80020e8:	61fb      	str	r3, [r7, #28]
 80020ea:	e7c4      	b.n	8002076 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x1a>
    }
}
 80020ec:	bf00      	nop
 80020ee:	3720      	adds	r7, #32
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000010 	.word	0x20000010
 80020f8:	0801c6a4 	.word	0x0801c6a4
 80020fc:	0801c684 	.word	0x0801c684

08002100 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb>:

/**
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static void fill_result_struct_f32(ei_impulse_result_t *result, float *data, bool debug) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	4613      	mov	r3, r2
 800210c:	71fb      	strb	r3, [r7, #7]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	2b04      	cmp	r3, #4
 8002116:	d82a      	bhi.n	800216e <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x6e>
        float value = data[ix];
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	4413      	add	r3, r2
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	613b      	str	r3, [r7, #16]

        if (debug) {
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00e      	beq.n	8002148 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x48>
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
 800212a:	4a13      	ldr	r2, [pc, #76]	; (8002178 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x78>)
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002132:	4619      	mov	r1, r3
 8002134:	4811      	ldr	r0, [pc, #68]	; (800217c <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x7c>)
 8002136:	f000 fcc8 	bl	8002aca <_Z9ei_printfPKcz>
            ei_printf_float(value);
 800213a:	ed97 0a04 	vldr	s0, [r7, #16]
 800213e:	f00f fae7 	bl	8011710 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8002142:	480f      	ldr	r0, [pc, #60]	; (8002180 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x80>)
 8002144:	f000 fcc1 	bl	8002aca <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = ei_classifier_inferencing_categories[ix];
 8002148:	4a0b      	ldr	r2, [pc, #44]	; (8002178 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x78>)
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	4413      	add	r3, r2
 8002160:	3304      	adds	r3, #4
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	3301      	adds	r3, #1
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	e7d1      	b.n	8002112 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x12>
    }
}
 800216e:	bf00      	nop
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000010 	.word	0x20000010
 800217c:	0801c6a4 	.word	0x0801c6a4
 8002180:	0801c684 	.word	0x0801c684

08002184 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE>:
    TfLiteTensor** output_scores,
#endif
#if (EI_CLASSIFIER_COMPILED != 1)
    tflite::MicroInterpreter** micro_interpreter,
#endif
    ei_unique_ptr_t& p_tensor_arena) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
 8002190:	603b      	str	r3, [r7, #0]
#if (EI_CLASSIFIER_COMPILED == 1)
    TfLiteStatus init_status = trained_model_init(ei_aligned_calloc);
 8002192:	4842      	ldr	r0, [pc, #264]	; (800229c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x118>)
 8002194:	f014 ff5c 	bl	8017050 <_Z18trained_model_initPFPvjjE>
 8002198:	4603      	mov	r3, r0
 800219a:	75fb      	strb	r3, [r7, #23]
    if (init_status != kTfLiteOk) {
 800219c:	7dfb      	ldrb	r3, [r7, #23]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d007      	beq.n	80021b2 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x2e>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
 80021a2:	7dfb      	ldrb	r3, [r7, #23]
 80021a4:	4619      	mov	r1, r3
 80021a6:	483e      	ldr	r0, [pc, #248]	; (80022a0 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x11c>)
 80021a8:	f000 fc8f 	bl	8002aca <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 80021ac:	f06f 0305 	mvn.w	r3, #5
 80021b0:	e070      	b.n	8002294 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x110>
    }
    p_tensor_arena = ei_unique_ptr_t(tensor_arena, ei_aligned_free);
#endif
#endif

    *ctx_start_us = ei_read_timer_us();
 80021b2:	f00f fa9b 	bl	80116ec <_Z16ei_read_timer_usv>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	68f9      	ldr	r1, [r7, #12]
 80021bc:	e9c1 2300 	strd	r2, r3, [r1]
    resolver.AddCustom("TFLite_Detection_PostProcess", &post_process_op);
#endif
#endif // EI_CLASSIFIER_COMPILED != 1

#if (EI_CLASSIFIER_COMPILED == 1)
    *input = trained_model_input(EI_CLASSIFIER_TFLITE_OUTPUT_DATA_TENSOR);
 80021c0:	2000      	movs	r0, #0
 80021c2:	f015 f985 	bl	80174d0 <_Z19trained_model_inputi>
 80021c6:	4602      	mov	r2, r0
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	601a      	str	r2, [r3, #0]
    *output = trained_model_output(EI_CLASSIFIER_TFLITE_OUTPUT_DATA_TENSOR);
 80021cc:	2000      	movs	r0, #0
 80021ce:	f015 f991 	bl	80174f4 <_Z20trained_model_outputi>
 80021d2:	4602      	mov	r2, r0
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	601a      	str	r2, [r3, #0]
    *output_labels = interpreter->output(EI_CLASSIFIER_TFLITE_OUTPUT_LABELS_TENSOR);
#endif // EI_CLASSIFIER_OBJECT_DETECTION
#endif

    // Assert that our quantization parameters match the model
    if (tflite_first_run) {
 80021d8:	4b32      	ldr	r3, [pc, #200]	; (80022a4 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x120>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d058      	beq.n	8002292 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x10e>
        assert((*input)->type == EI_CLASSIFIER_TFLITE_INPUT_DATATYPE);
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b09      	cmp	r3, #9
 80021e8:	d006      	beq.n	80021f8 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x74>
 80021ea:	4b2f      	ldr	r3, [pc, #188]	; (80022a8 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x124>)
 80021ec:	4a2f      	ldr	r2, [pc, #188]	; (80022ac <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x128>)
 80021ee:	f240 21aa 	movw	r1, #682	; 0x2aa
 80021f2:	482f      	ldr	r0, [pc, #188]	; (80022b0 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x12c>)
 80021f4:	f018 fd16 	bl	801ac24 <__assert_func>
        assert((*output)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b09      	cmp	r3, #9
 8002200:	d006      	beq.n	8002210 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x8c>
 8002202:	4b2c      	ldr	r3, [pc, #176]	; (80022b4 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x130>)
 8002204:	4a29      	ldr	r2, [pc, #164]	; (80022ac <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x128>)
 8002206:	f240 21ab 	movw	r1, #683	; 0x2ab
 800220a:	4829      	ldr	r0, [pc, #164]	; (80022b0 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x12c>)
 800220c:	f018 fd0a 	bl	801ac24 <__assert_func>
        assert((*output_scores)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
        assert((*output_labels)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
#endif
#if defined(EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED) || defined(EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED)
        if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED) {
            assert((*input)->params.scale == EI_CLASSIFIER_TFLITE_INPUT_SCALE);
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	edd3 7a03 	vldr	s15, [r3, #12]
 8002218:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80022b8 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x134>
 800221c:	eef4 7a47 	vcmp.f32	s15, s14
 8002220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002224:	d006      	beq.n	8002234 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0xb0>
 8002226:	4b25      	ldr	r3, [pc, #148]	; (80022bc <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x138>)
 8002228:	4a20      	ldr	r2, [pc, #128]	; (80022ac <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x128>)
 800222a:	f240 21b2 	movw	r1, #690	; 0x2b2
 800222e:	4820      	ldr	r0, [pc, #128]	; (80022b0 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x12c>)
 8002230:	f018 fcf8 	bl	801ac24 <__assert_func>
            assert((*input)->params.zero_point == EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800223e:	d006      	beq.n	800224e <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0xca>
 8002240:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x13c>)
 8002242:	4a1a      	ldr	r2, [pc, #104]	; (80022ac <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x128>)
 8002244:	f240 21b3 	movw	r1, #691	; 0x2b3
 8002248:	4819      	ldr	r0, [pc, #100]	; (80022b0 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x12c>)
 800224a:	f018 fceb 	bl	801ac24 <__assert_func>
        }
        if (EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED) {
            assert((*output)->params.scale == EI_CLASSIFIER_TFLITE_OUTPUT_SCALE);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	edd3 7a03 	vldr	s15, [r3, #12]
 8002256:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80022c4 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x140>
 800225a:	eef4 7a47 	vcmp.f32	s15, s14
 800225e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002262:	d006      	beq.n	8002272 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0xee>
 8002264:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x144>)
 8002266:	4a11      	ldr	r2, [pc, #68]	; (80022ac <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x128>)
 8002268:	f240 21b6 	movw	r1, #694	; 0x2b6
 800226c:	4810      	ldr	r0, [pc, #64]	; (80022b0 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x12c>)
 800226e:	f018 fcd9 	bl	801ac24 <__assert_func>
            assert((*output)->params.zero_point == EI_CLASSIFIER_TFLITE_OUTPUT_ZEROPOINT);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800227c:	d006      	beq.n	800228c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x108>
 800227e:	4b13      	ldr	r3, [pc, #76]	; (80022cc <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x148>)
 8002280:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x128>)
 8002282:	f240 21b7 	movw	r1, #695	; 0x2b7
 8002286:	480a      	ldr	r0, [pc, #40]	; (80022b0 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x12c>)
 8002288:	f018 fccc 	bl	801ac24 <__assert_func>
        }
#endif
        tflite_first_run = false;
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x120>)
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
    }
    return EI_IMPULSE_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	08001871 	.word	0x08001871
 80022a0:	0801c6ac 	.word	0x0801c6ac
 80022a4:	20000048 	.word	0x20000048
 80022a8:	0801c6e0 	.word	0x0801c6e0
 80022ac:	0801c718 	.word	0x0801c718
 80022b0:	0801c78c 	.word	0x0801c78c
 80022b4:	0801c814 	.word	0x0801c814
 80022b8:	40c12120 	.word	0x40c12120
 80022bc:	0801c84c 	.word	0x0801c84c
 80022c0:	0801c888 	.word	0x0801c888
 80022c4:	3b800000 	.word	0x3b800000
 80022c8:	0801c8cc 	.word	0x0801c8cc
 80022cc:	0801c90c 	.word	0x0801c90c

080022d0 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb>:
#if (EI_CLASSIFIER_COMPILED != 1)
    tflite::MicroInterpreter* interpreter,
#endif
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 80022d0:	b5b0      	push	{r4, r5, r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	603b      	str	r3, [r7, #0]
#if (EI_CLASSIFIER_COMPILED == 1)
    if(trained_model_invoke() != kTfLiteOk) {
 80022de:	f015 f91b 	bl	8017518 <_Z20trained_model_invokev>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	bf14      	ite	ne
 80022e8:	2301      	movne	r3, #1
 80022ea:	2300      	moveq	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0x28>
        return EI_IMPULSE_TFLITE_ERROR;
 80022f2:	f06f 0302 	mvn.w	r3, #2
 80022f6:	e060      	b.n	80023ba <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xea>
        return EI_IMPULSE_TFLITE_ERROR;
    }
    delete interpreter;
#endif

    uint64_t ctx_end_us = ei_read_timer_us();
 80022f8:	f00f f9f8 	bl	80116ec <_Z16ei_read_timer_usv>
 80022fc:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 8002300:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002304:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002308:	1a84      	subs	r4, r0, r2
 800230a:	eb61 0503 	sbc.w	r5, r1, r3
 800230e:	4622      	mov	r2, r4
 8002310:	462b      	mov	r3, r5
 8002312:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002314:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 8002318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800231e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	f7fe fcb9 	bl	8000c9c <__aeabi_ldivmod>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002330:	639a      	str	r2, [r3, #56]	; 0x38

    // Read the predicted y value from the model's output tensor
    if (debug) {
 8002332:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002336:	2b00      	cmp	r3, #0
 8002338:	d005      	beq.n	8002346 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0x76>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 800233a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233e:	4619      	mov	r1, r3
 8002340:	4820      	ldr	r0, [pc, #128]	; (80023c4 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xf4>)
 8002342:	f000 fbc2 	bl	8002aca <_Z9ei_printfPKcz>
    }
#elif EI_CLASSIFIER_OBJECT_DETECTION == 1
    fill_result_struct_f32(result, tflite::post_process_boxes, tflite::post_process_scores, tflite::post_process_classes, debug);
    // fill_result_struct_f32(result, output->data.f, scores_tensor->data.f, labels_tensor->data.f, debug);
#else
    bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b09      	cmp	r3, #9
 800234c:	bf0c      	ite	eq
 800234e:	2301      	moveq	r3, #1
 8002350:	2300      	movne	r3, #0
 8002352:	75fb      	strb	r3, [r7, #23]
    if (int8_output) {
 8002354:	7dfb      	ldrb	r3, [r7, #23]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d015      	beq.n	8002386 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xb6>
        fill_result_struct_i8(result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6859      	ldr	r1, [r3, #4]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	ee07 3a90 	vmov	s15, r3
 8002366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002370:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002374:	461a      	mov	r2, r3
 8002376:	eef0 0a47 	vmov.f32	s1, s14
 800237a:	eeb0 0a67 	vmov.f32	s0, s15
 800237e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002380:	f7ff fe6c 	bl	800205c <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb>
 8002384:	e007      	b.n	8002396 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xc6>
    }
    else {
        fill_result_struct_f32(result, output->data.f, debug);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800238e:	4619      	mov	r1, r3
 8002390:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002392:	f7ff feb5 	bl	8002100 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb>
    }
#endif

#if (EI_CLASSIFIER_COMPILED == 1)
    trained_model_reset(ei_aligned_free);
 8002396:	480c      	ldr	r0, [pc, #48]	; (80023c8 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xf8>)
 8002398:	f015 f8f4 	bl	8017584 <_Z19trained_model_resetPFvPvE>
#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 800239c:	f00f f99e 	bl	80116dc <_Z29ei_run_impulse_check_canceledv>
 80023a0:	4603      	mov	r3, r0
 80023a2:	f113 0f02 	cmn.w	r3, #2
 80023a6:	bf0c      	ite	eq
 80023a8:	2301      	moveq	r3, #1
 80023aa:	2300      	movne	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xe8>
        return EI_IMPULSE_CANCELED;
 80023b2:	f06f 0301 	mvn.w	r3, #1
 80023b6:	e000      	b.n	80023ba <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xea>
    }

    return EI_IMPULSE_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3720      	adds	r7, #32
 80023be:	46bd      	mov	sp, r7
 80023c0:	bdb0      	pop	{r4, r5, r7, pc}
 80023c2:	bf00      	nop
 80023c4:	0801c954 	.word	0x0801c954
 80023c8:	080018f5 	.word	0x080018f5

080023cc <run_inference>:
 */
extern "C" EI_IMPULSE_ERROR run_inference(
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 80023cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023d0:	b0ac      	sub	sp, #176	; 0xb0
 80023d2:	af02      	add	r7, sp, #8
 80023d4:	60f8      	str	r0, [r7, #12]
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	4613      	mov	r3, r2
 80023da:	71fb      	strb	r3, [r7, #7]
 80023dc:	2400      	movs	r4, #0
        TfLiteTensor* output;
#if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
        TfLiteTensor* output_scores;
        TfLiteTensor* output_labels;
#endif
        uint64_t ctx_start_us = ei_read_timer_us();
 80023de:	f00f f985 	bl	80116ec <_Z16ei_read_timer_usv>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
        ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);
 80023ea:	4b8f      	ldr	r3, [pc, #572]	; (8002628 <run_inference+0x25c>)
 80023ec:	677b      	str	r3, [r7, #116]	; 0x74
 80023ee:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80023f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023f6:	2100      	movs	r1, #0
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 fe2b 	bl	8003054 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

#if (EI_CLASSIFIER_COMPILED == 1)
        EI_IMPULSE_ERROR init_res = inference_tflite_setup(&ctx_start_us, &input, &output,
 80023fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002402:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002406:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800240a:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800240e:	f7ff feb9 	bl	8002184 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE>
 8002412:	4603      	mov	r3, r0
 8002414:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
            &output_labels,
            &output_scores,
    #endif
            &interpreter, p_tensor_arena);
#endif
        if (init_res != EI_IMPULSE_OK) {
 8002418:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <run_inference+0x5c>
            return init_res;
 8002420:	f997 409f 	ldrsb.w	r4, [r7, #159]	; 0x9f
 8002424:	2500      	movs	r5, #0
 8002426:	e07f      	b.n	8002528 <run_inference+0x15c>
        }

        uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());
 8002428:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800242c:	4618      	mov	r0, r3
 800242e:	f000 fe47 	bl	80030c0 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 8002432:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
            else {
                input->data.f[ix] = fmatrix->buffer[ix];
            }
        }
#else
        bool int8_input = input->type == TfLiteType::kTfLiteInt8;
 8002436:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b09      	cmp	r3, #9
 800243c:	bf0c      	ite	eq
 800243e:	2301      	moveq	r3, #1
 8002440:	2300      	movne	r3, #0
 8002442:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
        for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8002446:	2300      	movs	r3, #0
 8002448:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	6892      	ldr	r2, [r2, #8]
 8002454:	fb02 f303 	mul.w	r3, r2, r3
 8002458:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800245c:	429a      	cmp	r2, r3
 800245e:	d23f      	bcs.n	80024e0 <run_inference+0x114>
            // Quantize the input if it is int8
            if (int8_input) {
 8002460:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002464:	2b00      	cmp	r3, #0
 8002466:	d027      	beq.n	80024b8 <run_inference+0xec>
                input->data.int8[ix] = static_cast<int8_t>(round(fmatrix->buffer[ix] / input->params.scale) + input->params.zero_point);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	ed93 7a00 	vldr	s14, [r3]
 8002478:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800247a:	edd3 7a03 	vldr	s15, [r3, #12]
 800247e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002482:	eeb0 0a66 	vmov.f32	s0, s13
 8002486:	f7ff f858 	bl	800153a <_ZSt5roundf>
 800248a:	eeb0 7a40 	vmov.f32	s14, s0
 800248e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	ee07 3a90 	vmov	s15, r3
 8002496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800249a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800249e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024a6:	4413      	add	r3, r2
 80024a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ac:	edc7 7a00 	vstr	s15, [r7]
 80024b0:	783a      	ldrb	r2, [r7, #0]
 80024b2:	b252      	sxtb	r2, r2
 80024b4:	701a      	strb	r2, [r3, #0]
 80024b6:	e00d      	b.n	80024d4 <run_inference+0x108>
                // printf("float %ld : %d\r\n", ix, input->data.int8[ix]);
            } else {
                input->data.f[ix] = fmatrix->buffer[ix];
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	441a      	add	r2, r3
 80024c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024c6:	6859      	ldr	r1, [r3, #4]
 80024c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 80024d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024d8:	3301      	adds	r3, #1
 80024da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80024de:	e7b5      	b.n	800244c <run_inference+0x80>
            }
        }
#endif

#if (EI_CLASSIFIER_COMPILED == 1)
        EI_IMPULSE_ERROR run_res = inference_tflite_run(ctx_start_us, output,
 80024e0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80024e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	9301      	str	r3, [sp, #4]
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024f2:	f7ff feed 	bl	80022d0 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb>
 80024f6:	4603      	mov	r3, r0
 80024f8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
            output_scores,
    #endif
            interpreter, tensor_arena, result, debug);
#endif

        result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 80024fc:	f00f f8f6 	bl	80116ec <_Z16ei_read_timer_usv>
 8002500:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002504:	ebb0 0a02 	subs.w	sl, r0, r2
 8002508:	eb61 0b03 	sbc.w	fp, r1, r3
 800250c:	4652      	mov	r2, sl
 800250e:	465b      	mov	r3, fp
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

        if (run_res != EI_IMPULSE_OK) {
 8002516:	f997 3096 	ldrsb.w	r3, [r7, #150]	; 0x96
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <run_inference+0x15a>
            return run_res;
 800251e:	f997 4096 	ldrsb.w	r4, [r7, #150]	; 0x96
 8002522:	2500      	movs	r5, #0
 8002524:	e000      	b.n	8002528 <run_inference+0x15c>
 8002526:	2501      	movs	r5, #1
 8002528:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800252c:	4618      	mov	r0, r3
 800252e:	f000 fda6 	bl	800307e <_ZNSt10unique_ptrIvPFvPvEED1Ev>
 8002532:	2d01      	cmp	r5, #1
 8002534:	d172      	bne.n	800261c <run_inference+0x250>

#if EI_CLASSIFIER_HAS_ANOMALY == 1

    // Anomaly detection
    {
        uint64_t anomaly_start_us = ei_read_timer_us();
 8002536:	f00f f8d9 	bl	80116ec <_Z16ei_read_timer_usv>
 800253a:	e9c7 0122 	strd	r0, r1, [r7, #136]	; 0x88

        float input[EI_CLASSIFIER_ANOM_AXIS_SIZE];
        for (size_t ix = 0; ix < EI_CLASSIFIER_ANOM_AXIS_SIZE; ix++) {
 800253e:	2300      	movs	r3, #0
 8002540:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002544:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002548:	2b11      	cmp	r3, #17
 800254a:	d816      	bhi.n	800257a <run_inference+0x1ae>
            input[ix] = fmatrix->buffer[EI_CLASSIFIER_ANOM_AXIS[ix]];
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4936      	ldr	r1, [pc, #216]	; (800262c <run_inference+0x260>)
 8002552:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002556:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	33a8      	adds	r3, #168	; 0xa8
 8002568:	443b      	add	r3, r7
 800256a:	3b98      	subs	r3, #152	; 0x98
 800256c:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < EI_CLASSIFIER_ANOM_AXIS_SIZE; ix++) {
 800256e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002572:	3301      	adds	r3, #1
 8002574:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002578:	e7e4      	b.n	8002544 <run_inference+0x178>
        }
        standard_scaler(input, ei_classifier_anom_scale, ei_classifier_anom_mean, EI_CLASSIFIER_ANOM_AXIS_SIZE);
 800257a:	f107 0010 	add.w	r0, r7, #16
 800257e:	2312      	movs	r3, #18
 8002580:	4a2b      	ldr	r2, [pc, #172]	; (8002630 <run_inference+0x264>)
 8002582:	492c      	ldr	r1, [pc, #176]	; (8002634 <run_inference+0x268>)
 8002584:	f7fe ffe9 	bl	800155a <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j>
        float anomaly = get_min_distance_to_cluster(
 8002588:	f107 0010 	add.w	r0, r7, #16
 800258c:	2320      	movs	r3, #32
 800258e:	4a2a      	ldr	r2, [pc, #168]	; (8002638 <run_inference+0x26c>)
 8002590:	2112      	movs	r1, #18
 8002592:	f7ff f85f 	bl	8001654 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj>
 8002596:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
            input, EI_CLASSIFIER_ANOM_AXIS_SIZE, ei_classifier_anom_clusters, EI_CLASSIFIER_ANOM_CLUSTER_COUNT);

        uint64_t anomaly_end_us = ei_read_timer_us();
 800259a:	f00f f8a7 	bl	80116ec <_Z16ei_read_timer_usv>
 800259e:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78

        result->timing.anomaly_us = anomaly_end_us - anomaly_start_us;
 80025a2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80025a6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80025aa:	ebb0 0802 	subs.w	r8, r0, r2
 80025ae:	eb61 0903 	sbc.w	r9, r1, r3
 80025b2:	4642      	mov	r2, r8
 80025b4:	464b      	mov	r3, r9
 80025b6:	68b9      	ldr	r1, [r7, #8]
 80025b8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        result->timing.anomaly = (int)(result->timing.anomaly_us / 1000);
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80025c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	f7fe fb67 	bl	8000c9c <__aeabi_ldivmod>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	63da      	str	r2, [r3, #60]	; 0x3c
        result->anomaly = anomaly;
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80025dc:	629a      	str	r2, [r3, #40]	; 0x28

        if (debug) {
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00c      	beq.n	80025fe <run_inference+0x232>
            ei_printf("Anomaly score (time: %d ms.): ", result->timing.anomaly);
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e8:	4619      	mov	r1, r3
 80025ea:	4814      	ldr	r0, [pc, #80]	; (800263c <run_inference+0x270>)
 80025ec:	f000 fa6d 	bl	8002aca <_Z9ei_printfPKcz>
            ei_printf_float(anomaly);
 80025f0:	ed97 0a21 	vldr	s0, [r7, #132]	; 0x84
 80025f4:	f00f f88c 	bl	8011710 <_Z15ei_printf_floatf>
            ei_printf("\n");
 80025f8:	4811      	ldr	r0, [pc, #68]	; (8002640 <run_inference+0x274>)
 80025fa:	f000 fa66 	bl	8002aca <_Z9ei_printfPKcz>
        }
    }

#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 80025fe:	f00f f86d 	bl	80116dc <_Z29ei_run_impulse_check_canceledv>
 8002602:	4603      	mov	r3, r0
 8002604:	f113 0f02 	cmn.w	r3, #2
 8002608:	bf0c      	ite	eq
 800260a:	2301      	moveq	r3, #1
 800260c:	2300      	movne	r3, #0
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <run_inference+0x24e>
        return EI_IMPULSE_CANCELED;
 8002614:	f06f 0401 	mvn.w	r4, #1
 8002618:	e000      	b.n	800261c <run_inference+0x250>
    }

    return EI_IMPULSE_OK;
 800261a:	2400      	movs	r4, #0
}
 800261c:	4623      	mov	r3, r4
 800261e:	4618      	mov	r0, r3
 8002620:	37a8      	adds	r7, #168	; 0xa8
 8002622:	46bd      	mov	sp, r7
 8002624:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002628:	080018f5 	.word	0x080018f5
 800262c:	0801db88 	.word	0x0801db88
 8002630:	0801dbf4 	.word	0x0801dbf4
 8002634:	0801dbac 	.word	0x0801dbac
 8002638:	0801dc3c 	.word	0x0801dc3c
 800263c:	0801c974 	.word	0x0801c974
 8002640:	0801c684 	.word	0x0801c684

08002644 <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8002644:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002648:	b0a1      	sub	sp, #132	; 0x84
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	4613      	mov	r3, r2
 8002652:	71fb      	strb	r3, [r7, #7]
 8002654:	2600      	movs	r6, #0
#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1 && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TENSAIFLOW)

    // Shortcut for quantized image models
    if (can_run_classifier_image_quantized() == EI_IMPULSE_OK) {
 8002656:	f000 f8fd 	bl	8002854 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	bf0c      	ite	eq
 8002660:	2301      	moveq	r3, #1
 8002662:	2300      	movne	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d008      	beq.n	800267c <run_classifier+0x38>
        return run_classifier_image_quantized(signal, result, debug);
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	461a      	mov	r2, r3
 800266e:	68b9      	ldr	r1, [r7, #8]
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 f8f9 	bl	8002868 <run_classifier_image_quantized>
 8002676:	4603      	mov	r3, r0
 8002678:	461e      	mov	r6, r3
 800267a:	e0d6      	b.n	800282a <run_classifier+0x1e6>
    //     }
    // }
    // printf("\n");
    // }

    memset(result, 0, sizeof(ei_impulse_result_t));
 800267c:	2260      	movs	r2, #96	; 0x60
 800267e:	2100      	movs	r1, #0
 8002680:	68b8      	ldr	r0, [r7, #8]
 8002682:	f018 fb6d 	bl	801ad60 <memset>

    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 8002686:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800268a:	2300      	movs	r3, #0
 800268c:	2212      	movs	r2, #18
 800268e:	2101      	movs	r1, #1
 8002690:	f7ff f86a 	bl	8001768 <_ZN2ei9ei_matrixC1EmmPf>

    uint64_t dsp_start_us = ei_read_timer_us();
 8002694:	f00f f82a 	bl	80116ec <_Z16ei_read_timer_usv>
 8002698:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

    size_t out_features_index = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	67fb      	str	r3, [r7, #124]	; 0x7c

    for (size_t ix = 0; ix < ei_dsp_blocks_size; ix++) {
 80026a0:	2300      	movs	r3, #0
 80026a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80026a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d16c      	bne.n	8002784 <run_classifier+0x140>
        ei_model_dsp_t block = ei_dsp_blocks[ix];
 80026aa:	4963      	ldr	r1, [pc, #396]	; (8002838 <run_classifier+0x1f4>)
 80026ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80026ae:	4613      	mov	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	440b      	add	r3, r1
 80026b8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80026bc:	461d      	mov	r5, r3
 80026be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026c2:	682b      	ldr	r3, [r5, #0]
 80026c4:	6023      	str	r3, [r4, #0]

        if (out_features_index + block.n_output_features > EI_CLASSIFIER_NN_INPUT_FRAME_SIZE) {
 80026c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026ca:	4413      	add	r3, r2
 80026cc:	2b12      	cmp	r3, #18
 80026ce:	d905      	bls.n	80026dc <run_classifier+0x98>
            ei_printf("ERR: Would write outside feature buffer\n");
 80026d0:	485a      	ldr	r0, [pc, #360]	; (800283c <run_classifier+0x1f8>)
 80026d2:	f000 f9fa 	bl	8002aca <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 80026d6:	f06f 0604 	mvn.w	r6, #4
 80026da:	e0a0      	b.n	800281e <run_classifier+0x1da>
        }

        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 80026dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80026de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80026e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80026ea:	460a      	mov	r2, r1
 80026ec:	2101      	movs	r1, #1
 80026ee:	f7ff f83b 	bl	8001768 <_ZN2ei9ei_matrixC1EmmPf>
            ei_printf("ERR: EIDSP_SIGNAL_C_FN_POINTER can only be used when all axes are selected for DSP blocks\n");
            return EI_IMPULSE_DSP_ERROR;
        }
        int ret = block.extract_fn(signal, &fm, block.config, EI_CLASSIFIER_FREQUENCY);
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size);
 80026f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026f6:	f107 0010 	add.w	r0, r7, #16
 80026fa:	68f9      	ldr	r1, [r7, #12]
 80026fc:	f7ff fbf4 	bl	8001ee8 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhj>
        int ret = block.extract_fn(swa.get_signal(), &fm, block.config, EI_CLASSIFIER_FREQUENCY);
 8002700:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8002702:	f107 0310 	add.w	r3, r7, #16
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff fc1c 	bl	8001f44 <_ZN14SignalWithAxes10get_signalEv>
 800270c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800270e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002712:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002716:	4619      	mov	r1, r3
 8002718:	47a0      	blx	r4
 800271a:	6678      	str	r0, [r7, #100]	; 0x64
#endif

        if (ret != EIDSP_OK) {
 800271c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800271e:	2b00      	cmp	r3, #0
 8002720:	d007      	beq.n	8002732 <run_classifier+0xee>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8002722:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002724:	4846      	ldr	r0, [pc, #280]	; (8002840 <run_classifier+0x1fc>)
 8002726:	f000 f9d0 	bl	8002aca <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 800272a:	f06f 0604 	mvn.w	r6, #4
 800272e:	2400      	movs	r4, #0
 8002730:	e013      	b.n	800275a <run_classifier+0x116>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8002732:	f00e ffd3 	bl	80116dc <_Z29ei_run_impulse_check_canceledv>
 8002736:	4603      	mov	r3, r0
 8002738:	f113 0f02 	cmn.w	r3, #2
 800273c:	bf0c      	ite	eq
 800273e:	2301      	moveq	r3, #1
 8002740:	2300      	movne	r3, #0
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <run_classifier+0x10c>
            return EI_IMPULSE_CANCELED;
 8002748:	f06f 0601 	mvn.w	r6, #1
 800274c:	2400      	movs	r4, #0
 800274e:	e004      	b.n	800275a <run_classifier+0x116>
        }

        out_features_index += block.n_output_features;
 8002750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002752:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002754:	4413      	add	r3, r2
 8002756:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002758:	2401      	movs	r4, #1
 800275a:	f107 0310 	add.w	r3, r7, #16
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fc6d 	bl	800203e <_ZN14SignalWithAxesD1Ev>
 8002764:	2c01      	cmp	r4, #1
 8002766:	d001      	beq.n	800276c <run_classifier+0x128>
 8002768:	2400      	movs	r4, #0
 800276a:	e000      	b.n	800276e <run_classifier+0x12a>
 800276c:	2401      	movs	r4, #1
 800276e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff f823 	bl	80017be <_ZN2ei9ei_matrixD1Ev>
 8002778:	2c01      	cmp	r4, #1
 800277a:	d150      	bne.n	800281e <run_classifier+0x1da>
    for (size_t ix = 0; ix < ei_dsp_blocks_size; ix++) {
 800277c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800277e:	3301      	adds	r3, #1
 8002780:	67bb      	str	r3, [r7, #120]	; 0x78
 8002782:	e78f      	b.n	80026a4 <run_classifier+0x60>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8002784:	f00e ffb2 	bl	80116ec <_Z16ei_read_timer_usv>
 8002788:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800278c:	ebb0 0802 	subs.w	r8, r0, r2
 8002790:	eb61 0903 	sbc.w	r9, r1, r3
 8002794:	4642      	mov	r2, r8
 8002796:	464b      	mov	r3, r9
 8002798:	68b9      	ldr	r1, [r7, #8]
 800279a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80027a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	f7fe fa76 	bl	8000c9c <__aeabi_ldivmod>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	635a      	str	r2, [r3, #52]	; 0x34

    if (debug) {
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d01f      	beq.n	80027fe <run_classifier+0x1ba>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c2:	4619      	mov	r1, r3
 80027c4:	481f      	ldr	r0, [pc, #124]	; (8002844 <run_classifier+0x200>)
 80027c6:	f000 f980 	bl	8002aca <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 80027ca:	2300      	movs	r3, #0
 80027cc:	677b      	str	r3, [r7, #116]	; 0x74
 80027ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d210      	bcs.n	80027f8 <run_classifier+0x1b4>
            ei_printf_float(features_matrix.buffer[ix]);
 80027d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	edd3 7a00 	vldr	s15, [r3]
 80027e2:	eeb0 0a67 	vmov.f32	s0, s15
 80027e6:	f00e ff93 	bl	8011710 <_Z15ei_printf_floatf>
            ei_printf(" ");
 80027ea:	4817      	ldr	r0, [pc, #92]	; (8002848 <run_classifier+0x204>)
 80027ec:	f000 f96d 	bl	8002aca <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 80027f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027f2:	3301      	adds	r3, #1
 80027f4:	677b      	str	r3, [r7, #116]	; 0x74
 80027f6:	e7ea      	b.n	80027ce <run_classifier+0x18a>
        }
        ei_printf("\n");
 80027f8:	4814      	ldr	r0, [pc, #80]	; (800284c <run_classifier+0x208>)
 80027fa:	f000 f966 	bl	8002aca <_Z9ei_printfPKcz>
    }

#if EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_NONE
    if (debug) {
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d002      	beq.n	800280a <run_classifier+0x1c6>
        ei_printf("Running neural network...\n");
 8002804:	4812      	ldr	r0, [pc, #72]	; (8002850 <run_classifier+0x20c>)
 8002806:	f000 f960 	bl	8002aca <_Z9ei_printfPKcz>
    }
#endif

    return run_inference(&features_matrix, result, debug);
 800280a:	79fa      	ldrb	r2, [r7, #7]
 800280c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff fdda 	bl	80023cc <run_inference>
 8002818:	4603      	mov	r3, r0
 800281a:	461e      	mov	r6, r3
 800281c:	e000      	b.n	8002820 <run_classifier+0x1dc>
            return EI_IMPULSE_DSP_ERROR;
 800281e:	bf00      	nop
    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 8002820:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002824:	4618      	mov	r0, r3
 8002826:	f7fe ffca 	bl	80017be <_ZN2ei9ei_matrixD1Ev>
}
 800282a:	4633      	mov	r3, r6
 800282c:	4618      	mov	r0, r3
 800282e:	3784      	adds	r7, #132	; 0x84
 8002830:	46bd      	mov	sp, r7
 8002832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002836:	bf00      	nop
 8002838:	20000034 	.word	0x20000034
 800283c:	0801c5c8 	.word	0x0801c5c8
 8002840:	0801c640 	.word	0x0801c640
 8002844:	0801c994 	.word	0x0801c994
 8002848:	0801c680 	.word	0x0801c680
 800284c:	0801c684 	.word	0x0801c684
 8002850:	0801c688 	.word	0x0801c688

08002854 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv>:
}

/**
 * Check if the current impulse could be used by 'run_classifier_image_quantized'
 */
__attribute__((unused)) static EI_IMPULSE_ERROR can_run_classifier_image_quantized() {
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
#if (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_TFLITE) && (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_TENSAIFLOW)
    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
#endif

#if EI_CLASSIFIER_HAS_ANOMALY == 1
    return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8002858:	f06f 0308 	mvn.w	r3, #8
    if (ei_dsp_blocks_size != 1 || ei_dsp_blocks[0].extract_fn != extract_image_features) {
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
    }

    return EI_IMPULSE_OK;
}
 800285c:	4618      	mov	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <run_classifier_image_quantized>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8002868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800286c:	b099      	sub	sp, #100	; 0x64
 800286e:	af02      	add	r7, sp, #8
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	4613      	mov	r3, r2
 8002876:	71fb      	strb	r3, [r7, #7]
    EI_IMPULSE_ERROR verify_res = can_run_classifier_image_quantized();
 8002878:	f7ff ffec 	bl	8002854 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv>
 800287c:	4603      	mov	r3, r0
 800287e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    if (verify_res != EI_IMPULSE_OK) {
 8002882:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8002886:	2b00      	cmp	r3, #0
 8002888:	d002      	beq.n	8002890 <run_classifier_image_quantized+0x28>
        return verify_res;
 800288a:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 800288e:	e0de      	b.n	8002a4e <run_classifier_image_quantized+0x1e6>
    }

    memset(result, 0, sizeof(ei_impulse_result_t));
 8002890:	2260      	movs	r2, #96	; 0x60
 8002892:	2100      	movs	r1, #0
 8002894:	68b8      	ldr	r0, [r7, #8]
 8002896:	f018 fa63 	bl	801ad60 <memset>
    TfLiteTensor* output;
#if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;
#endif
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);
 800289a:	4b73      	ldr	r3, [pc, #460]	; (8002a68 <run_classifier_image_quantized+0x200>)
 800289c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800289e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80028a2:	f107 0320 	add.w	r3, r7, #32
 80028a6:	2100      	movs	r1, #0
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 fbd3 	bl	8003054 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

#if (EI_CLASSIFIER_COMPILED == 1)
    EI_IMPULSE_ERROR init_res = inference_tflite_setup(&ctx_start_us, &input, &output,
 80028ae:	f107 0320 	add.w	r3, r7, #32
 80028b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028b6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80028ba:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80028be:	f7ff fc61 	bl	8002184 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
        &output_scores,
    #endif
        &interpreter,
        p_tensor_arena);
#endif
    if (init_res != EI_IMPULSE_OK) {
 80028c8:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d002      	beq.n	80028d6 <run_classifier_image_quantized+0x6e>
        return init_res;
 80028d0:	f997 4052 	ldrsb.w	r4, [r7, #82]	; 0x52
 80028d4:	e0b6      	b.n	8002a44 <run_classifier_image_quantized+0x1dc>
    }

    if (input->type != TfLiteType::kTfLiteInt8) {
 80028d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b09      	cmp	r3, #9
 80028dc:	d002      	beq.n	80028e4 <run_classifier_image_quantized+0x7c>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 80028de:	f06f 0408 	mvn.w	r4, #8
 80028e2:	e0af      	b.n	8002a44 <run_classifier_image_quantized+0x1dc>
    }

    uint64_t dsp_start_us = ei_read_timer_us();
 80028e4:	f00e ff02 	bl	80116ec <_Z16ei_read_timer_usv>
 80028e8:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE, input->data.int8);
 80028ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f107 0010 	add.w	r0, r7, #16
 80028f4:	2212      	movs	r2, #18
 80028f6:	2101      	movs	r1, #1
 80028f8:	f7fe ff77 	bl	80017ea <_ZN2ei12ei_matrix_i8C1EmmPa>

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(signal, &features_matrix, ei_dsp_blocks[0].config, EI_CLASSIFIER_FREQUENCY);
 80028fc:	4b5b      	ldr	r3, [pc, #364]	; (8002a6c <run_classifier_image_quantized+0x204>)
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	f107 0310 	add.w	r3, r7, #16
 8002904:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002908:	4619      	mov	r1, r3
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f7ff f928 	bl	8001b60 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf>
 8002910:	6478      	str	r0, [r7, #68]	; 0x44
    if (ret != EIDSP_OK) {
 8002912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002914:	2b00      	cmp	r3, #0
 8002916:	d006      	beq.n	8002926 <run_classifier_image_quantized+0xbe>
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8002918:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800291a:	4855      	ldr	r0, [pc, #340]	; (8002a70 <run_classifier_image_quantized+0x208>)
 800291c:	f000 f8d5 	bl	8002aca <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
 8002920:	f06f 0404 	mvn.w	r4, #4
 8002924:	e089      	b.n	8002a3a <run_classifier_image_quantized+0x1d2>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8002926:	f00e fed9 	bl	80116dc <_Z29ei_run_impulse_check_canceledv>
 800292a:	4603      	mov	r3, r0
 800292c:	f113 0f02 	cmn.w	r3, #2
 8002930:	bf0c      	ite	eq
 8002932:	2301      	moveq	r3, #1
 8002934:	2300      	movne	r3, #0
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d002      	beq.n	8002942 <run_classifier_image_quantized+0xda>
        return EI_IMPULSE_CANCELED;
 800293c:	f06f 0401 	mvn.w	r4, #1
 8002940:	e07b      	b.n	8002a3a <run_classifier_image_quantized+0x1d2>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8002942:	f00e fed3 	bl	80116ec <_Z16ei_read_timer_usv>
 8002946:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800294a:	ebb0 0802 	subs.w	r8, r0, r2
 800294e:	eb61 0903 	sbc.w	r9, r1, r3
 8002952:	4642      	mov	r2, r8
 8002954:	464b      	mov	r3, r9
 8002956:	68b9      	ldr	r1, [r7, #8]
 8002958:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002962:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	f7fe f997 	bl	8000c9c <__aeabi_ldivmod>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	635a      	str	r2, [r3, #52]	; 0x34

    if (debug) {
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d02e      	beq.n	80029da <run_classifier_image_quantized+0x172>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002980:	4619      	mov	r1, r3
 8002982:	483c      	ldr	r0, [pc, #240]	; (8002a74 <run_classifier_image_quantized+0x20c>)
 8002984:	f000 f8a1 	bl	8002aca <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8002988:	2300      	movs	r3, #0
 800298a:	657b      	str	r3, [r7, #84]	; 0x54
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002990:	429a      	cmp	r2, r3
 8002992:	d21f      	bcs.n	80029d4 <run_classifier_image_quantized+0x16c>
            ei_printf_float((features_matrix.buffer[ix] - EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT) * EI_CLASSIFIER_TFLITE_INPUT_SCALE);
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002998:	4413      	add	r3, r2
 800299a:	f993 3000 	ldrsb.w	r3, [r3]
 800299e:	3372      	adds	r3, #114	; 0x72
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fd fdc9 	bl	8000538 <__aeabi_i2d>
 80029a6:	a32e      	add	r3, pc, #184	; (adr r3, 8002a60 <run_classifier_image_quantized+0x1f8>)
 80029a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ac:	f7fd fe2e 	bl	800060c <__aeabi_dmul>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4610      	mov	r0, r2
 80029b6:	4619      	mov	r1, r3
 80029b8:	f7fe f920 	bl	8000bfc <__aeabi_d2f>
 80029bc:	4603      	mov	r3, r0
 80029be:	ee00 3a10 	vmov	s0, r3
 80029c2:	f00e fea5 	bl	8011710 <_Z15ei_printf_floatf>
            ei_printf(" ");
 80029c6:	482c      	ldr	r0, [pc, #176]	; (8002a78 <run_classifier_image_quantized+0x210>)
 80029c8:	f000 f87f 	bl	8002aca <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 80029cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ce:	3301      	adds	r3, #1
 80029d0:	657b      	str	r3, [r7, #84]	; 0x54
 80029d2:	e7db      	b.n	800298c <run_classifier_image_quantized+0x124>
        }
        ei_printf("\n");
 80029d4:	4829      	ldr	r0, [pc, #164]	; (8002a7c <run_classifier_image_quantized+0x214>)
 80029d6:	f000 f878 	bl	8002aca <_Z9ei_printfPKcz>
    }

    ctx_start_us = ei_read_timer_us();
 80029da:	f00e fe87 	bl	80116ec <_Z16ei_read_timer_usv>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

#if (EI_CLASSIFIER_COMPILED == 1)
    EI_IMPULSE_ERROR run_res = inference_tflite_run(ctx_start_us, output,
 80029e6:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 80029ea:	6abe      	ldr	r6, [r7, #40]	; 0x28
    #if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
        output_labels,
        output_scores,
    #endif
        static_cast<uint8_t*>(p_tensor_arena.get()),
 80029ec:	f107 0320 	add.w	r3, r7, #32
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 fb65 	bl	80030c0 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 80029f6:	4602      	mov	r2, r0
    EI_IMPULSE_ERROR run_res = inference_tflite_run(ctx_start_us, output,
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	9301      	str	r3, [sp, #4]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	4613      	mov	r3, r2
 8002a02:	4632      	mov	r2, r6
 8002a04:	4640      	mov	r0, r8
 8002a06:	4649      	mov	r1, r9
 8002a08:	f7ff fc62 	bl	80022d0 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        interpreter,
        static_cast<uint8_t*>(p_tensor_arena.get()),
        result, debug);
#endif

    if (run_res != EI_IMPULSE_OK) {
 8002a12:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <run_classifier_image_quantized+0x1b8>
        return run_res;
 8002a1a:	f997 4043 	ldrsb.w	r4, [r7, #67]	; 0x43
 8002a1e:	e00c      	b.n	8002a3a <run_classifier_image_quantized+0x1d2>
    }

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 8002a20:	f00e fe64 	bl	80116ec <_Z16ei_read_timer_usv>
 8002a24:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002a28:	1a84      	subs	r4, r0, r2
 8002a2a:	eb61 0503 	sbc.w	r5, r1, r3
 8002a2e:	4622      	mov	r2, r4
 8002a30:	462b      	mov	r3, r5
 8002a32:	68b9      	ldr	r1, [r7, #8]
 8002a34:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

    return EI_IMPULSE_OK;
 8002a38:	2400      	movs	r4, #0
    ei::matrix_i8_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE, input->data.int8);
 8002a3a:	f107 0310 	add.w	r3, r7, #16
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fe fefd 	bl	800183e <_ZN2ei12ei_matrix_i8D1Ev>
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);
 8002a44:	f107 0320 	add.w	r3, r7, #32
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 fb18 	bl	800307e <_ZNSt10unique_ptrIvPFvPvEED1Ev>
        result->classification[ix].value = value;
    }

    return EI_IMPULSE_OK;
#endif // (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_TENSAIFLOW)
}
 8002a4e:	4623      	mov	r3, r4
 8002a50:	4618      	mov	r0, r3
 8002a52:	375c      	adds	r7, #92	; 0x5c
 8002a54:	46bd      	mov	sp, r7
 8002a56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a5a:	bf00      	nop
 8002a5c:	f3af 8000 	nop.w
 8002a60:	00000000 	.word	0x00000000
 8002a64:	40182424 	.word	0x40182424
 8002a68:	080018f5 	.word	0x080018f5
 8002a6c:	20000034 	.word	0x20000034
 8002a70:	0801c640 	.word	0x0801c640
 8002a74:	0801c994 	.word	0x0801c994
 8002a78:	0801c680 	.word	0x0801c680
 8002a7c:	0801c684 	.word	0x0801c684

08002a80 <_Z6vprintPKcSt9__va_list>:
int get_feature_data(size_t offset, size_t length, float *out_ptr) {
    memcpy(out_ptr, features + offset, length * sizeof(float));
    return 0;
}
void vprint(const char *fmt, va_list argp)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b0b4      	sub	sp, #208	; 0xd0
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string, fmt, argp)) // build string
 8002a8a:	f107 0308 	add.w	r3, r7, #8
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f018 fe48 	bl	801b728 <vsiprintf>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	bfcc      	ite	gt
 8002a9e:	2301      	movgt	r3, #1
 8002aa0:	2300      	movle	r3, #0
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00c      	beq.n	8002ac2 <_Z6vprintPKcSt9__va_list+0x42>
    {
        //HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
    	CDC_Transmit_FS((uint8_t *) string, strlen(string));
 8002aa8:	f107 0308 	add.w	r3, r7, #8
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fd fbe9 	bl	8000284 <strlen>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	f107 0308 	add.w	r3, r7, #8
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f016 f915 	bl	8018cec <CDC_Transmit_FS>
    }
}
 8002ac2:	bf00      	nop
 8002ac4:	37d0      	adds	r7, #208	; 0xd0
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <_Z9ei_printfPKcz>:

void ei_printf(const char *format, ...) {
 8002aca:	b40f      	push	{r0, r1, r2, r3}
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
    va_list myargs;
    va_start(myargs, format);
 8002ad2:	f107 0314 	add.w	r3, r7, #20
 8002ad6:	607b      	str	r3, [r7, #4]
    vprint(format, myargs);
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	6938      	ldr	r0, [r7, #16]
 8002adc:	f7ff ffd0 	bl	8002a80 <_Z6vprintPKcSt9__va_list>
    va_end(myargs);
}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002aea:	b004      	add	sp, #16
 8002aec:	4770      	bx	lr
	...

08002af0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002af0:	b5b0      	push	{r4, r5, r7, lr}
 8002af2:	b0a4      	sub	sp, #144	; 0x90
 8002af4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002af6:	f001 fa7b 	bl	8003ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002afa:	f000 f8d5 	bl	8002ca8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002afe:	f000 f99b 	bl	8002e38 <_ZL12MX_GPIO_Initv>
  MX_USB_DEVICE_Init();
 8002b02:	f016 f81f 	bl	8018b44 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8002b06:	f000 f95b 	bl	8002dc0 <_ZL12MX_SPI1_Initv>
  MX_CRC_Init();
 8002b0a:	f000 f941 	bl	8002d90 <_ZL11MX_CRC_Initv>
  /* USER CODE BEGIN 2 */
  myAccConfigDef.dataRate = LIS3DSH_DATARATE_25;
 8002b0e:	4b5f      	ldr	r3, [pc, #380]	; (8002c8c <main+0x19c>)
 8002b10:	2240      	movs	r2, #64	; 0x40
 8002b12:	701a      	strb	r2, [r3, #0]
  	myAccConfigDef.fullScale = LIS3DSH_FULLSCALE_4;
 8002b14:	4b5d      	ldr	r3, [pc, #372]	; (8002c8c <main+0x19c>)
 8002b16:	2208      	movs	r2, #8
 8002b18:	705a      	strb	r2, [r3, #1]
  	myAccConfigDef.antiAliasingBW = LIS3DSH_FILTER_BW_50;//update rate
 8002b1a:	4b5c      	ldr	r3, [pc, #368]	; (8002c8c <main+0x19c>)
 8002b1c:	22c0      	movs	r2, #192	; 0xc0
 8002b1e:	709a      	strb	r2, [r3, #2]
  	myAccConfigDef.enableAxes = LIS3DSH_XYZ_ENABLE;
 8002b20:	4b5a      	ldr	r3, [pc, #360]	; (8002c8c <main+0x19c>)
 8002b22:	2207      	movs	r2, #7
 8002b24:	70da      	strb	r2, [r3, #3]
  	myAccConfigDef.interruptEnable = false;
 8002b26:	4b59      	ldr	r3, [pc, #356]	; (8002c8c <main+0x19c>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	711a      	strb	r2, [r3, #4]
  	LIS3DSH_Init(&hspi1, &myAccConfigDef);
 8002b2c:	4957      	ldr	r1, [pc, #348]	; (8002c8c <main+0x19c>)
 8002b2e:	4858      	ldr	r0, [pc, #352]	; (8002c90 <main+0x1a0>)
 8002b30:	f7fe fb2a 	bl	8001188 <_Z12LIS3DSH_InitP19__SPI_HandleTypeDefP19LIS3DSH_InitTypeDef>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (size_t ix = 0; ix < EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME)
 8002b34:	2300      	movs	r3, #0
 8002b36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002b3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b3e:	2b11      	cmp	r3, #17
 8002b40:	d837      	bhi.n	8002bb2 <main+0xc2>
	  {
		  if(LIS3DSH_PollDRDY(1000) == true)
 8002b42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b46:	f7fe fca5 	bl	8001494 <_Z16LIS3DSH_PollDRDYm>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	bf0c      	ite	eq
 8002b50:	2301      	moveq	r3, #1
 8002b52:	2300      	movne	r3, #0
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d025      	beq.n	8002ba6 <main+0xb6>
		 	    {
		 	  	myData = LIS3DSH_GetDataScaled();
 8002b5a:	f7fe fc19 	bl	8001390 <_Z21LIS3DSH_GetDataScaledv>
 8002b5e:	eef0 6a40 	vmov.f32	s13, s0
 8002b62:	eeb0 7a60 	vmov.f32	s14, s1
 8002b66:	eef0 7a41 	vmov.f32	s15, s2
 8002b6a:	edc7 6a1e 	vstr	s13, [r7, #120]	; 0x78
 8002b6e:	ed87 7a1f 	vstr	s14, [r7, #124]	; 0x7c
 8002b72:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80

		 	    features[ix + 0] = myData.x;
 8002b76:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002b78:	4946      	ldr	r1, [pc, #280]	; (8002c94 <main+0x1a4>)
 8002b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	601a      	str	r2, [r3, #0]
		 	    features[ix + 1] = myData.y;
 8002b84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b88:	3301      	adds	r3, #1
 8002b8a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002b8c:	4941      	ldr	r1, [pc, #260]	; (8002c94 <main+0x1a4>)
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	601a      	str	r2, [r3, #0]
		 	    features[ix + 2] = myData.z;
 8002b94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b98:	3302      	adds	r3, #2
 8002b9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b9e:	493d      	ldr	r1, [pc, #244]	; (8002c94 <main+0x1a4>)
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	601a      	str	r2, [r3, #0]
	  for (size_t ix = 0; ix < EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME)
 8002ba6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002baa:	3303      	adds	r3, #3
 8002bac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002bb0:	e7c3      	b.n	8002b3a <main+0x4a>
		 	    }//if
	  }//for

	  ei_impulse_result_t result = { 0 };
 8002bb2:	463b      	mov	r3, r7
 8002bb4:	2260      	movs	r2, #96	; 0x60
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f018 f8d1 	bl	801ad60 <memset>
	       signal_t signal;
 8002bbe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fe ff53 	bl	8001a6e <_ZN2ei11ei_signal_tC1Ev>
	       numpy::signal_from_buffer(features, EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE, &signal);
 8002bc8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002bcc:	461a      	mov	r2, r3
 8002bce:	2112      	movs	r1, #18
 8002bd0:	4830      	ldr	r0, [pc, #192]	; (8002c94 <main+0x1a4>)
 8002bd2:	f7fe ff12 	bl	80019fa <_ZN2ei5numpy18signal_from_bufferEPKfjPNS_11ei_signal_tE>
	       // run classifier
	            EI_IMPULSE_ERROR res = run_classifier(&signal, &result, false);
 8002bd6:	4639      	mov	r1, r7
 8002bd8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002bdc:	2200      	movs	r2, #0
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff fd30 	bl	8002644 <run_classifier>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	            ei_printf("run_classifier returned: %d\n", res);
 8002bea:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4829      	ldr	r0, [pc, #164]	; (8002c98 <main+0x1a8>)
 8002bf2:	f7ff ff6a 	bl	8002aca <_Z9ei_printfPKcz>
	            if (res != 0) return 1;
 8002bf6:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <main+0x114>
 8002bfe:	2501      	movs	r5, #1
 8002c00:	2400      	movs	r4, #0
 8002c02:	e036      	b.n	8002c72 <main+0x182>

	            // print predictions
	            ei_printf("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.): \n",
 8002c04:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c0a:	4824      	ldr	r0, [pc, #144]	; (8002c9c <main+0x1ac>)
 8002c0c:	f7ff ff5d 	bl	8002aca <_Z9ei_printfPKcz>
	                result.timing.dsp, result.timing.classification, result.timing.anomaly);

	            // print the predictions
	           for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8002c10:	2300      	movs	r3, #0
 8002c12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d828      	bhi.n	8002c70 <main+0x180>
	                cvalue[ix] = result.classification[ix].value;
 8002c1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	3390      	adds	r3, #144	; 0x90
 8002c26:	443b      	add	r3, r7
 8002c28:	3b8c      	subs	r3, #140	; 0x8c
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	491c      	ldr	r1, [pc, #112]	; (8002ca0 <main+0x1b0>)
 8002c2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	601a      	str	r2, [r3, #0]
	          	  ei_printf("%s:\t%f\n", result.classification[ix].label, cvalue[ix]);
 8002c38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	3390      	adds	r3, #144	; 0x90
 8002c40:	443b      	add	r3, r7
 8002c42:	f853 4c90 	ldr.w	r4, [r3, #-144]
 8002c46:	4a16      	ldr	r2, [pc, #88]	; (8002ca0 <main+0x1b0>)
 8002c48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fd fc82 	bl	800055c <__aeabi_f2d>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4621      	mov	r1, r4
 8002c5e:	4811      	ldr	r0, [pc, #68]	; (8002ca4 <main+0x1b4>)
 8002c60:	f7ff ff33 	bl	8002aca <_Z9ei_printfPKcz>
	           for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8002c64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c68:	3301      	adds	r3, #1
 8002c6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c6e:	e7d2      	b.n	8002c16 <main+0x126>
 8002c70:	2401      	movs	r4, #1
 8002c72:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fe ff06 	bl	8001a88 <_ZN2ei11ei_signal_tD1Ev>
 8002c7c:	2c01      	cmp	r4, #1
 8002c7e:	d100      	bne.n	8002c82 <main+0x192>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  }//while
 8002c80:	e758      	b.n	8002b34 <main+0x44>
  /* USER CODE END 3 */
}//main
 8002c82:	462b      	mov	r3, r5
 8002c84:	4618      	mov	r0, r3
 8002c86:	3790      	adds	r7, #144	; 0x90
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c8c:	20000890 	.word	0x20000890
 8002c90:	200008a0 	.word	0x200008a0
 8002c94:	20000398 	.word	0x20000398
 8002c98:	0801c9d0 	.word	0x0801c9d0
 8002c9c:	0801c9f0 	.word	0x0801c9f0
 8002ca0:	200003e0 	.word	0x200003e0
 8002ca4:	0801ca38 	.word	0x0801ca38

08002ca8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b094      	sub	sp, #80	; 0x50
 8002cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cae:	f107 0320 	add.w	r3, r7, #32
 8002cb2:	2230      	movs	r2, #48	; 0x30
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f018 f852 	bl	801ad60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cbc:	f107 030c 	add.w	r3, r7, #12
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	609a      	str	r2, [r3, #8]
 8002cc8:	60da      	str	r2, [r3, #12]
 8002cca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60bb      	str	r3, [r7, #8]
 8002cd0:	4b2d      	ldr	r3, [pc, #180]	; (8002d88 <_Z18SystemClock_Configv+0xe0>)
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	4a2c      	ldr	r2, [pc, #176]	; (8002d88 <_Z18SystemClock_Configv+0xe0>)
 8002cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cda:	6413      	str	r3, [r2, #64]	; 0x40
 8002cdc:	4b2a      	ldr	r3, [pc, #168]	; (8002d88 <_Z18SystemClock_Configv+0xe0>)
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ce8:	2300      	movs	r3, #0
 8002cea:	607b      	str	r3, [r7, #4]
 8002cec:	4b27      	ldr	r3, [pc, #156]	; (8002d8c <_Z18SystemClock_Configv+0xe4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a26      	ldr	r2, [pc, #152]	; (8002d8c <_Z18SystemClock_Configv+0xe4>)
 8002cf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	4b24      	ldr	r3, [pc, #144]	; (8002d8c <_Z18SystemClock_Configv+0xe4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d00:	607b      	str	r3, [r7, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d04:	2301      	movs	r3, #1
 8002d06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002d18:	2304      	movs	r3, #4
 8002d1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002d1c:	23a8      	movs	r3, #168	; 0xa8
 8002d1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d20:	2302      	movs	r3, #2
 8002d22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002d24:	2307      	movs	r3, #7
 8002d26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d28:	f107 0320 	add.w	r3, r7, #32
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f002 ff55 	bl	8005bdc <HAL_RCC_OscConfig>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	bf14      	ite	ne
 8002d38:	2301      	movne	r3, #1
 8002d3a:	2300      	moveq	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8002d42:	f000 f8d7 	bl	8002ef4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d46:	230f      	movs	r3, #15
 8002d48:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d52:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002d5e:	f107 030c 	add.w	r3, r7, #12
 8002d62:	2105      	movs	r1, #5
 8002d64:	4618      	mov	r0, r3
 8002d66:	f003 f9b1 	bl	80060cc <HAL_RCC_ClockConfig>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	bf14      	ite	ne
 8002d70:	2301      	movne	r3, #1
 8002d72:	2300      	moveq	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8002d7a:	f000 f8bb 	bl	8002ef4 <Error_Handler>
  }
}
 8002d7e:	bf00      	nop
 8002d80:	3750      	adds	r7, #80	; 0x50
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40007000 	.word	0x40007000

08002d90 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002d94:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <_ZL11MX_CRC_Initv+0x28>)
 8002d96:	4a09      	ldr	r2, [pc, #36]	; (8002dbc <_ZL11MX_CRC_Initv+0x2c>)
 8002d98:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002d9a:	4807      	ldr	r0, [pc, #28]	; (8002db8 <_ZL11MX_CRC_Initv+0x28>)
 8002d9c:	f001 facf 	bl	800433e <HAL_CRC_Init>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	bf14      	ite	ne
 8002da6:	2301      	movne	r3, #1
 8002da8:	2300      	moveq	r3, #0
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 8002db0:	f000 f8a0 	bl	8002ef4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002db4:	bf00      	nop
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	20000898 	.word	0x20000898
 8002dbc:	40023000 	.word	0x40023000

08002dc0 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002dc4:	4b1a      	ldr	r3, [pc, #104]	; (8002e30 <_ZL12MX_SPI1_Initv+0x70>)
 8002dc6:	4a1b      	ldr	r2, [pc, #108]	; (8002e34 <_ZL12MX_SPI1_Initv+0x74>)
 8002dc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002dca:	4b19      	ldr	r3, [pc, #100]	; (8002e30 <_ZL12MX_SPI1_Initv+0x70>)
 8002dcc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002dd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002dd2:	4b17      	ldr	r3, [pc, #92]	; (8002e30 <_ZL12MX_SPI1_Initv+0x70>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002dd8:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <_ZL12MX_SPI1_Initv+0x70>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dde:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <_ZL12MX_SPI1_Initv+0x70>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002de4:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <_ZL12MX_SPI1_Initv+0x70>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002dea:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <_ZL12MX_SPI1_Initv+0x70>)
 8002dec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002df0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002df2:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <_ZL12MX_SPI1_Initv+0x70>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002df8:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <_ZL12MX_SPI1_Initv+0x70>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002dfe:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <_ZL12MX_SPI1_Initv+0x70>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e04:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <_ZL12MX_SPI1_Initv+0x70>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002e0a:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <_ZL12MX_SPI1_Initv+0x70>)
 8002e0c:	220a      	movs	r2, #10
 8002e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e10:	4807      	ldr	r0, [pc, #28]	; (8002e30 <_ZL12MX_SPI1_Initv+0x70>)
 8002e12:	f003 fb53 	bl	80064bc <HAL_SPI_Init>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	bf14      	ite	ne
 8002e1c:	2301      	movne	r3, #1
 8002e1e:	2300      	moveq	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8002e26:	f000 f865 	bl	8002ef4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	200008a0 	.word	0x200008a0
 8002e34:	40013000 	.word	0x40013000

08002e38 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08a      	sub	sp, #40	; 0x28
 8002e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e3e:	f107 0314 	add.w	r3, r7, #20
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	605a      	str	r2, [r3, #4]
 8002e48:	609a      	str	r2, [r3, #8]
 8002e4a:	60da      	str	r2, [r3, #12]
 8002e4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	613b      	str	r3, [r7, #16]
 8002e52:	4b26      	ldr	r3, [pc, #152]	; (8002eec <_ZL12MX_GPIO_Initv+0xb4>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	4a25      	ldr	r2, [pc, #148]	; (8002eec <_ZL12MX_GPIO_Initv+0xb4>)
 8002e58:	f043 0310 	orr.w	r3, r3, #16
 8002e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5e:	4b23      	ldr	r3, [pc, #140]	; (8002eec <_ZL12MX_GPIO_Initv+0xb4>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	f003 0310 	and.w	r3, r3, #16
 8002e66:	613b      	str	r3, [r7, #16]
 8002e68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	4b1f      	ldr	r3, [pc, #124]	; (8002eec <_ZL12MX_GPIO_Initv+0xb4>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	4a1e      	ldr	r2, [pc, #120]	; (8002eec <_ZL12MX_GPIO_Initv+0xb4>)
 8002e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e78:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7a:	4b1c      	ldr	r3, [pc, #112]	; (8002eec <_ZL12MX_GPIO_Initv+0xb4>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	4b18      	ldr	r3, [pc, #96]	; (8002eec <_ZL12MX_GPIO_Initv+0xb4>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	4a17      	ldr	r2, [pc, #92]	; (8002eec <_ZL12MX_GPIO_Initv+0xb4>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	6313      	str	r3, [r2, #48]	; 0x30
 8002e96:	4b15      	ldr	r3, [pc, #84]	; (8002eec <_ZL12MX_GPIO_Initv+0xb4>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	607b      	str	r3, [r7, #4]
 8002ea6:	4b11      	ldr	r3, [pc, #68]	; (8002eec <_ZL12MX_GPIO_Initv+0xb4>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	4a10      	ldr	r2, [pc, #64]	; (8002eec <_ZL12MX_GPIO_Initv+0xb4>)
 8002eac:	f043 0302 	orr.w	r3, r3, #2
 8002eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb2:	4b0e      	ldr	r3, [pc, #56]	; (8002eec <_ZL12MX_GPIO_Initv+0xb4>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	607b      	str	r3, [r7, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_0, GPIO_PIN_RESET);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2109      	movs	r1, #9
 8002ec2:	480b      	ldr	r0, [pc, #44]	; (8002ef0 <_ZL12MX_GPIO_Initv+0xb8>)
 8002ec4:	f001 fbf4 	bl	80046b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0;
 8002ec8:	2309      	movs	r3, #9
 8002eca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ed8:	f107 0314 	add.w	r3, r7, #20
 8002edc:	4619      	mov	r1, r3
 8002ede:	4804      	ldr	r0, [pc, #16]	; (8002ef0 <_ZL12MX_GPIO_Initv+0xb8>)
 8002ee0:	f001 fa4a 	bl	8004378 <HAL_GPIO_Init>

}
 8002ee4:	bf00      	nop
 8002ee6:	3728      	adds	r7, #40	; 0x28
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	40021000 	.word	0x40021000

08002ef4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ef8:	b672      	cpsid	i
}
 8002efa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002efc:	e7fe      	b.n	8002efc <Error_Handler+0x8>

08002efe <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8002efe:	b5b0      	push	{r4, r5, r7, lr}
 8002f00:	b082      	sub	sp, #8
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	ed87 0a01 	vstr	s0, [r7, #4]
 8002f08:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7fd fb26 	bl	800055c <__aeabi_f2d>
 8002f10:	4604      	mov	r4, r0
 8002f12:	460d      	mov	r5, r1
 8002f14:	6838      	ldr	r0, [r7, #0]
 8002f16:	f7fd fb0f 	bl	8000538 <__aeabi_i2d>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	ec43 2b11 	vmov	d1, r2, r3
 8002f22:	ec45 4b10 	vmov	d0, r4, r5
 8002f26:	f016 fc89 	bl	801983c <pow>
 8002f2a:	eeb0 7a40 	vmov.f32	s14, s0
 8002f2e:	eef0 7a60 	vmov.f32	s15, s1
    }
 8002f32:	eeb0 0a47 	vmov.f32	s0, s14
 8002f36:	eef0 0a67 	vmov.f32	s1, s15
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bdb0      	pop	{r4, r5, r7, pc}

08002f40 <_ZNSt8functionIFijjPfEEaSIZN2ei5numpy18signal_from_bufferEPKfjPNS4_11ei_signal_tEEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSG_JjjS0_EEEE5valueERS2_E4typeEOSE_>:
       *  If @a __f is a non-NULL function pointer or an object of type @c
       *  reference_wrapper<F>, this function will not throw.
       */
      template<typename _Functor>
	_Requires<_Callable<typename decay<_Functor>::type>, function&>
	operator=(_Functor&& __f)
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
	{
	  function(std::forward<_Functor>(__f)).swap(*this);
 8002f4a:	6838      	ldr	r0, [r7, #0]
 8002f4c:	f000 f8c5 	bl	80030da <_ZSt7forwardIZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EOT_RNSt16remove_referenceIS8_E4typeE>
 8002f50:	4602      	mov	r2, r0
 8002f52:	f107 0308 	add.w	r3, r7, #8
 8002f56:	6811      	ldr	r1, [r2, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 f8c9 	bl	80030f0 <_ZNSt8functionIFijjPfEEC1IZN2ei5numpy18signal_from_bufferEPKfjPNS4_11ei_signal_tEEUljjS0_E_vvEET_>
 8002f5e:	f107 0308 	add.w	r3, r7, #8
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 f8ed 	bl	8003144 <_ZNSt8functionIFijjPfEE4swapERS2_>
 8002f6a:	f107 0308 	add.w	r3, r7, #8
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fe fd70 	bl	8001a54 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8002f74:	687b      	ldr	r3, [r7, #4]
	}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8002f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	603b      	str	r3, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fe fbd8 	bl	8001746 <_ZNKSt14_Function_base8_M_emptyEv>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	__throw_bad_function_call();
 8002f9c:	f7fe fc65 	bl	800186a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	68dc      	ldr	r4, [r3, #12]
 8002fa4:	68fd      	ldr	r5, [r7, #12]
 8002fa6:	f107 0308 	add.w	r3, r7, #8
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 f8eb 	bl	8003186 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8002fb0:	4606      	mov	r6, r0
 8002fb2:	1d3b      	adds	r3, r7, #4
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 f8e6 	bl	8003186 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8002fba:	4680      	mov	r8, r0
 8002fbc:	463b      	mov	r3, r7
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 f8ec 	bl	800319c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	4642      	mov	r2, r8
 8002fc8:	4631      	mov	r1, r6
 8002fca:	4628      	mov	r0, r5
 8002fcc:	47a0      	blx	r4
 8002fce:	4603      	mov	r3, r0
    }
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002fda <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fe fb8d 	bl	8001704 <_ZNSt14_Function_baseC1Ev>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4618      	mov	r0, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>:
	operator=(_Functor&& __f)
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8002ffe:	6838      	ldr	r0, [r7, #0]
 8003000:	f000 f8d7 	bl	80031b2 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8003004:	4602      	mov	r2, r0
 8003006:	f107 0308 	add.w	r3, r7, #8
 800300a:	6811      	ldr	r1, [r2, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f000 f8db 	bl	80031c8 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>
 8003012:	f107 0308 	add.w	r3, r7, #8
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	4618      	mov	r0, r3
 800301a:	f000 f893 	bl	8003144 <_ZNSt8functionIFijjPfEE4swapERS2_>
 800301e:	f107 0308 	add.w	r3, r7, #8
 8003022:	4618      	mov	r0, r3
 8003024:	f7fe fd16 	bl	8001a54 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8003028:	687b      	ldr	r3, [r7, #4]
	}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>:
  template <typename _Tp, typename _Dp,
	    bool = is_move_constructible<_Dp>::value,
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	607a      	str	r2, [r7, #4]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	68b9      	ldr	r1, [r7, #8]
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	4618      	mov	r0, r3
 8003046:	f000 f8f4 	bl	8003232 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>:
       *
       * The deleter will be initialized with @p std::move(__d)
       */
      template<typename _Del = deleter_type,
	       typename = _Require<is_move_constructible<_Del>>>
	unique_ptr(pointer __p,
 8003054:	b590      	push	{r4, r7, lr}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
		   __enable_if_t<!is_lvalue_reference<_Del>::value,
				 _Del&&> __d) noexcept
	: _M_t(__p, std::move(__d))
 8003060:	68fc      	ldr	r4, [r7, #12]
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f8da 	bl	800321c <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>
 8003068:	4603      	mov	r3, r0
 800306a:	461a      	mov	r2, r3
 800306c:	68b9      	ldr	r1, [r7, #8]
 800306e:	4620      	mov	r0, r4
 8003070:	f7ff ffdf 	bl	8003032 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>
	{ }
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4618      	mov	r0, r3
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	bd90      	pop	{r4, r7, pc}

0800307e <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 800307e:	b590      	push	{r4, r7, lr}
 8003080:	b085      	sub	sp, #20
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4618      	mov	r0, r3
 800308a:	f000 f8e8 	bl	800325e <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 800308e:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00b      	beq.n	80030b0 <_ZNSt10unique_ptrIvPFvPvEED1Ev+0x32>
	  get_deleter()(std::move(__ptr));
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f8ed 	bl	8003278 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>
 800309e:	4603      	mov	r3, r0
 80030a0:	681c      	ldr	r4, [r3, #0]
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f8f5 	bl	8003292 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 80030a8:	4603      	mov	r3, r0
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	47a0      	blx	r4
	__ptr = pointer();
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
      }
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4618      	mov	r0, r3
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd90      	pop	{r4, r7, pc}

080030c0 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>:
	return get();
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 f8ec 	bl	80032a8 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 80030d0:	4603      	mov	r3, r0
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <_ZSt7forwardIZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EOT_RNSt16remove_referenceIS8_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4618      	mov	r0, r3
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <_ZNSt8functionIFijjPfEEC1IZN2ei5numpy18signal_from_bufferEPKfjPNS4_11ei_signal_tEEUljjS0_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 80030f0:	b590      	push	{r4, r7, lr}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fe fb01 	bl	8001704 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8003102:	463b      	mov	r3, r7
 8003104:	4618      	mov	r0, r3
 8003106:	f000 f8dd 	bl	80032c4 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E21_M_not_empty_functionIS8_EEbRKT_>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00f      	beq.n	8003130 <_ZNSt8functionIFijjPfEEC1IZN2ei5numpy18signal_from_bufferEPKfjPNS4_11ei_signal_tEEUljjS0_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8003110:	687c      	ldr	r4, [r7, #4]
 8003112:	463b      	mov	r3, r7
 8003114:	4618      	mov	r0, r3
 8003116:	f000 f8e0 	bl	80032da <_ZSt4moveIRZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EONSt16remove_referenceIT_E4typeEOSA_>
 800311a:	4603      	mov	r3, r0
 800311c:	4619      	mov	r1, r3
 800311e:	4620      	mov	r0, r4
 8003120:	f000 f8e6 	bl	80032f0 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E15_M_init_functorERSt9_Any_dataOS8_>
	    _M_invoker = &_My_handler::_M_invoke;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a05      	ldr	r2, [pc, #20]	; (800313c <_ZNSt8functionIFijjPfEEC1IZN2ei5numpy18signal_from_bufferEPKfjPNS4_11ei_signal_tEEUljjS0_E_vvEET_+0x4c>)
 8003128:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a04      	ldr	r2, [pc, #16]	; (8003140 <_ZNSt8functionIFijjPfEEC1IZN2ei5numpy18signal_from_bufferEPKfjPNS4_11ei_signal_tEEUljjS0_E_vvEET_+0x50>)
 800312e:	609a      	str	r2, [r3, #8]
      }
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4618      	mov	r0, r3
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	bd90      	pop	{r4, r7, pc}
 800313a:	bf00      	nop
 800313c:	08003315 	.word	0x08003315
 8003140:	08003357 	.word	0x08003357

08003144 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	4611      	mov	r1, r2
 8003154:	4618      	mov	r0, r3
 8003156:	f000 f928 	bl	80033aa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f103 0208 	add.w	r2, r3, #8
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	3308      	adds	r3, #8
 8003164:	4619      	mov	r1, r3
 8003166:	4610      	mov	r0, r2
 8003168:	f000 f951 	bl	800340e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f103 020c 	add.w	r2, r3, #12
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	330c      	adds	r3, #12
 8003176:	4619      	mov	r1, r3
 8003178:	4610      	mov	r0, r2
 800317a:	f000 f972 	bl	8003462 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4618      	mov	r0, r3
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 80031c8:	b590      	push	{r4, r7, lr}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fe fa95 	bl	8001704 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80031da:	463b      	mov	r3, r7
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 f95f 	bl	80034a0 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00f      	beq.n	8003208 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80031e8:	687c      	ldr	r4, [r7, #4]
 80031ea:	463b      	mov	r3, r7
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 f962 	bl	80034b6 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 80031f2:	4603      	mov	r3, r0
 80031f4:	4619      	mov	r1, r3
 80031f6:	4620      	mov	r0, r4
 80031f8:	f000 f968 	bl	80034cc <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a05      	ldr	r2, [pc, #20]	; (8003214 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x4c>)
 8003200:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a04      	ldr	r2, [pc, #16]	; (8003218 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x50>)
 8003206:	609a      	str	r2, [r3, #8]
      }
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4618      	mov	r0, r3
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	bd90      	pop	{r4, r7, pc}
 8003212:	bf00      	nop
 8003214:	080034f1 	.word	0x080034f1
 8003218:	08003533 	.word	0x08003533

0800321c <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4618      	mov	r0, r3
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8003232:	b590      	push	{r4, r7, lr}
 8003234:	b085      	sub	sp, #20
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800323e:	68fc      	ldr	r4, [r7, #12]
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f995 	bl	8003570 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003246:	4602      	mov	r2, r0
 8003248:	f107 0308 	add.w	r3, r7, #8
 800324c:	4619      	mov	r1, r3
 800324e:	4620      	mov	r0, r4
 8003250:	f000 f999 	bl	8003586 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4618      	mov	r0, r3
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	bd90      	pop	{r4, r7, pc}

0800325e <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4618      	mov	r0, r3
 800326a:	f000 f9a5 	bl	80035b8 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 800326e:	4603      	mov	r3, r0
 8003270:	4618      	mov	r0, r3
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>:

      /// Return a reference to the stored deleter.
      deleter_type&
      get_deleter() noexcept
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4618      	mov	r0, r3
 8003284:	f000 f9a5 	bl	80035d2 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 8003288:	4603      	mov	r3, r0
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4618      	mov	r0, r3
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 f99a 	bl	80035ec <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>
 80032b8:	4603      	mov	r3, r0
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E21_M_not_empty_functionIS8_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
	  { return true; }
 80032cc:	2301      	movs	r3, #1
 80032ce:	4618      	mov	r0, r3
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <_ZSt4moveIRZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4618      	mov	r0, r3
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E15_M_init_functorERSt9_Any_dataOS8_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80032f0:	b590      	push	{r4, r7, lr}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80032fa:	6838      	ldr	r0, [r7, #0]
 80032fc:	f7ff ffed 	bl	80032da <_ZSt4moveIRZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EONSt16remove_referenceIT_E4typeEOSA_>
 8003300:	4603      	mov	r3, r0
 8003302:	4622      	mov	r2, r4
 8003304:	4619      	mov	r1, r3
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f97d 	bl	8003606 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E15_M_init_functorERSt9_Any_dataOS8_St17integral_constantIbLb1EE>
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	bd90      	pop	{r4, r7, pc}

08003314 <_ZNSt17_Function_handlerIFijjPfEZN2ei5numpy18signal_from_bufferEPKfjPNS2_11ei_signal_tEEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjSD_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8003314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 f988 	bl	8003638 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8003328:	4604      	mov	r4, r0
 800332a:	68b8      	ldr	r0, [r7, #8]
 800332c:	f7ff ff2b 	bl	8003186 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003330:	4605      	mov	r5, r0
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7ff ff27 	bl	8003186 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003338:	4606      	mov	r6, r0
 800333a:	6838      	ldr	r0, [r7, #0]
 800333c:	f7ff ff2e 	bl	800319c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8003340:	4603      	mov	r3, r0
 8003342:	4632      	mov	r2, r6
 8003344:	4629      	mov	r1, r5
 8003346:	4620      	mov	r0, r4
 8003348:	f000 f987 	bl	800365a <_ZSt10__invoke_rIiRZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_JjjS6_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeESD_EEE5valueESD_E4typeEOSI_DpOSJ_>
 800334c:	4603      	mov	r3, r0
      }
 800334e:	4618      	mov	r0, r3
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003356 <_ZNSt17_Function_handlerIFijjPfEZN2ei5numpy18signal_from_bufferEPKfjPNS2_11ei_signal_tEEUljjS0_E_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8003356:	b590      	push	{r4, r7, lr}
 8003358:	b085      	sub	sp, #20
 800335a:	af00      	add	r7, sp, #0
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	4613      	mov	r3, r2
 8003362:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8003364:	79fb      	ldrb	r3, [r7, #7]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d109      	bne.n	800337e <_ZNSt17_Function_handlerIFijjPfEZN2ei5numpy18signal_from_bufferEPKfjPNS2_11ei_signal_tEEUljjS0_E_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 f99a 	bl	80036a4 <_ZNSt9_Any_data9_M_accessIPZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_EERT_v>
 8003370:	4604      	mov	r4, r0
 8003372:	68b8      	ldr	r0, [r7, #8]
 8003374:	f000 f960 	bl	8003638 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8003378:	4603      	mov	r3, r0
 800337a:	6023      	str	r3, [r4, #0]
	    break;
 800337c:	e005      	b.n	800338a <_ZNSt17_Function_handlerIFijjPfEZN2ei5numpy18signal_from_bufferEPKfjPNS2_11ei_signal_tEEUljjS0_E_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	461a      	mov	r2, r3
 8003382:	68b9      	ldr	r1, [r7, #8]
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 f999 	bl	80036bc <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>
	return false;
 800338a:	2300      	movs	r3, #0
      }
 800338c:	4618      	mov	r0, r3
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	bd90      	pop	{r4, r7, pc}

08003394 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4618      	mov	r0, r3
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b084      	sub	sp, #16
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff ffed 	bl	8003394 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80033ba:	4602      	mov	r2, r0
 80033bc:	f107 0308 	add.w	r3, r7, #8
 80033c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033c4:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80033c8:	6838      	ldr	r0, [r7, #0]
 80033ca:	f7ff ffe3 	bl	8003394 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80033ce:	4602      	mov	r2, r0
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033d6:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80033da:	f107 0308 	add.w	r3, r7, #8
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff ffd8 	bl	8003394 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80033e4:	4602      	mov	r2, r0
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033ec:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80033f0:	bf00      	nop
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800340e:	b580      	push	{r7, lr}
 8003410:	b084      	sub	sp, #16
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7ff ffed 	bl	80033f8 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800341e:	4603      	mov	r3, r0
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8003424:	6838      	ldr	r0, [r7, #0]
 8003426:	f7ff ffe7 	bl	80033f8 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800342a:	4603      	mov	r3, r0
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8003432:	f107 030c 	add.w	r3, r7, #12
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff ffde 	bl	80033f8 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800343c:	4603      	mov	r3, r0
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	601a      	str	r2, [r3, #0]
    }
 8003444:	bf00      	nop
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4618      	mov	r0, r3
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 8003462:	b580      	push	{r7, lr}
 8003464:	b084      	sub	sp, #16
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff ffed 	bl	800344c <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8003472:	4603      	mov	r3, r0
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8003478:	6838      	ldr	r0, [r7, #0]
 800347a:	f7ff ffe7 	bl	800344c <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800347e:	4603      	mov	r3, r0
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8003486:	f107 030c 	add.w	r3, r7, #12
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff ffde 	bl	800344c <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8003490:	4603      	mov	r3, r0
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	601a      	str	r2, [r3, #0]
    }
 8003498:	bf00      	nop
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
	  { return true; }
 80034a8:	2301      	movs	r3, #1
 80034aa:	4618      	mov	r0, r3
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4618      	mov	r0, r3
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80034cc:	b590      	push	{r4, r7, lr}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80034d6:	6838      	ldr	r0, [r7, #0]
 80034d8:	f7ff ffed 	bl	80034b6 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 80034dc:	4603      	mov	r3, r0
 80034de:	4622      	mov	r2, r4
 80034e0:	4619      	mov	r1, r3
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f929 	bl	800373a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd90      	pop	{r4, r7, pc}

080034f0 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80034f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 f934 	bl	800376c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8003504:	4604      	mov	r4, r0
 8003506:	68b8      	ldr	r0, [r7, #8]
 8003508:	f7ff fe3d 	bl	8003186 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800350c:	4605      	mov	r5, r0
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff fe39 	bl	8003186 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003514:	4606      	mov	r6, r0
 8003516:	6838      	ldr	r0, [r7, #0]
 8003518:	f7ff fe40 	bl	800319c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800351c:	4603      	mov	r3, r0
 800351e:	4632      	mov	r2, r6
 8003520:	4629      	mov	r1, r5
 8003522:	4620      	mov	r0, r4
 8003524:	f000 f933 	bl	800378e <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 8003528:	4603      	mov	r3, r0
      }
 800352a:	4618      	mov	r0, r3
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003532 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8003532:	b590      	push	{r4, r7, lr}
 8003534:	b085      	sub	sp, #20
 8003536:	af00      	add	r7, sp, #0
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	4613      	mov	r3, r2
 800353e:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d109      	bne.n	800355a <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 f946 	bl	80037d8 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 800354c:	4604      	mov	r4, r0
 800354e:	68b8      	ldr	r0, [r7, #8]
 8003550:	f000 f90c 	bl	800376c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8003554:	4603      	mov	r3, r0
 8003556:	6023      	str	r3, [r4, #0]
	    break;
 8003558:	e005      	b.n	8003566 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800355a:	79fb      	ldrb	r3, [r7, #7]
 800355c:	461a      	mov	r2, r3
 800355e:	68b9      	ldr	r1, [r7, #8]
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f945 	bl	80037f0 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 8003566:	2300      	movs	r3, #0
      }
 8003568:	4618      	mov	r0, r3
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	bd90      	pop	{r4, r7, pc}

08003570 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4618      	mov	r0, r3
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>:
	: _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2,
	       _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
	constexpr
	tuple(_U1&& __a1, _U2&& __a2)
 8003586:	b5b0      	push	{r4, r5, r7, lr}
 8003588:	b084      	sub	sp, #16
 800358a:	af00      	add	r7, sp, #0
 800358c:	60f8      	str	r0, [r7, #12]
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	607a      	str	r2, [r7, #4]
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8003592:	68fc      	ldr	r4, [r7, #12]
 8003594:	68b8      	ldr	r0, [r7, #8]
 8003596:	f000 f956 	bl	8003846 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 800359a:	4605      	mov	r5, r0
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff ffe7 	bl	8003570 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 80035a2:	4603      	mov	r3, r0
 80035a4:	461a      	mov	r2, r3
 80035a6:	4629      	mov	r1, r5
 80035a8:	4620      	mov	r0, r4
 80035aa:	f000 f957 	bl	800385c <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bdb0      	pop	{r4, r5, r7, pc}

080035b8 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 f968 	bl	8003898 <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80035c8:	4603      	mov	r3, r0
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 f967 	bl	80038b0 <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 80035e2:	4603      	mov	r3, r0
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 f967 	bl	80038ca <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80035fc:	4603      	mov	r3, r0
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E15_M_init_functorERSt9_Any_dataOS8_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8003606:	b590      	push	{r4, r7, lr}
 8003608:	b085      	sub	sp, #20
 800360a:	af00      	add	r7, sp, #0
 800360c:	60f8      	str	r0, [r7, #12]
 800360e:	60b9      	str	r1, [r7, #8]
 8003610:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8003612:	68b8      	ldr	r0, [r7, #8]
 8003614:	f7ff fe61 	bl	80032da <_ZSt4moveIRZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EONSt16remove_referenceIT_E4typeEOSA_>
 8003618:	4604      	mov	r4, r0
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f7fe f85c 	bl	80016d8 <_ZNSt9_Any_data9_M_accessEv>
 8003620:	4603      	mov	r3, r0
 8003622:	4619      	mov	r1, r3
 8003624:	2004      	movs	r0, #4
 8003626:	f7fe f84b 	bl	80016c0 <_ZnwjPv>
 800362a:	4602      	mov	r2, r0
 800362c:	6823      	ldr	r3, [r4, #0]
 800362e:	6013      	str	r3, [r2, #0]
 8003630:	bf00      	nop
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	bd90      	pop	{r4, r7, pc}

08003638 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f94e 	bl	80038e2 <_ZNKSt9_Any_data9_M_accessIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_EERKT_v>
 8003646:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 f956 	bl	80038fa <_ZSt11__addressofIKZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EPT_RS9_>
 800364e:	4603      	mov	r3, r0
 8003650:	bf00      	nop
	}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <_ZSt10__invoke_rIiRZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_JjjS6_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeESD_EEE5valueESD_E4typeEOSI_DpOSJ_>:
    >;

  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_nonvoid<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800365a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af02      	add	r7, sp, #8
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 f950 	bl	8003910 <_ZSt7forwardIRZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EOT_RNSt16remove_referenceIS9_E4typeE>
 8003670:	4604      	mov	r4, r0
 8003672:	68b8      	ldr	r0, [r7, #8]
 8003674:	f7ff fd87 	bl	8003186 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003678:	4605      	mov	r5, r0
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7ff fd83 	bl	8003186 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003680:	4606      	mov	r6, r0
 8003682:	6838      	ldr	r0, [r7, #0]
 8003684:	f7ff fd8a 	bl	800319c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8003688:	4603      	mov	r3, r0
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	4633      	mov	r3, r6
 800368e:	462a      	mov	r2, r5
 8003690:	4621      	mov	r1, r4
 8003692:	4640      	mov	r0, r8
 8003694:	f000 f947 	bl	8003926 <_ZSt13__invoke_implIiRZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_JjjS6_EET_St14__invoke_otherOT0_DpOT1_>
 8003698:	4603      	mov	r3, r0
					std::forward<_Args>(__args)...);
    }
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080036a4 <_ZNSt9_Any_data9_M_accessIPZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_EERT_v>:
      _M_access()
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7fe f813 	bl	80016d8 <_ZNSt9_Any_data9_M_accessEv>
 80036b2:	4603      	mov	r3, r0
 80036b4:	4618      	mov	r0, r3
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80036bc:	b5b0      	push	{r4, r5, r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	4613      	mov	r3, r2
 80036c8:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	d016      	beq.n	80036fe <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	dc19      	bgt.n	8003708 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x4c>
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d002      	beq.n	80036de <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x22>
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d00a      	beq.n	80036f2 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x36>
 80036dc:	e014      	b.n	8003708 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f7ff ffe0 	bl	80036a4 <_ZNSt9_Any_data9_M_accessIPZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_EERT_v>
 80036e4:	4604      	mov	r4, r0
 80036e6:	68b8      	ldr	r0, [r7, #8]
 80036e8:	f7ff ffa6 	bl	8003638 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 80036ec:	4603      	mov	r3, r0
 80036ee:	6023      	str	r3, [r4, #0]
	      break;
 80036f0:	e00a      	b.n	8003708 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 80036f2:	462a      	mov	r2, r5
 80036f4:	68b9      	ldr	r1, [r7, #8]
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 f939 	bl	800396e <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E8_M_cloneERSt9_Any_dataRKSA_St17integral_constantIbLb1EE>
	      break;
 80036fc:	e004      	b.n	8003708 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 80036fe:	4621      	mov	r1, r4
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 f94d 	bl	80039a0 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8003706:	bf00      	nop
	  return false;
 8003708:	2300      	movs	r3, #0
	}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bdb0      	pop	{r4, r5, r7, pc}

08003712 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
 800371a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d201      	bcs.n	800372c <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	e000      	b.n	800372e <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800372c:	687b      	ldr	r3, [r7, #4]
    }
 800372e:	4618      	mov	r0, r3
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800373a:	b590      	push	{r4, r7, lr}
 800373c:	b085      	sub	sp, #20
 800373e:	af00      	add	r7, sp, #0
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8003746:	68b8      	ldr	r0, [r7, #8]
 8003748:	f7ff feb5 	bl	80034b6 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 800374c:	4604      	mov	r4, r0
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f7fd ffc2 	bl	80016d8 <_ZNSt9_Any_data9_M_accessEv>
 8003754:	4603      	mov	r3, r0
 8003756:	4619      	mov	r1, r3
 8003758:	2004      	movs	r0, #4
 800375a:	f7fd ffb1 	bl	80016c0 <_ZnwjPv>
 800375e:	4602      	mov	r2, r0
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	6013      	str	r3, [r2, #0]
 8003764:	bf00      	nop
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	bd90      	pop	{r4, r7, pc}

0800376c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f91f 	bl	80039b8 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 800377a:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 f927 	bl	80039d0 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>
 8003782:	4603      	mov	r3, r0
 8003784:	bf00      	nop
	}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800378e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af02      	add	r7, sp, #8
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
 800379c:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f921 	bl	80039e6 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 80037a4:	4604      	mov	r4, r0
 80037a6:	68b8      	ldr	r0, [r7, #8]
 80037a8:	f7ff fced 	bl	8003186 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80037ac:	4605      	mov	r5, r0
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7ff fce9 	bl	8003186 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80037b4:	4606      	mov	r6, r0
 80037b6:	6838      	ldr	r0, [r7, #0]
 80037b8:	f7ff fcf0 	bl	800319c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 80037bc:	4603      	mov	r3, r0
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	4633      	mov	r3, r6
 80037c2:	462a      	mov	r2, r5
 80037c4:	4621      	mov	r1, r4
 80037c6:	4640      	mov	r0, r8
 80037c8:	f000 f918 	bl	80039fc <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>
 80037cc:	4603      	mov	r3, r0
    }
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080037d8 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7fd ff79 	bl	80016d8 <_ZNSt9_Any_data9_M_accessEv>
 80037e6:	4603      	mov	r3, r0
 80037e8:	4618      	mov	r0, r3
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80037f0:	b5b0      	push	{r4, r5, r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	4613      	mov	r3, r2
 80037fc:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80037fe:	79fb      	ldrb	r3, [r7, #7]
 8003800:	2b03      	cmp	r3, #3
 8003802:	d016      	beq.n	8003832 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8003804:	2b03      	cmp	r3, #3
 8003806:	dc19      	bgt.n	800383c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8003808:	2b01      	cmp	r3, #1
 800380a:	d002      	beq.n	8003812 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 800380c:	2b02      	cmp	r3, #2
 800380e:	d00a      	beq.n	8003826 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8003810:	e014      	b.n	800383c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f7ff ffe0 	bl	80037d8 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8003818:	4604      	mov	r4, r0
 800381a:	68b8      	ldr	r0, [r7, #8]
 800381c:	f7ff ffa6 	bl	800376c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8003820:	4603      	mov	r3, r0
 8003822:	6023      	str	r3, [r4, #0]
	      break;
 8003824:	e00a      	b.n	800383c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8003826:	462a      	mov	r2, r5
 8003828:	68b9      	ldr	r1, [r7, #8]
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 f90a 	bl	8003a44 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8003830:	e004      	b.n	800383c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8003832:	4621      	mov	r1, r4
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 f91e 	bl	8003a76 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800383a:	bf00      	nop
	  return false;
 800383c:	2300      	movs	r3, #0
	}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bdb0      	pop	{r4, r5, r7, pc}

08003846 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4618      	mov	r0, r3
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800385c:	b590      	push	{r4, r7, lr}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8003868:	68fc      	ldr	r4, [r7, #12]
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff fe80 	bl	8003570 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003870:	4603      	mov	r3, r0
 8003872:	4619      	mov	r1, r3
 8003874:	4620      	mov	r0, r4
 8003876:	f000 f90a 	bl	8003a8e <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1d1c      	adds	r4, r3, #4
 800387e:	68b8      	ldr	r0, [r7, #8]
 8003880:	f7ff ffe1 	bl	8003846 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8003884:	4603      	mov	r3, r0
 8003886:	4619      	mov	r1, r3
 8003888:	4620      	mov	r0, r4
 800388a:	f000 f913 	bl	8003ab4 <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4618      	mov	r0, r3
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	bd90      	pop	{r4, r7, pc}

08003898 <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f918 	bl	8003ad6 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>
 80038a6:	4603      	mov	r3, r0
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 f919 	bl	8003af2 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80038c0:	4603      	mov	r3, r0
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b082      	sub	sp, #8
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f919 	bl	8003b0a <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>
 80038d8:	4603      	mov	r3, r0
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <_ZNKSt9_Any_data9_M_accessIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_EERKT_v>:
      _M_access() const
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b082      	sub	sp, #8
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fd feff 	bl	80016ee <_ZNKSt9_Any_data9_M_accessEv>
 80038f0:	4603      	mov	r3, r0
 80038f2:	4618      	mov	r0, r3
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <_ZSt11__addressofIKZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EPT_RS9_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4618      	mov	r0, r3
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <_ZSt7forwardIRZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4618      	mov	r0, r3
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <_ZSt13__invoke_implIiRZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_JjjS6_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8003926:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003928:	b085      	sub	sp, #20
 800392a:	af00      	add	r7, sp, #0
 800392c:	7338      	strb	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
 8003932:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8003934:	68b8      	ldr	r0, [r7, #8]
 8003936:	f7ff ffeb 	bl	8003910 <_ZSt7forwardIRZN2ei5numpy18signal_from_bufferEPKfjPNS0_11ei_signal_tEEUljjPfE_EOT_RNSt16remove_referenceIS9_E4typeE>
 800393a:	4606      	mov	r6, r0
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff fc22 	bl	8003186 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003942:	4603      	mov	r3, r0
 8003944:	681c      	ldr	r4, [r3, #0]
 8003946:	6838      	ldr	r0, [r7, #0]
 8003948:	f7ff fc1d 	bl	8003186 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800394c:	4603      	mov	r3, r0
 800394e:	681d      	ldr	r5, [r3, #0]
 8003950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003952:	f7ff fc23 	bl	800319c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8003956:	4603      	mov	r3, r0
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	462a      	mov	r2, r5
 800395c:	4621      	mov	r1, r4
 800395e:	4630      	mov	r0, r6
 8003960:	f7fe f838 	bl	80019d4 <_ZZN2ei5numpy18signal_from_bufferEPKfjPNS_11ei_signal_tEENKUljjPfE_clEjjS5_>
 8003964:	4603      	mov	r3, r0
 8003966:	4618      	mov	r0, r3
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800396e <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E8_M_cloneERSt9_Any_dataRKSA_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800396e:	b590      	push	{r4, r7, lr}
 8003970:	b085      	sub	sp, #20
 8003972:	af00      	add	r7, sp, #0
 8003974:	60f8      	str	r0, [r7, #12]
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800397a:	68b8      	ldr	r0, [r7, #8]
 800397c:	f7ff ffb1 	bl	80038e2 <_ZNKSt9_Any_data9_M_accessIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_EERKT_v>
 8003980:	4604      	mov	r4, r0
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f7fd fea8 	bl	80016d8 <_ZNSt9_Any_data9_M_accessEv>
 8003988:	4603      	mov	r3, r0
 800398a:	4619      	mov	r1, r3
 800398c:	2004      	movs	r0, #4
 800398e:	f7fd fe97 	bl	80016c0 <_ZnwjPv>
 8003992:	4602      	mov	r2, r0
 8003994:	6823      	ldr	r3, [r4, #0]
 8003996:	6013      	str	r3, [r2, #0]
	}
 8003998:	bf00      	nop
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	bd90      	pop	{r4, r7, pc}

080039a0 <_ZNSt14_Function_base13_Base_managerIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f8bb 	bl	8003b26 <_ZNSt9_Any_data9_M_accessIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_EERT_v>
	}
 80039b0:	bf00      	nop
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7fd fe94 	bl	80016ee <_ZNKSt9_Any_data9_M_accessEv>
 80039c6:	4603      	mov	r3, r0
 80039c8:	4618      	mov	r0, r3
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4618      	mov	r0, r3
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4618      	mov	r0, r3
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80039fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	7338      	strb	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
 8003a08:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8003a0a:	68b8      	ldr	r0, [r7, #8]
 8003a0c:	f7ff ffeb 	bl	80039e6 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8003a10:	4606      	mov	r6, r0
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff fbb7 	bl	8003186 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	681c      	ldr	r4, [r3, #0]
 8003a1c:	6838      	ldr	r0, [r7, #0]
 8003a1e:	f7ff fbb2 	bl	8003186 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8003a22:	4603      	mov	r3, r0
 8003a24:	681d      	ldr	r5, [r3, #0]
 8003a26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a28:	f7ff fbb8 	bl	800319c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	462a      	mov	r2, r5
 8003a32:	4621      	mov	r1, r4
 8003a34:	4630      	mov	r0, r6
 8003a36:	f7fe fa71 	bl	8001f1c <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a44 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8003a44:	b590      	push	{r4, r7, lr}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8003a50:	68b8      	ldr	r0, [r7, #8]
 8003a52:	f7ff ffb1 	bl	80039b8 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8003a56:	4604      	mov	r4, r0
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f7fd fe3d 	bl	80016d8 <_ZNSt9_Any_data9_M_accessEv>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	4619      	mov	r1, r3
 8003a62:	2004      	movs	r0, #4
 8003a64:	f7fd fe2c 	bl	80016c0 <_ZnwjPv>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	6013      	str	r3, [r2, #0]
	}
 8003a6e:	bf00      	nop
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd90      	pop	{r4, r7, pc}

08003a76 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b082      	sub	sp, #8
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f870 	bl	8003b66 <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
	}
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8003a8e:	b590      	push	{r4, r7, lr}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
 8003a96:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8003a98:	687c      	ldr	r4, [r7, #4]
 8003a9a:	6838      	ldr	r0, [r7, #0]
 8003a9c:	f7ff fd68 	bl	8003570 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	f000 f86a 	bl	8003b7e <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4618      	mov	r0, r3
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd90      	pop	{r4, r7, pc}

08003ab4 <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8003abe:	6838      	ldr	r0, [r7, #0]
 8003ac0:	f7ff fec1 	bl	8003846 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 f85c 	bl	8003ba0 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f85b 	bl	8003bb6 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>
 8003b00:	4603      	mov	r3, r0
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b082      	sub	sp, #8
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3304      	adds	r3, #4
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 f85a 	bl	8003bd0 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <_ZNSt9_Any_data9_M_accessIZN2ei5numpy18signal_from_bufferEPKfjPNS1_11ei_signal_tEEUljjPfE_EERT_v>:
      _M_access()
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b082      	sub	sp, #8
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fd fdd2 	bl	80016d8 <_ZNSt9_Any_data9_M_accessEv>
 8003b34:	4603      	mov	r3, r0
 8003b36:	4618      	mov	r0, r3
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
 8003b46:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d201      	bcs.n	8003b58 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	e000      	b.n	8003b5a <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8003b58:	687b      	ldr	r3, [r7, #4]
    }
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fd fdb2 	bl	80016d8 <_ZNSt9_Any_data9_M_accessEv>
 8003b74:	4603      	mov	r3, r0
 8003b76:	4618      	mov	r0, r3
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b082      	sub	sp, #8
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
 8003b86:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8003b88:	6838      	ldr	r0, [r7, #0]
 8003b8a:	f7ff fcf1 	bl	8003570 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4618      	mov	r0, r3
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 f810 	bl	8003be6 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003bfc:	b5b0      	push	{r4, r5, r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d116      	bne.n	8003c3a <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d111      	bne.n	8003c3a <_Z41__static_initialization_and_destruction_0ii+0x3e>
static int64_t time_between_samples_us = (1000000 / (sampling_freq - 1));
 8003c16:	4b0b      	ldr	r3, [pc, #44]	; (8003c44 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1c:	1e54      	subs	r4, r2, #1
 8003c1e:	f143 35ff 	adc.w	r5, r3, #4294967295
 8003c22:	4622      	mov	r2, r4
 8003c24:	462b      	mov	r3, r5
 8003c26:	4808      	ldr	r0, [pc, #32]	; (8003c48 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003c28:	f04f 0100 	mov.w	r1, #0
 8003c2c:	f7fd f836 	bl	8000c9c <__aeabi_ldivmod>
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	4905      	ldr	r1, [pc, #20]	; (8003c4c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003c36:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003c3a:	bf00      	nop
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bdb0      	pop	{r4, r5, r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000050 	.word	0x20000050
 8003c48:	000f4240 	.word	0x000f4240
 8003c4c:	20000390 	.word	0x20000390

08003c50 <_GLOBAL__sub_I_ei_classifier_inferencing_categories>:
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c58:	2001      	movs	r0, #1
 8003c5a:	f7ff ffcf 	bl	8003bfc <_Z41__static_initialization_and_destruction_0ii>
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c66:	2300      	movs	r3, #0
 8003c68:	607b      	str	r3, [r7, #4]
 8003c6a:	4b10      	ldr	r3, [pc, #64]	; (8003cac <HAL_MspInit+0x4c>)
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	4a0f      	ldr	r2, [pc, #60]	; (8003cac <HAL_MspInit+0x4c>)
 8003c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c74:	6453      	str	r3, [r2, #68]	; 0x44
 8003c76:	4b0d      	ldr	r3, [pc, #52]	; (8003cac <HAL_MspInit+0x4c>)
 8003c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c7e:	607b      	str	r3, [r7, #4]
 8003c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c82:	2300      	movs	r3, #0
 8003c84:	603b      	str	r3, [r7, #0]
 8003c86:	4b09      	ldr	r3, [pc, #36]	; (8003cac <HAL_MspInit+0x4c>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	4a08      	ldr	r2, [pc, #32]	; (8003cac <HAL_MspInit+0x4c>)
 8003c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c90:	6413      	str	r3, [r2, #64]	; 0x40
 8003c92:	4b06      	ldr	r3, [pc, #24]	; (8003cac <HAL_MspInit+0x4c>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	603b      	str	r3, [r7, #0]
 8003c9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40023800 	.word	0x40023800

08003cb0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a0b      	ldr	r2, [pc, #44]	; (8003cec <HAL_CRC_MspInit+0x3c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d10d      	bne.n	8003cde <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	4b0a      	ldr	r3, [pc, #40]	; (8003cf0 <HAL_CRC_MspInit+0x40>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	4a09      	ldr	r2, [pc, #36]	; (8003cf0 <HAL_CRC_MspInit+0x40>)
 8003ccc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cd2:	4b07      	ldr	r3, [pc, #28]	; (8003cf0 <HAL_CRC_MspInit+0x40>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003cde:	bf00      	nop
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40023000 	.word	0x40023000
 8003cf0:	40023800 	.word	0x40023800

08003cf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08a      	sub	sp, #40	; 0x28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cfc:	f107 0314 	add.w	r3, r7, #20
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	605a      	str	r2, [r3, #4]
 8003d06:	609a      	str	r2, [r3, #8]
 8003d08:	60da      	str	r2, [r3, #12]
 8003d0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a19      	ldr	r2, [pc, #100]	; (8003d78 <HAL_SPI_MspInit+0x84>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d12b      	bne.n	8003d6e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d16:	2300      	movs	r3, #0
 8003d18:	613b      	str	r3, [r7, #16]
 8003d1a:	4b18      	ldr	r3, [pc, #96]	; (8003d7c <HAL_SPI_MspInit+0x88>)
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1e:	4a17      	ldr	r2, [pc, #92]	; (8003d7c <HAL_SPI_MspInit+0x88>)
 8003d20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d24:	6453      	str	r3, [r2, #68]	; 0x44
 8003d26:	4b15      	ldr	r3, [pc, #84]	; (8003d7c <HAL_SPI_MspInit+0x88>)
 8003d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d2e:	613b      	str	r3, [r7, #16]
 8003d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	4b11      	ldr	r3, [pc, #68]	; (8003d7c <HAL_SPI_MspInit+0x88>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	4a10      	ldr	r2, [pc, #64]	; (8003d7c <HAL_SPI_MspInit+0x88>)
 8003d3c:	f043 0301 	orr.w	r3, r3, #1
 8003d40:	6313      	str	r3, [r2, #48]	; 0x30
 8003d42:	4b0e      	ldr	r3, [pc, #56]	; (8003d7c <HAL_SPI_MspInit+0x88>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003d4e:	23e0      	movs	r3, #224	; 0xe0
 8003d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d52:	2302      	movs	r3, #2
 8003d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d5e:	2305      	movs	r3, #5
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d62:	f107 0314 	add.w	r3, r7, #20
 8003d66:	4619      	mov	r1, r3
 8003d68:	4805      	ldr	r0, [pc, #20]	; (8003d80 <HAL_SPI_MspInit+0x8c>)
 8003d6a:	f000 fb05 	bl	8004378 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003d6e:	bf00      	nop
 8003d70:	3728      	adds	r7, #40	; 0x28
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40013000 	.word	0x40013000
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	40020000 	.word	0x40020000

08003d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d88:	e7fe      	b.n	8003d88 <NMI_Handler+0x4>

08003d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d8e:	e7fe      	b.n	8003d8e <HardFault_Handler+0x4>

08003d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d94:	e7fe      	b.n	8003d94 <MemManage_Handler+0x4>

08003d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d96:	b480      	push	{r7}
 8003d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d9a:	e7fe      	b.n	8003d9a <BusFault_Handler+0x4>

08003d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003da0:	e7fe      	b.n	8003da0 <UsageFault_Handler+0x4>

08003da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003da2:	b480      	push	{r7}
 8003da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003da6:	bf00      	nop
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003db4:	bf00      	nop
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dc2:	bf00      	nop
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003dd0:	f000 f960 	bl	8004094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003dd4:	bf00      	nop
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003ddc:	4802      	ldr	r0, [pc, #8]	; (8003de8 <OTG_FS_IRQHandler+0x10>)
 8003dde:	f000 fdd0 	bl	8004982 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003de2:	bf00      	nop
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20002290 	.word	0x20002290

08003dec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
	return 1;
 8003df0:	2301      	movs	r3, #1
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <_kill>:

int _kill(int pid, int sig)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003e06:	f016 ff33 	bl	801ac70 <__errno>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2216      	movs	r2, #22
 8003e0e:	601a      	str	r2, [r3, #0]
	return -1;
 8003e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <_exit>:

void _exit (int status)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003e24:	f04f 31ff 	mov.w	r1, #4294967295
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7ff ffe7 	bl	8003dfc <_kill>
	while (1) {}		/* Make sure we hang here */
 8003e2e:	e7fe      	b.n	8003e2e <_exit+0x12>

08003e30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	e00a      	b.n	8003e58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e42:	f3af 8000 	nop.w
 8003e46:	4601      	mov	r1, r0
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	60ba      	str	r2, [r7, #8]
 8003e4e:	b2ca      	uxtb	r2, r1
 8003e50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	3301      	adds	r3, #1
 8003e56:	617b      	str	r3, [r7, #20]
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	dbf0      	blt.n	8003e42 <_read+0x12>
	}

return len;
 8003e60:	687b      	ldr	r3, [r7, #4]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b086      	sub	sp, #24
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e76:	2300      	movs	r3, #0
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	e009      	b.n	8003e90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	60ba      	str	r2, [r7, #8]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	dbf1      	blt.n	8003e7c <_write+0x12>
	}
	return len;
 8003e98:	687b      	ldr	r3, [r7, #4]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <_close>:

int _close(int file)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b083      	sub	sp, #12
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
	return -1;
 8003eaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
 8003ec2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003eca:	605a      	str	r2, [r3, #4]
	return 0;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <_isatty>:

int _isatty(int file)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
	return 1;
 8003ee2:	2301      	movs	r3, #1
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
	return 0;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
	...

08003f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f14:	4a14      	ldr	r2, [pc, #80]	; (8003f68 <_sbrk+0x5c>)
 8003f16:	4b15      	ldr	r3, [pc, #84]	; (8003f6c <_sbrk+0x60>)
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f20:	4b13      	ldr	r3, [pc, #76]	; (8003f70 <_sbrk+0x64>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d102      	bne.n	8003f2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f28:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <_sbrk+0x64>)
 8003f2a:	4a12      	ldr	r2, [pc, #72]	; (8003f74 <_sbrk+0x68>)
 8003f2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f2e:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <_sbrk+0x64>)
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4413      	add	r3, r2
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d207      	bcs.n	8003f4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f3c:	f016 fe98 	bl	801ac70 <__errno>
 8003f40:	4603      	mov	r3, r0
 8003f42:	220c      	movs	r2, #12
 8003f44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f46:	f04f 33ff 	mov.w	r3, #4294967295
 8003f4a:	e009      	b.n	8003f60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f4c:	4b08      	ldr	r3, [pc, #32]	; (8003f70 <_sbrk+0x64>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f52:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <_sbrk+0x64>)
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4413      	add	r3, r2
 8003f5a:	4a05      	ldr	r2, [pc, #20]	; (8003f70 <_sbrk+0x64>)
 8003f5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	20020000 	.word	0x20020000
 8003f6c:	00000400 	.word	0x00000400
 8003f70:	200008f8 	.word	0x200008f8
 8003f74:	200029d0 	.word	0x200029d0

08003f78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f7c:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <SystemInit+0x20>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f82:	4a05      	ldr	r2, [pc, #20]	; (8003f98 <SystemInit+0x20>)
 8003f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f8c:	bf00      	nop
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	e000ed00 	.word	0xe000ed00

08003f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003f9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003fa0:	480d      	ldr	r0, [pc, #52]	; (8003fd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003fa2:	490e      	ldr	r1, [pc, #56]	; (8003fdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003fa4:	4a0e      	ldr	r2, [pc, #56]	; (8003fe0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fa8:	e002      	b.n	8003fb0 <LoopCopyDataInit>

08003faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fae:	3304      	adds	r3, #4

08003fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fb4:	d3f9      	bcc.n	8003faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fb6:	4a0b      	ldr	r2, [pc, #44]	; (8003fe4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003fb8:	4c0b      	ldr	r4, [pc, #44]	; (8003fe8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fbc:	e001      	b.n	8003fc2 <LoopFillZerobss>

08003fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fc0:	3204      	adds	r2, #4

08003fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fc4:	d3fb      	bcc.n	8003fbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003fc6:	f7ff ffd7 	bl	8003f78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fca:	f016 fe69 	bl	801aca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fce:	f7fe fd8f 	bl	8002af0 <main>
  bx  lr    
 8003fd2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003fd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fdc:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8003fe0:	0801f0f8 	.word	0x0801f0f8
  ldr r2, =_sbss
 8003fe4:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8003fe8:	200029d0 	.word	0x200029d0

08003fec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fec:	e7fe      	b.n	8003fec <ADC_IRQHandler>
	...

08003ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ff4:	4b0e      	ldr	r3, [pc, #56]	; (8004030 <HAL_Init+0x40>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a0d      	ldr	r2, [pc, #52]	; (8004030 <HAL_Init+0x40>)
 8003ffa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ffe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004000:	4b0b      	ldr	r3, [pc, #44]	; (8004030 <HAL_Init+0x40>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a0a      	ldr	r2, [pc, #40]	; (8004030 <HAL_Init+0x40>)
 8004006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800400a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800400c:	4b08      	ldr	r3, [pc, #32]	; (8004030 <HAL_Init+0x40>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a07      	ldr	r2, [pc, #28]	; (8004030 <HAL_Init+0x40>)
 8004012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004016:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004018:	2003      	movs	r0, #3
 800401a:	f000 f94f 	bl	80042bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800401e:	200f      	movs	r0, #15
 8004020:	f000 f808 	bl	8004034 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004024:	f7ff fe1c 	bl	8003c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	40023c00 	.word	0x40023c00

08004034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800403c:	4b12      	ldr	r3, [pc, #72]	; (8004088 <HAL_InitTick+0x54>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4b12      	ldr	r3, [pc, #72]	; (800408c <HAL_InitTick+0x58>)
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	4619      	mov	r1, r3
 8004046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800404a:	fbb3 f3f1 	udiv	r3, r3, r1
 800404e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004052:	4618      	mov	r0, r3
 8004054:	f000 f967 	bl	8004326 <HAL_SYSTICK_Config>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e00e      	b.n	8004080 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b0f      	cmp	r3, #15
 8004066:	d80a      	bhi.n	800407e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004068:	2200      	movs	r2, #0
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	f04f 30ff 	mov.w	r0, #4294967295
 8004070:	f000 f92f 	bl	80042d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004074:	4a06      	ldr	r2, [pc, #24]	; (8004090 <HAL_InitTick+0x5c>)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800407a:	2300      	movs	r3, #0
 800407c:	e000      	b.n	8004080 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
}
 8004080:	4618      	mov	r0, r3
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	20000058 	.word	0x20000058
 800408c:	20000060 	.word	0x20000060
 8004090:	2000005c 	.word	0x2000005c

08004094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004098:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <HAL_IncTick+0x20>)
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	461a      	mov	r2, r3
 800409e:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <HAL_IncTick+0x24>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4413      	add	r3, r2
 80040a4:	4a04      	ldr	r2, [pc, #16]	; (80040b8 <HAL_IncTick+0x24>)
 80040a6:	6013      	str	r3, [r2, #0]
}
 80040a8:	bf00      	nop
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	20000060 	.word	0x20000060
 80040b8:	200008fc 	.word	0x200008fc

080040bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  return uwTick;
 80040c0:	4b03      	ldr	r3, [pc, #12]	; (80040d0 <HAL_GetTick+0x14>)
 80040c2:	681b      	ldr	r3, [r3, #0]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	200008fc 	.word	0x200008fc

080040d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040dc:	f7ff ffee 	bl	80040bc <HAL_GetTick>
 80040e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ec:	d005      	beq.n	80040fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040ee:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <HAL_Delay+0x44>)
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	461a      	mov	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4413      	add	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80040fa:	bf00      	nop
 80040fc:	f7ff ffde 	bl	80040bc <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	429a      	cmp	r2, r3
 800410a:	d8f7      	bhi.n	80040fc <HAL_Delay+0x28>
  {
  }
}
 800410c:	bf00      	nop
 800410e:	bf00      	nop
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	20000060 	.word	0x20000060

0800411c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800412c:	4b0c      	ldr	r3, [pc, #48]	; (8004160 <__NVIC_SetPriorityGrouping+0x44>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004138:	4013      	ands	r3, r2
 800413a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800414c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800414e:	4a04      	ldr	r2, [pc, #16]	; (8004160 <__NVIC_SetPriorityGrouping+0x44>)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	60d3      	str	r3, [r2, #12]
}
 8004154:	bf00      	nop
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	e000ed00 	.word	0xe000ed00

08004164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004168:	4b04      	ldr	r3, [pc, #16]	; (800417c <__NVIC_GetPriorityGrouping+0x18>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	0a1b      	lsrs	r3, r3, #8
 800416e:	f003 0307 	and.w	r3, r3, #7
}
 8004172:	4618      	mov	r0, r3
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	e000ed00 	.word	0xe000ed00

08004180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	4603      	mov	r3, r0
 8004188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800418a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418e:	2b00      	cmp	r3, #0
 8004190:	db0b      	blt.n	80041aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004192:	79fb      	ldrb	r3, [r7, #7]
 8004194:	f003 021f 	and.w	r2, r3, #31
 8004198:	4907      	ldr	r1, [pc, #28]	; (80041b8 <__NVIC_EnableIRQ+0x38>)
 800419a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419e:	095b      	lsrs	r3, r3, #5
 80041a0:	2001      	movs	r0, #1
 80041a2:	fa00 f202 	lsl.w	r2, r0, r2
 80041a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	e000e100 	.word	0xe000e100

080041bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	6039      	str	r1, [r7, #0]
 80041c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	db0a      	blt.n	80041e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	490c      	ldr	r1, [pc, #48]	; (8004208 <__NVIC_SetPriority+0x4c>)
 80041d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041da:	0112      	lsls	r2, r2, #4
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	440b      	add	r3, r1
 80041e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041e4:	e00a      	b.n	80041fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	4908      	ldr	r1, [pc, #32]	; (800420c <__NVIC_SetPriority+0x50>)
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	3b04      	subs	r3, #4
 80041f4:	0112      	lsls	r2, r2, #4
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	440b      	add	r3, r1
 80041fa:	761a      	strb	r2, [r3, #24]
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	e000e100 	.word	0xe000e100
 800420c:	e000ed00 	.word	0xe000ed00

08004210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004210:	b480      	push	{r7}
 8004212:	b089      	sub	sp, #36	; 0x24
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	f1c3 0307 	rsb	r3, r3, #7
 800422a:	2b04      	cmp	r3, #4
 800422c:	bf28      	it	cs
 800422e:	2304      	movcs	r3, #4
 8004230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	3304      	adds	r3, #4
 8004236:	2b06      	cmp	r3, #6
 8004238:	d902      	bls.n	8004240 <NVIC_EncodePriority+0x30>
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	3b03      	subs	r3, #3
 800423e:	e000      	b.n	8004242 <NVIC_EncodePriority+0x32>
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004244:	f04f 32ff 	mov.w	r2, #4294967295
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	43da      	mvns	r2, r3
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	401a      	ands	r2, r3
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004258:	f04f 31ff 	mov.w	r1, #4294967295
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	fa01 f303 	lsl.w	r3, r1, r3
 8004262:	43d9      	mvns	r1, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004268:	4313      	orrs	r3, r2
         );
}
 800426a:	4618      	mov	r0, r3
 800426c:	3724      	adds	r7, #36	; 0x24
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
	...

08004278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3b01      	subs	r3, #1
 8004284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004288:	d301      	bcc.n	800428e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800428a:	2301      	movs	r3, #1
 800428c:	e00f      	b.n	80042ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800428e:	4a0a      	ldr	r2, [pc, #40]	; (80042b8 <SysTick_Config+0x40>)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3b01      	subs	r3, #1
 8004294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004296:	210f      	movs	r1, #15
 8004298:	f04f 30ff 	mov.w	r0, #4294967295
 800429c:	f7ff ff8e 	bl	80041bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042a0:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <SysTick_Config+0x40>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042a6:	4b04      	ldr	r3, [pc, #16]	; (80042b8 <SysTick_Config+0x40>)
 80042a8:	2207      	movs	r2, #7
 80042aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	e000e010 	.word	0xe000e010

080042bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f7ff ff29 	bl	800411c <__NVIC_SetPriorityGrouping>
}
 80042ca:	bf00      	nop
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b086      	sub	sp, #24
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	4603      	mov	r3, r0
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	607a      	str	r2, [r7, #4]
 80042de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042e4:	f7ff ff3e 	bl	8004164 <__NVIC_GetPriorityGrouping>
 80042e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	68b9      	ldr	r1, [r7, #8]
 80042ee:	6978      	ldr	r0, [r7, #20]
 80042f0:	f7ff ff8e 	bl	8004210 <NVIC_EncodePriority>
 80042f4:	4602      	mov	r2, r0
 80042f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042fa:	4611      	mov	r1, r2
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff ff5d 	bl	80041bc <__NVIC_SetPriority>
}
 8004302:	bf00      	nop
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b082      	sub	sp, #8
 800430e:	af00      	add	r7, sp, #0
 8004310:	4603      	mov	r3, r0
 8004312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff ff31 	bl	8004180 <__NVIC_EnableIRQ>
}
 800431e:	bf00      	nop
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b082      	sub	sp, #8
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7ff ffa2 	bl	8004278 <SysTick_Config>
 8004334:	4603      	mov	r3, r0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b082      	sub	sp, #8
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e00e      	b.n	800436e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	795b      	ldrb	r3, [r3, #5]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d105      	bne.n	8004366 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7ff fca5 	bl	8003cb0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004378:	b480      	push	{r7}
 800437a:	b089      	sub	sp, #36	; 0x24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004382:	2300      	movs	r3, #0
 8004384:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004386:	2300      	movs	r3, #0
 8004388:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800438a:	2300      	movs	r3, #0
 800438c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800438e:	2300      	movs	r3, #0
 8004390:	61fb      	str	r3, [r7, #28]
 8004392:	e16b      	b.n	800466c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004394:	2201      	movs	r2, #1
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	4013      	ands	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	f040 815a 	bne.w	8004666 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d005      	beq.n	80043ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d130      	bne.n	800442c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	2203      	movs	r2, #3
 80043d6:	fa02 f303 	lsl.w	r3, r2, r3
 80043da:	43db      	mvns	r3, r3
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	4013      	ands	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	fa02 f303 	lsl.w	r3, r2, r3
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004400:	2201      	movs	r2, #1
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	43db      	mvns	r3, r3
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	4013      	ands	r3, r2
 800440e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	091b      	lsrs	r3, r3, #4
 8004416:	f003 0201 	and.w	r2, r3, #1
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	4313      	orrs	r3, r2
 8004424:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	2b03      	cmp	r3, #3
 8004436:	d017      	beq.n	8004468 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	2203      	movs	r2, #3
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	43db      	mvns	r3, r3
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	4013      	ands	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	4313      	orrs	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d123      	bne.n	80044bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	08da      	lsrs	r2, r3, #3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	3208      	adds	r2, #8
 800447c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004480:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	220f      	movs	r2, #15
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	43db      	mvns	r3, r3
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	4013      	ands	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	08da      	lsrs	r2, r3, #3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3208      	adds	r2, #8
 80044b6:	69b9      	ldr	r1, [r7, #24]
 80044b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	005b      	lsls	r3, r3, #1
 80044c6:	2203      	movs	r2, #3
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	43db      	mvns	r3, r3
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	4013      	ands	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f003 0203 	and.w	r2, r3, #3
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 80b4 	beq.w	8004666 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044fe:	2300      	movs	r3, #0
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	4b60      	ldr	r3, [pc, #384]	; (8004684 <HAL_GPIO_Init+0x30c>)
 8004504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004506:	4a5f      	ldr	r2, [pc, #380]	; (8004684 <HAL_GPIO_Init+0x30c>)
 8004508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800450c:	6453      	str	r3, [r2, #68]	; 0x44
 800450e:	4b5d      	ldr	r3, [pc, #372]	; (8004684 <HAL_GPIO_Init+0x30c>)
 8004510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800451a:	4a5b      	ldr	r2, [pc, #364]	; (8004688 <HAL_GPIO_Init+0x310>)
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	089b      	lsrs	r3, r3, #2
 8004520:	3302      	adds	r3, #2
 8004522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004526:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	220f      	movs	r2, #15
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	43db      	mvns	r3, r3
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	4013      	ands	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a52      	ldr	r2, [pc, #328]	; (800468c <HAL_GPIO_Init+0x314>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d02b      	beq.n	800459e <HAL_GPIO_Init+0x226>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a51      	ldr	r2, [pc, #324]	; (8004690 <HAL_GPIO_Init+0x318>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d025      	beq.n	800459a <HAL_GPIO_Init+0x222>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a50      	ldr	r2, [pc, #320]	; (8004694 <HAL_GPIO_Init+0x31c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d01f      	beq.n	8004596 <HAL_GPIO_Init+0x21e>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a4f      	ldr	r2, [pc, #316]	; (8004698 <HAL_GPIO_Init+0x320>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d019      	beq.n	8004592 <HAL_GPIO_Init+0x21a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a4e      	ldr	r2, [pc, #312]	; (800469c <HAL_GPIO_Init+0x324>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d013      	beq.n	800458e <HAL_GPIO_Init+0x216>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a4d      	ldr	r2, [pc, #308]	; (80046a0 <HAL_GPIO_Init+0x328>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d00d      	beq.n	800458a <HAL_GPIO_Init+0x212>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a4c      	ldr	r2, [pc, #304]	; (80046a4 <HAL_GPIO_Init+0x32c>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d007      	beq.n	8004586 <HAL_GPIO_Init+0x20e>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a4b      	ldr	r2, [pc, #300]	; (80046a8 <HAL_GPIO_Init+0x330>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d101      	bne.n	8004582 <HAL_GPIO_Init+0x20a>
 800457e:	2307      	movs	r3, #7
 8004580:	e00e      	b.n	80045a0 <HAL_GPIO_Init+0x228>
 8004582:	2308      	movs	r3, #8
 8004584:	e00c      	b.n	80045a0 <HAL_GPIO_Init+0x228>
 8004586:	2306      	movs	r3, #6
 8004588:	e00a      	b.n	80045a0 <HAL_GPIO_Init+0x228>
 800458a:	2305      	movs	r3, #5
 800458c:	e008      	b.n	80045a0 <HAL_GPIO_Init+0x228>
 800458e:	2304      	movs	r3, #4
 8004590:	e006      	b.n	80045a0 <HAL_GPIO_Init+0x228>
 8004592:	2303      	movs	r3, #3
 8004594:	e004      	b.n	80045a0 <HAL_GPIO_Init+0x228>
 8004596:	2302      	movs	r3, #2
 8004598:	e002      	b.n	80045a0 <HAL_GPIO_Init+0x228>
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <HAL_GPIO_Init+0x228>
 800459e:	2300      	movs	r3, #0
 80045a0:	69fa      	ldr	r2, [r7, #28]
 80045a2:	f002 0203 	and.w	r2, r2, #3
 80045a6:	0092      	lsls	r2, r2, #2
 80045a8:	4093      	lsls	r3, r2
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045b0:	4935      	ldr	r1, [pc, #212]	; (8004688 <HAL_GPIO_Init+0x310>)
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	089b      	lsrs	r3, r3, #2
 80045b6:	3302      	adds	r3, #2
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045be:	4b3b      	ldr	r3, [pc, #236]	; (80046ac <HAL_GPIO_Init+0x334>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	43db      	mvns	r3, r3
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	4013      	ands	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045e2:	4a32      	ldr	r2, [pc, #200]	; (80046ac <HAL_GPIO_Init+0x334>)
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045e8:	4b30      	ldr	r3, [pc, #192]	; (80046ac <HAL_GPIO_Init+0x334>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	43db      	mvns	r3, r3
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	4013      	ands	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	4313      	orrs	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800460c:	4a27      	ldr	r2, [pc, #156]	; (80046ac <HAL_GPIO_Init+0x334>)
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004612:	4b26      	ldr	r3, [pc, #152]	; (80046ac <HAL_GPIO_Init+0x334>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	43db      	mvns	r3, r3
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	4013      	ands	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	4313      	orrs	r3, r2
 8004634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004636:	4a1d      	ldr	r2, [pc, #116]	; (80046ac <HAL_GPIO_Init+0x334>)
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800463c:	4b1b      	ldr	r3, [pc, #108]	; (80046ac <HAL_GPIO_Init+0x334>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	43db      	mvns	r3, r3
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	4013      	ands	r3, r2
 800464a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004660:	4a12      	ldr	r2, [pc, #72]	; (80046ac <HAL_GPIO_Init+0x334>)
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	3301      	adds	r3, #1
 800466a:	61fb      	str	r3, [r7, #28]
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	2b0f      	cmp	r3, #15
 8004670:	f67f ae90 	bls.w	8004394 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004674:	bf00      	nop
 8004676:	bf00      	nop
 8004678:	3724      	adds	r7, #36	; 0x24
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40023800 	.word	0x40023800
 8004688:	40013800 	.word	0x40013800
 800468c:	40020000 	.word	0x40020000
 8004690:	40020400 	.word	0x40020400
 8004694:	40020800 	.word	0x40020800
 8004698:	40020c00 	.word	0x40020c00
 800469c:	40021000 	.word	0x40021000
 80046a0:	40021400 	.word	0x40021400
 80046a4:	40021800 	.word	0x40021800
 80046a8:	40021c00 	.word	0x40021c00
 80046ac:	40013c00 	.word	0x40013c00

080046b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	460b      	mov	r3, r1
 80046ba:	807b      	strh	r3, [r7, #2]
 80046bc:	4613      	mov	r3, r2
 80046be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046c0:	787b      	ldrb	r3, [r7, #1]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046c6:	887a      	ldrh	r2, [r7, #2]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046cc:	e003      	b.n	80046d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046ce:	887b      	ldrh	r3, [r7, #2]
 80046d0:	041a      	lsls	r2, r3, #16
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	619a      	str	r2, [r3, #24]
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80046e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046e4:	b08f      	sub	sp, #60	; 0x3c
 80046e6:	af0a      	add	r7, sp, #40	; 0x28
 80046e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e10f      	b.n	8004914 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f014 fc34 	bl	8018f7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2203      	movs	r2, #3
 8004718:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004724:	2b00      	cmp	r3, #0
 8004726:	d102      	bne.n	800472e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f002 fd7f 	bl	8007236 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	603b      	str	r3, [r7, #0]
 800473e:	687e      	ldr	r6, [r7, #4]
 8004740:	466d      	mov	r5, sp
 8004742:	f106 0410 	add.w	r4, r6, #16
 8004746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800474a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800474c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800474e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004752:	e885 0003 	stmia.w	r5, {r0, r1}
 8004756:	1d33      	adds	r3, r6, #4
 8004758:	cb0e      	ldmia	r3, {r1, r2, r3}
 800475a:	6838      	ldr	r0, [r7, #0]
 800475c:	f002 fc56 	bl	800700c <USB_CoreInit>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d005      	beq.n	8004772 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2202      	movs	r2, #2
 800476a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e0d0      	b.n	8004914 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2100      	movs	r1, #0
 8004778:	4618      	mov	r0, r3
 800477a:	f002 fd6d 	bl	8007258 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800477e:	2300      	movs	r3, #0
 8004780:	73fb      	strb	r3, [r7, #15]
 8004782:	e04a      	b.n	800481a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004784:	7bfa      	ldrb	r2, [r7, #15]
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	4613      	mov	r3, r2
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	4413      	add	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	440b      	add	r3, r1
 8004792:	333d      	adds	r3, #61	; 0x3d
 8004794:	2201      	movs	r2, #1
 8004796:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004798:	7bfa      	ldrb	r2, [r7, #15]
 800479a:	6879      	ldr	r1, [r7, #4]
 800479c:	4613      	mov	r3, r2
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	4413      	add	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	333c      	adds	r3, #60	; 0x3c
 80047a8:	7bfa      	ldrb	r2, [r7, #15]
 80047aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80047ac:	7bfa      	ldrb	r2, [r7, #15]
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
 80047b0:	b298      	uxth	r0, r3
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	4613      	mov	r3, r2
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	4413      	add	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	440b      	add	r3, r1
 80047be:	3344      	adds	r3, #68	; 0x44
 80047c0:	4602      	mov	r2, r0
 80047c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80047c4:	7bfa      	ldrb	r2, [r7, #15]
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	4613      	mov	r3, r2
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	4413      	add	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	440b      	add	r3, r1
 80047d2:	3340      	adds	r3, #64	; 0x40
 80047d4:	2200      	movs	r2, #0
 80047d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80047d8:	7bfa      	ldrb	r2, [r7, #15]
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	4613      	mov	r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	4413      	add	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	440b      	add	r3, r1
 80047e6:	3348      	adds	r3, #72	; 0x48
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80047ec:	7bfa      	ldrb	r2, [r7, #15]
 80047ee:	6879      	ldr	r1, [r7, #4]
 80047f0:	4613      	mov	r3, r2
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	4413      	add	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	440b      	add	r3, r1
 80047fa:	334c      	adds	r3, #76	; 0x4c
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004800:	7bfa      	ldrb	r2, [r7, #15]
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	4613      	mov	r3, r2
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	4413      	add	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	440b      	add	r3, r1
 800480e:	3354      	adds	r3, #84	; 0x54
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004814:	7bfb      	ldrb	r3, [r7, #15]
 8004816:	3301      	adds	r3, #1
 8004818:	73fb      	strb	r3, [r7, #15]
 800481a:	7bfa      	ldrb	r2, [r7, #15]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	429a      	cmp	r2, r3
 8004822:	d3af      	bcc.n	8004784 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004824:	2300      	movs	r3, #0
 8004826:	73fb      	strb	r3, [r7, #15]
 8004828:	e044      	b.n	80048b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800482a:	7bfa      	ldrb	r2, [r7, #15]
 800482c:	6879      	ldr	r1, [r7, #4]
 800482e:	4613      	mov	r3, r2
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	4413      	add	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	440b      	add	r3, r1
 8004838:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800483c:	2200      	movs	r2, #0
 800483e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004840:	7bfa      	ldrb	r2, [r7, #15]
 8004842:	6879      	ldr	r1, [r7, #4]
 8004844:	4613      	mov	r3, r2
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	4413      	add	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	440b      	add	r3, r1
 800484e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004852:	7bfa      	ldrb	r2, [r7, #15]
 8004854:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004856:	7bfa      	ldrb	r2, [r7, #15]
 8004858:	6879      	ldr	r1, [r7, #4]
 800485a:	4613      	mov	r3, r2
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	4413      	add	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	440b      	add	r3, r1
 8004864:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004868:	2200      	movs	r2, #0
 800486a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800486c:	7bfa      	ldrb	r2, [r7, #15]
 800486e:	6879      	ldr	r1, [r7, #4]
 8004870:	4613      	mov	r3, r2
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	4413      	add	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	440b      	add	r3, r1
 800487a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004882:	7bfa      	ldrb	r2, [r7, #15]
 8004884:	6879      	ldr	r1, [r7, #4]
 8004886:	4613      	mov	r3, r2
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	4413      	add	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	440b      	add	r3, r1
 8004890:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004894:	2200      	movs	r2, #0
 8004896:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004898:	7bfa      	ldrb	r2, [r7, #15]
 800489a:	6879      	ldr	r1, [r7, #4]
 800489c:	4613      	mov	r3, r2
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	4413      	add	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	440b      	add	r3, r1
 80048a6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80048aa:	2200      	movs	r2, #0
 80048ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
 80048b0:	3301      	adds	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
 80048b4:	7bfa      	ldrb	r2, [r7, #15]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d3b5      	bcc.n	800482a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	603b      	str	r3, [r7, #0]
 80048c4:	687e      	ldr	r6, [r7, #4]
 80048c6:	466d      	mov	r5, sp
 80048c8:	f106 0410 	add.w	r4, r6, #16
 80048cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80048d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80048dc:	1d33      	adds	r3, r6, #4
 80048de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048e0:	6838      	ldr	r0, [r7, #0]
 80048e2:	f002 fd05 	bl	80072f0 <USB_DevInit>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e00d      	b.n	8004914 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f003 fe54 	bl	80085ba <USB_DevDisconnect>

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800491c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_PCD_Start+0x1c>
 8004934:	2302      	movs	r3, #2
 8004936:	e020      	b.n	800497a <HAL_PCD_Start+0x5e>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004944:	2b01      	cmp	r3, #1
 8004946:	d109      	bne.n	800495c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800494c:	2b01      	cmp	r3, #1
 800494e:	d005      	beq.n	800495c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004954:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4618      	mov	r0, r3
 8004962:	f002 fc57 	bl	8007214 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f003 fe04 	bl	8008578 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004982:	b590      	push	{r4, r7, lr}
 8004984:	b08d      	sub	sp, #52	; 0x34
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4618      	mov	r0, r3
 800499a:	f003 fec2 	bl	8008722 <USB_GetMode>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f040 848a 	bne.w	80052ba <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f003 fe26 	bl	80085fc <USB_ReadInterrupts>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f000 8480 	beq.w	80052b8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	0a1b      	lsrs	r3, r3, #8
 80049c2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f003 fe13 	bl	80085fc <USB_ReadInterrupts>
 80049d6:	4603      	mov	r3, r0
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d107      	bne.n	80049f0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695a      	ldr	r2, [r3, #20]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f002 0202 	and.w	r2, r2, #2
 80049ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f003 fe01 	bl	80085fc <USB_ReadInterrupts>
 80049fa:	4603      	mov	r3, r0
 80049fc:	f003 0310 	and.w	r3, r3, #16
 8004a00:	2b10      	cmp	r3, #16
 8004a02:	d161      	bne.n	8004ac8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699a      	ldr	r2, [r3, #24]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 0210 	bic.w	r2, r2, #16
 8004a12:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	f003 020f 	and.w	r2, r3, #15
 8004a20:	4613      	mov	r3, r2
 8004a22:	00db      	lsls	r3, r3, #3
 8004a24:	4413      	add	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	4413      	add	r3, r2
 8004a30:	3304      	adds	r3, #4
 8004a32:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	0c5b      	lsrs	r3, r3, #17
 8004a38:	f003 030f 	and.w	r3, r3, #15
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d124      	bne.n	8004a8a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004a46:	4013      	ands	r3, r2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d035      	beq.n	8004ab8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	091b      	lsrs	r3, r3, #4
 8004a54:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004a56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	6a38      	ldr	r0, [r7, #32]
 8004a60:	f003 fc38 	bl	80082d4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	691a      	ldr	r2, [r3, #16]
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	091b      	lsrs	r3, r3, #4
 8004a6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a70:	441a      	add	r2, r3
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	6a1a      	ldr	r2, [r3, #32]
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	091b      	lsrs	r3, r3, #4
 8004a7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a82:	441a      	add	r2, r3
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	621a      	str	r2, [r3, #32]
 8004a88:	e016      	b.n	8004ab8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	0c5b      	lsrs	r3, r3, #17
 8004a8e:	f003 030f 	and.w	r3, r3, #15
 8004a92:	2b06      	cmp	r3, #6
 8004a94:	d110      	bne.n	8004ab8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a9c:	2208      	movs	r2, #8
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	6a38      	ldr	r0, [r7, #32]
 8004aa2:	f003 fc17 	bl	80082d4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	6a1a      	ldr	r2, [r3, #32]
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	091b      	lsrs	r3, r3, #4
 8004aae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ab2:	441a      	add	r2, r3
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699a      	ldr	r2, [r3, #24]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0210 	orr.w	r2, r2, #16
 8004ac6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f003 fd95 	bl	80085fc <USB_ReadInterrupts>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ad8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004adc:	f040 80a7 	bne.w	8004c2e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f003 fd9a 	bl	8008622 <USB_ReadDevAllOutEpInterrupt>
 8004aee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004af0:	e099      	b.n	8004c26 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 808e 	beq.w	8004c1a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b04:	b2d2      	uxtb	r2, r2
 8004b06:	4611      	mov	r1, r2
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f003 fdbe 	bl	800868a <USB_ReadDevOutEPInterrupt>
 8004b0e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00c      	beq.n	8004b34 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b26:	461a      	mov	r2, r3
 8004b28:	2301      	movs	r3, #1
 8004b2a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004b2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fec2 	bl	80058b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f003 0308 	and.w	r3, r3, #8
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00c      	beq.n	8004b58 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	2308      	movs	r3, #8
 8004b4e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004b50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 ff98 	bl	8005a88 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f003 0310 	and.w	r3, r3, #16
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d008      	beq.n	8004b74 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	015a      	lsls	r2, r3, #5
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	4413      	add	r3, r2
 8004b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6e:	461a      	mov	r2, r3
 8004b70:	2310      	movs	r3, #16
 8004b72:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d030      	beq.n	8004be0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b86:	2b80      	cmp	r3, #128	; 0x80
 8004b88:	d109      	bne.n	8004b9e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	69fa      	ldr	r2, [r7, #28]
 8004b94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b9c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	4413      	add	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	4413      	add	r3, r2
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	78db      	ldrb	r3, [r3, #3]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d108      	bne.n	8004bce <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f014 fadd 	bl	8019188 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	015a      	lsls	r2, r3, #5
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bda:	461a      	mov	r2, r3
 8004bdc:	2302      	movs	r3, #2
 8004bde:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d008      	beq.n	8004bfc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	2320      	movs	r3, #32
 8004bfa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d009      	beq.n	8004c1a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c12:	461a      	mov	r2, r3
 8004c14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c18:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c22:	085b      	lsrs	r3, r3, #1
 8004c24:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f47f af62 	bne.w	8004af2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f003 fce2 	bl	80085fc <USB_ReadInterrupts>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c42:	f040 80db 	bne.w	8004dfc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f003 fd03 	bl	8008656 <USB_ReadDevAllInEpInterrupt>
 8004c50:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004c56:	e0cd      	b.n	8004df4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 80c2 	beq.w	8004de8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6a:	b2d2      	uxtb	r2, r2
 8004c6c:	4611      	mov	r1, r2
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f003 fd29 	bl	80086c6 <USB_ReadDevInEPInterrupt>
 8004c74:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d057      	beq.n	8004d30 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	2201      	movs	r2, #1
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	43db      	mvns	r3, r3
 8004c9a:	69f9      	ldr	r1, [r7, #28]
 8004c9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d132      	bne.n	8004d24 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	4413      	add	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	334c      	adds	r3, #76	; 0x4c
 8004cce:	6819      	ldr	r1, [r3, #0]
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4403      	add	r3, r0
 8004cde:	3348      	adds	r3, #72	; 0x48
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4419      	add	r1, r3
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce8:	4613      	mov	r3, r2
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	4413      	add	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4403      	add	r3, r0
 8004cf2:	334c      	adds	r3, #76	; 0x4c
 8004cf4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d113      	bne.n	8004d24 <HAL_PCD_IRQHandler+0x3a2>
 8004cfc:	6879      	ldr	r1, [r7, #4]
 8004cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d00:	4613      	mov	r3, r2
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	4413      	add	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	3354      	adds	r3, #84	; 0x54
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d108      	bne.n	8004d24 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6818      	ldr	r0, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	2101      	movs	r1, #1
 8004d20:	f003 fd30 	bl	8008784 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	4619      	mov	r1, r3
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f014 f9a7 	bl	801907e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d008      	beq.n	8004d4c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	015a      	lsls	r2, r3, #5
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d46:	461a      	mov	r2, r3
 8004d48:	2308      	movs	r3, #8
 8004d4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	f003 0310 	and.w	r3, r3, #16
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d008      	beq.n	8004d68 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d62:	461a      	mov	r2, r3
 8004d64:	2310      	movs	r3, #16
 8004d66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d008      	beq.n	8004d84 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7e:	461a      	mov	r2, r3
 8004d80:	2340      	movs	r3, #64	; 0x40
 8004d82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d023      	beq.n	8004dd6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004d8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d90:	6a38      	ldr	r0, [r7, #32]
 8004d92:	f002 fc11 	bl	80075b8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d98:	4613      	mov	r3, r2
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	4413      	add	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	3338      	adds	r3, #56	; 0x38
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	4413      	add	r3, r2
 8004da6:	3304      	adds	r3, #4
 8004da8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	78db      	ldrb	r3, [r3, #3]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d108      	bne.n	8004dc4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2200      	movs	r2, #0
 8004db6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f014 f9f4 	bl	80191ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d003      	beq.n	8004de8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 fcdb 	bl	800579e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	3301      	adds	r3, #1
 8004dec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df0:	085b      	lsrs	r3, r3, #1
 8004df2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f47f af2e 	bne.w	8004c58 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f003 fbfb 	bl	80085fc <USB_ReadInterrupts>
 8004e06:	4603      	mov	r3, r0
 8004e08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e10:	d122      	bne.n	8004e58 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	69fa      	ldr	r2, [r7, #28]
 8004e1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e20:	f023 0301 	bic.w	r3, r3, #1
 8004e24:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d108      	bne.n	8004e42 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004e38:	2100      	movs	r1, #0
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 fec2 	bl	8005bc4 <HAL_PCDEx_LPM_Callback>
 8004e40:	e002      	b.n	8004e48 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f014 f992 	bl	801916c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	695a      	ldr	r2, [r3, #20]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004e56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f003 fbcd 	bl	80085fc <USB_ReadInterrupts>
 8004e62:	4603      	mov	r3, r0
 8004e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e6c:	d112      	bne.n	8004e94 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d102      	bne.n	8004e84 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f014 f94e 	bl	8019120 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695a      	ldr	r2, [r3, #20]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004e92:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f003 fbaf 	bl	80085fc <USB_ReadInterrupts>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea8:	f040 80b7 	bne.w	800501a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	69fa      	ldr	r2, [r7, #28]
 8004eb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004eba:	f023 0301 	bic.w	r3, r3, #1
 8004ebe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2110      	movs	r1, #16
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f002 fb76 	bl	80075b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ecc:	2300      	movs	r3, #0
 8004ece:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ed0:	e046      	b.n	8004f60 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ede:	461a      	mov	r2, r3
 8004ee0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ee4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ef6:	0151      	lsls	r1, r2, #5
 8004ef8:	69fa      	ldr	r2, [r7, #28]
 8004efa:	440a      	add	r2, r1
 8004efc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f04:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f12:	461a      	mov	r2, r3
 8004f14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f18:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f2a:	0151      	lsls	r1, r2, #5
 8004f2c:	69fa      	ldr	r2, [r7, #28]
 8004f2e:	440a      	add	r2, r1
 8004f30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f4a:	0151      	lsls	r1, r2, #5
 8004f4c:	69fa      	ldr	r2, [r7, #28]
 8004f4e:	440a      	add	r2, r1
 8004f50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f58:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d3b3      	bcc.n	8004ed2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	69fa      	ldr	r2, [r7, #28]
 8004f74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f78:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004f7c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d016      	beq.n	8004fb4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f90:	69fa      	ldr	r2, [r7, #28]
 8004f92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f96:	f043 030b 	orr.w	r3, r3, #11
 8004f9a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa6:	69fa      	ldr	r2, [r7, #28]
 8004fa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fac:	f043 030b 	orr.w	r3, r3, #11
 8004fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8004fb2:	e015      	b.n	8004fe0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	69fa      	ldr	r2, [r7, #28]
 8004fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fc2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004fc6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004fca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	69fa      	ldr	r2, [r7, #28]
 8004fd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fda:	f043 030b 	orr.w	r3, r3, #11
 8004fde:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	69fa      	ldr	r2, [r7, #28]
 8004fea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004ff2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6818      	ldr	r0, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005004:	461a      	mov	r2, r3
 8005006:	f003 fbbd 	bl	8008784 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	695a      	ldr	r2, [r3, #20]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005018:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4618      	mov	r0, r3
 8005020:	f003 faec 	bl	80085fc <USB_ReadInterrupts>
 8005024:	4603      	mov	r3, r0
 8005026:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800502a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800502e:	d124      	bne.n	800507a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4618      	mov	r0, r3
 8005036:	f003 fb82 	bl	800873e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4618      	mov	r0, r3
 8005040:	f002 fb37 	bl	80076b2 <USB_GetDevSpeed>
 8005044:	4603      	mov	r3, r0
 8005046:	461a      	mov	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681c      	ldr	r4, [r3, #0]
 8005050:	f001 fa28 	bl	80064a4 <HAL_RCC_GetHCLKFreq>
 8005054:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800505a:	b2db      	uxtb	r3, r3
 800505c:	461a      	mov	r2, r3
 800505e:	4620      	mov	r0, r4
 8005060:	f002 f836 	bl	80070d0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f014 f832 	bl	80190ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	695a      	ldr	r2, [r3, #20]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005078:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f003 fabc 	bl	80085fc <USB_ReadInterrupts>
 8005084:	4603      	mov	r3, r0
 8005086:	f003 0308 	and.w	r3, r3, #8
 800508a:	2b08      	cmp	r3, #8
 800508c:	d10a      	bne.n	80050a4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f014 f80f 	bl	80190b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	695a      	ldr	r2, [r3, #20]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f002 0208 	and.w	r2, r2, #8
 80050a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f003 faa7 	bl	80085fc <USB_ReadInterrupts>
 80050ae:	4603      	mov	r3, r0
 80050b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b4:	2b80      	cmp	r3, #128	; 0x80
 80050b6:	d122      	bne.n	80050fe <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050c4:	2301      	movs	r3, #1
 80050c6:	627b      	str	r3, [r7, #36]	; 0x24
 80050c8:	e014      	b.n	80050f4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ce:	4613      	mov	r3, r2
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	440b      	add	r3, r1
 80050d8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d105      	bne.n	80050ee <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80050e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	4619      	mov	r1, r3
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 fb27 	bl	800573c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	3301      	adds	r3, #1
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d3e5      	bcc.n	80050ca <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4618      	mov	r0, r3
 8005104:	f003 fa7a 	bl	80085fc <USB_ReadInterrupts>
 8005108:	4603      	mov	r3, r0
 800510a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800510e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005112:	d13b      	bne.n	800518c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005114:	2301      	movs	r3, #1
 8005116:	627b      	str	r3, [r7, #36]	; 0x24
 8005118:	e02b      	b.n	8005172 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800512a:	6879      	ldr	r1, [r7, #4]
 800512c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800512e:	4613      	mov	r3, r2
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	4413      	add	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	440b      	add	r3, r1
 8005138:	3340      	adds	r3, #64	; 0x40
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d115      	bne.n	800516c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005140:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005142:	2b00      	cmp	r3, #0
 8005144:	da12      	bge.n	800516c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005146:	6879      	ldr	r1, [r7, #4]
 8005148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800514a:	4613      	mov	r3, r2
 800514c:	00db      	lsls	r3, r3, #3
 800514e:	4413      	add	r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	440b      	add	r3, r1
 8005154:	333f      	adds	r3, #63	; 0x3f
 8005156:	2201      	movs	r2, #1
 8005158:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	b2db      	uxtb	r3, r3
 800515e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005162:	b2db      	uxtb	r3, r3
 8005164:	4619      	mov	r1, r3
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fae8 	bl	800573c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	3301      	adds	r3, #1
 8005170:	627b      	str	r3, [r7, #36]	; 0x24
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005178:	429a      	cmp	r2, r3
 800517a:	d3ce      	bcc.n	800511a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	695a      	ldr	r2, [r3, #20]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800518a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4618      	mov	r0, r3
 8005192:	f003 fa33 	bl	80085fc <USB_ReadInterrupts>
 8005196:	4603      	mov	r3, r0
 8005198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800519c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051a0:	d155      	bne.n	800524e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80051a2:	2301      	movs	r3, #1
 80051a4:	627b      	str	r3, [r7, #36]	; 0x24
 80051a6:	e045      	b.n	8005234 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80051b8:	6879      	ldr	r1, [r7, #4]
 80051ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051bc:	4613      	mov	r3, r2
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	4413      	add	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	440b      	add	r3, r1
 80051c6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d12e      	bne.n	800522e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80051d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	da2b      	bge.n	800522e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80051e2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d121      	bne.n	800522e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ee:	4613      	mov	r3, r2
 80051f0:	00db      	lsls	r3, r3, #3
 80051f2:	4413      	add	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	440b      	add	r3, r1
 80051f8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80051fc:	2201      	movs	r2, #1
 80051fe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10a      	bne.n	800522e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	69fa      	ldr	r2, [r7, #28]
 8005222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800522a:	6053      	str	r3, [r2, #4]
            break;
 800522c:	e007      	b.n	800523e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	3301      	adds	r3, #1
 8005232:	627b      	str	r3, [r7, #36]	; 0x24
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523a:	429a      	cmp	r2, r3
 800523c:	d3b4      	bcc.n	80051a8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	695a      	ldr	r2, [r3, #20]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800524c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4618      	mov	r0, r3
 8005254:	f003 f9d2 	bl	80085fc <USB_ReadInterrupts>
 8005258:	4603      	mov	r3, r0
 800525a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800525e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005262:	d10a      	bne.n	800527a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f013 ffb3 	bl	80191d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	695a      	ldr	r2, [r3, #20]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005278:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4618      	mov	r0, r3
 8005280:	f003 f9bc 	bl	80085fc <USB_ReadInterrupts>
 8005284:	4603      	mov	r3, r0
 8005286:	f003 0304 	and.w	r3, r3, #4
 800528a:	2b04      	cmp	r3, #4
 800528c:	d115      	bne.n	80052ba <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b00      	cmp	r3, #0
 800529e:	d002      	beq.n	80052a6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f013 ffa3 	bl	80191ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6859      	ldr	r1, [r3, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	605a      	str	r2, [r3, #4]
 80052b6:	e000      	b.n	80052ba <HAL_PCD_IRQHandler+0x938>
      return;
 80052b8:	bf00      	nop
    }
  }
}
 80052ba:	3734      	adds	r7, #52	; 0x34
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd90      	pop	{r4, r7, pc}

080052c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	460b      	mov	r3, r1
 80052ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d101      	bne.n	80052da <HAL_PCD_SetAddress+0x1a>
 80052d6:	2302      	movs	r3, #2
 80052d8:	e013      	b.n	8005302 <HAL_PCD_SetAddress+0x42>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	78fa      	ldrb	r2, [r7, #3]
 80052e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	78fa      	ldrb	r2, [r7, #3]
 80052f0:	4611      	mov	r1, r2
 80052f2:	4618      	mov	r0, r3
 80052f4:	f003 f91a 	bl	800852c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b084      	sub	sp, #16
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	4608      	mov	r0, r1
 8005314:	4611      	mov	r1, r2
 8005316:	461a      	mov	r2, r3
 8005318:	4603      	mov	r3, r0
 800531a:	70fb      	strb	r3, [r7, #3]
 800531c:	460b      	mov	r3, r1
 800531e:	803b      	strh	r3, [r7, #0]
 8005320:	4613      	mov	r3, r2
 8005322:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005324:	2300      	movs	r3, #0
 8005326:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005328:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800532c:	2b00      	cmp	r3, #0
 800532e:	da0f      	bge.n	8005350 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	f003 020f 	and.w	r2, r3, #15
 8005336:	4613      	mov	r3, r2
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	3338      	adds	r3, #56	; 0x38
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	4413      	add	r3, r2
 8005344:	3304      	adds	r3, #4
 8005346:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2201      	movs	r2, #1
 800534c:	705a      	strb	r2, [r3, #1]
 800534e:	e00f      	b.n	8005370 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005350:	78fb      	ldrb	r3, [r7, #3]
 8005352:	f003 020f 	and.w	r2, r3, #15
 8005356:	4613      	mov	r3, r2
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	4413      	add	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	4413      	add	r3, r2
 8005366:	3304      	adds	r3, #4
 8005368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005370:	78fb      	ldrb	r3, [r7, #3]
 8005372:	f003 030f 	and.w	r3, r3, #15
 8005376:	b2da      	uxtb	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800537c:	883a      	ldrh	r2, [r7, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	78ba      	ldrb	r2, [r7, #2]
 8005386:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	785b      	ldrb	r3, [r3, #1]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d004      	beq.n	800539a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800539a:	78bb      	ldrb	r3, [r7, #2]
 800539c:	2b02      	cmp	r3, #2
 800539e:	d102      	bne.n	80053a6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d101      	bne.n	80053b4 <HAL_PCD_EP_Open+0xaa>
 80053b0:	2302      	movs	r3, #2
 80053b2:	e00e      	b.n	80053d2 <HAL_PCD_EP_Open+0xc8>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68f9      	ldr	r1, [r7, #12]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f002 f99a 	bl	80076fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80053d0:	7afb      	ldrb	r3, [r7, #11]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b084      	sub	sp, #16
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
 80053e2:	460b      	mov	r3, r1
 80053e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80053e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	da0f      	bge.n	800540e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053ee:	78fb      	ldrb	r3, [r7, #3]
 80053f0:	f003 020f 	and.w	r2, r3, #15
 80053f4:	4613      	mov	r3, r2
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	4413      	add	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	3338      	adds	r3, #56	; 0x38
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	4413      	add	r3, r2
 8005402:	3304      	adds	r3, #4
 8005404:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2201      	movs	r2, #1
 800540a:	705a      	strb	r2, [r3, #1]
 800540c:	e00f      	b.n	800542e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800540e:	78fb      	ldrb	r3, [r7, #3]
 8005410:	f003 020f 	and.w	r2, r3, #15
 8005414:	4613      	mov	r3, r2
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	4413      	add	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	4413      	add	r3, r2
 8005424:	3304      	adds	r3, #4
 8005426:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800542e:	78fb      	ldrb	r3, [r7, #3]
 8005430:	f003 030f 	and.w	r3, r3, #15
 8005434:	b2da      	uxtb	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005440:	2b01      	cmp	r3, #1
 8005442:	d101      	bne.n	8005448 <HAL_PCD_EP_Close+0x6e>
 8005444:	2302      	movs	r3, #2
 8005446:	e00e      	b.n	8005466 <HAL_PCD_EP_Close+0x8c>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68f9      	ldr	r1, [r7, #12]
 8005456:	4618      	mov	r0, r3
 8005458:	f002 f9d8 	bl	800780c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b086      	sub	sp, #24
 8005472:	af00      	add	r7, sp, #0
 8005474:	60f8      	str	r0, [r7, #12]
 8005476:	607a      	str	r2, [r7, #4]
 8005478:	603b      	str	r3, [r7, #0]
 800547a:	460b      	mov	r3, r1
 800547c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800547e:	7afb      	ldrb	r3, [r7, #11]
 8005480:	f003 020f 	and.w	r2, r3, #15
 8005484:	4613      	mov	r3, r2
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	4413      	add	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4413      	add	r3, r2
 8005494:	3304      	adds	r3, #4
 8005496:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	2200      	movs	r2, #0
 80054a8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	2200      	movs	r2, #0
 80054ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054b0:	7afb      	ldrb	r3, [r7, #11]
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d102      	bne.n	80054ca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054ca:	7afb      	ldrb	r3, [r7, #11]
 80054cc:	f003 030f 	and.w	r3, r3, #15
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d109      	bne.n	80054e8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6818      	ldr	r0, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	461a      	mov	r2, r3
 80054e0:	6979      	ldr	r1, [r7, #20]
 80054e2:	f002 fcb7 	bl	8007e54 <USB_EP0StartXfer>
 80054e6:	e008      	b.n	80054fa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6818      	ldr	r0, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	461a      	mov	r2, r3
 80054f4:	6979      	ldr	r1, [r7, #20]
 80054f6:	f002 fa65 	bl	80079c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3718      	adds	r7, #24
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	460b      	mov	r3, r1
 800550e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005510:	78fb      	ldrb	r3, [r7, #3]
 8005512:	f003 020f 	and.w	r2, r3, #15
 8005516:	6879      	ldr	r1, [r7, #4]
 8005518:	4613      	mov	r3, r2
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	4413      	add	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	440b      	add	r3, r1
 8005522:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005526:	681b      	ldr	r3, [r3, #0]
}
 8005528:	4618      	mov	r0, r3
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	607a      	str	r2, [r7, #4]
 800553e:	603b      	str	r3, [r7, #0]
 8005540:	460b      	mov	r3, r1
 8005542:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005544:	7afb      	ldrb	r3, [r7, #11]
 8005546:	f003 020f 	and.w	r2, r3, #15
 800554a:	4613      	mov	r3, r2
 800554c:	00db      	lsls	r3, r3, #3
 800554e:	4413      	add	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	3338      	adds	r3, #56	; 0x38
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4413      	add	r3, r2
 8005558:	3304      	adds	r3, #4
 800555a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	2200      	movs	r2, #0
 800556c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2201      	movs	r2, #1
 8005572:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005574:	7afb      	ldrb	r3, [r7, #11]
 8005576:	f003 030f 	and.w	r3, r3, #15
 800557a:	b2da      	uxtb	r2, r3
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d102      	bne.n	800558e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800558e:	7afb      	ldrb	r3, [r7, #11]
 8005590:	f003 030f 	and.w	r3, r3, #15
 8005594:	2b00      	cmp	r3, #0
 8005596:	d109      	bne.n	80055ac <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6818      	ldr	r0, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	461a      	mov	r2, r3
 80055a4:	6979      	ldr	r1, [r7, #20]
 80055a6:	f002 fc55 	bl	8007e54 <USB_EP0StartXfer>
 80055aa:	e008      	b.n	80055be <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6818      	ldr	r0, [r3, #0]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	461a      	mov	r2, r3
 80055b8:	6979      	ldr	r1, [r7, #20]
 80055ba:	f002 fa03 	bl	80079c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3718      	adds	r7, #24
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	460b      	mov	r3, r1
 80055d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80055d4:	78fb      	ldrb	r3, [r7, #3]
 80055d6:	f003 020f 	and.w	r2, r3, #15
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d901      	bls.n	80055e6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e050      	b.n	8005688 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80055e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	da0f      	bge.n	800560e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055ee:	78fb      	ldrb	r3, [r7, #3]
 80055f0:	f003 020f 	and.w	r2, r3, #15
 80055f4:	4613      	mov	r3, r2
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	4413      	add	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	3338      	adds	r3, #56	; 0x38
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	4413      	add	r3, r2
 8005602:	3304      	adds	r3, #4
 8005604:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2201      	movs	r2, #1
 800560a:	705a      	strb	r2, [r3, #1]
 800560c:	e00d      	b.n	800562a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800560e:	78fa      	ldrb	r2, [r7, #3]
 8005610:	4613      	mov	r3, r2
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	4413      	add	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	4413      	add	r3, r2
 8005620:	3304      	adds	r3, #4
 8005622:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2201      	movs	r2, #1
 800562e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005630:	78fb      	ldrb	r3, [r7, #3]
 8005632:	f003 030f 	and.w	r3, r3, #15
 8005636:	b2da      	uxtb	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005642:	2b01      	cmp	r3, #1
 8005644:	d101      	bne.n	800564a <HAL_PCD_EP_SetStall+0x82>
 8005646:	2302      	movs	r3, #2
 8005648:	e01e      	b.n	8005688 <HAL_PCD_EP_SetStall+0xc0>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68f9      	ldr	r1, [r7, #12]
 8005658:	4618      	mov	r0, r3
 800565a:	f002 fe93 	bl	8008384 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800565e:	78fb      	ldrb	r3, [r7, #3]
 8005660:	f003 030f 	and.w	r3, r3, #15
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10a      	bne.n	800567e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6818      	ldr	r0, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	b2d9      	uxtb	r1, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005678:	461a      	mov	r2, r3
 800567a:	f003 f883 	bl	8008784 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	460b      	mov	r3, r1
 800569a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800569c:	78fb      	ldrb	r3, [r7, #3]
 800569e:	f003 020f 	and.w	r2, r3, #15
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d901      	bls.n	80056ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e042      	b.n	8005734 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80056ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	da0f      	bge.n	80056d6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056b6:	78fb      	ldrb	r3, [r7, #3]
 80056b8:	f003 020f 	and.w	r2, r3, #15
 80056bc:	4613      	mov	r3, r2
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	4413      	add	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	3338      	adds	r3, #56	; 0x38
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	4413      	add	r3, r2
 80056ca:	3304      	adds	r3, #4
 80056cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2201      	movs	r2, #1
 80056d2:	705a      	strb	r2, [r3, #1]
 80056d4:	e00f      	b.n	80056f6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056d6:	78fb      	ldrb	r3, [r7, #3]
 80056d8:	f003 020f 	and.w	r2, r3, #15
 80056dc:	4613      	mov	r3, r2
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	4413      	add	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	4413      	add	r3, r2
 80056ec:	3304      	adds	r3, #4
 80056ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056fc:	78fb      	ldrb	r3, [r7, #3]
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	b2da      	uxtb	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800570e:	2b01      	cmp	r3, #1
 8005710:	d101      	bne.n	8005716 <HAL_PCD_EP_ClrStall+0x86>
 8005712:	2302      	movs	r3, #2
 8005714:	e00e      	b.n	8005734 <HAL_PCD_EP_ClrStall+0xa4>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68f9      	ldr	r1, [r7, #12]
 8005724:	4618      	mov	r0, r3
 8005726:	f002 fe9b 	bl	8008460 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	460b      	mov	r3, r1
 8005746:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005748:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800574c:	2b00      	cmp	r3, #0
 800574e:	da0c      	bge.n	800576a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005750:	78fb      	ldrb	r3, [r7, #3]
 8005752:	f003 020f 	and.w	r2, r3, #15
 8005756:	4613      	mov	r3, r2
 8005758:	00db      	lsls	r3, r3, #3
 800575a:	4413      	add	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	3338      	adds	r3, #56	; 0x38
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	4413      	add	r3, r2
 8005764:	3304      	adds	r3, #4
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	e00c      	b.n	8005784 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800576a:	78fb      	ldrb	r3, [r7, #3]
 800576c:	f003 020f 	and.w	r2, r3, #15
 8005770:	4613      	mov	r3, r2
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	4413      	add	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	4413      	add	r3, r2
 8005780:	3304      	adds	r3, #4
 8005782:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68f9      	ldr	r1, [r7, #12]
 800578a:	4618      	mov	r0, r3
 800578c:	f002 fcba 	bl	8008104 <USB_EPStopXfer>
 8005790:	4603      	mov	r3, r0
 8005792:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005794:	7afb      	ldrb	r3, [r7, #11]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b08a      	sub	sp, #40	; 0x28
 80057a2:	af02      	add	r7, sp, #8
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	4613      	mov	r3, r2
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	4413      	add	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	3338      	adds	r3, #56	; 0x38
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	4413      	add	r3, r2
 80057c2:	3304      	adds	r3, #4
 80057c4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6a1a      	ldr	r2, [r3, #32]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d901      	bls.n	80057d6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e06c      	b.n	80058b0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	699a      	ldr	r2, [r3, #24]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	69fa      	ldr	r2, [r7, #28]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d902      	bls.n	80057f2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	3303      	adds	r3, #3
 80057f6:	089b      	lsrs	r3, r3, #2
 80057f8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80057fa:	e02b      	b.n	8005854 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	699a      	ldr	r2, [r3, #24]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	69fa      	ldr	r2, [r7, #28]
 800580e:	429a      	cmp	r2, r3
 8005810:	d902      	bls.n	8005818 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	3303      	adds	r3, #3
 800581c:	089b      	lsrs	r3, r3, #2
 800581e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6919      	ldr	r1, [r3, #16]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	b2da      	uxtb	r2, r3
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005830:	b2db      	uxtb	r3, r3
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	4603      	mov	r3, r0
 8005836:	6978      	ldr	r0, [r7, #20]
 8005838:	f002 fd0e 	bl	8008258 <USB_WritePacket>

    ep->xfer_buff  += len;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	691a      	ldr	r2, [r3, #16]
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	441a      	add	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6a1a      	ldr	r2, [r3, #32]
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	441a      	add	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	4413      	add	r3, r2
 800585c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	b29b      	uxth	r3, r3
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	429a      	cmp	r2, r3
 8005868:	d809      	bhi.n	800587e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6a1a      	ldr	r2, [r3, #32]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005872:	429a      	cmp	r2, r3
 8005874:	d203      	bcs.n	800587e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1be      	bne.n	80057fc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	699a      	ldr	r2, [r3, #24]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	429a      	cmp	r2, r3
 8005888:	d811      	bhi.n	80058ae <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	f003 030f 	and.w	r3, r3, #15
 8005890:	2201      	movs	r2, #1
 8005892:	fa02 f303 	lsl.w	r3, r2, r3
 8005896:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800589e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	43db      	mvns	r3, r3
 80058a4:	6939      	ldr	r1, [r7, #16]
 80058a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058aa:	4013      	ands	r3, r2
 80058ac:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3720      	adds	r7, #32
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b088      	sub	sp, #32
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	333c      	adds	r3, #60	; 0x3c
 80058d0:	3304      	adds	r3, #4
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d17b      	bne.n	80059e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	f003 0308 	and.w	r3, r3, #8
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d015      	beq.n	8005924 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	4a61      	ldr	r2, [pc, #388]	; (8005a80 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	f240 80b9 	bls.w	8005a74 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 80b3 	beq.w	8005a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591a:	461a      	mov	r2, r3
 800591c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005920:	6093      	str	r3, [r2, #8]
 8005922:	e0a7      	b.n	8005a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	f003 0320 	and.w	r3, r3, #32
 800592a:	2b00      	cmp	r3, #0
 800592c:	d009      	beq.n	8005942 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	4413      	add	r3, r2
 8005936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593a:	461a      	mov	r2, r3
 800593c:	2320      	movs	r3, #32
 800593e:	6093      	str	r3, [r2, #8]
 8005940:	e098      	b.n	8005a74 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005948:	2b00      	cmp	r3, #0
 800594a:	f040 8093 	bne.w	8005a74 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	4a4b      	ldr	r2, [pc, #300]	; (8005a80 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d90f      	bls.n	8005976 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00a      	beq.n	8005976 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596c:	461a      	mov	r2, r3
 800596e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005972:	6093      	str	r3, [r2, #8]
 8005974:	e07e      	b.n	8005a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	4613      	mov	r3, r2
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	4413      	add	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	4413      	add	r3, r2
 8005988:	3304      	adds	r3, #4
 800598a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	69da      	ldr	r2, [r3, #28]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	0159      	lsls	r1, r3, #5
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	440b      	add	r3, r1
 8005998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059a2:	1ad2      	subs	r2, r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d114      	bne.n	80059d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d109      	bne.n	80059ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6818      	ldr	r0, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80059c0:	461a      	mov	r2, r3
 80059c2:	2101      	movs	r1, #1
 80059c4:	f002 fede 	bl	8008784 <USB_EP0_OutStart>
 80059c8:	e006      	b.n	80059d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	691a      	ldr	r2, [r3, #16]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	441a      	add	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	4619      	mov	r1, r3
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f013 fb32 	bl	8019048 <HAL_PCD_DataOutStageCallback>
 80059e4:	e046      	b.n	8005a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	4a26      	ldr	r2, [pc, #152]	; (8005a84 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d124      	bne.n	8005a38 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00a      	beq.n	8005a0e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a04:	461a      	mov	r2, r3
 8005a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a0a:	6093      	str	r3, [r2, #8]
 8005a0c:	e032      	b.n	8005a74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	f003 0320 	and.w	r3, r3, #32
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d008      	beq.n	8005a2a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a24:	461a      	mov	r2, r3
 8005a26:	2320      	movs	r3, #32
 8005a28:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	4619      	mov	r1, r3
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f013 fb09 	bl	8019048 <HAL_PCD_DataOutStageCallback>
 8005a36:	e01d      	b.n	8005a74 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d114      	bne.n	8005a68 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005a3e:	6879      	ldr	r1, [r7, #4]
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	4613      	mov	r3, r2
 8005a44:	00db      	lsls	r3, r3, #3
 8005a46:	4413      	add	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	440b      	add	r3, r1
 8005a4c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d108      	bne.n	8005a68 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6818      	ldr	r0, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a60:	461a      	mov	r2, r3
 8005a62:	2100      	movs	r1, #0
 8005a64:	f002 fe8e 	bl	8008784 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f013 faea 	bl	8019048 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3720      	adds	r7, #32
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	4f54300a 	.word	0x4f54300a
 8005a84:	4f54310a 	.word	0x4f54310a

08005a88 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	333c      	adds	r3, #60	; 0x3c
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	4a15      	ldr	r2, [pc, #84]	; (8005b10 <PCD_EP_OutSetupPacket_int+0x88>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d90e      	bls.n	8005adc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d009      	beq.n	8005adc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ada:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f013 faa1 	bl	8019024 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	4a0a      	ldr	r2, [pc, #40]	; (8005b10 <PCD_EP_OutSetupPacket_int+0x88>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d90c      	bls.n	8005b04 <PCD_EP_OutSetupPacket_int+0x7c>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d108      	bne.n	8005b04 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6818      	ldr	r0, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005afc:	461a      	mov	r2, r3
 8005afe:	2101      	movs	r1, #1
 8005b00:	f002 fe40 	bl	8008784 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	4f54300a 	.word	0x4f54300a

08005b14 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	70fb      	strb	r3, [r7, #3]
 8005b20:	4613      	mov	r3, r2
 8005b22:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d107      	bne.n	8005b42 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005b32:	883b      	ldrh	r3, [r7, #0]
 8005b34:	0419      	lsls	r1, r3, #16
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	629a      	str	r2, [r3, #40]	; 0x28
 8005b40:	e028      	b.n	8005b94 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b48:	0c1b      	lsrs	r3, r3, #16
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005b50:	2300      	movs	r3, #0
 8005b52:	73fb      	strb	r3, [r7, #15]
 8005b54:	e00d      	b.n	8005b72 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	7bfb      	ldrb	r3, [r7, #15]
 8005b5c:	3340      	adds	r3, #64	; 0x40
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	0c1b      	lsrs	r3, r3, #16
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	4413      	add	r3, r2
 8005b6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	73fb      	strb	r3, [r7, #15]
 8005b72:	7bfa      	ldrb	r2, [r7, #15]
 8005b74:	78fb      	ldrb	r3, [r7, #3]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d3ec      	bcc.n	8005b56 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005b7c:	883b      	ldrh	r3, [r7, #0]
 8005b7e:	0418      	lsls	r0, r3, #16
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6819      	ldr	r1, [r3, #0]
 8005b84:	78fb      	ldrb	r3, [r7, #3]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	4302      	orrs	r2, r0
 8005b8c:	3340      	adds	r3, #64	; 0x40
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	440b      	add	r3, r1
 8005b92:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	460b      	mov	r3, r1
 8005bac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	887a      	ldrh	r2, [r7, #2]
 8005bb4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e267      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d075      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bfa:	4b88      	ldr	r3, [pc, #544]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f003 030c 	and.w	r3, r3, #12
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d00c      	beq.n	8005c20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c06:	4b85      	ldr	r3, [pc, #532]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c0e:	2b08      	cmp	r3, #8
 8005c10:	d112      	bne.n	8005c38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c12:	4b82      	ldr	r3, [pc, #520]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c1e:	d10b      	bne.n	8005c38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c20:	4b7e      	ldr	r3, [pc, #504]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d05b      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x108>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d157      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e242      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c40:	d106      	bne.n	8005c50 <HAL_RCC_OscConfig+0x74>
 8005c42:	4b76      	ldr	r3, [pc, #472]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a75      	ldr	r2, [pc, #468]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c4c:	6013      	str	r3, [r2, #0]
 8005c4e:	e01d      	b.n	8005c8c <HAL_RCC_OscConfig+0xb0>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c58:	d10c      	bne.n	8005c74 <HAL_RCC_OscConfig+0x98>
 8005c5a:	4b70      	ldr	r3, [pc, #448]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a6f      	ldr	r2, [pc, #444]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c64:	6013      	str	r3, [r2, #0]
 8005c66:	4b6d      	ldr	r3, [pc, #436]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a6c      	ldr	r2, [pc, #432]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c70:	6013      	str	r3, [r2, #0]
 8005c72:	e00b      	b.n	8005c8c <HAL_RCC_OscConfig+0xb0>
 8005c74:	4b69      	ldr	r3, [pc, #420]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a68      	ldr	r2, [pc, #416]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c7e:	6013      	str	r3, [r2, #0]
 8005c80:	4b66      	ldr	r3, [pc, #408]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a65      	ldr	r2, [pc, #404]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d013      	beq.n	8005cbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c94:	f7fe fa12 	bl	80040bc <HAL_GetTick>
 8005c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c9a:	e008      	b.n	8005cae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c9c:	f7fe fa0e 	bl	80040bc <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	2b64      	cmp	r3, #100	; 0x64
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e207      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cae:	4b5b      	ldr	r3, [pc, #364]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d0f0      	beq.n	8005c9c <HAL_RCC_OscConfig+0xc0>
 8005cba:	e014      	b.n	8005ce6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cbc:	f7fe f9fe 	bl	80040bc <HAL_GetTick>
 8005cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cc2:	e008      	b.n	8005cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cc4:	f7fe f9fa 	bl	80040bc <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b64      	cmp	r3, #100	; 0x64
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e1f3      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cd6:	4b51      	ldr	r3, [pc, #324]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1f0      	bne.n	8005cc4 <HAL_RCC_OscConfig+0xe8>
 8005ce2:	e000      	b.n	8005ce6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d063      	beq.n	8005dba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cf2:	4b4a      	ldr	r3, [pc, #296]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f003 030c 	and.w	r3, r3, #12
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00b      	beq.n	8005d16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cfe:	4b47      	ldr	r3, [pc, #284]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d06:	2b08      	cmp	r3, #8
 8005d08:	d11c      	bne.n	8005d44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d0a:	4b44      	ldr	r3, [pc, #272]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d116      	bne.n	8005d44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d16:	4b41      	ldr	r3, [pc, #260]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d005      	beq.n	8005d2e <HAL_RCC_OscConfig+0x152>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d001      	beq.n	8005d2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e1c7      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d2e:	4b3b      	ldr	r3, [pc, #236]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	00db      	lsls	r3, r3, #3
 8005d3c:	4937      	ldr	r1, [pc, #220]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d42:	e03a      	b.n	8005dba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d020      	beq.n	8005d8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d4c:	4b34      	ldr	r3, [pc, #208]	; (8005e20 <HAL_RCC_OscConfig+0x244>)
 8005d4e:	2201      	movs	r2, #1
 8005d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d52:	f7fe f9b3 	bl	80040bc <HAL_GetTick>
 8005d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d58:	e008      	b.n	8005d6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d5a:	f7fe f9af 	bl	80040bc <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d901      	bls.n	8005d6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e1a8      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d6c:	4b2b      	ldr	r3, [pc, #172]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d0f0      	beq.n	8005d5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d78:	4b28      	ldr	r3, [pc, #160]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	4925      	ldr	r1, [pc, #148]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	600b      	str	r3, [r1, #0]
 8005d8c:	e015      	b.n	8005dba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d8e:	4b24      	ldr	r3, [pc, #144]	; (8005e20 <HAL_RCC_OscConfig+0x244>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d94:	f7fe f992 	bl	80040bc <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d9c:	f7fe f98e 	bl	80040bc <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e187      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dae:	4b1b      	ldr	r3, [pc, #108]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1f0      	bne.n	8005d9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0308 	and.w	r3, r3, #8
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d036      	beq.n	8005e34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d016      	beq.n	8005dfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dce:	4b15      	ldr	r3, [pc, #84]	; (8005e24 <HAL_RCC_OscConfig+0x248>)
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd4:	f7fe f972 	bl	80040bc <HAL_GetTick>
 8005dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dda:	e008      	b.n	8005dee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ddc:	f7fe f96e 	bl	80040bc <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e167      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dee:	4b0b      	ldr	r3, [pc, #44]	; (8005e1c <HAL_RCC_OscConfig+0x240>)
 8005df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d0f0      	beq.n	8005ddc <HAL_RCC_OscConfig+0x200>
 8005dfa:	e01b      	b.n	8005e34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dfc:	4b09      	ldr	r3, [pc, #36]	; (8005e24 <HAL_RCC_OscConfig+0x248>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e02:	f7fe f95b 	bl	80040bc <HAL_GetTick>
 8005e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e08:	e00e      	b.n	8005e28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e0a:	f7fe f957 	bl	80040bc <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d907      	bls.n	8005e28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e150      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
 8005e1c:	40023800 	.word	0x40023800
 8005e20:	42470000 	.word	0x42470000
 8005e24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e28:	4b88      	ldr	r3, [pc, #544]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1ea      	bne.n	8005e0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 8097 	beq.w	8005f70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e42:	2300      	movs	r3, #0
 8005e44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e46:	4b81      	ldr	r3, [pc, #516]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10f      	bne.n	8005e72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e52:	2300      	movs	r3, #0
 8005e54:	60bb      	str	r3, [r7, #8]
 8005e56:	4b7d      	ldr	r3, [pc, #500]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5a:	4a7c      	ldr	r2, [pc, #496]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e60:	6413      	str	r3, [r2, #64]	; 0x40
 8005e62:	4b7a      	ldr	r3, [pc, #488]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e6a:	60bb      	str	r3, [r7, #8]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e72:	4b77      	ldr	r3, [pc, #476]	; (8006050 <HAL_RCC_OscConfig+0x474>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d118      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e7e:	4b74      	ldr	r3, [pc, #464]	; (8006050 <HAL_RCC_OscConfig+0x474>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a73      	ldr	r2, [pc, #460]	; (8006050 <HAL_RCC_OscConfig+0x474>)
 8005e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e8a:	f7fe f917 	bl	80040bc <HAL_GetTick>
 8005e8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e90:	e008      	b.n	8005ea4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e92:	f7fe f913 	bl	80040bc <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e10c      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ea4:	4b6a      	ldr	r3, [pc, #424]	; (8006050 <HAL_RCC_OscConfig+0x474>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0f0      	beq.n	8005e92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d106      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x2ea>
 8005eb8:	4b64      	ldr	r3, [pc, #400]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ebc:	4a63      	ldr	r2, [pc, #396]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005ebe:	f043 0301 	orr.w	r3, r3, #1
 8005ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ec4:	e01c      	b.n	8005f00 <HAL_RCC_OscConfig+0x324>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	2b05      	cmp	r3, #5
 8005ecc:	d10c      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x30c>
 8005ece:	4b5f      	ldr	r3, [pc, #380]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed2:	4a5e      	ldr	r2, [pc, #376]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005ed4:	f043 0304 	orr.w	r3, r3, #4
 8005ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8005eda:	4b5c      	ldr	r3, [pc, #368]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ede:	4a5b      	ldr	r2, [pc, #364]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005ee0:	f043 0301 	orr.w	r3, r3, #1
 8005ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ee6:	e00b      	b.n	8005f00 <HAL_RCC_OscConfig+0x324>
 8005ee8:	4b58      	ldr	r3, [pc, #352]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eec:	4a57      	ldr	r2, [pc, #348]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005eee:	f023 0301 	bic.w	r3, r3, #1
 8005ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ef4:	4b55      	ldr	r3, [pc, #340]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef8:	4a54      	ldr	r2, [pc, #336]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005efa:	f023 0304 	bic.w	r3, r3, #4
 8005efe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d015      	beq.n	8005f34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f08:	f7fe f8d8 	bl	80040bc <HAL_GetTick>
 8005f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f0e:	e00a      	b.n	8005f26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f10:	f7fe f8d4 	bl	80040bc <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e0cb      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f26:	4b49      	ldr	r3, [pc, #292]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d0ee      	beq.n	8005f10 <HAL_RCC_OscConfig+0x334>
 8005f32:	e014      	b.n	8005f5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f34:	f7fe f8c2 	bl	80040bc <HAL_GetTick>
 8005f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f3a:	e00a      	b.n	8005f52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f3c:	f7fe f8be 	bl	80040bc <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d901      	bls.n	8005f52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e0b5      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f52:	4b3e      	ldr	r3, [pc, #248]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1ee      	bne.n	8005f3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f5e:	7dfb      	ldrb	r3, [r7, #23]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d105      	bne.n	8005f70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f64:	4b39      	ldr	r3, [pc, #228]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f68:	4a38      	ldr	r2, [pc, #224]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005f6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f000 80a1 	beq.w	80060bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f7a:	4b34      	ldr	r3, [pc, #208]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 030c 	and.w	r3, r3, #12
 8005f82:	2b08      	cmp	r3, #8
 8005f84:	d05c      	beq.n	8006040 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d141      	bne.n	8006012 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f8e:	4b31      	ldr	r3, [pc, #196]	; (8006054 <HAL_RCC_OscConfig+0x478>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f94:	f7fe f892 	bl	80040bc <HAL_GetTick>
 8005f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f9a:	e008      	b.n	8005fae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f9c:	f7fe f88e 	bl	80040bc <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e087      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fae:	4b27      	ldr	r3, [pc, #156]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1f0      	bne.n	8005f9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	69da      	ldr	r2, [r3, #28]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	019b      	lsls	r3, r3, #6
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd0:	085b      	lsrs	r3, r3, #1
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	041b      	lsls	r3, r3, #16
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fdc:	061b      	lsls	r3, r3, #24
 8005fde:	491b      	ldr	r1, [pc, #108]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fe4:	4b1b      	ldr	r3, [pc, #108]	; (8006054 <HAL_RCC_OscConfig+0x478>)
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fea:	f7fe f867 	bl	80040bc <HAL_GetTick>
 8005fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ff0:	e008      	b.n	8006004 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ff2:	f7fe f863 	bl	80040bc <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d901      	bls.n	8006004 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e05c      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006004:	4b11      	ldr	r3, [pc, #68]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d0f0      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x416>
 8006010:	e054      	b.n	80060bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006012:	4b10      	ldr	r3, [pc, #64]	; (8006054 <HAL_RCC_OscConfig+0x478>)
 8006014:	2200      	movs	r2, #0
 8006016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006018:	f7fe f850 	bl	80040bc <HAL_GetTick>
 800601c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800601e:	e008      	b.n	8006032 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006020:	f7fe f84c 	bl	80040bc <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	2b02      	cmp	r3, #2
 800602c:	d901      	bls.n	8006032 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e045      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006032:	4b06      	ldr	r3, [pc, #24]	; (800604c <HAL_RCC_OscConfig+0x470>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1f0      	bne.n	8006020 <HAL_RCC_OscConfig+0x444>
 800603e:	e03d      	b.n	80060bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d107      	bne.n	8006058 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e038      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
 800604c:	40023800 	.word	0x40023800
 8006050:	40007000 	.word	0x40007000
 8006054:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006058:	4b1b      	ldr	r3, [pc, #108]	; (80060c8 <HAL_RCC_OscConfig+0x4ec>)
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d028      	beq.n	80060b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006070:	429a      	cmp	r2, r3
 8006072:	d121      	bne.n	80060b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800607e:	429a      	cmp	r2, r3
 8006080:	d11a      	bne.n	80060b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006088:	4013      	ands	r3, r2
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800608e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006090:	4293      	cmp	r3, r2
 8006092:	d111      	bne.n	80060b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609e:	085b      	lsrs	r3, r3, #1
 80060a0:	3b01      	subs	r3, #1
 80060a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d107      	bne.n	80060b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d001      	beq.n	80060bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e000      	b.n	80060be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3718      	adds	r7, #24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	40023800 	.word	0x40023800

080060cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d101      	bne.n	80060e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e0cc      	b.n	800627a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060e0:	4b68      	ldr	r3, [pc, #416]	; (8006284 <HAL_RCC_ClockConfig+0x1b8>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0307 	and.w	r3, r3, #7
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d90c      	bls.n	8006108 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ee:	4b65      	ldr	r3, [pc, #404]	; (8006284 <HAL_RCC_ClockConfig+0x1b8>)
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	b2d2      	uxtb	r2, r2
 80060f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060f6:	4b63      	ldr	r3, [pc, #396]	; (8006284 <HAL_RCC_ClockConfig+0x1b8>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0307 	and.w	r3, r3, #7
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	429a      	cmp	r2, r3
 8006102:	d001      	beq.n	8006108 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e0b8      	b.n	800627a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0302 	and.w	r3, r3, #2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d020      	beq.n	8006156 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0304 	and.w	r3, r3, #4
 800611c:	2b00      	cmp	r3, #0
 800611e:	d005      	beq.n	800612c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006120:	4b59      	ldr	r3, [pc, #356]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	4a58      	ldr	r2, [pc, #352]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 8006126:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800612a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0308 	and.w	r3, r3, #8
 8006134:	2b00      	cmp	r3, #0
 8006136:	d005      	beq.n	8006144 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006138:	4b53      	ldr	r3, [pc, #332]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	4a52      	ldr	r2, [pc, #328]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 800613e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006142:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006144:	4b50      	ldr	r3, [pc, #320]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	494d      	ldr	r1, [pc, #308]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 8006152:	4313      	orrs	r3, r2
 8006154:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	d044      	beq.n	80061ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d107      	bne.n	800617a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800616a:	4b47      	ldr	r3, [pc, #284]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d119      	bne.n	80061aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e07f      	b.n	800627a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	2b02      	cmp	r3, #2
 8006180:	d003      	beq.n	800618a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006186:	2b03      	cmp	r3, #3
 8006188:	d107      	bne.n	800619a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800618a:	4b3f      	ldr	r3, [pc, #252]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d109      	bne.n	80061aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e06f      	b.n	800627a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800619a:	4b3b      	ldr	r3, [pc, #236]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e067      	b.n	800627a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061aa:	4b37      	ldr	r3, [pc, #220]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f023 0203 	bic.w	r2, r3, #3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	4934      	ldr	r1, [pc, #208]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061bc:	f7fd ff7e 	bl	80040bc <HAL_GetTick>
 80061c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061c2:	e00a      	b.n	80061da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061c4:	f7fd ff7a 	bl	80040bc <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d901      	bls.n	80061da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e04f      	b.n	800627a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061da:	4b2b      	ldr	r3, [pc, #172]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f003 020c 	and.w	r2, r3, #12
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d1eb      	bne.n	80061c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061ec:	4b25      	ldr	r3, [pc, #148]	; (8006284 <HAL_RCC_ClockConfig+0x1b8>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0307 	and.w	r3, r3, #7
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d20c      	bcs.n	8006214 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061fa:	4b22      	ldr	r3, [pc, #136]	; (8006284 <HAL_RCC_ClockConfig+0x1b8>)
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	b2d2      	uxtb	r2, r2
 8006200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006202:	4b20      	ldr	r3, [pc, #128]	; (8006284 <HAL_RCC_ClockConfig+0x1b8>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0307 	and.w	r3, r3, #7
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	429a      	cmp	r2, r3
 800620e:	d001      	beq.n	8006214 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e032      	b.n	800627a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	2b00      	cmp	r3, #0
 800621e:	d008      	beq.n	8006232 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006220:	4b19      	ldr	r3, [pc, #100]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	4916      	ldr	r1, [pc, #88]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 800622e:	4313      	orrs	r3, r2
 8006230:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0308 	and.w	r3, r3, #8
 800623a:	2b00      	cmp	r3, #0
 800623c:	d009      	beq.n	8006252 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800623e:	4b12      	ldr	r3, [pc, #72]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	00db      	lsls	r3, r3, #3
 800624c:	490e      	ldr	r1, [pc, #56]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 800624e:	4313      	orrs	r3, r2
 8006250:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006252:	f000 f821 	bl	8006298 <HAL_RCC_GetSysClockFreq>
 8006256:	4602      	mov	r2, r0
 8006258:	4b0b      	ldr	r3, [pc, #44]	; (8006288 <HAL_RCC_ClockConfig+0x1bc>)
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	091b      	lsrs	r3, r3, #4
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	490a      	ldr	r1, [pc, #40]	; (800628c <HAL_RCC_ClockConfig+0x1c0>)
 8006264:	5ccb      	ldrb	r3, [r1, r3]
 8006266:	fa22 f303 	lsr.w	r3, r2, r3
 800626a:	4a09      	ldr	r2, [pc, #36]	; (8006290 <HAL_RCC_ClockConfig+0x1c4>)
 800626c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800626e:	4b09      	ldr	r3, [pc, #36]	; (8006294 <HAL_RCC_ClockConfig+0x1c8>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4618      	mov	r0, r3
 8006274:	f7fd fede 	bl	8004034 <HAL_InitTick>

  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	40023c00 	.word	0x40023c00
 8006288:	40023800 	.word	0x40023800
 800628c:	0801e5bc 	.word	0x0801e5bc
 8006290:	20000058 	.word	0x20000058
 8006294:	2000005c 	.word	0x2000005c

08006298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800629c:	b094      	sub	sp, #80	; 0x50
 800629e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80062a0:	2300      	movs	r3, #0
 80062a2:	647b      	str	r3, [r7, #68]	; 0x44
 80062a4:	2300      	movs	r3, #0
 80062a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062a8:	2300      	movs	r3, #0
 80062aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80062ac:	2300      	movs	r3, #0
 80062ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062b0:	4b79      	ldr	r3, [pc, #484]	; (8006498 <HAL_RCC_GetSysClockFreq+0x200>)
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f003 030c 	and.w	r3, r3, #12
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d00d      	beq.n	80062d8 <HAL_RCC_GetSysClockFreq+0x40>
 80062bc:	2b08      	cmp	r3, #8
 80062be:	f200 80e1 	bhi.w	8006484 <HAL_RCC_GetSysClockFreq+0x1ec>
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d002      	beq.n	80062cc <HAL_RCC_GetSysClockFreq+0x34>
 80062c6:	2b04      	cmp	r3, #4
 80062c8:	d003      	beq.n	80062d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80062ca:	e0db      	b.n	8006484 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062cc:	4b73      	ldr	r3, [pc, #460]	; (800649c <HAL_RCC_GetSysClockFreq+0x204>)
 80062ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80062d0:	e0db      	b.n	800648a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062d2:	4b73      	ldr	r3, [pc, #460]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80062d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80062d6:	e0d8      	b.n	800648a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062d8:	4b6f      	ldr	r3, [pc, #444]	; (8006498 <HAL_RCC_GetSysClockFreq+0x200>)
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062e2:	4b6d      	ldr	r3, [pc, #436]	; (8006498 <HAL_RCC_GetSysClockFreq+0x200>)
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d063      	beq.n	80063b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062ee:	4b6a      	ldr	r3, [pc, #424]	; (8006498 <HAL_RCC_GetSysClockFreq+0x200>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	099b      	lsrs	r3, r3, #6
 80062f4:	2200      	movs	r2, #0
 80062f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80062f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80062fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006300:	633b      	str	r3, [r7, #48]	; 0x30
 8006302:	2300      	movs	r3, #0
 8006304:	637b      	str	r3, [r7, #52]	; 0x34
 8006306:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800630a:	4622      	mov	r2, r4
 800630c:	462b      	mov	r3, r5
 800630e:	f04f 0000 	mov.w	r0, #0
 8006312:	f04f 0100 	mov.w	r1, #0
 8006316:	0159      	lsls	r1, r3, #5
 8006318:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800631c:	0150      	lsls	r0, r2, #5
 800631e:	4602      	mov	r2, r0
 8006320:	460b      	mov	r3, r1
 8006322:	4621      	mov	r1, r4
 8006324:	1a51      	subs	r1, r2, r1
 8006326:	6139      	str	r1, [r7, #16]
 8006328:	4629      	mov	r1, r5
 800632a:	eb63 0301 	sbc.w	r3, r3, r1
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	f04f 0200 	mov.w	r2, #0
 8006334:	f04f 0300 	mov.w	r3, #0
 8006338:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800633c:	4659      	mov	r1, fp
 800633e:	018b      	lsls	r3, r1, #6
 8006340:	4651      	mov	r1, sl
 8006342:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006346:	4651      	mov	r1, sl
 8006348:	018a      	lsls	r2, r1, #6
 800634a:	4651      	mov	r1, sl
 800634c:	ebb2 0801 	subs.w	r8, r2, r1
 8006350:	4659      	mov	r1, fp
 8006352:	eb63 0901 	sbc.w	r9, r3, r1
 8006356:	f04f 0200 	mov.w	r2, #0
 800635a:	f04f 0300 	mov.w	r3, #0
 800635e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006362:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006366:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800636a:	4690      	mov	r8, r2
 800636c:	4699      	mov	r9, r3
 800636e:	4623      	mov	r3, r4
 8006370:	eb18 0303 	adds.w	r3, r8, r3
 8006374:	60bb      	str	r3, [r7, #8]
 8006376:	462b      	mov	r3, r5
 8006378:	eb49 0303 	adc.w	r3, r9, r3
 800637c:	60fb      	str	r3, [r7, #12]
 800637e:	f04f 0200 	mov.w	r2, #0
 8006382:	f04f 0300 	mov.w	r3, #0
 8006386:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800638a:	4629      	mov	r1, r5
 800638c:	024b      	lsls	r3, r1, #9
 800638e:	4621      	mov	r1, r4
 8006390:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006394:	4621      	mov	r1, r4
 8006396:	024a      	lsls	r2, r1, #9
 8006398:	4610      	mov	r0, r2
 800639a:	4619      	mov	r1, r3
 800639c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800639e:	2200      	movs	r2, #0
 80063a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80063a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063a8:	f7fa fcc8 	bl	8000d3c <__aeabi_uldivmod>
 80063ac:	4602      	mov	r2, r0
 80063ae:	460b      	mov	r3, r1
 80063b0:	4613      	mov	r3, r2
 80063b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063b4:	e058      	b.n	8006468 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063b6:	4b38      	ldr	r3, [pc, #224]	; (8006498 <HAL_RCC_GetSysClockFreq+0x200>)
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	099b      	lsrs	r3, r3, #6
 80063bc:	2200      	movs	r2, #0
 80063be:	4618      	mov	r0, r3
 80063c0:	4611      	mov	r1, r2
 80063c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80063c6:	623b      	str	r3, [r7, #32]
 80063c8:	2300      	movs	r3, #0
 80063ca:	627b      	str	r3, [r7, #36]	; 0x24
 80063cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80063d0:	4642      	mov	r2, r8
 80063d2:	464b      	mov	r3, r9
 80063d4:	f04f 0000 	mov.w	r0, #0
 80063d8:	f04f 0100 	mov.w	r1, #0
 80063dc:	0159      	lsls	r1, r3, #5
 80063de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063e2:	0150      	lsls	r0, r2, #5
 80063e4:	4602      	mov	r2, r0
 80063e6:	460b      	mov	r3, r1
 80063e8:	4641      	mov	r1, r8
 80063ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80063ee:	4649      	mov	r1, r9
 80063f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80063f4:	f04f 0200 	mov.w	r2, #0
 80063f8:	f04f 0300 	mov.w	r3, #0
 80063fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006400:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006404:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006408:	ebb2 040a 	subs.w	r4, r2, sl
 800640c:	eb63 050b 	sbc.w	r5, r3, fp
 8006410:	f04f 0200 	mov.w	r2, #0
 8006414:	f04f 0300 	mov.w	r3, #0
 8006418:	00eb      	lsls	r3, r5, #3
 800641a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800641e:	00e2      	lsls	r2, r4, #3
 8006420:	4614      	mov	r4, r2
 8006422:	461d      	mov	r5, r3
 8006424:	4643      	mov	r3, r8
 8006426:	18e3      	adds	r3, r4, r3
 8006428:	603b      	str	r3, [r7, #0]
 800642a:	464b      	mov	r3, r9
 800642c:	eb45 0303 	adc.w	r3, r5, r3
 8006430:	607b      	str	r3, [r7, #4]
 8006432:	f04f 0200 	mov.w	r2, #0
 8006436:	f04f 0300 	mov.w	r3, #0
 800643a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800643e:	4629      	mov	r1, r5
 8006440:	028b      	lsls	r3, r1, #10
 8006442:	4621      	mov	r1, r4
 8006444:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006448:	4621      	mov	r1, r4
 800644a:	028a      	lsls	r2, r1, #10
 800644c:	4610      	mov	r0, r2
 800644e:	4619      	mov	r1, r3
 8006450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006452:	2200      	movs	r2, #0
 8006454:	61bb      	str	r3, [r7, #24]
 8006456:	61fa      	str	r2, [r7, #28]
 8006458:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800645c:	f7fa fc6e 	bl	8000d3c <__aeabi_uldivmod>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	4613      	mov	r3, r2
 8006466:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006468:	4b0b      	ldr	r3, [pc, #44]	; (8006498 <HAL_RCC_GetSysClockFreq+0x200>)
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	0c1b      	lsrs	r3, r3, #16
 800646e:	f003 0303 	and.w	r3, r3, #3
 8006472:	3301      	adds	r3, #1
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006478:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800647a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800647c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006480:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006482:	e002      	b.n	800648a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006484:	4b05      	ldr	r3, [pc, #20]	; (800649c <HAL_RCC_GetSysClockFreq+0x204>)
 8006486:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006488:	bf00      	nop
    }
  }
  return sysclockfreq;
 800648a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800648c:	4618      	mov	r0, r3
 800648e:	3750      	adds	r7, #80	; 0x50
 8006490:	46bd      	mov	sp, r7
 8006492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006496:	bf00      	nop
 8006498:	40023800 	.word	0x40023800
 800649c:	00f42400 	.word	0x00f42400
 80064a0:	007a1200 	.word	0x007a1200

080064a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064a4:	b480      	push	{r7}
 80064a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064a8:	4b03      	ldr	r3, [pc, #12]	; (80064b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80064aa:	681b      	ldr	r3, [r3, #0]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	20000058 	.word	0x20000058

080064bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e07b      	b.n	80065c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d108      	bne.n	80064e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064de:	d009      	beq.n	80064f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	61da      	str	r2, [r3, #28]
 80064e6:	e005      	b.n	80064f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d106      	bne.n	8006514 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7fd fbf0 	bl	8003cf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2202      	movs	r2, #2
 8006518:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800652a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800653c:	431a      	orrs	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006546:	431a      	orrs	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	431a      	orrs	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	431a      	orrs	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006564:	431a      	orrs	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	69db      	ldr	r3, [r3, #28]
 800656a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800656e:	431a      	orrs	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006578:	ea42 0103 	orr.w	r1, r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006580:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	0c1b      	lsrs	r3, r3, #16
 8006592:	f003 0104 	and.w	r1, r3, #4
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659a:	f003 0210 	and.w	r2, r3, #16
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	69da      	ldr	r2, [r3, #28]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b088      	sub	sp, #32
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	60f8      	str	r0, [r7, #12]
 80065d6:	60b9      	str	r1, [r7, #8]
 80065d8:	603b      	str	r3, [r7, #0]
 80065da:	4613      	mov	r3, r2
 80065dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d101      	bne.n	80065f0 <HAL_SPI_Transmit+0x22>
 80065ec:	2302      	movs	r3, #2
 80065ee:	e126      	b.n	800683e <HAL_SPI_Transmit+0x270>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065f8:	f7fd fd60 	bl	80040bc <HAL_GetTick>
 80065fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80065fe:	88fb      	ldrh	r3, [r7, #6]
 8006600:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b01      	cmp	r3, #1
 800660c:	d002      	beq.n	8006614 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800660e:	2302      	movs	r3, #2
 8006610:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006612:	e10b      	b.n	800682c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d002      	beq.n	8006620 <HAL_SPI_Transmit+0x52>
 800661a:	88fb      	ldrh	r3, [r7, #6]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d102      	bne.n	8006626 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006624:	e102      	b.n	800682c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2203      	movs	r2, #3
 800662a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	88fa      	ldrh	r2, [r7, #6]
 800663e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	88fa      	ldrh	r2, [r7, #6]
 8006644:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800666c:	d10f      	bne.n	800668e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800667c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800668c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006698:	2b40      	cmp	r3, #64	; 0x40
 800669a:	d007      	beq.n	80066ac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066b4:	d14b      	bne.n	800674e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d002      	beq.n	80066c4 <HAL_SPI_Transmit+0xf6>
 80066be:	8afb      	ldrh	r3, [r7, #22]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d13e      	bne.n	8006742 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c8:	881a      	ldrh	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d4:	1c9a      	adds	r2, r3, #2
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066de:	b29b      	uxth	r3, r3
 80066e0:	3b01      	subs	r3, #1
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80066e8:	e02b      	b.n	8006742 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f003 0302 	and.w	r3, r3, #2
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d112      	bne.n	800671e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fc:	881a      	ldrh	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006708:	1c9a      	adds	r2, r3, #2
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006712:	b29b      	uxth	r3, r3
 8006714:	3b01      	subs	r3, #1
 8006716:	b29a      	uxth	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	86da      	strh	r2, [r3, #54]	; 0x36
 800671c:	e011      	b.n	8006742 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800671e:	f7fd fccd 	bl	80040bc <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	429a      	cmp	r2, r3
 800672c:	d803      	bhi.n	8006736 <HAL_SPI_Transmit+0x168>
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006734:	d102      	bne.n	800673c <HAL_SPI_Transmit+0x16e>
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d102      	bne.n	8006742 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006740:	e074      	b.n	800682c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006746:	b29b      	uxth	r3, r3
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1ce      	bne.n	80066ea <HAL_SPI_Transmit+0x11c>
 800674c:	e04c      	b.n	80067e8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d002      	beq.n	800675c <HAL_SPI_Transmit+0x18e>
 8006756:	8afb      	ldrh	r3, [r7, #22]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d140      	bne.n	80067de <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	330c      	adds	r3, #12
 8006766:	7812      	ldrb	r2, [r2, #0]
 8006768:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676e:	1c5a      	adds	r2, r3, #1
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006778:	b29b      	uxth	r3, r3
 800677a:	3b01      	subs	r3, #1
 800677c:	b29a      	uxth	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006782:	e02c      	b.n	80067de <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b02      	cmp	r3, #2
 8006790:	d113      	bne.n	80067ba <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	330c      	adds	r3, #12
 800679c:	7812      	ldrb	r2, [r2, #0]
 800679e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a4:	1c5a      	adds	r2, r3, #1
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	3b01      	subs	r3, #1
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80067b8:	e011      	b.n	80067de <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067ba:	f7fd fc7f 	bl	80040bc <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	683a      	ldr	r2, [r7, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d803      	bhi.n	80067d2 <HAL_SPI_Transmit+0x204>
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d0:	d102      	bne.n	80067d8 <HAL_SPI_Transmit+0x20a>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d102      	bne.n	80067de <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80067dc:	e026      	b.n	800682c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1cd      	bne.n	8006784 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067e8:	69ba      	ldr	r2, [r7, #24]
 80067ea:	6839      	ldr	r1, [r7, #0]
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 fbcb 	bl	8006f88 <SPI_EndRxTxTransaction>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d002      	beq.n	80067fe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2220      	movs	r2, #32
 80067fc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10a      	bne.n	800681c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006806:	2300      	movs	r3, #0
 8006808:	613b      	str	r3, [r7, #16]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	613b      	str	r3, [r7, #16]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	613b      	str	r3, [r7, #16]
 800681a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006820:	2b00      	cmp	r3, #0
 8006822:	d002      	beq.n	800682a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	77fb      	strb	r3, [r7, #31]
 8006828:	e000      	b.n	800682c <HAL_SPI_Transmit+0x25e>
  }

error:
 800682a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800683c:	7ffb      	ldrb	r3, [r7, #31]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3720      	adds	r7, #32
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b088      	sub	sp, #32
 800684a:	af02      	add	r7, sp, #8
 800684c:	60f8      	str	r0, [r7, #12]
 800684e:	60b9      	str	r1, [r7, #8]
 8006850:	603b      	str	r3, [r7, #0]
 8006852:	4613      	mov	r3, r2
 8006854:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006856:	2300      	movs	r3, #0
 8006858:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006862:	d112      	bne.n	800688a <HAL_SPI_Receive+0x44>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10e      	bne.n	800688a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2204      	movs	r2, #4
 8006870:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006874:	88fa      	ldrh	r2, [r7, #6]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	4613      	mov	r3, r2
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	68b9      	ldr	r1, [r7, #8]
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 f8f1 	bl	8006a68 <HAL_SPI_TransmitReceive>
 8006886:	4603      	mov	r3, r0
 8006888:	e0ea      	b.n	8006a60 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006890:	2b01      	cmp	r3, #1
 8006892:	d101      	bne.n	8006898 <HAL_SPI_Receive+0x52>
 8006894:	2302      	movs	r3, #2
 8006896:	e0e3      	b.n	8006a60 <HAL_SPI_Receive+0x21a>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068a0:	f7fd fc0c 	bl	80040bc <HAL_GetTick>
 80068a4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d002      	beq.n	80068b8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80068b2:	2302      	movs	r3, #2
 80068b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80068b6:	e0ca      	b.n	8006a4e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d002      	beq.n	80068c4 <HAL_SPI_Receive+0x7e>
 80068be:	88fb      	ldrh	r3, [r7, #6]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d102      	bne.n	80068ca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80068c8:	e0c1      	b.n	8006a4e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2204      	movs	r2, #4
 80068ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	88fa      	ldrh	r2, [r7, #6]
 80068e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	88fa      	ldrh	r2, [r7, #6]
 80068e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006910:	d10f      	bne.n	8006932 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006920:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006930:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693c:	2b40      	cmp	r3, #64	; 0x40
 800693e:	d007      	beq.n	8006950 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800694e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d162      	bne.n	8006a1e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006958:	e02e      	b.n	80069b8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b01      	cmp	r3, #1
 8006966:	d115      	bne.n	8006994 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f103 020c 	add.w	r2, r3, #12
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006974:	7812      	ldrb	r2, [r2, #0]
 8006976:	b2d2      	uxtb	r2, r2
 8006978:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697e:	1c5a      	adds	r2, r3, #1
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006988:	b29b      	uxth	r3, r3
 800698a:	3b01      	subs	r3, #1
 800698c:	b29a      	uxth	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006992:	e011      	b.n	80069b8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006994:	f7fd fb92 	bl	80040bc <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	683a      	ldr	r2, [r7, #0]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d803      	bhi.n	80069ac <HAL_SPI_Receive+0x166>
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069aa:	d102      	bne.n	80069b2 <HAL_SPI_Receive+0x16c>
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d102      	bne.n	80069b8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80069b6:	e04a      	b.n	8006a4e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069bc:	b29b      	uxth	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1cb      	bne.n	800695a <HAL_SPI_Receive+0x114>
 80069c2:	e031      	b.n	8006a28 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d113      	bne.n	80069fa <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68da      	ldr	r2, [r3, #12]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069dc:	b292      	uxth	r2, r2
 80069de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e4:	1c9a      	adds	r2, r3, #2
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	3b01      	subs	r3, #1
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069f8:	e011      	b.n	8006a1e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069fa:	f7fd fb5f 	bl	80040bc <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d803      	bhi.n	8006a12 <HAL_SPI_Receive+0x1cc>
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a10:	d102      	bne.n	8006a18 <HAL_SPI_Receive+0x1d2>
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d102      	bne.n	8006a1e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006a1c:	e017      	b.n	8006a4e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1cd      	bne.n	80069c4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	6839      	ldr	r1, [r7, #0]
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 fa45 	bl	8006ebc <SPI_EndRxTransaction>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d002      	beq.n	8006a3e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d002      	beq.n	8006a4c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	75fb      	strb	r3, [r7, #23]
 8006a4a:	e000      	b.n	8006a4e <HAL_SPI_Receive+0x208>
  }

error :
 8006a4c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3718      	adds	r7, #24
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b08c      	sub	sp, #48	; 0x30
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
 8006a74:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006a76:	2301      	movs	r3, #1
 8006a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d101      	bne.n	8006a8e <HAL_SPI_TransmitReceive+0x26>
 8006a8a:	2302      	movs	r3, #2
 8006a8c:	e18a      	b.n	8006da4 <HAL_SPI_TransmitReceive+0x33c>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a96:	f7fd fb11 	bl	80040bc <HAL_GetTick>
 8006a9a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006aac:	887b      	ldrh	r3, [r7, #2]
 8006aae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ab0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d00f      	beq.n	8006ad8 <HAL_SPI_TransmitReceive+0x70>
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006abe:	d107      	bne.n	8006ad0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d103      	bne.n	8006ad0 <HAL_SPI_TransmitReceive+0x68>
 8006ac8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006acc:	2b04      	cmp	r3, #4
 8006ace:	d003      	beq.n	8006ad8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006ad6:	e15b      	b.n	8006d90 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d005      	beq.n	8006aea <HAL_SPI_TransmitReceive+0x82>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d002      	beq.n	8006aea <HAL_SPI_TransmitReceive+0x82>
 8006ae4:	887b      	ldrh	r3, [r7, #2]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d103      	bne.n	8006af2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006af0:	e14e      	b.n	8006d90 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d003      	beq.n	8006b06 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2205      	movs	r2, #5
 8006b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	887a      	ldrh	r2, [r7, #2]
 8006b16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	887a      	ldrh	r2, [r7, #2]
 8006b1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	887a      	ldrh	r2, [r7, #2]
 8006b28:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	887a      	ldrh	r2, [r7, #2]
 8006b2e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b46:	2b40      	cmp	r3, #64	; 0x40
 8006b48:	d007      	beq.n	8006b5a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b62:	d178      	bne.n	8006c56 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d002      	beq.n	8006b72 <HAL_SPI_TransmitReceive+0x10a>
 8006b6c:	8b7b      	ldrh	r3, [r7, #26]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d166      	bne.n	8006c40 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b76:	881a      	ldrh	r2, [r3, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b82:	1c9a      	adds	r2, r3, #2
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b96:	e053      	b.n	8006c40 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d11b      	bne.n	8006bde <HAL_SPI_TransmitReceive+0x176>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d016      	beq.n	8006bde <HAL_SPI_TransmitReceive+0x176>
 8006bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d113      	bne.n	8006bde <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bba:	881a      	ldrh	r2, [r3, #0]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc6:	1c9a      	adds	r2, r3, #2
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f003 0301 	and.w	r3, r3, #1
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d119      	bne.n	8006c20 <HAL_SPI_TransmitReceive+0x1b8>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d014      	beq.n	8006c20 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68da      	ldr	r2, [r3, #12]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c00:	b292      	uxth	r2, r2
 8006c02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c08:	1c9a      	adds	r2, r3, #2
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	3b01      	subs	r3, #1
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c20:	f7fd fa4c 	bl	80040bc <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d807      	bhi.n	8006c40 <HAL_SPI_TransmitReceive+0x1d8>
 8006c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c36:	d003      	beq.n	8006c40 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006c3e:	e0a7      	b.n	8006d90 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1a6      	bne.n	8006b98 <HAL_SPI_TransmitReceive+0x130>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1a1      	bne.n	8006b98 <HAL_SPI_TransmitReceive+0x130>
 8006c54:	e07c      	b.n	8006d50 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d002      	beq.n	8006c64 <HAL_SPI_TransmitReceive+0x1fc>
 8006c5e:	8b7b      	ldrh	r3, [r7, #26]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d16b      	bne.n	8006d3c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	330c      	adds	r3, #12
 8006c6e:	7812      	ldrb	r2, [r2, #0]
 8006c70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c76:	1c5a      	adds	r2, r3, #1
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	3b01      	subs	r3, #1
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c8a:	e057      	b.n	8006d3c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d11c      	bne.n	8006cd4 <HAL_SPI_TransmitReceive+0x26c>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d017      	beq.n	8006cd4 <HAL_SPI_TransmitReceive+0x26c>
 8006ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d114      	bne.n	8006cd4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	330c      	adds	r3, #12
 8006cb4:	7812      	ldrb	r2, [r2, #0]
 8006cb6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cbc:	1c5a      	adds	r2, r3, #1
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d119      	bne.n	8006d16 <HAL_SPI_TransmitReceive+0x2ae>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d014      	beq.n	8006d16 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68da      	ldr	r2, [r3, #12]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf6:	b2d2      	uxtb	r2, r2
 8006cf8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d12:	2301      	movs	r3, #1
 8006d14:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d16:	f7fd f9d1 	bl	80040bc <HAL_GetTick>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d803      	bhi.n	8006d2e <HAL_SPI_TransmitReceive+0x2c6>
 8006d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d2c:	d102      	bne.n	8006d34 <HAL_SPI_TransmitReceive+0x2cc>
 8006d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d103      	bne.n	8006d3c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006d3a:	e029      	b.n	8006d90 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1a2      	bne.n	8006c8c <HAL_SPI_TransmitReceive+0x224>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d19d      	bne.n	8006c8c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f000 f917 	bl	8006f88 <SPI_EndRxTxTransaction>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d006      	beq.n	8006d6e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2220      	movs	r2, #32
 8006d6a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006d6c:	e010      	b.n	8006d90 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10b      	bne.n	8006d8e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d76:	2300      	movs	r3, #0
 8006d78:	617b      	str	r3, [r7, #20]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	617b      	str	r3, [r7, #20]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	e000      	b.n	8006d90 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006d8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006da0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3730      	adds	r7, #48	; 0x30
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b088      	sub	sp, #32
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	603b      	str	r3, [r7, #0]
 8006db8:	4613      	mov	r3, r2
 8006dba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006dbc:	f7fd f97e 	bl	80040bc <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc4:	1a9b      	subs	r3, r3, r2
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	4413      	add	r3, r2
 8006dca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006dcc:	f7fd f976 	bl	80040bc <HAL_GetTick>
 8006dd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006dd2:	4b39      	ldr	r3, [pc, #228]	; (8006eb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	015b      	lsls	r3, r3, #5
 8006dd8:	0d1b      	lsrs	r3, r3, #20
 8006dda:	69fa      	ldr	r2, [r7, #28]
 8006ddc:	fb02 f303 	mul.w	r3, r2, r3
 8006de0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006de2:	e054      	b.n	8006e8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dea:	d050      	beq.n	8006e8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006dec:	f7fd f966 	bl	80040bc <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	69fa      	ldr	r2, [r7, #28]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d902      	bls.n	8006e02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d13d      	bne.n	8006e7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e1a:	d111      	bne.n	8006e40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e24:	d004      	beq.n	8006e30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e2e:	d107      	bne.n	8006e40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e48:	d10f      	bne.n	8006e6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e017      	b.n	8006eae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e84:	2300      	movs	r3, #0
 8006e86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	689a      	ldr	r2, [r3, #8]
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	4013      	ands	r3, r2
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	bf0c      	ite	eq
 8006e9e:	2301      	moveq	r3, #1
 8006ea0:	2300      	movne	r3, #0
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	79fb      	ldrb	r3, [r7, #7]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d19b      	bne.n	8006de4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3720      	adds	r7, #32
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	20000058 	.word	0x20000058

08006ebc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af02      	add	r7, sp, #8
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ed0:	d111      	bne.n	8006ef6 <SPI_EndRxTransaction+0x3a>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eda:	d004      	beq.n	8006ee6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ee4:	d107      	bne.n	8006ef6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ef4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006efe:	d12a      	bne.n	8006f56 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f08:	d012      	beq.n	8006f30 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	2200      	movs	r2, #0
 8006f12:	2180      	movs	r1, #128	; 0x80
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f7ff ff49 	bl	8006dac <SPI_WaitFlagStateUntilTimeout>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d02d      	beq.n	8006f7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f24:	f043 0220 	orr.w	r2, r3, #32
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e026      	b.n	8006f7e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2200      	movs	r2, #0
 8006f38:	2101      	movs	r1, #1
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f7ff ff36 	bl	8006dac <SPI_WaitFlagStateUntilTimeout>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d01a      	beq.n	8006f7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f4a:	f043 0220 	orr.w	r2, r3, #32
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e013      	b.n	8006f7e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	2101      	movs	r1, #1
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f7ff ff23 	bl	8006dac <SPI_WaitFlagStateUntilTimeout>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d007      	beq.n	8006f7c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f70:	f043 0220 	orr.w	r2, r3, #32
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e000      	b.n	8006f7e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
	...

08006f88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b088      	sub	sp, #32
 8006f8c:	af02      	add	r7, sp, #8
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006f94:	4b1b      	ldr	r3, [pc, #108]	; (8007004 <SPI_EndRxTxTransaction+0x7c>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a1b      	ldr	r2, [pc, #108]	; (8007008 <SPI_EndRxTxTransaction+0x80>)
 8006f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f9e:	0d5b      	lsrs	r3, r3, #21
 8006fa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006fa4:	fb02 f303 	mul.w	r3, r2, r3
 8006fa8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fb2:	d112      	bne.n	8006fda <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	2180      	movs	r1, #128	; 0x80
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f7ff fef4 	bl	8006dac <SPI_WaitFlagStateUntilTimeout>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d016      	beq.n	8006ff8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fce:	f043 0220 	orr.w	r2, r3, #32
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e00f      	b.n	8006ffa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00a      	beq.n	8006ff6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff0:	2b80      	cmp	r3, #128	; 0x80
 8006ff2:	d0f2      	beq.n	8006fda <SPI_EndRxTxTransaction+0x52>
 8006ff4:	e000      	b.n	8006ff8 <SPI_EndRxTxTransaction+0x70>
        break;
 8006ff6:	bf00      	nop
  }

  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3718      	adds	r7, #24
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	20000058 	.word	0x20000058
 8007008:	165e9f81 	.word	0x165e9f81

0800700c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800700c:	b084      	sub	sp, #16
 800700e:	b580      	push	{r7, lr}
 8007010:	b084      	sub	sp, #16
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
 8007016:	f107 001c 	add.w	r0, r7, #28
 800701a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800701e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007020:	2b01      	cmp	r3, #1
 8007022:	d122      	bne.n	800706a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007028:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800704c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800704e:	2b01      	cmp	r3, #1
 8007050:	d105      	bne.n	800705e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f001 fbee 	bl	8008840 <USB_CoreReset>
 8007064:	4603      	mov	r3, r0
 8007066:	73fb      	strb	r3, [r7, #15]
 8007068:	e01a      	b.n	80070a0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f001 fbe2 	bl	8008840 <USB_CoreReset>
 800707c:	4603      	mov	r3, r0
 800707e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007082:	2b00      	cmp	r3, #0
 8007084:	d106      	bne.n	8007094 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	639a      	str	r2, [r3, #56]	; 0x38
 8007092:	e005      	b.n	80070a0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007098:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80070a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d10b      	bne.n	80070be <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f043 0206 	orr.w	r2, r3, #6
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f043 0220 	orr.w	r2, r3, #32
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80070be:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070ca:	b004      	add	sp, #16
 80070cc:	4770      	bx	lr
	...

080070d0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b087      	sub	sp, #28
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	4613      	mov	r3, r2
 80070dc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80070de:	79fb      	ldrb	r3, [r7, #7]
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d165      	bne.n	80071b0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	4a41      	ldr	r2, [pc, #260]	; (80071ec <USB_SetTurnaroundTime+0x11c>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d906      	bls.n	80070fa <USB_SetTurnaroundTime+0x2a>
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	4a40      	ldr	r2, [pc, #256]	; (80071f0 <USB_SetTurnaroundTime+0x120>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d202      	bcs.n	80070fa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80070f4:	230f      	movs	r3, #15
 80070f6:	617b      	str	r3, [r7, #20]
 80070f8:	e062      	b.n	80071c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	4a3c      	ldr	r2, [pc, #240]	; (80071f0 <USB_SetTurnaroundTime+0x120>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d306      	bcc.n	8007110 <USB_SetTurnaroundTime+0x40>
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	4a3b      	ldr	r2, [pc, #236]	; (80071f4 <USB_SetTurnaroundTime+0x124>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d202      	bcs.n	8007110 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800710a:	230e      	movs	r3, #14
 800710c:	617b      	str	r3, [r7, #20]
 800710e:	e057      	b.n	80071c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	4a38      	ldr	r2, [pc, #224]	; (80071f4 <USB_SetTurnaroundTime+0x124>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d306      	bcc.n	8007126 <USB_SetTurnaroundTime+0x56>
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	4a37      	ldr	r2, [pc, #220]	; (80071f8 <USB_SetTurnaroundTime+0x128>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d202      	bcs.n	8007126 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007120:	230d      	movs	r3, #13
 8007122:	617b      	str	r3, [r7, #20]
 8007124:	e04c      	b.n	80071c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	4a33      	ldr	r2, [pc, #204]	; (80071f8 <USB_SetTurnaroundTime+0x128>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d306      	bcc.n	800713c <USB_SetTurnaroundTime+0x6c>
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	4a32      	ldr	r2, [pc, #200]	; (80071fc <USB_SetTurnaroundTime+0x12c>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d802      	bhi.n	800713c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007136:	230c      	movs	r3, #12
 8007138:	617b      	str	r3, [r7, #20]
 800713a:	e041      	b.n	80071c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	4a2f      	ldr	r2, [pc, #188]	; (80071fc <USB_SetTurnaroundTime+0x12c>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d906      	bls.n	8007152 <USB_SetTurnaroundTime+0x82>
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	4a2e      	ldr	r2, [pc, #184]	; (8007200 <USB_SetTurnaroundTime+0x130>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d802      	bhi.n	8007152 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800714c:	230b      	movs	r3, #11
 800714e:	617b      	str	r3, [r7, #20]
 8007150:	e036      	b.n	80071c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	4a2a      	ldr	r2, [pc, #168]	; (8007200 <USB_SetTurnaroundTime+0x130>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d906      	bls.n	8007168 <USB_SetTurnaroundTime+0x98>
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	4a29      	ldr	r2, [pc, #164]	; (8007204 <USB_SetTurnaroundTime+0x134>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d802      	bhi.n	8007168 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007162:	230a      	movs	r3, #10
 8007164:	617b      	str	r3, [r7, #20]
 8007166:	e02b      	b.n	80071c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	4a26      	ldr	r2, [pc, #152]	; (8007204 <USB_SetTurnaroundTime+0x134>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d906      	bls.n	800717e <USB_SetTurnaroundTime+0xae>
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	4a25      	ldr	r2, [pc, #148]	; (8007208 <USB_SetTurnaroundTime+0x138>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d202      	bcs.n	800717e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007178:	2309      	movs	r3, #9
 800717a:	617b      	str	r3, [r7, #20]
 800717c:	e020      	b.n	80071c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	4a21      	ldr	r2, [pc, #132]	; (8007208 <USB_SetTurnaroundTime+0x138>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d306      	bcc.n	8007194 <USB_SetTurnaroundTime+0xc4>
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	4a20      	ldr	r2, [pc, #128]	; (800720c <USB_SetTurnaroundTime+0x13c>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d802      	bhi.n	8007194 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800718e:	2308      	movs	r3, #8
 8007190:	617b      	str	r3, [r7, #20]
 8007192:	e015      	b.n	80071c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	4a1d      	ldr	r2, [pc, #116]	; (800720c <USB_SetTurnaroundTime+0x13c>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d906      	bls.n	80071aa <USB_SetTurnaroundTime+0xda>
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	4a1c      	ldr	r2, [pc, #112]	; (8007210 <USB_SetTurnaroundTime+0x140>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d202      	bcs.n	80071aa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80071a4:	2307      	movs	r3, #7
 80071a6:	617b      	str	r3, [r7, #20]
 80071a8:	e00a      	b.n	80071c0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80071aa:	2306      	movs	r3, #6
 80071ac:	617b      	str	r3, [r7, #20]
 80071ae:	e007      	b.n	80071c0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80071b0:	79fb      	ldrb	r3, [r7, #7]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d102      	bne.n	80071bc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80071b6:	2309      	movs	r3, #9
 80071b8:	617b      	str	r3, [r7, #20]
 80071ba:	e001      	b.n	80071c0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80071bc:	2309      	movs	r3, #9
 80071be:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	68da      	ldr	r2, [r3, #12]
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	029b      	lsls	r3, r3, #10
 80071d4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80071d8:	431a      	orrs	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	371c      	adds	r7, #28
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	00d8acbf 	.word	0x00d8acbf
 80071f0:	00e4e1c0 	.word	0x00e4e1c0
 80071f4:	00f42400 	.word	0x00f42400
 80071f8:	01067380 	.word	0x01067380
 80071fc:	011a499f 	.word	0x011a499f
 8007200:	01312cff 	.word	0x01312cff
 8007204:	014ca43f 	.word	0x014ca43f
 8007208:	016e3600 	.word	0x016e3600
 800720c:	01a6ab1f 	.word	0x01a6ab1f
 8007210:	01e84800 	.word	0x01e84800

08007214 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f043 0201 	orr.w	r2, r3, #1
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	370c      	adds	r7, #12
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007236:	b480      	push	{r7}
 8007238:	b083      	sub	sp, #12
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f023 0201 	bic.w	r2, r3, #1
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	460b      	mov	r3, r1
 8007262:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007274:	78fb      	ldrb	r3, [r7, #3]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d115      	bne.n	80072a6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007286:	2001      	movs	r0, #1
 8007288:	f7fc ff24 	bl	80040d4 <HAL_Delay>
      ms++;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	3301      	adds	r3, #1
 8007290:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f001 fa45 	bl	8008722 <USB_GetMode>
 8007298:	4603      	mov	r3, r0
 800729a:	2b01      	cmp	r3, #1
 800729c:	d01e      	beq.n	80072dc <USB_SetCurrentMode+0x84>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2b31      	cmp	r3, #49	; 0x31
 80072a2:	d9f0      	bls.n	8007286 <USB_SetCurrentMode+0x2e>
 80072a4:	e01a      	b.n	80072dc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80072a6:	78fb      	ldrb	r3, [r7, #3]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d115      	bne.n	80072d8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80072b8:	2001      	movs	r0, #1
 80072ba:	f7fc ff0b 	bl	80040d4 <HAL_Delay>
      ms++;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3301      	adds	r3, #1
 80072c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f001 fa2c 	bl	8008722 <USB_GetMode>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d005      	beq.n	80072dc <USB_SetCurrentMode+0x84>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2b31      	cmp	r3, #49	; 0x31
 80072d4:	d9f0      	bls.n	80072b8 <USB_SetCurrentMode+0x60>
 80072d6:	e001      	b.n	80072dc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e005      	b.n	80072e8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2b32      	cmp	r3, #50	; 0x32
 80072e0:	d101      	bne.n	80072e6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e000      	b.n	80072e8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072f0:	b084      	sub	sp, #16
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b086      	sub	sp, #24
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80072fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800730a:	2300      	movs	r3, #0
 800730c:	613b      	str	r3, [r7, #16]
 800730e:	e009      	b.n	8007324 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	3340      	adds	r3, #64	; 0x40
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4413      	add	r3, r2
 800731a:	2200      	movs	r2, #0
 800731c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	3301      	adds	r3, #1
 8007322:	613b      	str	r3, [r7, #16]
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	2b0e      	cmp	r3, #14
 8007328:	d9f2      	bls.n	8007310 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800732a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800732c:	2b00      	cmp	r3, #0
 800732e:	d11c      	bne.n	800736a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800733e:	f043 0302 	orr.w	r3, r3, #2
 8007342:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007348:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007354:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007360:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	639a      	str	r2, [r3, #56]	; 0x38
 8007368:	e00b      	b.n	8007382 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007388:	461a      	mov	r2, r3
 800738a:	2300      	movs	r3, #0
 800738c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007394:	4619      	mov	r1, r3
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800739c:	461a      	mov	r2, r3
 800739e:	680b      	ldr	r3, [r1, #0]
 80073a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d10c      	bne.n	80073c2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80073a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d104      	bne.n	80073b8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80073ae:	2100      	movs	r1, #0
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f965 	bl	8007680 <USB_SetDevSpeed>
 80073b6:	e008      	b.n	80073ca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80073b8:	2101      	movs	r1, #1
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f960 	bl	8007680 <USB_SetDevSpeed>
 80073c0:	e003      	b.n	80073ca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80073c2:	2103      	movs	r1, #3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f95b 	bl	8007680 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073ca:	2110      	movs	r1, #16
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 f8f3 	bl	80075b8 <USB_FlushTxFifo>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f91f 	bl	8007620 <USB_FlushRxFifo>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d001      	beq.n	80073ec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073f2:	461a      	mov	r2, r3
 80073f4:	2300      	movs	r3, #0
 80073f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073fe:	461a      	mov	r2, r3
 8007400:	2300      	movs	r3, #0
 8007402:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800740a:	461a      	mov	r2, r3
 800740c:	2300      	movs	r3, #0
 800740e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007410:	2300      	movs	r3, #0
 8007412:	613b      	str	r3, [r7, #16]
 8007414:	e043      	b.n	800749e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	015a      	lsls	r2, r3, #5
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	4413      	add	r3, r2
 800741e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007428:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800742c:	d118      	bne.n	8007460 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10a      	bne.n	800744a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	015a      	lsls	r2, r3, #5
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	4413      	add	r3, r2
 800743c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007440:	461a      	mov	r2, r3
 8007442:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007446:	6013      	str	r3, [r2, #0]
 8007448:	e013      	b.n	8007472 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	015a      	lsls	r2, r3, #5
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	4413      	add	r3, r2
 8007452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007456:	461a      	mov	r2, r3
 8007458:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800745c:	6013      	str	r3, [r2, #0]
 800745e:	e008      	b.n	8007472 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	015a      	lsls	r2, r3, #5
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	4413      	add	r3, r2
 8007468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800746c:	461a      	mov	r2, r3
 800746e:	2300      	movs	r3, #0
 8007470:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	015a      	lsls	r2, r3, #5
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	4413      	add	r3, r2
 800747a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800747e:	461a      	mov	r2, r3
 8007480:	2300      	movs	r3, #0
 8007482:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4413      	add	r3, r2
 800748c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007490:	461a      	mov	r2, r3
 8007492:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007496:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	3301      	adds	r3, #1
 800749c:	613b      	str	r3, [r7, #16]
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d3b7      	bcc.n	8007416 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074a6:	2300      	movs	r3, #0
 80074a8:	613b      	str	r3, [r7, #16]
 80074aa:	e043      	b.n	8007534 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074c2:	d118      	bne.n	80074f6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10a      	bne.n	80074e0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	015a      	lsls	r2, r3, #5
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	4413      	add	r3, r2
 80074d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d6:	461a      	mov	r2, r3
 80074d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074dc:	6013      	str	r3, [r2, #0]
 80074de:	e013      	b.n	8007508 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	015a      	lsls	r2, r3, #5
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	4413      	add	r3, r2
 80074e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ec:	461a      	mov	r2, r3
 80074ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80074f2:	6013      	str	r3, [r2, #0]
 80074f4:	e008      	b.n	8007508 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	015a      	lsls	r2, r3, #5
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	4413      	add	r3, r2
 80074fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007502:	461a      	mov	r2, r3
 8007504:	2300      	movs	r3, #0
 8007506:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	015a      	lsls	r2, r3, #5
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	4413      	add	r3, r2
 8007510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007514:	461a      	mov	r2, r3
 8007516:	2300      	movs	r3, #0
 8007518:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	4413      	add	r3, r2
 8007522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007526:	461a      	mov	r2, r3
 8007528:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800752c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	3301      	adds	r3, #1
 8007532:	613b      	str	r3, [r7, #16]
 8007534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	429a      	cmp	r2, r3
 800753a:	d3b7      	bcc.n	80074ac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800754a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800754e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800755c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800755e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007560:	2b00      	cmp	r3, #0
 8007562:	d105      	bne.n	8007570 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	f043 0210 	orr.w	r2, r3, #16
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	699a      	ldr	r2, [r3, #24]
 8007574:	4b0f      	ldr	r3, [pc, #60]	; (80075b4 <USB_DevInit+0x2c4>)
 8007576:	4313      	orrs	r3, r2
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800757c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800757e:	2b00      	cmp	r3, #0
 8007580:	d005      	beq.n	800758e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	f043 0208 	orr.w	r2, r3, #8
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800758e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007590:	2b01      	cmp	r3, #1
 8007592:	d107      	bne.n	80075a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800759c:	f043 0304 	orr.w	r3, r3, #4
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80075a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3718      	adds	r7, #24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075b0:	b004      	add	sp, #16
 80075b2:	4770      	bx	lr
 80075b4:	803c3800 	.word	0x803c3800

080075b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80075c2:	2300      	movs	r3, #0
 80075c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	3301      	adds	r3, #1
 80075ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	4a13      	ldr	r2, [pc, #76]	; (800761c <USB_FlushTxFifo+0x64>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d901      	bls.n	80075d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e01b      	b.n	8007610 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	daf2      	bge.n	80075c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80075e0:	2300      	movs	r3, #0
 80075e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	019b      	lsls	r3, r3, #6
 80075e8:	f043 0220 	orr.w	r2, r3, #32
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	3301      	adds	r3, #1
 80075f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	4a08      	ldr	r2, [pc, #32]	; (800761c <USB_FlushTxFifo+0x64>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d901      	bls.n	8007602 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e006      	b.n	8007610 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	f003 0320 	and.w	r3, r3, #32
 800760a:	2b20      	cmp	r3, #32
 800760c:	d0f0      	beq.n	80075f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	00030d40 	.word	0x00030d40

08007620 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007628:	2300      	movs	r3, #0
 800762a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	3301      	adds	r3, #1
 8007630:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	4a11      	ldr	r2, [pc, #68]	; (800767c <USB_FlushRxFifo+0x5c>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d901      	bls.n	800763e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e018      	b.n	8007670 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	2b00      	cmp	r3, #0
 8007644:	daf2      	bge.n	800762c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007646:	2300      	movs	r3, #0
 8007648:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2210      	movs	r2, #16
 800764e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	3301      	adds	r3, #1
 8007654:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	4a08      	ldr	r2, [pc, #32]	; (800767c <USB_FlushRxFifo+0x5c>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d901      	bls.n	8007662 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e006      	b.n	8007670 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	f003 0310 	and.w	r3, r3, #16
 800766a:	2b10      	cmp	r3, #16
 800766c:	d0f0      	beq.n	8007650 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	00030d40 	.word	0x00030d40

08007680 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	460b      	mov	r3, r1
 800768a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	78fb      	ldrb	r3, [r7, #3]
 800769a:	68f9      	ldr	r1, [r7, #12]
 800769c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076a0:	4313      	orrs	r3, r2
 80076a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3714      	adds	r7, #20
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b087      	sub	sp, #28
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	f003 0306 	and.w	r3, r3, #6
 80076ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d102      	bne.n	80076d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80076d2:	2300      	movs	r3, #0
 80076d4:	75fb      	strb	r3, [r7, #23]
 80076d6:	e00a      	b.n	80076ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d002      	beq.n	80076e4 <USB_GetDevSpeed+0x32>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2b06      	cmp	r3, #6
 80076e2:	d102      	bne.n	80076ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80076e4:	2302      	movs	r3, #2
 80076e6:	75fb      	strb	r3, [r7, #23]
 80076e8:	e001      	b.n	80076ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80076ea:	230f      	movs	r3, #15
 80076ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80076ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	371c      	adds	r7, #28
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	785b      	ldrb	r3, [r3, #1]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d13a      	bne.n	800778e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800771e:	69da      	ldr	r2, [r3, #28]
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	f003 030f 	and.w	r3, r3, #15
 8007728:	2101      	movs	r1, #1
 800772a:	fa01 f303 	lsl.w	r3, r1, r3
 800772e:	b29b      	uxth	r3, r3
 8007730:	68f9      	ldr	r1, [r7, #12]
 8007732:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007736:	4313      	orrs	r3, r2
 8007738:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	015a      	lsls	r2, r3, #5
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	4413      	add	r3, r2
 8007742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d155      	bne.n	80077fc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	015a      	lsls	r2, r3, #5
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	4413      	add	r3, r2
 8007758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	791b      	ldrb	r3, [r3, #4]
 800776a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800776c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	059b      	lsls	r3, r3, #22
 8007772:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007774:	4313      	orrs	r3, r2
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	0151      	lsls	r1, r2, #5
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	440a      	add	r2, r1
 800777e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800778a:	6013      	str	r3, [r2, #0]
 800778c:	e036      	b.n	80077fc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007794:	69da      	ldr	r2, [r3, #28]
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	f003 030f 	and.w	r3, r3, #15
 800779e:	2101      	movs	r1, #1
 80077a0:	fa01 f303 	lsl.w	r3, r1, r3
 80077a4:	041b      	lsls	r3, r3, #16
 80077a6:	68f9      	ldr	r1, [r7, #12]
 80077a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077ac:	4313      	orrs	r3, r2
 80077ae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	015a      	lsls	r2, r3, #5
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	4413      	add	r3, r2
 80077b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d11a      	bne.n	80077fc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	015a      	lsls	r2, r3, #5
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	4413      	add	r3, r2
 80077ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	791b      	ldrb	r3, [r3, #4]
 80077e0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80077e2:	430b      	orrs	r3, r1
 80077e4:	4313      	orrs	r3, r2
 80077e6:	68ba      	ldr	r2, [r7, #8]
 80077e8:	0151      	lsls	r1, r2, #5
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	440a      	add	r2, r1
 80077ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077fa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3714      	adds	r7, #20
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
	...

0800780c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	785b      	ldrb	r3, [r3, #1]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d161      	bne.n	80078ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	015a      	lsls	r2, r3, #5
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	4413      	add	r3, r2
 8007830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800783a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800783e:	d11f      	bne.n	8007880 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	015a      	lsls	r2, r3, #5
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	4413      	add	r3, r2
 8007848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	0151      	lsls	r1, r2, #5
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	440a      	add	r2, r1
 8007856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800785a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800785e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	015a      	lsls	r2, r3, #5
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	4413      	add	r3, r2
 8007868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	0151      	lsls	r1, r2, #5
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	440a      	add	r2, r1
 8007876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800787a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800787e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	f003 030f 	and.w	r3, r3, #15
 8007890:	2101      	movs	r1, #1
 8007892:	fa01 f303 	lsl.w	r3, r1, r3
 8007896:	b29b      	uxth	r3, r3
 8007898:	43db      	mvns	r3, r3
 800789a:	68f9      	ldr	r1, [r7, #12]
 800789c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078a0:	4013      	ands	r3, r2
 80078a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078aa:	69da      	ldr	r2, [r3, #28]
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	f003 030f 	and.w	r3, r3, #15
 80078b4:	2101      	movs	r1, #1
 80078b6:	fa01 f303 	lsl.w	r3, r1, r3
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	43db      	mvns	r3, r3
 80078be:	68f9      	ldr	r1, [r7, #12]
 80078c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078c4:	4013      	ands	r3, r2
 80078c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	015a      	lsls	r2, r3, #5
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	4413      	add	r3, r2
 80078d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	0159      	lsls	r1, r3, #5
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	440b      	add	r3, r1
 80078de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e2:	4619      	mov	r1, r3
 80078e4:	4b35      	ldr	r3, [pc, #212]	; (80079bc <USB_DeactivateEndpoint+0x1b0>)
 80078e6:	4013      	ands	r3, r2
 80078e8:	600b      	str	r3, [r1, #0]
 80078ea:	e060      	b.n	80079ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	015a      	lsls	r2, r3, #5
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007902:	d11f      	bne.n	8007944 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	015a      	lsls	r2, r3, #5
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	4413      	add	r3, r2
 800790c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	0151      	lsls	r1, r2, #5
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	440a      	add	r2, r1
 800791a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800791e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007922:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	015a      	lsls	r2, r3, #5
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	4413      	add	r3, r2
 800792c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	0151      	lsls	r1, r2, #5
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	440a      	add	r2, r1
 800793a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800793e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007942:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800794a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	f003 030f 	and.w	r3, r3, #15
 8007954:	2101      	movs	r1, #1
 8007956:	fa01 f303 	lsl.w	r3, r1, r3
 800795a:	041b      	lsls	r3, r3, #16
 800795c:	43db      	mvns	r3, r3
 800795e:	68f9      	ldr	r1, [r7, #12]
 8007960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007964:	4013      	ands	r3, r2
 8007966:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800796e:	69da      	ldr	r2, [r3, #28]
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	f003 030f 	and.w	r3, r3, #15
 8007978:	2101      	movs	r1, #1
 800797a:	fa01 f303 	lsl.w	r3, r1, r3
 800797e:	041b      	lsls	r3, r3, #16
 8007980:	43db      	mvns	r3, r3
 8007982:	68f9      	ldr	r1, [r7, #12]
 8007984:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007988:	4013      	ands	r3, r2
 800798a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	015a      	lsls	r2, r3, #5
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	4413      	add	r3, r2
 8007994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	0159      	lsls	r1, r3, #5
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	440b      	add	r3, r1
 80079a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a6:	4619      	mov	r1, r3
 80079a8:	4b05      	ldr	r3, [pc, #20]	; (80079c0 <USB_DeactivateEndpoint+0x1b4>)
 80079aa:	4013      	ands	r3, r2
 80079ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3714      	adds	r7, #20
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	ec337800 	.word	0xec337800
 80079c0:	eff37800 	.word	0xeff37800

080079c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b08a      	sub	sp, #40	; 0x28
 80079c8:	af02      	add	r7, sp, #8
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	4613      	mov	r3, r2
 80079d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	785b      	ldrb	r3, [r3, #1]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	f040 815c 	bne.w	8007c9e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	699b      	ldr	r3, [r3, #24]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d132      	bne.n	8007a54 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	015a      	lsls	r2, r3, #5
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	4413      	add	r3, r2
 80079f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	69ba      	ldr	r2, [r7, #24]
 80079fe:	0151      	lsls	r1, r2, #5
 8007a00:	69fa      	ldr	r2, [r7, #28]
 8007a02:	440a      	add	r2, r1
 8007a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	015a      	lsls	r2, r3, #5
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	4413      	add	r3, r2
 8007a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	0151      	lsls	r1, r2, #5
 8007a24:	69fa      	ldr	r2, [r7, #28]
 8007a26:	440a      	add	r2, r1
 8007a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	015a      	lsls	r2, r3, #5
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	4413      	add	r3, r2
 8007a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	69ba      	ldr	r2, [r7, #24]
 8007a42:	0151      	lsls	r1, r2, #5
 8007a44:	69fa      	ldr	r2, [r7, #28]
 8007a46:	440a      	add	r2, r1
 8007a48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a4c:	0cdb      	lsrs	r3, r3, #19
 8007a4e:	04db      	lsls	r3, r3, #19
 8007a50:	6113      	str	r3, [r2, #16]
 8007a52:	e074      	b.n	8007b3e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	015a      	lsls	r2, r3, #5
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	69ba      	ldr	r2, [r7, #24]
 8007a64:	0151      	lsls	r1, r2, #5
 8007a66:	69fa      	ldr	r2, [r7, #28]
 8007a68:	440a      	add	r2, r1
 8007a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a6e:	0cdb      	lsrs	r3, r3, #19
 8007a70:	04db      	lsls	r3, r3, #19
 8007a72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	015a      	lsls	r2, r3, #5
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	69ba      	ldr	r2, [r7, #24]
 8007a84:	0151      	lsls	r1, r2, #5
 8007a86:	69fa      	ldr	r2, [r7, #28]
 8007a88:	440a      	add	r2, r1
 8007a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	015a      	lsls	r2, r3, #5
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	6999      	ldr	r1, [r3, #24]
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	440b      	add	r3, r1
 8007ab0:	1e59      	subs	r1, r3, #1
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	fbb1 f3f3 	udiv	r3, r1, r3
 8007aba:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007abc:	4b9d      	ldr	r3, [pc, #628]	; (8007d34 <USB_EPStartXfer+0x370>)
 8007abe:	400b      	ands	r3, r1
 8007ac0:	69b9      	ldr	r1, [r7, #24]
 8007ac2:	0148      	lsls	r0, r1, #5
 8007ac4:	69f9      	ldr	r1, [r7, #28]
 8007ac6:	4401      	add	r1, r0
 8007ac8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007acc:	4313      	orrs	r3, r2
 8007ace:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007adc:	691a      	ldr	r2, [r3, #16]
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ae6:	69b9      	ldr	r1, [r7, #24]
 8007ae8:	0148      	lsls	r0, r1, #5
 8007aea:	69f9      	ldr	r1, [r7, #28]
 8007aec:	4401      	add	r1, r0
 8007aee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007af2:	4313      	orrs	r3, r2
 8007af4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	791b      	ldrb	r3, [r3, #4]
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d11f      	bne.n	8007b3e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	015a      	lsls	r2, r3, #5
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	4413      	add	r3, r2
 8007b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	69ba      	ldr	r2, [r7, #24]
 8007b0e:	0151      	lsls	r1, r2, #5
 8007b10:	69fa      	ldr	r2, [r7, #28]
 8007b12:	440a      	add	r2, r1
 8007b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b18:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007b1c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	015a      	lsls	r2, r3, #5
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	4413      	add	r3, r2
 8007b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	69ba      	ldr	r2, [r7, #24]
 8007b2e:	0151      	lsls	r1, r2, #5
 8007b30:	69fa      	ldr	r2, [r7, #28]
 8007b32:	440a      	add	r2, r1
 8007b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b3c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007b3e:	79fb      	ldrb	r3, [r7, #7]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d14b      	bne.n	8007bdc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	695b      	ldr	r3, [r3, #20]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d009      	beq.n	8007b60 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	015a      	lsls	r2, r3, #5
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	4413      	add	r3, r2
 8007b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b58:	461a      	mov	r2, r3
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	791b      	ldrb	r3, [r3, #4]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d128      	bne.n	8007bba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d110      	bne.n	8007b9a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	69ba      	ldr	r2, [r7, #24]
 8007b88:	0151      	lsls	r1, r2, #5
 8007b8a:	69fa      	ldr	r2, [r7, #28]
 8007b8c:	440a      	add	r2, r1
 8007b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b96:	6013      	str	r3, [r2, #0]
 8007b98:	e00f      	b.n	8007bba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	015a      	lsls	r2, r3, #5
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	69ba      	ldr	r2, [r7, #24]
 8007baa:	0151      	lsls	r1, r2, #5
 8007bac:	69fa      	ldr	r2, [r7, #28]
 8007bae:	440a      	add	r2, r1
 8007bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bb8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	015a      	lsls	r2, r3, #5
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	69ba      	ldr	r2, [r7, #24]
 8007bca:	0151      	lsls	r1, r2, #5
 8007bcc:	69fa      	ldr	r2, [r7, #28]
 8007bce:	440a      	add	r2, r1
 8007bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bd4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007bd8:	6013      	str	r3, [r2, #0]
 8007bda:	e133      	b.n	8007e44 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	015a      	lsls	r2, r3, #5
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	4413      	add	r3, r2
 8007be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	69ba      	ldr	r2, [r7, #24]
 8007bec:	0151      	lsls	r1, r2, #5
 8007bee:	69fa      	ldr	r2, [r7, #28]
 8007bf0:	440a      	add	r2, r1
 8007bf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bf6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007bfa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	791b      	ldrb	r3, [r3, #4]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d015      	beq.n	8007c30 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 811b 	beq.w	8007e44 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	f003 030f 	and.w	r3, r3, #15
 8007c1e:	2101      	movs	r1, #1
 8007c20:	fa01 f303 	lsl.w	r3, r1, r3
 8007c24:	69f9      	ldr	r1, [r7, #28]
 8007c26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	634b      	str	r3, [r1, #52]	; 0x34
 8007c2e:	e109      	b.n	8007e44 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d110      	bne.n	8007c62 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	015a      	lsls	r2, r3, #5
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	4413      	add	r3, r2
 8007c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	0151      	lsls	r1, r2, #5
 8007c52:	69fa      	ldr	r2, [r7, #28]
 8007c54:	440a      	add	r2, r1
 8007c56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c5e:	6013      	str	r3, [r2, #0]
 8007c60:	e00f      	b.n	8007c82 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	015a      	lsls	r2, r3, #5
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	4413      	add	r3, r2
 8007c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	69ba      	ldr	r2, [r7, #24]
 8007c72:	0151      	lsls	r1, r2, #5
 8007c74:	69fa      	ldr	r2, [r7, #28]
 8007c76:	440a      	add	r2, r1
 8007c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c80:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	6919      	ldr	r1, [r3, #16]
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	781a      	ldrb	r2, [r3, #0]
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	b298      	uxth	r0, r3
 8007c90:	79fb      	ldrb	r3, [r7, #7]
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	4603      	mov	r3, r0
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f000 fade 	bl	8008258 <USB_WritePacket>
 8007c9c:	e0d2      	b.n	8007e44 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	015a      	lsls	r2, r3, #5
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	0151      	lsls	r1, r2, #5
 8007cb0:	69fa      	ldr	r2, [r7, #28]
 8007cb2:	440a      	add	r2, r1
 8007cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cb8:	0cdb      	lsrs	r3, r3, #19
 8007cba:	04db      	lsls	r3, r3, #19
 8007cbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	015a      	lsls	r2, r3, #5
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	69ba      	ldr	r2, [r7, #24]
 8007cce:	0151      	lsls	r1, r2, #5
 8007cd0:	69fa      	ldr	r2, [r7, #28]
 8007cd2:	440a      	add	r2, r1
 8007cd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007cdc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ce0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d126      	bne.n	8007d38 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	015a      	lsls	r2, r3, #5
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cf6:	691a      	ldr	r2, [r3, #16]
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d00:	69b9      	ldr	r1, [r7, #24]
 8007d02:	0148      	lsls	r0, r1, #5
 8007d04:	69f9      	ldr	r1, [r7, #28]
 8007d06:	4401      	add	r1, r0
 8007d08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	015a      	lsls	r2, r3, #5
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	4413      	add	r3, r2
 8007d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	69ba      	ldr	r2, [r7, #24]
 8007d20:	0151      	lsls	r1, r2, #5
 8007d22:	69fa      	ldr	r2, [r7, #28]
 8007d24:	440a      	add	r2, r1
 8007d26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d2e:	6113      	str	r3, [r2, #16]
 8007d30:	e03a      	b.n	8007da8 <USB_EPStartXfer+0x3e4>
 8007d32:	bf00      	nop
 8007d34:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	699a      	ldr	r2, [r3, #24]
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	4413      	add	r3, r2
 8007d42:	1e5a      	subs	r2, r3, #1
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d4c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	8afa      	ldrh	r2, [r7, #22]
 8007d54:	fb03 f202 	mul.w	r2, r3, r2
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	015a      	lsls	r2, r3, #5
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	4413      	add	r3, r2
 8007d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d68:	691a      	ldr	r2, [r3, #16]
 8007d6a:	8afb      	ldrh	r3, [r7, #22]
 8007d6c:	04d9      	lsls	r1, r3, #19
 8007d6e:	4b38      	ldr	r3, [pc, #224]	; (8007e50 <USB_EPStartXfer+0x48c>)
 8007d70:	400b      	ands	r3, r1
 8007d72:	69b9      	ldr	r1, [r7, #24]
 8007d74:	0148      	lsls	r0, r1, #5
 8007d76:	69f9      	ldr	r1, [r7, #28]
 8007d78:	4401      	add	r1, r0
 8007d7a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	015a      	lsls	r2, r3, #5
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	4413      	add	r3, r2
 8007d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d8e:	691a      	ldr	r2, [r3, #16]
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	69db      	ldr	r3, [r3, #28]
 8007d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d98:	69b9      	ldr	r1, [r7, #24]
 8007d9a:	0148      	lsls	r0, r1, #5
 8007d9c:	69f9      	ldr	r1, [r7, #28]
 8007d9e:	4401      	add	r1, r0
 8007da0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007da4:	4313      	orrs	r3, r2
 8007da6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007da8:	79fb      	ldrb	r3, [r7, #7]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d10d      	bne.n	8007dca <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d009      	beq.n	8007dca <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	6919      	ldr	r1, [r3, #16]
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	015a      	lsls	r2, r3, #5
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc6:	460a      	mov	r2, r1
 8007dc8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	791b      	ldrb	r3, [r3, #4]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d128      	bne.n	8007e24 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d110      	bne.n	8007e04 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	015a      	lsls	r2, r3, #5
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	4413      	add	r3, r2
 8007dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	69ba      	ldr	r2, [r7, #24]
 8007df2:	0151      	lsls	r1, r2, #5
 8007df4:	69fa      	ldr	r2, [r7, #28]
 8007df6:	440a      	add	r2, r1
 8007df8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e00:	6013      	str	r3, [r2, #0]
 8007e02:	e00f      	b.n	8007e24 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	015a      	lsls	r2, r3, #5
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	69ba      	ldr	r2, [r7, #24]
 8007e14:	0151      	lsls	r1, r2, #5
 8007e16:	69fa      	ldr	r2, [r7, #28]
 8007e18:	440a      	add	r2, r1
 8007e1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e22:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	015a      	lsls	r2, r3, #5
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	0151      	lsls	r1, r2, #5
 8007e36:	69fa      	ldr	r2, [r7, #28]
 8007e38:	440a      	add	r2, r1
 8007e3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3720      	adds	r7, #32
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	1ff80000 	.word	0x1ff80000

08007e54 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b087      	sub	sp, #28
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	785b      	ldrb	r3, [r3, #1]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	f040 80ce 	bne.w	8008012 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	699b      	ldr	r3, [r3, #24]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d132      	bne.n	8007ee4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	015a      	lsls	r2, r3, #5
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	4413      	add	r3, r2
 8007e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	0151      	lsls	r1, r2, #5
 8007e90:	697a      	ldr	r2, [r7, #20]
 8007e92:	440a      	add	r2, r1
 8007e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ea0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	015a      	lsls	r2, r3, #5
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	693a      	ldr	r2, [r7, #16]
 8007eb2:	0151      	lsls	r1, r2, #5
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	440a      	add	r2, r1
 8007eb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ebc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ec0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	015a      	lsls	r2, r3, #5
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	4413      	add	r3, r2
 8007eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	0151      	lsls	r1, r2, #5
 8007ed4:	697a      	ldr	r2, [r7, #20]
 8007ed6:	440a      	add	r2, r1
 8007ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007edc:	0cdb      	lsrs	r3, r3, #19
 8007ede:	04db      	lsls	r3, r3, #19
 8007ee0:	6113      	str	r3, [r2, #16]
 8007ee2:	e04e      	b.n	8007f82 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	015a      	lsls	r2, r3, #5
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	4413      	add	r3, r2
 8007eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	0151      	lsls	r1, r2, #5
 8007ef6:	697a      	ldr	r2, [r7, #20]
 8007ef8:	440a      	add	r2, r1
 8007efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007efe:	0cdb      	lsrs	r3, r3, #19
 8007f00:	04db      	lsls	r3, r3, #19
 8007f02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	015a      	lsls	r2, r3, #5
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	0151      	lsls	r1, r2, #5
 8007f16:	697a      	ldr	r2, [r7, #20]
 8007f18:	440a      	add	r2, r1
 8007f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007f22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f26:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	699a      	ldr	r2, [r3, #24]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d903      	bls.n	8007f3c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	68da      	ldr	r2, [r3, #12]
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	015a      	lsls	r2, r3, #5
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	4413      	add	r3, r2
 8007f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	693a      	ldr	r2, [r7, #16]
 8007f4c:	0151      	lsls	r1, r2, #5
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	440a      	add	r2, r1
 8007f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	015a      	lsls	r2, r3, #5
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	4413      	add	r3, r2
 8007f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f68:	691a      	ldr	r2, [r3, #16]
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f72:	6939      	ldr	r1, [r7, #16]
 8007f74:	0148      	lsls	r0, r1, #5
 8007f76:	6979      	ldr	r1, [r7, #20]
 8007f78:	4401      	add	r1, r0
 8007f7a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007f82:	79fb      	ldrb	r3, [r7, #7]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d11e      	bne.n	8007fc6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	695b      	ldr	r3, [r3, #20]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d009      	beq.n	8007fa4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	695b      	ldr	r3, [r3, #20]
 8007fa2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	015a      	lsls	r2, r3, #5
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	4413      	add	r3, r2
 8007fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	693a      	ldr	r2, [r7, #16]
 8007fb4:	0151      	lsls	r1, r2, #5
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	440a      	add	r2, r1
 8007fba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007fc2:	6013      	str	r3, [r2, #0]
 8007fc4:	e097      	b.n	80080f6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	015a      	lsls	r2, r3, #5
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	4413      	add	r3, r2
 8007fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	693a      	ldr	r2, [r7, #16]
 8007fd6:	0151      	lsls	r1, r2, #5
 8007fd8:	697a      	ldr	r2, [r7, #20]
 8007fda:	440a      	add	r2, r1
 8007fdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fe0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007fe4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	f000 8083 	beq.w	80080f6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	f003 030f 	and.w	r3, r3, #15
 8008000:	2101      	movs	r1, #1
 8008002:	fa01 f303 	lsl.w	r3, r1, r3
 8008006:	6979      	ldr	r1, [r7, #20]
 8008008:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800800c:	4313      	orrs	r3, r2
 800800e:	634b      	str	r3, [r1, #52]	; 0x34
 8008010:	e071      	b.n	80080f6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	015a      	lsls	r2, r3, #5
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	4413      	add	r3, r2
 800801a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	0151      	lsls	r1, r2, #5
 8008024:	697a      	ldr	r2, [r7, #20]
 8008026:	440a      	add	r2, r1
 8008028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800802c:	0cdb      	lsrs	r3, r3, #19
 800802e:	04db      	lsls	r3, r3, #19
 8008030:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	015a      	lsls	r2, r3, #5
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	4413      	add	r3, r2
 800803a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	693a      	ldr	r2, [r7, #16]
 8008042:	0151      	lsls	r1, r2, #5
 8008044:	697a      	ldr	r2, [r7, #20]
 8008046:	440a      	add	r2, r1
 8008048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800804c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008050:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008054:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	68da      	ldr	r2, [r3, #12]
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	68da      	ldr	r2, [r3, #12]
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	015a      	lsls	r2, r3, #5
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	4413      	add	r3, r2
 8008076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	693a      	ldr	r2, [r7, #16]
 800807e:	0151      	lsls	r1, r2, #5
 8008080:	697a      	ldr	r2, [r7, #20]
 8008082:	440a      	add	r2, r1
 8008084:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008088:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800808c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	015a      	lsls	r2, r3, #5
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	4413      	add	r3, r2
 8008096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800809a:	691a      	ldr	r2, [r3, #16]
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	69db      	ldr	r3, [r3, #28]
 80080a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080a4:	6939      	ldr	r1, [r7, #16]
 80080a6:	0148      	lsls	r0, r1, #5
 80080a8:	6979      	ldr	r1, [r7, #20]
 80080aa:	4401      	add	r1, r0
 80080ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80080b0:	4313      	orrs	r3, r2
 80080b2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80080b4:	79fb      	ldrb	r3, [r7, #7]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d10d      	bne.n	80080d6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d009      	beq.n	80080d6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	6919      	ldr	r1, [r3, #16]
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	015a      	lsls	r2, r3, #5
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	4413      	add	r3, r2
 80080ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080d2:	460a      	mov	r2, r1
 80080d4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	015a      	lsls	r2, r3, #5
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	4413      	add	r3, r2
 80080de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	0151      	lsls	r1, r2, #5
 80080e8:	697a      	ldr	r2, [r7, #20]
 80080ea:	440a      	add	r2, r1
 80080ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80080f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	371c      	adds	r7, #28
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008104:	b480      	push	{r7}
 8008106:	b087      	sub	sp, #28
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800810e:	2300      	movs	r3, #0
 8008110:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008112:	2300      	movs	r3, #0
 8008114:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	785b      	ldrb	r3, [r3, #1]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d14a      	bne.n	80081b8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	015a      	lsls	r2, r3, #5
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	4413      	add	r3, r2
 800812c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008136:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800813a:	f040 8086 	bne.w	800824a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	015a      	lsls	r2, r3, #5
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	4413      	add	r3, r2
 8008148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	683a      	ldr	r2, [r7, #0]
 8008150:	7812      	ldrb	r2, [r2, #0]
 8008152:	0151      	lsls	r1, r2, #5
 8008154:	693a      	ldr	r2, [r7, #16]
 8008156:	440a      	add	r2, r1
 8008158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800815c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008160:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	015a      	lsls	r2, r3, #5
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	4413      	add	r3, r2
 800816c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	7812      	ldrb	r2, [r2, #0]
 8008176:	0151      	lsls	r1, r2, #5
 8008178:	693a      	ldr	r2, [r7, #16]
 800817a:	440a      	add	r2, r1
 800817c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008180:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008184:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	3301      	adds	r3, #1
 800818a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008192:	4293      	cmp	r3, r2
 8008194:	d902      	bls.n	800819c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	75fb      	strb	r3, [r7, #23]
          break;
 800819a:	e056      	b.n	800824a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	015a      	lsls	r2, r3, #5
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	4413      	add	r3, r2
 80081a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081b4:	d0e7      	beq.n	8008186 <USB_EPStopXfer+0x82>
 80081b6:	e048      	b.n	800824a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	015a      	lsls	r2, r3, #5
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081d0:	d13b      	bne.n	800824a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	015a      	lsls	r2, r3, #5
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	4413      	add	r3, r2
 80081dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	7812      	ldrb	r2, [r2, #0]
 80081e6:	0151      	lsls	r1, r2, #5
 80081e8:	693a      	ldr	r2, [r7, #16]
 80081ea:	440a      	add	r2, r1
 80081ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80081f4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	015a      	lsls	r2, r3, #5
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	4413      	add	r3, r2
 8008200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	683a      	ldr	r2, [r7, #0]
 8008208:	7812      	ldrb	r2, [r2, #0]
 800820a:	0151      	lsls	r1, r2, #5
 800820c:	693a      	ldr	r2, [r7, #16]
 800820e:	440a      	add	r2, r1
 8008210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008214:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008218:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	3301      	adds	r3, #1
 800821e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f242 7210 	movw	r2, #10000	; 0x2710
 8008226:	4293      	cmp	r3, r2
 8008228:	d902      	bls.n	8008230 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	75fb      	strb	r3, [r7, #23]
          break;
 800822e:	e00c      	b.n	800824a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	015a      	lsls	r2, r3, #5
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	4413      	add	r3, r2
 800823a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008244:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008248:	d0e7      	beq.n	800821a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800824a:	7dfb      	ldrb	r3, [r7, #23]
}
 800824c:	4618      	mov	r0, r3
 800824e:	371c      	adds	r7, #28
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008258:	b480      	push	{r7}
 800825a:	b089      	sub	sp, #36	; 0x24
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	4611      	mov	r1, r2
 8008264:	461a      	mov	r2, r3
 8008266:	460b      	mov	r3, r1
 8008268:	71fb      	strb	r3, [r7, #7]
 800826a:	4613      	mov	r3, r2
 800826c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008276:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800827a:	2b00      	cmp	r3, #0
 800827c:	d123      	bne.n	80082c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800827e:	88bb      	ldrh	r3, [r7, #4]
 8008280:	3303      	adds	r3, #3
 8008282:	089b      	lsrs	r3, r3, #2
 8008284:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008286:	2300      	movs	r3, #0
 8008288:	61bb      	str	r3, [r7, #24]
 800828a:	e018      	b.n	80082be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800828c:	79fb      	ldrb	r3, [r7, #7]
 800828e:	031a      	lsls	r2, r3, #12
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	4413      	add	r3, r2
 8008294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008298:	461a      	mov	r2, r3
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	3301      	adds	r3, #1
 80082a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	3301      	adds	r3, #1
 80082aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	3301      	adds	r3, #1
 80082b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	3301      	adds	r3, #1
 80082b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	3301      	adds	r3, #1
 80082bc:	61bb      	str	r3, [r7, #24]
 80082be:	69ba      	ldr	r2, [r7, #24]
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d3e2      	bcc.n	800828c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3724      	adds	r7, #36	; 0x24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b08b      	sub	sp, #44	; 0x2c
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	4613      	mov	r3, r2
 80082e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80082ea:	88fb      	ldrh	r3, [r7, #6]
 80082ec:	089b      	lsrs	r3, r3, #2
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80082f2:	88fb      	ldrh	r3, [r7, #6]
 80082f4:	f003 0303 	and.w	r3, r3, #3
 80082f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80082fa:	2300      	movs	r3, #0
 80082fc:	623b      	str	r3, [r7, #32]
 80082fe:	e014      	b.n	800832a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830a:	601a      	str	r2, [r3, #0]
    pDest++;
 800830c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830e:	3301      	adds	r3, #1
 8008310:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008314:	3301      	adds	r3, #1
 8008316:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831a:	3301      	adds	r3, #1
 800831c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800831e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008320:	3301      	adds	r3, #1
 8008322:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008324:	6a3b      	ldr	r3, [r7, #32]
 8008326:	3301      	adds	r3, #1
 8008328:	623b      	str	r3, [r7, #32]
 800832a:	6a3a      	ldr	r2, [r7, #32]
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	429a      	cmp	r2, r3
 8008330:	d3e6      	bcc.n	8008300 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008332:	8bfb      	ldrh	r3, [r7, #30]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d01e      	beq.n	8008376 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008338:	2300      	movs	r3, #0
 800833a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008342:	461a      	mov	r2, r3
 8008344:	f107 0310 	add.w	r3, r7, #16
 8008348:	6812      	ldr	r2, [r2, #0]
 800834a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800834c:	693a      	ldr	r2, [r7, #16]
 800834e:	6a3b      	ldr	r3, [r7, #32]
 8008350:	b2db      	uxtb	r3, r3
 8008352:	00db      	lsls	r3, r3, #3
 8008354:	fa22 f303 	lsr.w	r3, r2, r3
 8008358:	b2da      	uxtb	r2, r3
 800835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835c:	701a      	strb	r2, [r3, #0]
      i++;
 800835e:	6a3b      	ldr	r3, [r7, #32]
 8008360:	3301      	adds	r3, #1
 8008362:	623b      	str	r3, [r7, #32]
      pDest++;
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	3301      	adds	r3, #1
 8008368:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800836a:	8bfb      	ldrh	r3, [r7, #30]
 800836c:	3b01      	subs	r3, #1
 800836e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008370:	8bfb      	ldrh	r3, [r7, #30]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1ea      	bne.n	800834c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008378:	4618      	mov	r0, r3
 800837a:	372c      	adds	r7, #44	; 0x2c
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	785b      	ldrb	r3, [r3, #1]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d12c      	bne.n	80083fa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	015a      	lsls	r2, r3, #5
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	4413      	add	r3, r2
 80083a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	db12      	blt.n	80083d8 <USB_EPSetStall+0x54>
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00f      	beq.n	80083d8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	015a      	lsls	r2, r3, #5
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	4413      	add	r3, r2
 80083c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68ba      	ldr	r2, [r7, #8]
 80083c8:	0151      	lsls	r1, r2, #5
 80083ca:	68fa      	ldr	r2, [r7, #12]
 80083cc:	440a      	add	r2, r1
 80083ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80083d6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	015a      	lsls	r2, r3, #5
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	4413      	add	r3, r2
 80083e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	0151      	lsls	r1, r2, #5
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	440a      	add	r2, r1
 80083ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083f6:	6013      	str	r3, [r2, #0]
 80083f8:	e02b      	b.n	8008452 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	015a      	lsls	r2, r3, #5
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	4413      	add	r3, r2
 8008402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	db12      	blt.n	8008432 <USB_EPSetStall+0xae>
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00f      	beq.n	8008432 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	015a      	lsls	r2, r3, #5
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	4413      	add	r3, r2
 800841a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	0151      	lsls	r1, r2, #5
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	440a      	add	r2, r1
 8008428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800842c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008430:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	015a      	lsls	r2, r3, #5
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	4413      	add	r3, r2
 800843a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	0151      	lsls	r1, r2, #5
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	440a      	add	r2, r1
 8008448:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800844c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008450:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	785b      	ldrb	r3, [r3, #1]
 8008478:	2b01      	cmp	r3, #1
 800847a:	d128      	bne.n	80084ce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	015a      	lsls	r2, r3, #5
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	4413      	add	r3, r2
 8008484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	68ba      	ldr	r2, [r7, #8]
 800848c:	0151      	lsls	r1, r2, #5
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	440a      	add	r2, r1
 8008492:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008496:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800849a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	791b      	ldrb	r3, [r3, #4]
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	d003      	beq.n	80084ac <USB_EPClearStall+0x4c>
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	791b      	ldrb	r3, [r3, #4]
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d138      	bne.n	800851e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	015a      	lsls	r2, r3, #5
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	4413      	add	r3, r2
 80084b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	0151      	lsls	r1, r2, #5
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	440a      	add	r2, r1
 80084c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084ca:	6013      	str	r3, [r2, #0]
 80084cc:	e027      	b.n	800851e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	015a      	lsls	r2, r3, #5
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	4413      	add	r3, r2
 80084d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	0151      	lsls	r1, r2, #5
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	440a      	add	r2, r1
 80084e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	791b      	ldrb	r3, [r3, #4]
 80084f2:	2b03      	cmp	r3, #3
 80084f4:	d003      	beq.n	80084fe <USB_EPClearStall+0x9e>
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	791b      	ldrb	r3, [r3, #4]
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d10f      	bne.n	800851e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	015a      	lsls	r2, r3, #5
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	4413      	add	r3, r2
 8008506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	0151      	lsls	r1, r2, #5
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	440a      	add	r2, r1
 8008514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800851c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3714      	adds	r7, #20
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	460b      	mov	r3, r1
 8008536:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800854a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800854e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	78fb      	ldrb	r3, [r7, #3]
 800855a:	011b      	lsls	r3, r3, #4
 800855c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008560:	68f9      	ldr	r1, [r7, #12]
 8008562:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008566:	4313      	orrs	r3, r2
 8008568:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3714      	adds	r7, #20
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008592:	f023 0303 	bic.w	r3, r3, #3
 8008596:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085a6:	f023 0302 	bic.w	r3, r3, #2
 80085aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b085      	sub	sp, #20
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80085d4:	f023 0303 	bic.w	r3, r3, #3
 80085d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085e8:	f043 0302 	orr.w	r3, r3, #2
 80085ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3714      	adds	r7, #20
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	695b      	ldr	r3, [r3, #20]
 8008608:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	699b      	ldr	r3, [r3, #24]
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	4013      	ands	r3, r2
 8008612:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008614:	68fb      	ldr	r3, [r7, #12]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008622:	b480      	push	{r7}
 8008624:	b085      	sub	sp, #20
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008634:	699b      	ldr	r3, [r3, #24]
 8008636:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800863e:	69db      	ldr	r3, [r3, #28]
 8008640:	68ba      	ldr	r2, [r7, #8]
 8008642:	4013      	ands	r3, r2
 8008644:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	0c1b      	lsrs	r3, r3, #16
}
 800864a:	4618      	mov	r0, r3
 800864c:	3714      	adds	r7, #20
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr

08008656 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008656:	b480      	push	{r7}
 8008658:	b085      	sub	sp, #20
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008672:	69db      	ldr	r3, [r3, #28]
 8008674:	68ba      	ldr	r2, [r7, #8]
 8008676:	4013      	ands	r3, r2
 8008678:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	b29b      	uxth	r3, r3
}
 800867e:	4618      	mov	r0, r3
 8008680:	3714      	adds	r7, #20
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr

0800868a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800868a:	b480      	push	{r7}
 800868c:	b085      	sub	sp, #20
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
 8008692:	460b      	mov	r3, r1
 8008694:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800869a:	78fb      	ldrb	r3, [r7, #3]
 800869c:	015a      	lsls	r2, r3, #5
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	4413      	add	r3, r2
 80086a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086b0:	695b      	ldr	r3, [r3, #20]
 80086b2:	68ba      	ldr	r2, [r7, #8]
 80086b4:	4013      	ands	r3, r2
 80086b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80086b8:	68bb      	ldr	r3, [r7, #8]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3714      	adds	r7, #20
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80086c6:	b480      	push	{r7}
 80086c8:	b087      	sub	sp, #28
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	460b      	mov	r3, r1
 80086d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80086ea:	78fb      	ldrb	r3, [r7, #3]
 80086ec:	f003 030f 	and.w	r3, r3, #15
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	fa22 f303 	lsr.w	r3, r2, r3
 80086f6:	01db      	lsls	r3, r3, #7
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008700:	78fb      	ldrb	r3, [r7, #3]
 8008702:	015a      	lsls	r2, r3, #5
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	4413      	add	r3, r2
 8008708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	693a      	ldr	r2, [r7, #16]
 8008710:	4013      	ands	r3, r2
 8008712:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008714:	68bb      	ldr	r3, [r7, #8]
}
 8008716:	4618      	mov	r0, r3
 8008718:	371c      	adds	r7, #28
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr

08008722 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008722:	b480      	push	{r7}
 8008724:	b083      	sub	sp, #12
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	f003 0301 	and.w	r3, r3, #1
}
 8008732:	4618      	mov	r0, r3
 8008734:	370c      	adds	r7, #12
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800873e:	b480      	push	{r7}
 8008740:	b085      	sub	sp, #20
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008758:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800875c:	f023 0307 	bic.w	r3, r3, #7
 8008760:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008774:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008776:	2300      	movs	r3, #0
}
 8008778:	4618      	mov	r0, r3
 800877a:	3714      	adds	r7, #20
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008784:	b480      	push	{r7}
 8008786:	b087      	sub	sp, #28
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	460b      	mov	r3, r1
 800878e:	607a      	str	r2, [r7, #4]
 8008790:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	333c      	adds	r3, #60	; 0x3c
 800879a:	3304      	adds	r3, #4
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	4a26      	ldr	r2, [pc, #152]	; (800883c <USB_EP0_OutStart+0xb8>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d90a      	bls.n	80087be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087b8:	d101      	bne.n	80087be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80087ba:	2300      	movs	r3, #0
 80087bc:	e037      	b.n	800882e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c4:	461a      	mov	r2, r3
 80087c6:	2300      	movs	r3, #0
 80087c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	697a      	ldr	r2, [r7, #20]
 80087d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	697a      	ldr	r2, [r7, #20]
 80087e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087ec:	f043 0318 	orr.w	r3, r3, #24
 80087f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f8:	691b      	ldr	r3, [r3, #16]
 80087fa:	697a      	ldr	r2, [r7, #20]
 80087fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008800:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008804:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008806:	7afb      	ldrb	r3, [r7, #11]
 8008808:	2b01      	cmp	r3, #1
 800880a:	d10f      	bne.n	800882c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008812:	461a      	mov	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	697a      	ldr	r2, [r7, #20]
 8008822:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008826:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800882a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	371c      	adds	r7, #28
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	4f54300a 	.word	0x4f54300a

08008840 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008840:	b480      	push	{r7}
 8008842:	b085      	sub	sp, #20
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008848:	2300      	movs	r3, #0
 800884a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	3301      	adds	r3, #1
 8008850:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	4a13      	ldr	r2, [pc, #76]	; (80088a4 <USB_CoreReset+0x64>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d901      	bls.n	800885e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800885a:	2303      	movs	r3, #3
 800885c:	e01b      	b.n	8008896 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	2b00      	cmp	r3, #0
 8008864:	daf2      	bge.n	800884c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008866:	2300      	movs	r3, #0
 8008868:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	f043 0201 	orr.w	r2, r3, #1
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	3301      	adds	r3, #1
 800887a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	4a09      	ldr	r2, [pc, #36]	; (80088a4 <USB_CoreReset+0x64>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d901      	bls.n	8008888 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008884:	2303      	movs	r3, #3
 8008886:	e006      	b.n	8008896 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	f003 0301 	and.w	r3, r3, #1
 8008890:	2b01      	cmp	r3, #1
 8008892:	d0f0      	beq.n	8008876 <USB_CoreReset+0x36>

  return HAL_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3714      	adds	r7, #20
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	00030d40 	.word	0x00030d40

080088a8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	460b      	mov	r3, r1
 80088b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80088b4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80088b8:	f010 fe30 	bl	801951c <USBD_static_malloc>
 80088bc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d109      	bne.n	80088d8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	32b0      	adds	r2, #176	; 0xb0
 80088ce:	2100      	movs	r1, #0
 80088d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80088d4:	2302      	movs	r3, #2
 80088d6:	e0d4      	b.n	8008a82 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80088d8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80088dc:	2100      	movs	r1, #0
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f012 fa3e 	bl	801ad60 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	32b0      	adds	r2, #176	; 0xb0
 80088ee:	68f9      	ldr	r1, [r7, #12]
 80088f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	32b0      	adds	r2, #176	; 0xb0
 80088fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	7c1b      	ldrb	r3, [r3, #16]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d138      	bne.n	8008982 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008910:	4b5e      	ldr	r3, [pc, #376]	; (8008a8c <USBD_CDC_Init+0x1e4>)
 8008912:	7819      	ldrb	r1, [r3, #0]
 8008914:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008918:	2202      	movs	r2, #2
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f010 fcdb 	bl	80192d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008920:	4b5a      	ldr	r3, [pc, #360]	; (8008a8c <USBD_CDC_Init+0x1e4>)
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	f003 020f 	and.w	r2, r3, #15
 8008928:	6879      	ldr	r1, [r7, #4]
 800892a:	4613      	mov	r3, r2
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	4413      	add	r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	440b      	add	r3, r1
 8008934:	3324      	adds	r3, #36	; 0x24
 8008936:	2201      	movs	r2, #1
 8008938:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800893a:	4b55      	ldr	r3, [pc, #340]	; (8008a90 <USBD_CDC_Init+0x1e8>)
 800893c:	7819      	ldrb	r1, [r3, #0]
 800893e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008942:	2202      	movs	r2, #2
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f010 fcc6 	bl	80192d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800894a:	4b51      	ldr	r3, [pc, #324]	; (8008a90 <USBD_CDC_Init+0x1e8>)
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	f003 020f 	and.w	r2, r3, #15
 8008952:	6879      	ldr	r1, [r7, #4]
 8008954:	4613      	mov	r3, r2
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	4413      	add	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	440b      	add	r3, r1
 800895e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008962:	2201      	movs	r2, #1
 8008964:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008966:	4b4b      	ldr	r3, [pc, #300]	; (8008a94 <USBD_CDC_Init+0x1ec>)
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	f003 020f 	and.w	r2, r3, #15
 800896e:	6879      	ldr	r1, [r7, #4]
 8008970:	4613      	mov	r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	4413      	add	r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	440b      	add	r3, r1
 800897a:	3326      	adds	r3, #38	; 0x26
 800897c:	2210      	movs	r2, #16
 800897e:	801a      	strh	r2, [r3, #0]
 8008980:	e035      	b.n	80089ee <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008982:	4b42      	ldr	r3, [pc, #264]	; (8008a8c <USBD_CDC_Init+0x1e4>)
 8008984:	7819      	ldrb	r1, [r3, #0]
 8008986:	2340      	movs	r3, #64	; 0x40
 8008988:	2202      	movs	r2, #2
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f010 fca3 	bl	80192d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008990:	4b3e      	ldr	r3, [pc, #248]	; (8008a8c <USBD_CDC_Init+0x1e4>)
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	f003 020f 	and.w	r2, r3, #15
 8008998:	6879      	ldr	r1, [r7, #4]
 800899a:	4613      	mov	r3, r2
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	4413      	add	r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	440b      	add	r3, r1
 80089a4:	3324      	adds	r3, #36	; 0x24
 80089a6:	2201      	movs	r2, #1
 80089a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80089aa:	4b39      	ldr	r3, [pc, #228]	; (8008a90 <USBD_CDC_Init+0x1e8>)
 80089ac:	7819      	ldrb	r1, [r3, #0]
 80089ae:	2340      	movs	r3, #64	; 0x40
 80089b0:	2202      	movs	r2, #2
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f010 fc8f 	bl	80192d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80089b8:	4b35      	ldr	r3, [pc, #212]	; (8008a90 <USBD_CDC_Init+0x1e8>)
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	f003 020f 	and.w	r2, r3, #15
 80089c0:	6879      	ldr	r1, [r7, #4]
 80089c2:	4613      	mov	r3, r2
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	4413      	add	r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	440b      	add	r3, r1
 80089cc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80089d0:	2201      	movs	r2, #1
 80089d2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80089d4:	4b2f      	ldr	r3, [pc, #188]	; (8008a94 <USBD_CDC_Init+0x1ec>)
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	f003 020f 	and.w	r2, r3, #15
 80089dc:	6879      	ldr	r1, [r7, #4]
 80089de:	4613      	mov	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4413      	add	r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	440b      	add	r3, r1
 80089e8:	3326      	adds	r3, #38	; 0x26
 80089ea:	2210      	movs	r2, #16
 80089ec:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80089ee:	4b29      	ldr	r3, [pc, #164]	; (8008a94 <USBD_CDC_Init+0x1ec>)
 80089f0:	7819      	ldrb	r1, [r3, #0]
 80089f2:	2308      	movs	r3, #8
 80089f4:	2203      	movs	r2, #3
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f010 fc6d 	bl	80192d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80089fc:	4b25      	ldr	r3, [pc, #148]	; (8008a94 <USBD_CDC_Init+0x1ec>)
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	f003 020f 	and.w	r2, r3, #15
 8008a04:	6879      	ldr	r1, [r7, #4]
 8008a06:	4613      	mov	r3, r2
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	4413      	add	r3, r2
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	440b      	add	r3, r1
 8008a10:	3324      	adds	r3, #36	; 0x24
 8008a12:	2201      	movs	r2, #1
 8008a14:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	33b0      	adds	r3, #176	; 0xb0
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4413      	add	r3, r2
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d101      	bne.n	8008a50 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	e018      	b.n	8008a82 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	7c1b      	ldrb	r3, [r3, #16]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10a      	bne.n	8008a6e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a58:	4b0d      	ldr	r3, [pc, #52]	; (8008a90 <USBD_CDC_Init+0x1e8>)
 8008a5a:	7819      	ldrb	r1, [r3, #0]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f010 fd24 	bl	80194b4 <USBD_LL_PrepareReceive>
 8008a6c:	e008      	b.n	8008a80 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a6e:	4b08      	ldr	r3, [pc, #32]	; (8008a90 <USBD_CDC_Init+0x1e8>)
 8008a70:	7819      	ldrb	r1, [r3, #0]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a78:	2340      	movs	r3, #64	; 0x40
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f010 fd1a 	bl	80194b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	200000eb 	.word	0x200000eb
 8008a90:	200000ec 	.word	0x200000ec
 8008a94:	200000ed 	.word	0x200000ed

08008a98 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008aa4:	4b3a      	ldr	r3, [pc, #232]	; (8008b90 <USBD_CDC_DeInit+0xf8>)
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f010 fc39 	bl	8019322 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008ab0:	4b37      	ldr	r3, [pc, #220]	; (8008b90 <USBD_CDC_DeInit+0xf8>)
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	f003 020f 	and.w	r2, r3, #15
 8008ab8:	6879      	ldr	r1, [r7, #4]
 8008aba:	4613      	mov	r3, r2
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	4413      	add	r3, r2
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	440b      	add	r3, r1
 8008ac4:	3324      	adds	r3, #36	; 0x24
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008aca:	4b32      	ldr	r3, [pc, #200]	; (8008b94 <USBD_CDC_DeInit+0xfc>)
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	4619      	mov	r1, r3
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f010 fc26 	bl	8019322 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008ad6:	4b2f      	ldr	r3, [pc, #188]	; (8008b94 <USBD_CDC_DeInit+0xfc>)
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	f003 020f 	and.w	r2, r3, #15
 8008ade:	6879      	ldr	r1, [r7, #4]
 8008ae0:	4613      	mov	r3, r2
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4413      	add	r3, r2
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	440b      	add	r3, r1
 8008aea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008aee:	2200      	movs	r2, #0
 8008af0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008af2:	4b29      	ldr	r3, [pc, #164]	; (8008b98 <USBD_CDC_DeInit+0x100>)
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	4619      	mov	r1, r3
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f010 fc12 	bl	8019322 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008afe:	4b26      	ldr	r3, [pc, #152]	; (8008b98 <USBD_CDC_DeInit+0x100>)
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	f003 020f 	and.w	r2, r3, #15
 8008b06:	6879      	ldr	r1, [r7, #4]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	4413      	add	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	440b      	add	r3, r1
 8008b12:	3324      	adds	r3, #36	; 0x24
 8008b14:	2200      	movs	r2, #0
 8008b16:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008b18:	4b1f      	ldr	r3, [pc, #124]	; (8008b98 <USBD_CDC_DeInit+0x100>)
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	f003 020f 	and.w	r2, r3, #15
 8008b20:	6879      	ldr	r1, [r7, #4]
 8008b22:	4613      	mov	r3, r2
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	4413      	add	r3, r2
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	440b      	add	r3, r1
 8008b2c:	3326      	adds	r3, #38	; 0x26
 8008b2e:	2200      	movs	r2, #0
 8008b30:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	32b0      	adds	r2, #176	; 0xb0
 8008b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d01f      	beq.n	8008b84 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	33b0      	adds	r3, #176	; 0xb0
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	4413      	add	r3, r2
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	32b0      	adds	r2, #176	; 0xb0
 8008b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b66:	4618      	mov	r0, r3
 8008b68:	f010 fce6 	bl	8019538 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	32b0      	adds	r2, #176	; 0xb0
 8008b76:	2100      	movs	r1, #0
 8008b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3708      	adds	r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	200000eb 	.word	0x200000eb
 8008b94:	200000ec 	.word	0x200000ec
 8008b98:	200000ed 	.word	0x200000ed

08008b9c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b086      	sub	sp, #24
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	32b0      	adds	r2, #176	; 0xb0
 8008bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d101      	bne.n	8008bcc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	e0bf      	b.n	8008d4c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d050      	beq.n	8008c7a <USBD_CDC_Setup+0xde>
 8008bd8:	2b20      	cmp	r3, #32
 8008bda:	f040 80af 	bne.w	8008d3c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	88db      	ldrh	r3, [r3, #6]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d03a      	beq.n	8008c5c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	b25b      	sxtb	r3, r3
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	da1b      	bge.n	8008c28 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	33b0      	adds	r3, #176	; 0xb0
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	4413      	add	r3, r2
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008c06:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c08:	683a      	ldr	r2, [r7, #0]
 8008c0a:	88d2      	ldrh	r2, [r2, #6]
 8008c0c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	88db      	ldrh	r3, [r3, #6]
 8008c12:	2b07      	cmp	r3, #7
 8008c14:	bf28      	it	cs
 8008c16:	2307      	movcs	r3, #7
 8008c18:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	89fa      	ldrh	r2, [r7, #14]
 8008c1e:	4619      	mov	r1, r3
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f001 fd89 	bl	800a738 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008c26:	e090      	b.n	8008d4a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	785a      	ldrb	r2, [r3, #1]
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	88db      	ldrh	r3, [r3, #6]
 8008c36:	2b3f      	cmp	r3, #63	; 0x3f
 8008c38:	d803      	bhi.n	8008c42 <USBD_CDC_Setup+0xa6>
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	88db      	ldrh	r3, [r3, #6]
 8008c3e:	b2da      	uxtb	r2, r3
 8008c40:	e000      	b.n	8008c44 <USBD_CDC_Setup+0xa8>
 8008c42:	2240      	movs	r2, #64	; 0x40
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008c4a:	6939      	ldr	r1, [r7, #16]
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008c52:	461a      	mov	r2, r3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f001 fd9b 	bl	800a790 <USBD_CtlPrepareRx>
      break;
 8008c5a:	e076      	b.n	8008d4a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	33b0      	adds	r3, #176	; 0xb0
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	4413      	add	r3, r2
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	683a      	ldr	r2, [r7, #0]
 8008c70:	7850      	ldrb	r0, [r2, #1]
 8008c72:	2200      	movs	r2, #0
 8008c74:	6839      	ldr	r1, [r7, #0]
 8008c76:	4798      	blx	r3
      break;
 8008c78:	e067      	b.n	8008d4a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	785b      	ldrb	r3, [r3, #1]
 8008c7e:	2b0b      	cmp	r3, #11
 8008c80:	d851      	bhi.n	8008d26 <USBD_CDC_Setup+0x18a>
 8008c82:	a201      	add	r2, pc, #4	; (adr r2, 8008c88 <USBD_CDC_Setup+0xec>)
 8008c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c88:	08008cb9 	.word	0x08008cb9
 8008c8c:	08008d35 	.word	0x08008d35
 8008c90:	08008d27 	.word	0x08008d27
 8008c94:	08008d27 	.word	0x08008d27
 8008c98:	08008d27 	.word	0x08008d27
 8008c9c:	08008d27 	.word	0x08008d27
 8008ca0:	08008d27 	.word	0x08008d27
 8008ca4:	08008d27 	.word	0x08008d27
 8008ca8:	08008d27 	.word	0x08008d27
 8008cac:	08008d27 	.word	0x08008d27
 8008cb0:	08008ce3 	.word	0x08008ce3
 8008cb4:	08008d0d 	.word	0x08008d0d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	2b03      	cmp	r3, #3
 8008cc2:	d107      	bne.n	8008cd4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008cc4:	f107 030a 	add.w	r3, r7, #10
 8008cc8:	2202      	movs	r2, #2
 8008cca:	4619      	mov	r1, r3
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f001 fd33 	bl	800a738 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008cd2:	e032      	b.n	8008d3a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008cd4:	6839      	ldr	r1, [r7, #0]
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f001 fcbd 	bl	800a656 <USBD_CtlError>
            ret = USBD_FAIL;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	75fb      	strb	r3, [r7, #23]
          break;
 8008ce0:	e02b      	b.n	8008d3a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	2b03      	cmp	r3, #3
 8008cec:	d107      	bne.n	8008cfe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008cee:	f107 030d 	add.w	r3, r7, #13
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f001 fd1e 	bl	800a738 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008cfc:	e01d      	b.n	8008d3a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008cfe:	6839      	ldr	r1, [r7, #0]
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f001 fca8 	bl	800a656 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d06:	2303      	movs	r3, #3
 8008d08:	75fb      	strb	r3, [r7, #23]
          break;
 8008d0a:	e016      	b.n	8008d3a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	2b03      	cmp	r3, #3
 8008d16:	d00f      	beq.n	8008d38 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008d18:	6839      	ldr	r1, [r7, #0]
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f001 fc9b 	bl	800a656 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d20:	2303      	movs	r3, #3
 8008d22:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008d24:	e008      	b.n	8008d38 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008d26:	6839      	ldr	r1, [r7, #0]
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f001 fc94 	bl	800a656 <USBD_CtlError>
          ret = USBD_FAIL;
 8008d2e:	2303      	movs	r3, #3
 8008d30:	75fb      	strb	r3, [r7, #23]
          break;
 8008d32:	e002      	b.n	8008d3a <USBD_CDC_Setup+0x19e>
          break;
 8008d34:	bf00      	nop
 8008d36:	e008      	b.n	8008d4a <USBD_CDC_Setup+0x1ae>
          break;
 8008d38:	bf00      	nop
      }
      break;
 8008d3a:	e006      	b.n	8008d4a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008d3c:	6839      	ldr	r1, [r7, #0]
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f001 fc89 	bl	800a656 <USBD_CtlError>
      ret = USBD_FAIL;
 8008d44:	2303      	movs	r3, #3
 8008d46:	75fb      	strb	r3, [r7, #23]
      break;
 8008d48:	bf00      	nop
  }

  return (uint8_t)ret;
 8008d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3718      	adds	r7, #24
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d66:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	32b0      	adds	r2, #176	; 0xb0
 8008d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d101      	bne.n	8008d7e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e065      	b.n	8008e4a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	32b0      	adds	r2, #176	; 0xb0
 8008d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d8c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008d8e:	78fb      	ldrb	r3, [r7, #3]
 8008d90:	f003 020f 	and.w	r2, r3, #15
 8008d94:	6879      	ldr	r1, [r7, #4]
 8008d96:	4613      	mov	r3, r2
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	4413      	add	r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	440b      	add	r3, r1
 8008da0:	3318      	adds	r3, #24
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d02f      	beq.n	8008e08 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008da8:	78fb      	ldrb	r3, [r7, #3]
 8008daa:	f003 020f 	and.w	r2, r3, #15
 8008dae:	6879      	ldr	r1, [r7, #4]
 8008db0:	4613      	mov	r3, r2
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4413      	add	r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	440b      	add	r3, r1
 8008dba:	3318      	adds	r3, #24
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	78fb      	ldrb	r3, [r7, #3]
 8008dc0:	f003 010f 	and.w	r1, r3, #15
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	00db      	lsls	r3, r3, #3
 8008dca:	440b      	add	r3, r1
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	4403      	add	r3, r0
 8008dd0:	3348      	adds	r3, #72	; 0x48
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	fbb2 f1f3 	udiv	r1, r2, r3
 8008dd8:	fb01 f303 	mul.w	r3, r1, r3
 8008ddc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d112      	bne.n	8008e08 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008de2:	78fb      	ldrb	r3, [r7, #3]
 8008de4:	f003 020f 	and.w	r2, r3, #15
 8008de8:	6879      	ldr	r1, [r7, #4]
 8008dea:	4613      	mov	r3, r2
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	4413      	add	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	440b      	add	r3, r1
 8008df4:	3318      	adds	r3, #24
 8008df6:	2200      	movs	r2, #0
 8008df8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008dfa:	78f9      	ldrb	r1, [r7, #3]
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	2200      	movs	r2, #0
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f010 fb36 	bl	8019472 <USBD_LL_Transmit>
 8008e06:	e01f      	b.n	8008e48 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	33b0      	adds	r3, #176	; 0xb0
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	4413      	add	r3, r2
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d010      	beq.n	8008e48 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	33b0      	adds	r3, #176	; 0xb0
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	4413      	add	r3, r2
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008e3e:	68ba      	ldr	r2, [r7, #8]
 8008e40:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008e44:	78fa      	ldrb	r2, [r7, #3]
 8008e46:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b084      	sub	sp, #16
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	32b0      	adds	r2, #176	; 0xb0
 8008e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e6c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	32b0      	adds	r2, #176	; 0xb0
 8008e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d101      	bne.n	8008e84 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008e80:	2303      	movs	r3, #3
 8008e82:	e01a      	b.n	8008eba <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008e84:	78fb      	ldrb	r3, [r7, #3]
 8008e86:	4619      	mov	r1, r3
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f010 fb34 	bl	80194f6 <USBD_LL_GetRxDataSize>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	33b0      	adds	r3, #176	; 0xb0
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	4413      	add	r3, r2
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008eae:	68fa      	ldr	r2, [r7, #12]
 8008eb0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008eb4:	4611      	mov	r1, r2
 8008eb6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b084      	sub	sp, #16
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	32b0      	adds	r2, #176	; 0xb0
 8008ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ed8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d101      	bne.n	8008ee4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	e025      	b.n	8008f30 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	33b0      	adds	r3, #176	; 0xb0
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	4413      	add	r3, r2
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d01a      	beq.n	8008f2e <USBD_CDC_EP0_RxReady+0x6c>
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008efe:	2bff      	cmp	r3, #255	; 0xff
 8008f00:	d015      	beq.n	8008f2e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	33b0      	adds	r3, #176	; 0xb0
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	4413      	add	r3, r2
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	68fa      	ldr	r2, [r7, #12]
 8008f16:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008f1a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008f22:	b292      	uxth	r2, r2
 8008f24:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	22ff      	movs	r2, #255	; 0xff
 8008f2a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3710      	adds	r7, #16
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b086      	sub	sp, #24
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f40:	2182      	movs	r1, #130	; 0x82
 8008f42:	4818      	ldr	r0, [pc, #96]	; (8008fa4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f44:	f000 fd4f 	bl	80099e6 <USBD_GetEpDesc>
 8008f48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008f4a:	2101      	movs	r1, #1
 8008f4c:	4815      	ldr	r0, [pc, #84]	; (8008fa4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f4e:	f000 fd4a 	bl	80099e6 <USBD_GetEpDesc>
 8008f52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008f54:	2181      	movs	r1, #129	; 0x81
 8008f56:	4813      	ldr	r0, [pc, #76]	; (8008fa4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f58:	f000 fd45 	bl	80099e6 <USBD_GetEpDesc>
 8008f5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d002      	beq.n	8008f6a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	2210      	movs	r2, #16
 8008f68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d006      	beq.n	8008f7e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f78:	711a      	strb	r2, [r3, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d006      	beq.n	8008f92 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f8c:	711a      	strb	r2, [r3, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2243      	movs	r2, #67	; 0x43
 8008f96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f98:	4b02      	ldr	r3, [pc, #8]	; (8008fa4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3718      	adds	r7, #24
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	200000a8 	.word	0x200000a8

08008fa8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b086      	sub	sp, #24
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008fb0:	2182      	movs	r1, #130	; 0x82
 8008fb2:	4818      	ldr	r0, [pc, #96]	; (8009014 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008fb4:	f000 fd17 	bl	80099e6 <USBD_GetEpDesc>
 8008fb8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008fba:	2101      	movs	r1, #1
 8008fbc:	4815      	ldr	r0, [pc, #84]	; (8009014 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008fbe:	f000 fd12 	bl	80099e6 <USBD_GetEpDesc>
 8008fc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008fc4:	2181      	movs	r1, #129	; 0x81
 8008fc6:	4813      	ldr	r0, [pc, #76]	; (8009014 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008fc8:	f000 fd0d 	bl	80099e6 <USBD_GetEpDesc>
 8008fcc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d002      	beq.n	8008fda <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	2210      	movs	r2, #16
 8008fd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d006      	beq.n	8008fee <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	711a      	strb	r2, [r3, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f042 0202 	orr.w	r2, r2, #2
 8008fec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d006      	beq.n	8009002 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	711a      	strb	r2, [r3, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f042 0202 	orr.w	r2, r2, #2
 8009000:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2243      	movs	r2, #67	; 0x43
 8009006:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009008:	4b02      	ldr	r3, [pc, #8]	; (8009014 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800900a:	4618      	mov	r0, r3
 800900c:	3718      	adds	r7, #24
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	200000a8 	.word	0x200000a8

08009018 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b086      	sub	sp, #24
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009020:	2182      	movs	r1, #130	; 0x82
 8009022:	4818      	ldr	r0, [pc, #96]	; (8009084 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009024:	f000 fcdf 	bl	80099e6 <USBD_GetEpDesc>
 8009028:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800902a:	2101      	movs	r1, #1
 800902c:	4815      	ldr	r0, [pc, #84]	; (8009084 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800902e:	f000 fcda 	bl	80099e6 <USBD_GetEpDesc>
 8009032:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009034:	2181      	movs	r1, #129	; 0x81
 8009036:	4813      	ldr	r0, [pc, #76]	; (8009084 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009038:	f000 fcd5 	bl	80099e6 <USBD_GetEpDesc>
 800903c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d002      	beq.n	800904a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	2210      	movs	r2, #16
 8009048:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d006      	beq.n	800905e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	2200      	movs	r2, #0
 8009054:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009058:	711a      	strb	r2, [r3, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d006      	beq.n	8009072 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2200      	movs	r2, #0
 8009068:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800906c:	711a      	strb	r2, [r3, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2243      	movs	r2, #67	; 0x43
 8009076:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009078:	4b02      	ldr	r3, [pc, #8]	; (8009084 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800907a:	4618      	mov	r0, r3
 800907c:	3718      	adds	r7, #24
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	200000a8 	.word	0x200000a8

08009088 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	220a      	movs	r2, #10
 8009094:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009096:	4b03      	ldr	r3, [pc, #12]	; (80090a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009098:	4618      	mov	r0, r3
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr
 80090a4:	20000064 	.word	0x20000064

080090a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d101      	bne.n	80090bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80090b8:	2303      	movs	r3, #3
 80090ba:	e009      	b.n	80090d0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	33b0      	adds	r3, #176	; 0xb0
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	4413      	add	r3, r2
 80090ca:	683a      	ldr	r2, [r7, #0]
 80090cc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	370c      	adds	r7, #12
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80090dc:	b480      	push	{r7}
 80090de:	b087      	sub	sp, #28
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	32b0      	adds	r2, #176	; 0xb0
 80090f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090f6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d101      	bne.n	8009102 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80090fe:	2303      	movs	r3, #3
 8009100:	e008      	b.n	8009114 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	68ba      	ldr	r2, [r7, #8]
 8009106:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009112:	2300      	movs	r3, #0
}
 8009114:	4618      	mov	r0, r3
 8009116:	371c      	adds	r7, #28
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	32b0      	adds	r2, #176	; 0xb0
 8009134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009138:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d101      	bne.n	8009144 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009140:	2303      	movs	r3, #3
 8009142:	e004      	b.n	800914e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	683a      	ldr	r2, [r7, #0]
 8009148:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3714      	adds	r7, #20
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
	...

0800915c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	32b0      	adds	r2, #176	; 0xb0
 800916e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009172:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009174:	2301      	movs	r3, #1
 8009176:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	32b0      	adds	r2, #176	; 0xb0
 8009182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d101      	bne.n	800918e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800918a:	2303      	movs	r3, #3
 800918c:	e025      	b.n	80091da <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009194:	2b00      	cmp	r3, #0
 8009196:	d11f      	bne.n	80091d8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	2201      	movs	r2, #1
 800919c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80091a0:	4b10      	ldr	r3, [pc, #64]	; (80091e4 <USBD_CDC_TransmitPacket+0x88>)
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	f003 020f 	and.w	r2, r3, #15
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	4613      	mov	r3, r2
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	4413      	add	r3, r2
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	4403      	add	r3, r0
 80091ba:	3318      	adds	r3, #24
 80091bc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80091be:	4b09      	ldr	r3, [pc, #36]	; (80091e4 <USBD_CDC_TransmitPacket+0x88>)
 80091c0:	7819      	ldrb	r1, [r3, #0]
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f010 f94f 	bl	8019472 <USBD_LL_Transmit>

    ret = USBD_OK;
 80091d4:	2300      	movs	r3, #0
 80091d6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80091d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	200000eb 	.word	0x200000eb

080091e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	32b0      	adds	r2, #176	; 0xb0
 80091fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091fe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	32b0      	adds	r2, #176	; 0xb0
 800920a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d101      	bne.n	8009216 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009212:	2303      	movs	r3, #3
 8009214:	e018      	b.n	8009248 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	7c1b      	ldrb	r3, [r3, #16]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d10a      	bne.n	8009234 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800921e:	4b0c      	ldr	r3, [pc, #48]	; (8009250 <USBD_CDC_ReceivePacket+0x68>)
 8009220:	7819      	ldrb	r1, [r3, #0]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009228:	f44f 7300 	mov.w	r3, #512	; 0x200
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f010 f941 	bl	80194b4 <USBD_LL_PrepareReceive>
 8009232:	e008      	b.n	8009246 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009234:	4b06      	ldr	r3, [pc, #24]	; (8009250 <USBD_CDC_ReceivePacket+0x68>)
 8009236:	7819      	ldrb	r1, [r3, #0]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800923e:	2340      	movs	r3, #64	; 0x40
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f010 f937 	bl	80194b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3710      	adds	r7, #16
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	200000ec 	.word	0x200000ec

08009254 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b086      	sub	sp, #24
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	4613      	mov	r3, r2
 8009260:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d101      	bne.n	800926c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009268:	2303      	movs	r3, #3
 800926a:	e01f      	b.n	80092ac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2200      	movs	r2, #0
 8009270:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2200      	movs	r2, #0
 8009278:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2200      	movs	r2, #0
 8009280:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d003      	beq.n	8009292 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	68ba      	ldr	r2, [r7, #8]
 800928e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2201      	movs	r2, #1
 8009296:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	79fa      	ldrb	r2, [r7, #7]
 800929e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f00f ffb1 	bl	8019208 <USBD_LL_Init>
 80092a6:	4603      	mov	r3, r0
 80092a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80092aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3718      	adds	r7, #24
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80092be:	2300      	movs	r3, #0
 80092c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d101      	bne.n	80092cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80092c8:	2303      	movs	r3, #3
 80092ca:	e025      	b.n	8009318 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	683a      	ldr	r2, [r7, #0]
 80092d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	32ae      	adds	r2, #174	; 0xae
 80092de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00f      	beq.n	8009308 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	32ae      	adds	r2, #174	; 0xae
 80092f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f8:	f107 020e 	add.w	r2, r7, #14
 80092fc:	4610      	mov	r0, r2
 80092fe:	4798      	blx	r3
 8009300:	4602      	mov	r2, r0
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800930e:	1c5a      	adds	r2, r3, #1
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009316:	2300      	movs	r3, #0
}
 8009318:	4618      	mov	r0, r3
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f00f ffb9 	bl	80192a0 <USBD_LL_Start>
 800932e:	4603      	mov	r3, r0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009340:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009342:	4618      	mov	r0, r3
 8009344:	370c      	adds	r7, #12
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr

0800934e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b084      	sub	sp, #16
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
 8009356:	460b      	mov	r3, r1
 8009358:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800935a:	2300      	movs	r3, #0
 800935c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009364:	2b00      	cmp	r3, #0
 8009366:	d009      	beq.n	800937c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	78fa      	ldrb	r2, [r7, #3]
 8009372:	4611      	mov	r1, r2
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	4798      	blx	r3
 8009378:	4603      	mov	r3, r0
 800937a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800937c:	7bfb      	ldrb	r3, [r7, #15]
}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b084      	sub	sp, #16
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
 800938e:	460b      	mov	r3, r1
 8009390:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009392:	2300      	movs	r3, #0
 8009394:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	78fa      	ldrb	r2, [r7, #3]
 80093a0:	4611      	mov	r1, r2
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	4798      	blx	r3
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d001      	beq.n	80093b0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80093ac:	2303      	movs	r3, #3
 80093ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80093b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b084      	sub	sp, #16
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
 80093c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093ca:	6839      	ldr	r1, [r7, #0]
 80093cc:	4618      	mov	r0, r3
 80093ce:	f001 f908 	bl	800a5e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2201      	movs	r2, #1
 80093d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80093e0:	461a      	mov	r2, r3
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80093ee:	f003 031f 	and.w	r3, r3, #31
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d01a      	beq.n	800942c <USBD_LL_SetupStage+0x72>
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	d822      	bhi.n	8009440 <USBD_LL_SetupStage+0x86>
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d002      	beq.n	8009404 <USBD_LL_SetupStage+0x4a>
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d00a      	beq.n	8009418 <USBD_LL_SetupStage+0x5e>
 8009402:	e01d      	b.n	8009440 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800940a:	4619      	mov	r1, r3
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 fb5f 	bl	8009ad0 <USBD_StdDevReq>
 8009412:	4603      	mov	r3, r0
 8009414:	73fb      	strb	r3, [r7, #15]
      break;
 8009416:	e020      	b.n	800945a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800941e:	4619      	mov	r1, r3
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 fbc7 	bl	8009bb4 <USBD_StdItfReq>
 8009426:	4603      	mov	r3, r0
 8009428:	73fb      	strb	r3, [r7, #15]
      break;
 800942a:	e016      	b.n	800945a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009432:	4619      	mov	r1, r3
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 fc29 	bl	8009c8c <USBD_StdEPReq>
 800943a:	4603      	mov	r3, r0
 800943c:	73fb      	strb	r3, [r7, #15]
      break;
 800943e:	e00c      	b.n	800945a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009446:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800944a:	b2db      	uxtb	r3, r3
 800944c:	4619      	mov	r1, r3
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f00f ff86 	bl	8019360 <USBD_LL_StallEP>
 8009454:	4603      	mov	r3, r0
 8009456:	73fb      	strb	r3, [r7, #15]
      break;
 8009458:	bf00      	nop
  }

  return ret;
 800945a:	7bfb      	ldrb	r3, [r7, #15]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b086      	sub	sp, #24
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	460b      	mov	r3, r1
 800946e:	607a      	str	r2, [r7, #4]
 8009470:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009472:	2300      	movs	r3, #0
 8009474:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009476:	7afb      	ldrb	r3, [r7, #11]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d16e      	bne.n	800955a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009482:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800948a:	2b03      	cmp	r3, #3
 800948c:	f040 8098 	bne.w	80095c0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	689a      	ldr	r2, [r3, #8]
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	429a      	cmp	r2, r3
 800949a:	d913      	bls.n	80094c4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	689a      	ldr	r2, [r3, #8]
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	1ad2      	subs	r2, r2, r3
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	68da      	ldr	r2, [r3, #12]
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	4293      	cmp	r3, r2
 80094b4:	bf28      	it	cs
 80094b6:	4613      	movcs	r3, r2
 80094b8:	461a      	mov	r2, r3
 80094ba:	6879      	ldr	r1, [r7, #4]
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f001 f984 	bl	800a7ca <USBD_CtlContinueRx>
 80094c2:	e07d      	b.n	80095c0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80094ca:	f003 031f 	and.w	r3, r3, #31
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	d014      	beq.n	80094fc <USBD_LL_DataOutStage+0x98>
 80094d2:	2b02      	cmp	r3, #2
 80094d4:	d81d      	bhi.n	8009512 <USBD_LL_DataOutStage+0xae>
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d002      	beq.n	80094e0 <USBD_LL_DataOutStage+0x7c>
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d003      	beq.n	80094e6 <USBD_LL_DataOutStage+0x82>
 80094de:	e018      	b.n	8009512 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80094e0:	2300      	movs	r3, #0
 80094e2:	75bb      	strb	r3, [r7, #22]
            break;
 80094e4:	e018      	b.n	8009518 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	4619      	mov	r1, r3
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f000 fa5e 	bl	80099b2 <USBD_CoreFindIF>
 80094f6:	4603      	mov	r3, r0
 80094f8:	75bb      	strb	r3, [r7, #22]
            break;
 80094fa:	e00d      	b.n	8009518 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009502:	b2db      	uxtb	r3, r3
 8009504:	4619      	mov	r1, r3
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f000 fa60 	bl	80099cc <USBD_CoreFindEP>
 800950c:	4603      	mov	r3, r0
 800950e:	75bb      	strb	r3, [r7, #22]
            break;
 8009510:	e002      	b.n	8009518 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009512:	2300      	movs	r3, #0
 8009514:	75bb      	strb	r3, [r7, #22]
            break;
 8009516:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009518:	7dbb      	ldrb	r3, [r7, #22]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d119      	bne.n	8009552 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009524:	b2db      	uxtb	r3, r3
 8009526:	2b03      	cmp	r3, #3
 8009528:	d113      	bne.n	8009552 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800952a:	7dba      	ldrb	r2, [r7, #22]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	32ae      	adds	r2, #174	; 0xae
 8009530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00b      	beq.n	8009552 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800953a:	7dba      	ldrb	r2, [r7, #22]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009542:	7dba      	ldrb	r2, [r7, #22]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	32ae      	adds	r2, #174	; 0xae
 8009548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800954c:	691b      	ldr	r3, [r3, #16]
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	f001 f94a 	bl	800a7ec <USBD_CtlSendStatus>
 8009558:	e032      	b.n	80095c0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800955a:	7afb      	ldrb	r3, [r7, #11]
 800955c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009560:	b2db      	uxtb	r3, r3
 8009562:	4619      	mov	r1, r3
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f000 fa31 	bl	80099cc <USBD_CoreFindEP>
 800956a:	4603      	mov	r3, r0
 800956c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800956e:	7dbb      	ldrb	r3, [r7, #22]
 8009570:	2bff      	cmp	r3, #255	; 0xff
 8009572:	d025      	beq.n	80095c0 <USBD_LL_DataOutStage+0x15c>
 8009574:	7dbb      	ldrb	r3, [r7, #22]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d122      	bne.n	80095c0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009580:	b2db      	uxtb	r3, r3
 8009582:	2b03      	cmp	r3, #3
 8009584:	d117      	bne.n	80095b6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009586:	7dba      	ldrb	r2, [r7, #22]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	32ae      	adds	r2, #174	; 0xae
 800958c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00f      	beq.n	80095b6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009596:	7dba      	ldrb	r2, [r7, #22]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800959e:	7dba      	ldrb	r2, [r7, #22]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	32ae      	adds	r2, #174	; 0xae
 80095a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095a8:	699b      	ldr	r3, [r3, #24]
 80095aa:	7afa      	ldrb	r2, [r7, #11]
 80095ac:	4611      	mov	r1, r2
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	4798      	blx	r3
 80095b2:	4603      	mov	r3, r0
 80095b4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80095b6:	7dfb      	ldrb	r3, [r7, #23]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d001      	beq.n	80095c0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80095bc:	7dfb      	ldrb	r3, [r7, #23]
 80095be:	e000      	b.n	80095c2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3718      	adds	r7, #24
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b086      	sub	sp, #24
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	60f8      	str	r0, [r7, #12]
 80095d2:	460b      	mov	r3, r1
 80095d4:	607a      	str	r2, [r7, #4]
 80095d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80095d8:	7afb      	ldrb	r3, [r7, #11]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d16f      	bne.n	80096be <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	3314      	adds	r3, #20
 80095e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80095ea:	2b02      	cmp	r3, #2
 80095ec:	d15a      	bne.n	80096a4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	689a      	ldr	r2, [r3, #8]
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d914      	bls.n	8009624 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	689a      	ldr	r2, [r3, #8]
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	1ad2      	subs	r2, r2, r3
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	461a      	mov	r2, r3
 800960e:	6879      	ldr	r1, [r7, #4]
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	f001 f8ac 	bl	800a76e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009616:	2300      	movs	r3, #0
 8009618:	2200      	movs	r2, #0
 800961a:	2100      	movs	r1, #0
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f00f ff49 	bl	80194b4 <USBD_LL_PrepareReceive>
 8009622:	e03f      	b.n	80096a4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	68da      	ldr	r2, [r3, #12]
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	429a      	cmp	r2, r3
 800962e:	d11c      	bne.n	800966a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	685a      	ldr	r2, [r3, #4]
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009638:	429a      	cmp	r2, r3
 800963a:	d316      	bcc.n	800966a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	685a      	ldr	r2, [r3, #4]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009646:	429a      	cmp	r2, r3
 8009648:	d20f      	bcs.n	800966a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800964a:	2200      	movs	r2, #0
 800964c:	2100      	movs	r1, #0
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f001 f88d 	bl	800a76e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2200      	movs	r2, #0
 8009658:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800965c:	2300      	movs	r3, #0
 800965e:	2200      	movs	r2, #0
 8009660:	2100      	movs	r1, #0
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	f00f ff26 	bl	80194b4 <USBD_LL_PrepareReceive>
 8009668:	e01c      	b.n	80096a4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009670:	b2db      	uxtb	r3, r3
 8009672:	2b03      	cmp	r3, #3
 8009674:	d10f      	bne.n	8009696 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d009      	beq.n	8009696 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2200      	movs	r2, #0
 8009686:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009690:	68db      	ldr	r3, [r3, #12]
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009696:	2180      	movs	r1, #128	; 0x80
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f00f fe61 	bl	8019360 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f001 f8b7 	bl	800a812 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d03a      	beq.n	8009724 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80096ae:	68f8      	ldr	r0, [r7, #12]
 80096b0:	f7ff fe42 	bl	8009338 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80096bc:	e032      	b.n	8009724 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80096be:	7afb      	ldrb	r3, [r7, #11]
 80096c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	4619      	mov	r1, r3
 80096c8:	68f8      	ldr	r0, [r7, #12]
 80096ca:	f000 f97f 	bl	80099cc <USBD_CoreFindEP>
 80096ce:	4603      	mov	r3, r0
 80096d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096d2:	7dfb      	ldrb	r3, [r7, #23]
 80096d4:	2bff      	cmp	r3, #255	; 0xff
 80096d6:	d025      	beq.n	8009724 <USBD_LL_DataInStage+0x15a>
 80096d8:	7dfb      	ldrb	r3, [r7, #23]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d122      	bne.n	8009724 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	2b03      	cmp	r3, #3
 80096e8:	d11c      	bne.n	8009724 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80096ea:	7dfa      	ldrb	r2, [r7, #23]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	32ae      	adds	r2, #174	; 0xae
 80096f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096f4:	695b      	ldr	r3, [r3, #20]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d014      	beq.n	8009724 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80096fa:	7dfa      	ldrb	r2, [r7, #23]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009702:	7dfa      	ldrb	r2, [r7, #23]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	32ae      	adds	r2, #174	; 0xae
 8009708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800970c:	695b      	ldr	r3, [r3, #20]
 800970e:	7afa      	ldrb	r2, [r7, #11]
 8009710:	4611      	mov	r1, r2
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	4798      	blx	r3
 8009716:	4603      	mov	r3, r0
 8009718:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800971a:	7dbb      	ldrb	r3, [r7, #22]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d001      	beq.n	8009724 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009720:	7dbb      	ldrb	r3, [r7, #22]
 8009722:	e000      	b.n	8009726 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3718      	adds	r7, #24
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b084      	sub	sp, #16
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009736:	2300      	movs	r3, #0
 8009738:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2201      	movs	r2, #1
 800973e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009766:	2b00      	cmp	r3, #0
 8009768:	d014      	beq.n	8009794 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d00e      	beq.n	8009794 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	6852      	ldr	r2, [r2, #4]
 8009782:	b2d2      	uxtb	r2, r2
 8009784:	4611      	mov	r1, r2
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	4798      	blx	r3
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d001      	beq.n	8009794 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009790:	2303      	movs	r3, #3
 8009792:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009794:	2340      	movs	r3, #64	; 0x40
 8009796:	2200      	movs	r2, #0
 8009798:	2100      	movs	r1, #0
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f00f fd9b 	bl	80192d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2240      	movs	r2, #64	; 0x40
 80097ac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097b0:	2340      	movs	r3, #64	; 0x40
 80097b2:	2200      	movs	r2, #0
 80097b4:	2180      	movs	r1, #128	; 0x80
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f00f fd8d 	bl	80192d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2201      	movs	r2, #1
 80097c0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2240      	movs	r2, #64	; 0x40
 80097c6:	621a      	str	r2, [r3, #32]

  return ret;
 80097c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80097d2:	b480      	push	{r7}
 80097d4:	b083      	sub	sp, #12
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
 80097da:	460b      	mov	r3, r1
 80097dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	78fa      	ldrb	r2, [r7, #3]
 80097e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	370c      	adds	r7, #12
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr

080097f2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80097f2:	b480      	push	{r7}
 80097f4:	b083      	sub	sp, #12
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009800:	b2da      	uxtb	r2, r3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2204      	movs	r2, #4
 800980c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	370c      	adds	r7, #12
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr

0800981e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800981e:	b480      	push	{r7}
 8009820:	b083      	sub	sp, #12
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800982c:	b2db      	uxtb	r3, r3
 800982e:	2b04      	cmp	r3, #4
 8009830:	d106      	bne.n	8009840 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009838:	b2da      	uxtb	r2, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009840:	2300      	movs	r3, #0
}
 8009842:	4618      	mov	r0, r3
 8009844:	370c      	adds	r7, #12
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b082      	sub	sp, #8
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800985c:	b2db      	uxtb	r3, r3
 800985e:	2b03      	cmp	r3, #3
 8009860:	d110      	bne.n	8009884 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009868:	2b00      	cmp	r3, #0
 800986a:	d00b      	beq.n	8009884 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009872:	69db      	ldr	r3, [r3, #28]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d005      	beq.n	8009884 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800987e:	69db      	ldr	r3, [r3, #28]
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3708      	adds	r7, #8
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b082      	sub	sp, #8
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	460b      	mov	r3, r1
 8009898:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	32ae      	adds	r2, #174	; 0xae
 80098a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d101      	bne.n	80098b0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80098ac:	2303      	movs	r3, #3
 80098ae:	e01c      	b.n	80098ea <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	2b03      	cmp	r3, #3
 80098ba:	d115      	bne.n	80098e8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	32ae      	adds	r2, #174	; 0xae
 80098c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ca:	6a1b      	ldr	r3, [r3, #32]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d00b      	beq.n	80098e8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	32ae      	adds	r2, #174	; 0xae
 80098da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098de:	6a1b      	ldr	r3, [r3, #32]
 80098e0:	78fa      	ldrb	r2, [r7, #3]
 80098e2:	4611      	mov	r1, r2
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3708      	adds	r7, #8
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b082      	sub	sp, #8
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
 80098fa:	460b      	mov	r3, r1
 80098fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	32ae      	adds	r2, #174	; 0xae
 8009908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d101      	bne.n	8009914 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009910:	2303      	movs	r3, #3
 8009912:	e01c      	b.n	800994e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800991a:	b2db      	uxtb	r3, r3
 800991c:	2b03      	cmp	r3, #3
 800991e:	d115      	bne.n	800994c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	32ae      	adds	r2, #174	; 0xae
 800992a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800992e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00b      	beq.n	800994c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	32ae      	adds	r2, #174	; 0xae
 800993e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009944:	78fa      	ldrb	r2, [r7, #3]
 8009946:	4611      	mov	r1, r2
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800994c:	2300      	movs	r3, #0
}
 800994e:	4618      	mov	r0, r3
 8009950:	3708      	adds	r7, #8
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009956:	b480      	push	{r7}
 8009958:	b083      	sub	sp, #12
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009974:	2300      	movs	r3, #0
 8009976:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00e      	beq.n	80099a8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	6852      	ldr	r2, [r2, #4]
 8009996:	b2d2      	uxtb	r2, r2
 8009998:	4611      	mov	r1, r2
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	4798      	blx	r3
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d001      	beq.n	80099a8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80099a4:	2303      	movs	r3, #3
 80099a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80099a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80099b2:	b480      	push	{r7}
 80099b4:	b083      	sub	sp, #12
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
 80099ba:	460b      	mov	r3, r1
 80099bc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80099be:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	460b      	mov	r3, r1
 80099d6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80099d8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80099da:	4618      	mov	r0, r3
 80099dc:	370c      	adds	r7, #12
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr

080099e6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b086      	sub	sp, #24
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	460b      	mov	r3, r1
 80099f0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80099fa:	2300      	movs	r3, #0
 80099fc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	885b      	ldrh	r3, [r3, #2]
 8009a02:	b29a      	uxth	r2, r3
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d920      	bls.n	8009a50 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009a16:	e013      	b.n	8009a40 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009a18:	f107 030a 	add.w	r3, r7, #10
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	6978      	ldr	r0, [r7, #20]
 8009a20:	f000 f81b 	bl	8009a5a <USBD_GetNextDesc>
 8009a24:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	785b      	ldrb	r3, [r3, #1]
 8009a2a:	2b05      	cmp	r3, #5
 8009a2c:	d108      	bne.n	8009a40 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	789b      	ldrb	r3, [r3, #2]
 8009a36:	78fa      	ldrb	r2, [r7, #3]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d008      	beq.n	8009a4e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	885b      	ldrh	r3, [r3, #2]
 8009a44:	b29a      	uxth	r2, r3
 8009a46:	897b      	ldrh	r3, [r7, #10]
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d8e5      	bhi.n	8009a18 <USBD_GetEpDesc+0x32>
 8009a4c:	e000      	b.n	8009a50 <USBD_GetEpDesc+0x6a>
          break;
 8009a4e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009a50:	693b      	ldr	r3, [r7, #16]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3718      	adds	r7, #24
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009a5a:	b480      	push	{r7}
 8009a5c:	b085      	sub	sp, #20
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
 8009a62:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	881a      	ldrh	r2, [r3, #0]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	4413      	add	r3, r2
 8009a74:	b29a      	uxth	r2, r3
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	461a      	mov	r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4413      	add	r3, r2
 8009a84:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009a86:	68fb      	ldr	r3, [r7, #12]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3714      	adds	r7, #20
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b087      	sub	sp, #28
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009ab2:	8a3b      	ldrh	r3, [r7, #16]
 8009ab4:	021b      	lsls	r3, r3, #8
 8009ab6:	b21a      	sxth	r2, r3
 8009ab8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009abc:	4313      	orrs	r3, r2
 8009abe:	b21b      	sxth	r3, r3
 8009ac0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009ac2:	89fb      	ldrh	r3, [r7, #14]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	371c      	adds	r7, #28
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr

08009ad0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ada:	2300      	movs	r3, #0
 8009adc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ae6:	2b40      	cmp	r3, #64	; 0x40
 8009ae8:	d005      	beq.n	8009af6 <USBD_StdDevReq+0x26>
 8009aea:	2b40      	cmp	r3, #64	; 0x40
 8009aec:	d857      	bhi.n	8009b9e <USBD_StdDevReq+0xce>
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d00f      	beq.n	8009b12 <USBD_StdDevReq+0x42>
 8009af2:	2b20      	cmp	r3, #32
 8009af4:	d153      	bne.n	8009b9e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	32ae      	adds	r2, #174	; 0xae
 8009b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	6839      	ldr	r1, [r7, #0]
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	4798      	blx	r3
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b10:	e04a      	b.n	8009ba8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	785b      	ldrb	r3, [r3, #1]
 8009b16:	2b09      	cmp	r3, #9
 8009b18:	d83b      	bhi.n	8009b92 <USBD_StdDevReq+0xc2>
 8009b1a:	a201      	add	r2, pc, #4	; (adr r2, 8009b20 <USBD_StdDevReq+0x50>)
 8009b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b20:	08009b75 	.word	0x08009b75
 8009b24:	08009b89 	.word	0x08009b89
 8009b28:	08009b93 	.word	0x08009b93
 8009b2c:	08009b7f 	.word	0x08009b7f
 8009b30:	08009b93 	.word	0x08009b93
 8009b34:	08009b53 	.word	0x08009b53
 8009b38:	08009b49 	.word	0x08009b49
 8009b3c:	08009b93 	.word	0x08009b93
 8009b40:	08009b6b 	.word	0x08009b6b
 8009b44:	08009b5d 	.word	0x08009b5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009b48:	6839      	ldr	r1, [r7, #0]
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 fa3c 	bl	8009fc8 <USBD_GetDescriptor>
          break;
 8009b50:	e024      	b.n	8009b9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009b52:	6839      	ldr	r1, [r7, #0]
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fba1 	bl	800a29c <USBD_SetAddress>
          break;
 8009b5a:	e01f      	b.n	8009b9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009b5c:	6839      	ldr	r1, [r7, #0]
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 fbe0 	bl	800a324 <USBD_SetConfig>
 8009b64:	4603      	mov	r3, r0
 8009b66:	73fb      	strb	r3, [r7, #15]
          break;
 8009b68:	e018      	b.n	8009b9c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009b6a:	6839      	ldr	r1, [r7, #0]
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 fc83 	bl	800a478 <USBD_GetConfig>
          break;
 8009b72:	e013      	b.n	8009b9c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fcb4 	bl	800a4e4 <USBD_GetStatus>
          break;
 8009b7c:	e00e      	b.n	8009b9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 fce3 	bl	800a54c <USBD_SetFeature>
          break;
 8009b86:	e009      	b.n	8009b9c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009b88:	6839      	ldr	r1, [r7, #0]
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fd07 	bl	800a59e <USBD_ClrFeature>
          break;
 8009b90:	e004      	b.n	8009b9c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009b92:	6839      	ldr	r1, [r7, #0]
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 fd5e 	bl	800a656 <USBD_CtlError>
          break;
 8009b9a:	bf00      	nop
      }
      break;
 8009b9c:	e004      	b.n	8009ba8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009b9e:	6839      	ldr	r1, [r7, #0]
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 fd58 	bl	800a656 <USBD_CtlError>
      break;
 8009ba6:	bf00      	nop
  }

  return ret;
 8009ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3710      	adds	r7, #16
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop

08009bb4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009bca:	2b40      	cmp	r3, #64	; 0x40
 8009bcc:	d005      	beq.n	8009bda <USBD_StdItfReq+0x26>
 8009bce:	2b40      	cmp	r3, #64	; 0x40
 8009bd0:	d852      	bhi.n	8009c78 <USBD_StdItfReq+0xc4>
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d001      	beq.n	8009bda <USBD_StdItfReq+0x26>
 8009bd6:	2b20      	cmp	r3, #32
 8009bd8:	d14e      	bne.n	8009c78 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	3b01      	subs	r3, #1
 8009be4:	2b02      	cmp	r3, #2
 8009be6:	d840      	bhi.n	8009c6a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	889b      	ldrh	r3, [r3, #4]
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d836      	bhi.n	8009c60 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	889b      	ldrh	r3, [r3, #4]
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f7ff fed9 	bl	80099b2 <USBD_CoreFindIF>
 8009c00:	4603      	mov	r3, r0
 8009c02:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c04:	7bbb      	ldrb	r3, [r7, #14]
 8009c06:	2bff      	cmp	r3, #255	; 0xff
 8009c08:	d01d      	beq.n	8009c46 <USBD_StdItfReq+0x92>
 8009c0a:	7bbb      	ldrb	r3, [r7, #14]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d11a      	bne.n	8009c46 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009c10:	7bba      	ldrb	r2, [r7, #14]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	32ae      	adds	r2, #174	; 0xae
 8009c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d00f      	beq.n	8009c40 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009c20:	7bba      	ldrb	r2, [r7, #14]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009c28:	7bba      	ldrb	r2, [r7, #14]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	32ae      	adds	r2, #174	; 0xae
 8009c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	6839      	ldr	r1, [r7, #0]
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	4798      	blx	r3
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009c3e:	e004      	b.n	8009c4a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009c40:	2303      	movs	r3, #3
 8009c42:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009c44:	e001      	b.n	8009c4a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009c46:	2303      	movs	r3, #3
 8009c48:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	88db      	ldrh	r3, [r3, #6]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d110      	bne.n	8009c74 <USBD_StdItfReq+0xc0>
 8009c52:	7bfb      	ldrb	r3, [r7, #15]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d10d      	bne.n	8009c74 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 fdc7 	bl	800a7ec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009c5e:	e009      	b.n	8009c74 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009c60:	6839      	ldr	r1, [r7, #0]
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fcf7 	bl	800a656 <USBD_CtlError>
          break;
 8009c68:	e004      	b.n	8009c74 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009c6a:	6839      	ldr	r1, [r7, #0]
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 fcf2 	bl	800a656 <USBD_CtlError>
          break;
 8009c72:	e000      	b.n	8009c76 <USBD_StdItfReq+0xc2>
          break;
 8009c74:	bf00      	nop
      }
      break;
 8009c76:	e004      	b.n	8009c82 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009c78:	6839      	ldr	r1, [r7, #0]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fceb 	bl	800a656 <USBD_CtlError>
      break;
 8009c80:	bf00      	nop
  }

  return ret;
 8009c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c96:	2300      	movs	r3, #0
 8009c98:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	889b      	ldrh	r3, [r3, #4]
 8009c9e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ca8:	2b40      	cmp	r3, #64	; 0x40
 8009caa:	d007      	beq.n	8009cbc <USBD_StdEPReq+0x30>
 8009cac:	2b40      	cmp	r3, #64	; 0x40
 8009cae:	f200 817f 	bhi.w	8009fb0 <USBD_StdEPReq+0x324>
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d02a      	beq.n	8009d0c <USBD_StdEPReq+0x80>
 8009cb6:	2b20      	cmp	r3, #32
 8009cb8:	f040 817a 	bne.w	8009fb0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009cbc:	7bbb      	ldrb	r3, [r7, #14]
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f7ff fe83 	bl	80099cc <USBD_CoreFindEP>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009cca:	7b7b      	ldrb	r3, [r7, #13]
 8009ccc:	2bff      	cmp	r3, #255	; 0xff
 8009cce:	f000 8174 	beq.w	8009fba <USBD_StdEPReq+0x32e>
 8009cd2:	7b7b      	ldrb	r3, [r7, #13]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	f040 8170 	bne.w	8009fba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009cda:	7b7a      	ldrb	r2, [r7, #13]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009ce2:	7b7a      	ldrb	r2, [r7, #13]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	32ae      	adds	r2, #174	; 0xae
 8009ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	f000 8163 	beq.w	8009fba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009cf4:	7b7a      	ldrb	r2, [r7, #13]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	32ae      	adds	r2, #174	; 0xae
 8009cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	6839      	ldr	r1, [r7, #0]
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	4798      	blx	r3
 8009d06:	4603      	mov	r3, r0
 8009d08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009d0a:	e156      	b.n	8009fba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	785b      	ldrb	r3, [r3, #1]
 8009d10:	2b03      	cmp	r3, #3
 8009d12:	d008      	beq.n	8009d26 <USBD_StdEPReq+0x9a>
 8009d14:	2b03      	cmp	r3, #3
 8009d16:	f300 8145 	bgt.w	8009fa4 <USBD_StdEPReq+0x318>
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f000 809b 	beq.w	8009e56 <USBD_StdEPReq+0x1ca>
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d03c      	beq.n	8009d9e <USBD_StdEPReq+0x112>
 8009d24:	e13e      	b.n	8009fa4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	2b02      	cmp	r3, #2
 8009d30:	d002      	beq.n	8009d38 <USBD_StdEPReq+0xac>
 8009d32:	2b03      	cmp	r3, #3
 8009d34:	d016      	beq.n	8009d64 <USBD_StdEPReq+0xd8>
 8009d36:	e02c      	b.n	8009d92 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d38:	7bbb      	ldrb	r3, [r7, #14]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d00d      	beq.n	8009d5a <USBD_StdEPReq+0xce>
 8009d3e:	7bbb      	ldrb	r3, [r7, #14]
 8009d40:	2b80      	cmp	r3, #128	; 0x80
 8009d42:	d00a      	beq.n	8009d5a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d44:	7bbb      	ldrb	r3, [r7, #14]
 8009d46:	4619      	mov	r1, r3
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f00f fb09 	bl	8019360 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d4e:	2180      	movs	r1, #128	; 0x80
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f00f fb05 	bl	8019360 <USBD_LL_StallEP>
 8009d56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d58:	e020      	b.n	8009d9c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009d5a:	6839      	ldr	r1, [r7, #0]
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 fc7a 	bl	800a656 <USBD_CtlError>
              break;
 8009d62:	e01b      	b.n	8009d9c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	885b      	ldrh	r3, [r3, #2]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d10e      	bne.n	8009d8a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009d6c:	7bbb      	ldrb	r3, [r7, #14]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d00b      	beq.n	8009d8a <USBD_StdEPReq+0xfe>
 8009d72:	7bbb      	ldrb	r3, [r7, #14]
 8009d74:	2b80      	cmp	r3, #128	; 0x80
 8009d76:	d008      	beq.n	8009d8a <USBD_StdEPReq+0xfe>
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	88db      	ldrh	r3, [r3, #6]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d104      	bne.n	8009d8a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d80:	7bbb      	ldrb	r3, [r7, #14]
 8009d82:	4619      	mov	r1, r3
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f00f faeb 	bl	8019360 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 fd2e 	bl	800a7ec <USBD_CtlSendStatus>

              break;
 8009d90:	e004      	b.n	8009d9c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009d92:	6839      	ldr	r1, [r7, #0]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 fc5e 	bl	800a656 <USBD_CtlError>
              break;
 8009d9a:	bf00      	nop
          }
          break;
 8009d9c:	e107      	b.n	8009fae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	d002      	beq.n	8009db0 <USBD_StdEPReq+0x124>
 8009daa:	2b03      	cmp	r3, #3
 8009dac:	d016      	beq.n	8009ddc <USBD_StdEPReq+0x150>
 8009dae:	e04b      	b.n	8009e48 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009db0:	7bbb      	ldrb	r3, [r7, #14]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00d      	beq.n	8009dd2 <USBD_StdEPReq+0x146>
 8009db6:	7bbb      	ldrb	r3, [r7, #14]
 8009db8:	2b80      	cmp	r3, #128	; 0x80
 8009dba:	d00a      	beq.n	8009dd2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009dbc:	7bbb      	ldrb	r3, [r7, #14]
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f00f facd 	bl	8019360 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009dc6:	2180      	movs	r1, #128	; 0x80
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f00f fac9 	bl	8019360 <USBD_LL_StallEP>
 8009dce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009dd0:	e040      	b.n	8009e54 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009dd2:	6839      	ldr	r1, [r7, #0]
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 fc3e 	bl	800a656 <USBD_CtlError>
              break;
 8009dda:	e03b      	b.n	8009e54 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	885b      	ldrh	r3, [r3, #2]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d136      	bne.n	8009e52 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009de4:	7bbb      	ldrb	r3, [r7, #14]
 8009de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d004      	beq.n	8009df8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009dee:	7bbb      	ldrb	r3, [r7, #14]
 8009df0:	4619      	mov	r1, r3
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f00f fad3 	bl	801939e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 fcf7 	bl	800a7ec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009dfe:	7bbb      	ldrb	r3, [r7, #14]
 8009e00:	4619      	mov	r1, r3
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f7ff fde2 	bl	80099cc <USBD_CoreFindEP>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e0c:	7b7b      	ldrb	r3, [r7, #13]
 8009e0e:	2bff      	cmp	r3, #255	; 0xff
 8009e10:	d01f      	beq.n	8009e52 <USBD_StdEPReq+0x1c6>
 8009e12:	7b7b      	ldrb	r3, [r7, #13]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d11c      	bne.n	8009e52 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009e18:	7b7a      	ldrb	r2, [r7, #13]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009e20:	7b7a      	ldrb	r2, [r7, #13]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	32ae      	adds	r2, #174	; 0xae
 8009e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d010      	beq.n	8009e52 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009e30:	7b7a      	ldrb	r2, [r7, #13]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	32ae      	adds	r2, #174	; 0xae
 8009e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	6839      	ldr	r1, [r7, #0]
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	4798      	blx	r3
 8009e42:	4603      	mov	r3, r0
 8009e44:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009e46:	e004      	b.n	8009e52 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009e48:	6839      	ldr	r1, [r7, #0]
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 fc03 	bl	800a656 <USBD_CtlError>
              break;
 8009e50:	e000      	b.n	8009e54 <USBD_StdEPReq+0x1c8>
              break;
 8009e52:	bf00      	nop
          }
          break;
 8009e54:	e0ab      	b.n	8009fae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	2b02      	cmp	r3, #2
 8009e60:	d002      	beq.n	8009e68 <USBD_StdEPReq+0x1dc>
 8009e62:	2b03      	cmp	r3, #3
 8009e64:	d032      	beq.n	8009ecc <USBD_StdEPReq+0x240>
 8009e66:	e097      	b.n	8009f98 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e68:	7bbb      	ldrb	r3, [r7, #14]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d007      	beq.n	8009e7e <USBD_StdEPReq+0x1f2>
 8009e6e:	7bbb      	ldrb	r3, [r7, #14]
 8009e70:	2b80      	cmp	r3, #128	; 0x80
 8009e72:	d004      	beq.n	8009e7e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009e74:	6839      	ldr	r1, [r7, #0]
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fbed 	bl	800a656 <USBD_CtlError>
                break;
 8009e7c:	e091      	b.n	8009fa2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	da0b      	bge.n	8009e9e <USBD_StdEPReq+0x212>
 8009e86:	7bbb      	ldrb	r3, [r7, #14]
 8009e88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	4413      	add	r3, r2
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	3310      	adds	r3, #16
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	4413      	add	r3, r2
 8009e9a:	3304      	adds	r3, #4
 8009e9c:	e00b      	b.n	8009eb6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ea0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	4413      	add	r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	4413      	add	r3, r2
 8009eb4:	3304      	adds	r3, #4
 8009eb6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	2202      	movs	r2, #2
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 fc37 	bl	800a738 <USBD_CtlSendData>
              break;
 8009eca:	e06a      	b.n	8009fa2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009ecc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	da11      	bge.n	8009ef8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009ed4:	7bbb      	ldrb	r3, [r7, #14]
 8009ed6:	f003 020f 	and.w	r2, r3, #15
 8009eda:	6879      	ldr	r1, [r7, #4]
 8009edc:	4613      	mov	r3, r2
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	4413      	add	r3, r2
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	440b      	add	r3, r1
 8009ee6:	3324      	adds	r3, #36	; 0x24
 8009ee8:	881b      	ldrh	r3, [r3, #0]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d117      	bne.n	8009f1e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009eee:	6839      	ldr	r1, [r7, #0]
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 fbb0 	bl	800a656 <USBD_CtlError>
                  break;
 8009ef6:	e054      	b.n	8009fa2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009ef8:	7bbb      	ldrb	r3, [r7, #14]
 8009efa:	f003 020f 	and.w	r2, r3, #15
 8009efe:	6879      	ldr	r1, [r7, #4]
 8009f00:	4613      	mov	r3, r2
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	4413      	add	r3, r2
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	440b      	add	r3, r1
 8009f0a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009f0e:	881b      	ldrh	r3, [r3, #0]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d104      	bne.n	8009f1e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009f14:	6839      	ldr	r1, [r7, #0]
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 fb9d 	bl	800a656 <USBD_CtlError>
                  break;
 8009f1c:	e041      	b.n	8009fa2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	da0b      	bge.n	8009f3e <USBD_StdEPReq+0x2b2>
 8009f26:	7bbb      	ldrb	r3, [r7, #14]
 8009f28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	4413      	add	r3, r2
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	3310      	adds	r3, #16
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	4413      	add	r3, r2
 8009f3a:	3304      	adds	r3, #4
 8009f3c:	e00b      	b.n	8009f56 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f3e:	7bbb      	ldrb	r3, [r7, #14]
 8009f40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f44:	4613      	mov	r3, r2
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	4413      	add	r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	4413      	add	r3, r2
 8009f54:	3304      	adds	r3, #4
 8009f56:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009f58:	7bbb      	ldrb	r3, [r7, #14]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d002      	beq.n	8009f64 <USBD_StdEPReq+0x2d8>
 8009f5e:	7bbb      	ldrb	r3, [r7, #14]
 8009f60:	2b80      	cmp	r3, #128	; 0x80
 8009f62:	d103      	bne.n	8009f6c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	2200      	movs	r2, #0
 8009f68:	601a      	str	r2, [r3, #0]
 8009f6a:	e00e      	b.n	8009f8a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009f6c:	7bbb      	ldrb	r3, [r7, #14]
 8009f6e:	4619      	mov	r1, r3
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f00f fa33 	bl	80193dc <USBD_LL_IsStallEP>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d003      	beq.n	8009f84 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	601a      	str	r2, [r3, #0]
 8009f82:	e002      	b.n	8009f8a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	2200      	movs	r2, #0
 8009f88:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	2202      	movs	r2, #2
 8009f8e:	4619      	mov	r1, r3
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 fbd1 	bl	800a738 <USBD_CtlSendData>
              break;
 8009f96:	e004      	b.n	8009fa2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009f98:	6839      	ldr	r1, [r7, #0]
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 fb5b 	bl	800a656 <USBD_CtlError>
              break;
 8009fa0:	bf00      	nop
          }
          break;
 8009fa2:	e004      	b.n	8009fae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009fa4:	6839      	ldr	r1, [r7, #0]
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 fb55 	bl	800a656 <USBD_CtlError>
          break;
 8009fac:	bf00      	nop
      }
      break;
 8009fae:	e005      	b.n	8009fbc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009fb0:	6839      	ldr	r1, [r7, #0]
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 fb4f 	bl	800a656 <USBD_CtlError>
      break;
 8009fb8:	e000      	b.n	8009fbc <USBD_StdEPReq+0x330>
      break;
 8009fba:	bf00      	nop
  }

  return ret;
 8009fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
	...

08009fc8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	885b      	ldrh	r3, [r3, #2]
 8009fe2:	0a1b      	lsrs	r3, r3, #8
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	2b06      	cmp	r3, #6
 8009fea:	f200 8128 	bhi.w	800a23e <USBD_GetDescriptor+0x276>
 8009fee:	a201      	add	r2, pc, #4	; (adr r2, 8009ff4 <USBD_GetDescriptor+0x2c>)
 8009ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff4:	0800a011 	.word	0x0800a011
 8009ff8:	0800a029 	.word	0x0800a029
 8009ffc:	0800a069 	.word	0x0800a069
 800a000:	0800a23f 	.word	0x0800a23f
 800a004:	0800a23f 	.word	0x0800a23f
 800a008:	0800a1df 	.word	0x0800a1df
 800a00c:	0800a20b 	.word	0x0800a20b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	7c12      	ldrb	r2, [r2, #16]
 800a01c:	f107 0108 	add.w	r1, r7, #8
 800a020:	4610      	mov	r0, r2
 800a022:	4798      	blx	r3
 800a024:	60f8      	str	r0, [r7, #12]
      break;
 800a026:	e112      	b.n	800a24e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	7c1b      	ldrb	r3, [r3, #16]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d10d      	bne.n	800a04c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a038:	f107 0208 	add.w	r2, r7, #8
 800a03c:	4610      	mov	r0, r2
 800a03e:	4798      	blx	r3
 800a040:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	3301      	adds	r3, #1
 800a046:	2202      	movs	r2, #2
 800a048:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a04a:	e100      	b.n	800a24e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a054:	f107 0208 	add.w	r2, r7, #8
 800a058:	4610      	mov	r0, r2
 800a05a:	4798      	blx	r3
 800a05c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	3301      	adds	r3, #1
 800a062:	2202      	movs	r2, #2
 800a064:	701a      	strb	r2, [r3, #0]
      break;
 800a066:	e0f2      	b.n	800a24e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	885b      	ldrh	r3, [r3, #2]
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	2b05      	cmp	r3, #5
 800a070:	f200 80ac 	bhi.w	800a1cc <USBD_GetDescriptor+0x204>
 800a074:	a201      	add	r2, pc, #4	; (adr r2, 800a07c <USBD_GetDescriptor+0xb4>)
 800a076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a07a:	bf00      	nop
 800a07c:	0800a095 	.word	0x0800a095
 800a080:	0800a0c9 	.word	0x0800a0c9
 800a084:	0800a0fd 	.word	0x0800a0fd
 800a088:	0800a131 	.word	0x0800a131
 800a08c:	0800a165 	.word	0x0800a165
 800a090:	0800a199 	.word	0x0800a199
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d00b      	beq.n	800a0b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	7c12      	ldrb	r2, [r2, #16]
 800a0ac:	f107 0108 	add.w	r1, r7, #8
 800a0b0:	4610      	mov	r0, r2
 800a0b2:	4798      	blx	r3
 800a0b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0b6:	e091      	b.n	800a1dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0b8:	6839      	ldr	r1, [r7, #0]
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 facb 	bl	800a656 <USBD_CtlError>
            err++;
 800a0c0:	7afb      	ldrb	r3, [r7, #11]
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	72fb      	strb	r3, [r7, #11]
          break;
 800a0c6:	e089      	b.n	800a1dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d00b      	beq.n	800a0ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	7c12      	ldrb	r2, [r2, #16]
 800a0e0:	f107 0108 	add.w	r1, r7, #8
 800a0e4:	4610      	mov	r0, r2
 800a0e6:	4798      	blx	r3
 800a0e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0ea:	e077      	b.n	800a1dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0ec:	6839      	ldr	r1, [r7, #0]
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 fab1 	bl	800a656 <USBD_CtlError>
            err++;
 800a0f4:	7afb      	ldrb	r3, [r7, #11]
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	72fb      	strb	r3, [r7, #11]
          break;
 800a0fa:	e06f      	b.n	800a1dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a102:	68db      	ldr	r3, [r3, #12]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d00b      	beq.n	800a120 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	7c12      	ldrb	r2, [r2, #16]
 800a114:	f107 0108 	add.w	r1, r7, #8
 800a118:	4610      	mov	r0, r2
 800a11a:	4798      	blx	r3
 800a11c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a11e:	e05d      	b.n	800a1dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a120:	6839      	ldr	r1, [r7, #0]
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 fa97 	bl	800a656 <USBD_CtlError>
            err++;
 800a128:	7afb      	ldrb	r3, [r7, #11]
 800a12a:	3301      	adds	r3, #1
 800a12c:	72fb      	strb	r3, [r7, #11]
          break;
 800a12e:	e055      	b.n	800a1dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d00b      	beq.n	800a154 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a142:	691b      	ldr	r3, [r3, #16]
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	7c12      	ldrb	r2, [r2, #16]
 800a148:	f107 0108 	add.w	r1, r7, #8
 800a14c:	4610      	mov	r0, r2
 800a14e:	4798      	blx	r3
 800a150:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a152:	e043      	b.n	800a1dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a154:	6839      	ldr	r1, [r7, #0]
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 fa7d 	bl	800a656 <USBD_CtlError>
            err++;
 800a15c:	7afb      	ldrb	r3, [r7, #11]
 800a15e:	3301      	adds	r3, #1
 800a160:	72fb      	strb	r3, [r7, #11]
          break;
 800a162:	e03b      	b.n	800a1dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a16a:	695b      	ldr	r3, [r3, #20]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d00b      	beq.n	800a188 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a176:	695b      	ldr	r3, [r3, #20]
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	7c12      	ldrb	r2, [r2, #16]
 800a17c:	f107 0108 	add.w	r1, r7, #8
 800a180:	4610      	mov	r0, r2
 800a182:	4798      	blx	r3
 800a184:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a186:	e029      	b.n	800a1dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a188:	6839      	ldr	r1, [r7, #0]
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 fa63 	bl	800a656 <USBD_CtlError>
            err++;
 800a190:	7afb      	ldrb	r3, [r7, #11]
 800a192:	3301      	adds	r3, #1
 800a194:	72fb      	strb	r3, [r7, #11]
          break;
 800a196:	e021      	b.n	800a1dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a19e:	699b      	ldr	r3, [r3, #24]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d00b      	beq.n	800a1bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1aa:	699b      	ldr	r3, [r3, #24]
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	7c12      	ldrb	r2, [r2, #16]
 800a1b0:	f107 0108 	add.w	r1, r7, #8
 800a1b4:	4610      	mov	r0, r2
 800a1b6:	4798      	blx	r3
 800a1b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1ba:	e00f      	b.n	800a1dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1bc:	6839      	ldr	r1, [r7, #0]
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 fa49 	bl	800a656 <USBD_CtlError>
            err++;
 800a1c4:	7afb      	ldrb	r3, [r7, #11]
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	72fb      	strb	r3, [r7, #11]
          break;
 800a1ca:	e007      	b.n	800a1dc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a1cc:	6839      	ldr	r1, [r7, #0]
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 fa41 	bl	800a656 <USBD_CtlError>
          err++;
 800a1d4:	7afb      	ldrb	r3, [r7, #11]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a1da:	bf00      	nop
      }
      break;
 800a1dc:	e037      	b.n	800a24e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	7c1b      	ldrb	r3, [r3, #16]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d109      	bne.n	800a1fa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ee:	f107 0208 	add.w	r2, r7, #8
 800a1f2:	4610      	mov	r0, r2
 800a1f4:	4798      	blx	r3
 800a1f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1f8:	e029      	b.n	800a24e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a1fa:	6839      	ldr	r1, [r7, #0]
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 fa2a 	bl	800a656 <USBD_CtlError>
        err++;
 800a202:	7afb      	ldrb	r3, [r7, #11]
 800a204:	3301      	adds	r3, #1
 800a206:	72fb      	strb	r3, [r7, #11]
      break;
 800a208:	e021      	b.n	800a24e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	7c1b      	ldrb	r3, [r3, #16]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d10d      	bne.n	800a22e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a21a:	f107 0208 	add.w	r2, r7, #8
 800a21e:	4610      	mov	r0, r2
 800a220:	4798      	blx	r3
 800a222:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	3301      	adds	r3, #1
 800a228:	2207      	movs	r2, #7
 800a22a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a22c:	e00f      	b.n	800a24e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a22e:	6839      	ldr	r1, [r7, #0]
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 fa10 	bl	800a656 <USBD_CtlError>
        err++;
 800a236:	7afb      	ldrb	r3, [r7, #11]
 800a238:	3301      	adds	r3, #1
 800a23a:	72fb      	strb	r3, [r7, #11]
      break;
 800a23c:	e007      	b.n	800a24e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a23e:	6839      	ldr	r1, [r7, #0]
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 fa08 	bl	800a656 <USBD_CtlError>
      err++;
 800a246:	7afb      	ldrb	r3, [r7, #11]
 800a248:	3301      	adds	r3, #1
 800a24a:	72fb      	strb	r3, [r7, #11]
      break;
 800a24c:	bf00      	nop
  }

  if (err != 0U)
 800a24e:	7afb      	ldrb	r3, [r7, #11]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d11e      	bne.n	800a292 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	88db      	ldrh	r3, [r3, #6]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d016      	beq.n	800a28a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a25c:	893b      	ldrh	r3, [r7, #8]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00e      	beq.n	800a280 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	88da      	ldrh	r2, [r3, #6]
 800a266:	893b      	ldrh	r3, [r7, #8]
 800a268:	4293      	cmp	r3, r2
 800a26a:	bf28      	it	cs
 800a26c:	4613      	movcs	r3, r2
 800a26e:	b29b      	uxth	r3, r3
 800a270:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a272:	893b      	ldrh	r3, [r7, #8]
 800a274:	461a      	mov	r2, r3
 800a276:	68f9      	ldr	r1, [r7, #12]
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 fa5d 	bl	800a738 <USBD_CtlSendData>
 800a27e:	e009      	b.n	800a294 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a280:	6839      	ldr	r1, [r7, #0]
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 f9e7 	bl	800a656 <USBD_CtlError>
 800a288:	e004      	b.n	800a294 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 faae 	bl	800a7ec <USBD_CtlSendStatus>
 800a290:	e000      	b.n	800a294 <USBD_GetDescriptor+0x2cc>
    return;
 800a292:	bf00      	nop
  }
}
 800a294:	3710      	adds	r7, #16
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop

0800a29c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	889b      	ldrh	r3, [r3, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d131      	bne.n	800a312 <USBD_SetAddress+0x76>
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	88db      	ldrh	r3, [r3, #6]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d12d      	bne.n	800a312 <USBD_SetAddress+0x76>
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	885b      	ldrh	r3, [r3, #2]
 800a2ba:	2b7f      	cmp	r3, #127	; 0x7f
 800a2bc:	d829      	bhi.n	800a312 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	885b      	ldrh	r3, [r3, #2]
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2d0:	b2db      	uxtb	r3, r3
 800a2d2:	2b03      	cmp	r3, #3
 800a2d4:	d104      	bne.n	800a2e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a2d6:	6839      	ldr	r1, [r7, #0]
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 f9bc 	bl	800a656 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2de:	e01d      	b.n	800a31c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	7bfa      	ldrb	r2, [r7, #15]
 800a2e4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a2e8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f00f f8a1 	bl	8019434 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 fa7a 	bl	800a7ec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a2f8:	7bfb      	ldrb	r3, [r7, #15]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d004      	beq.n	800a308 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2202      	movs	r2, #2
 800a302:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a306:	e009      	b.n	800a31c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a310:	e004      	b.n	800a31c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a312:	6839      	ldr	r1, [r7, #0]
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f000 f99e 	bl	800a656 <USBD_CtlError>
  }
}
 800a31a:	bf00      	nop
 800a31c:	bf00      	nop
 800a31e:	3710      	adds	r7, #16
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a32e:	2300      	movs	r3, #0
 800a330:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	885b      	ldrh	r3, [r3, #2]
 800a336:	b2da      	uxtb	r2, r3
 800a338:	4b4e      	ldr	r3, [pc, #312]	; (800a474 <USBD_SetConfig+0x150>)
 800a33a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a33c:	4b4d      	ldr	r3, [pc, #308]	; (800a474 <USBD_SetConfig+0x150>)
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	2b01      	cmp	r3, #1
 800a342:	d905      	bls.n	800a350 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a344:	6839      	ldr	r1, [r7, #0]
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 f985 	bl	800a656 <USBD_CtlError>
    return USBD_FAIL;
 800a34c:	2303      	movs	r3, #3
 800a34e:	e08c      	b.n	800a46a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a356:	b2db      	uxtb	r3, r3
 800a358:	2b02      	cmp	r3, #2
 800a35a:	d002      	beq.n	800a362 <USBD_SetConfig+0x3e>
 800a35c:	2b03      	cmp	r3, #3
 800a35e:	d029      	beq.n	800a3b4 <USBD_SetConfig+0x90>
 800a360:	e075      	b.n	800a44e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a362:	4b44      	ldr	r3, [pc, #272]	; (800a474 <USBD_SetConfig+0x150>)
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d020      	beq.n	800a3ac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a36a:	4b42      	ldr	r3, [pc, #264]	; (800a474 <USBD_SetConfig+0x150>)
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	461a      	mov	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a374:	4b3f      	ldr	r3, [pc, #252]	; (800a474 <USBD_SetConfig+0x150>)
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	4619      	mov	r1, r3
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f7fe ffe7 	bl	800934e <USBD_SetClassConfig>
 800a380:	4603      	mov	r3, r0
 800a382:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a384:	7bfb      	ldrb	r3, [r7, #15]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d008      	beq.n	800a39c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a38a:	6839      	ldr	r1, [r7, #0]
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 f962 	bl	800a656 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2202      	movs	r2, #2
 800a396:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a39a:	e065      	b.n	800a468 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 fa25 	bl	800a7ec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2203      	movs	r2, #3
 800a3a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a3aa:	e05d      	b.n	800a468 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 fa1d 	bl	800a7ec <USBD_CtlSendStatus>
      break;
 800a3b2:	e059      	b.n	800a468 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a3b4:	4b2f      	ldr	r3, [pc, #188]	; (800a474 <USBD_SetConfig+0x150>)
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d112      	bne.n	800a3e2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2202      	movs	r2, #2
 800a3c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a3c4:	4b2b      	ldr	r3, [pc, #172]	; (800a474 <USBD_SetConfig+0x150>)
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a3ce:	4b29      	ldr	r3, [pc, #164]	; (800a474 <USBD_SetConfig+0x150>)
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f7fe ffd6 	bl	8009386 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 fa06 	bl	800a7ec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a3e0:	e042      	b.n	800a468 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a3e2:	4b24      	ldr	r3, [pc, #144]	; (800a474 <USBD_SetConfig+0x150>)
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d02a      	beq.n	800a446 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f7fe ffc4 	bl	8009386 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a3fe:	4b1d      	ldr	r3, [pc, #116]	; (800a474 <USBD_SetConfig+0x150>)
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	461a      	mov	r2, r3
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a408:	4b1a      	ldr	r3, [pc, #104]	; (800a474 <USBD_SetConfig+0x150>)
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	4619      	mov	r1, r3
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f7fe ff9d 	bl	800934e <USBD_SetClassConfig>
 800a414:	4603      	mov	r3, r0
 800a416:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a418:	7bfb      	ldrb	r3, [r7, #15]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00f      	beq.n	800a43e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a41e:	6839      	ldr	r1, [r7, #0]
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 f918 	bl	800a656 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	4619      	mov	r1, r3
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f7fe ffa9 	bl	8009386 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2202      	movs	r2, #2
 800a438:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a43c:	e014      	b.n	800a468 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 f9d4 	bl	800a7ec <USBD_CtlSendStatus>
      break;
 800a444:	e010      	b.n	800a468 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 f9d0 	bl	800a7ec <USBD_CtlSendStatus>
      break;
 800a44c:	e00c      	b.n	800a468 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a44e:	6839      	ldr	r1, [r7, #0]
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 f900 	bl	800a656 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a456:	4b07      	ldr	r3, [pc, #28]	; (800a474 <USBD_SetConfig+0x150>)
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	4619      	mov	r1, r3
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f7fe ff92 	bl	8009386 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a462:	2303      	movs	r3, #3
 800a464:	73fb      	strb	r3, [r7, #15]
      break;
 800a466:	bf00      	nop
  }

  return ret;
 800a468:	7bfb      	ldrb	r3, [r7, #15]
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3710      	adds	r7, #16
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	20000900 	.word	0x20000900

0800a478 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	88db      	ldrh	r3, [r3, #6]
 800a486:	2b01      	cmp	r3, #1
 800a488:	d004      	beq.n	800a494 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a48a:	6839      	ldr	r1, [r7, #0]
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f000 f8e2 	bl	800a656 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a492:	e023      	b.n	800a4dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	2b02      	cmp	r3, #2
 800a49e:	dc02      	bgt.n	800a4a6 <USBD_GetConfig+0x2e>
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	dc03      	bgt.n	800a4ac <USBD_GetConfig+0x34>
 800a4a4:	e015      	b.n	800a4d2 <USBD_GetConfig+0x5a>
 800a4a6:	2b03      	cmp	r3, #3
 800a4a8:	d00b      	beq.n	800a4c2 <USBD_GetConfig+0x4a>
 800a4aa:	e012      	b.n	800a4d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	3308      	adds	r3, #8
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 f93c 	bl	800a738 <USBD_CtlSendData>
        break;
 800a4c0:	e00c      	b.n	800a4dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	3304      	adds	r3, #4
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 f934 	bl	800a738 <USBD_CtlSendData>
        break;
 800a4d0:	e004      	b.n	800a4dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a4d2:	6839      	ldr	r1, [r7, #0]
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 f8be 	bl	800a656 <USBD_CtlError>
        break;
 800a4da:	bf00      	nop
}
 800a4dc:	bf00      	nop
 800a4de:	3708      	adds	r7, #8
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	2b02      	cmp	r3, #2
 800a4fa:	d81e      	bhi.n	800a53a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	88db      	ldrh	r3, [r3, #6]
 800a500:	2b02      	cmp	r3, #2
 800a502:	d004      	beq.n	800a50e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a504:	6839      	ldr	r1, [r7, #0]
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 f8a5 	bl	800a656 <USBD_CtlError>
        break;
 800a50c:	e01a      	b.n	800a544 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2201      	movs	r2, #1
 800a512:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d005      	beq.n	800a52a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	68db      	ldr	r3, [r3, #12]
 800a522:	f043 0202 	orr.w	r2, r3, #2
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	330c      	adds	r3, #12
 800a52e:	2202      	movs	r2, #2
 800a530:	4619      	mov	r1, r3
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 f900 	bl	800a738 <USBD_CtlSendData>
      break;
 800a538:	e004      	b.n	800a544 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a53a:	6839      	ldr	r1, [r7, #0]
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 f88a 	bl	800a656 <USBD_CtlError>
      break;
 800a542:	bf00      	nop
  }
}
 800a544:	bf00      	nop
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	885b      	ldrh	r3, [r3, #2]
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d107      	bne.n	800a56e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2201      	movs	r2, #1
 800a562:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 f940 	bl	800a7ec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a56c:	e013      	b.n	800a596 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	885b      	ldrh	r3, [r3, #2]
 800a572:	2b02      	cmp	r3, #2
 800a574:	d10b      	bne.n	800a58e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	889b      	ldrh	r3, [r3, #4]
 800a57a:	0a1b      	lsrs	r3, r3, #8
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	b2da      	uxtb	r2, r3
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 f930 	bl	800a7ec <USBD_CtlSendStatus>
}
 800a58c:	e003      	b.n	800a596 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a58e:	6839      	ldr	r1, [r7, #0]
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 f860 	bl	800a656 <USBD_CtlError>
}
 800a596:	bf00      	nop
 800a598:	3708      	adds	r7, #8
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b082      	sub	sp, #8
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
 800a5a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	2b02      	cmp	r3, #2
 800a5b4:	d80b      	bhi.n	800a5ce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	885b      	ldrh	r3, [r3, #2]
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d10c      	bne.n	800a5d8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 f910 	bl	800a7ec <USBD_CtlSendStatus>
      }
      break;
 800a5cc:	e004      	b.n	800a5d8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a5ce:	6839      	ldr	r1, [r7, #0]
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 f840 	bl	800a656 <USBD_CtlError>
      break;
 800a5d6:	e000      	b.n	800a5da <USBD_ClrFeature+0x3c>
      break;
 800a5d8:	bf00      	nop
  }
}
 800a5da:	bf00      	nop
 800a5dc:	3708      	adds	r7, #8
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b084      	sub	sp, #16
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
 800a5ea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	781a      	ldrb	r2, [r3, #0]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	781a      	ldrb	r2, [r3, #0]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	3301      	adds	r3, #1
 800a60a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a60c:	68f8      	ldr	r0, [r7, #12]
 800a60e:	f7ff fa41 	bl	8009a94 <SWAPBYTE>
 800a612:	4603      	mov	r3, r0
 800a614:	461a      	mov	r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	3301      	adds	r3, #1
 800a61e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	3301      	adds	r3, #1
 800a624:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	f7ff fa34 	bl	8009a94 <SWAPBYTE>
 800a62c:	4603      	mov	r3, r0
 800a62e:	461a      	mov	r2, r3
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	3301      	adds	r3, #1
 800a638:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	3301      	adds	r3, #1
 800a63e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a640:	68f8      	ldr	r0, [r7, #12]
 800a642:	f7ff fa27 	bl	8009a94 <SWAPBYTE>
 800a646:	4603      	mov	r3, r0
 800a648:	461a      	mov	r2, r3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	80da      	strh	r2, [r3, #6]
}
 800a64e:	bf00      	nop
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}

0800a656 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a656:	b580      	push	{r7, lr}
 800a658:	b082      	sub	sp, #8
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
 800a65e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a660:	2180      	movs	r1, #128	; 0x80
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f00e fe7c 	bl	8019360 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a668:	2100      	movs	r1, #0
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f00e fe78 	bl	8019360 <USBD_LL_StallEP>
}
 800a670:	bf00      	nop
 800a672:	3708      	adds	r7, #8
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b086      	sub	sp, #24
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a684:	2300      	movs	r3, #0
 800a686:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d036      	beq.n	800a6fc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a692:	6938      	ldr	r0, [r7, #16]
 800a694:	f000 f836 	bl	800a704 <USBD_GetLen>
 800a698:	4603      	mov	r3, r0
 800a69a:	3301      	adds	r3, #1
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	005b      	lsls	r3, r3, #1
 800a6a0:	b29a      	uxth	r2, r3
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a6a6:	7dfb      	ldrb	r3, [r7, #23]
 800a6a8:	68ba      	ldr	r2, [r7, #8]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	7812      	ldrb	r2, [r2, #0]
 800a6b0:	701a      	strb	r2, [r3, #0]
  idx++;
 800a6b2:	7dfb      	ldrb	r3, [r7, #23]
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a6b8:	7dfb      	ldrb	r3, [r7, #23]
 800a6ba:	68ba      	ldr	r2, [r7, #8]
 800a6bc:	4413      	add	r3, r2
 800a6be:	2203      	movs	r2, #3
 800a6c0:	701a      	strb	r2, [r3, #0]
  idx++;
 800a6c2:	7dfb      	ldrb	r3, [r7, #23]
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a6c8:	e013      	b.n	800a6f2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a6ca:	7dfb      	ldrb	r3, [r7, #23]
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	693a      	ldr	r2, [r7, #16]
 800a6d2:	7812      	ldrb	r2, [r2, #0]
 800a6d4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	3301      	adds	r3, #1
 800a6da:	613b      	str	r3, [r7, #16]
    idx++;
 800a6dc:	7dfb      	ldrb	r3, [r7, #23]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a6e2:	7dfb      	ldrb	r3, [r7, #23]
 800a6e4:	68ba      	ldr	r2, [r7, #8]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	701a      	strb	r2, [r3, #0]
    idx++;
 800a6ec:	7dfb      	ldrb	r3, [r7, #23]
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d1e7      	bne.n	800a6ca <USBD_GetString+0x52>
 800a6fa:	e000      	b.n	800a6fe <USBD_GetString+0x86>
    return;
 800a6fc:	bf00      	nop
  }
}
 800a6fe:	3718      	adds	r7, #24
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a70c:	2300      	movs	r3, #0
 800a70e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a714:	e005      	b.n	800a722 <USBD_GetLen+0x1e>
  {
    len++;
 800a716:	7bfb      	ldrb	r3, [r7, #15]
 800a718:	3301      	adds	r3, #1
 800a71a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	3301      	adds	r3, #1
 800a720:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d1f5      	bne.n	800a716 <USBD_GetLen+0x12>
  }

  return len;
 800a72a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3714      	adds	r7, #20
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2202      	movs	r2, #2
 800a748:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	68ba      	ldr	r2, [r7, #8]
 800a75c:	2100      	movs	r1, #0
 800a75e:	68f8      	ldr	r0, [r7, #12]
 800a760:	f00e fe87 	bl	8019472 <USBD_LL_Transmit>

  return USBD_OK;
 800a764:	2300      	movs	r3, #0
}
 800a766:	4618      	mov	r0, r3
 800a768:	3710      	adds	r7, #16
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}

0800a76e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a76e:	b580      	push	{r7, lr}
 800a770:	b084      	sub	sp, #16
 800a772:	af00      	add	r7, sp, #0
 800a774:	60f8      	str	r0, [r7, #12]
 800a776:	60b9      	str	r1, [r7, #8]
 800a778:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	68ba      	ldr	r2, [r7, #8]
 800a77e:	2100      	movs	r1, #0
 800a780:	68f8      	ldr	r0, [r7, #12]
 800a782:	f00e fe76 	bl	8019472 <USBD_LL_Transmit>

  return USBD_OK;
 800a786:	2300      	movs	r3, #0
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2203      	movs	r2, #3
 800a7a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	68ba      	ldr	r2, [r7, #8]
 800a7b8:	2100      	movs	r1, #0
 800a7ba:	68f8      	ldr	r0, [r7, #12]
 800a7bc:	f00e fe7a 	bl	80194b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3710      	adds	r7, #16
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}

0800a7ca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	b084      	sub	sp, #16
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	60f8      	str	r0, [r7, #12]
 800a7d2:	60b9      	str	r1, [r7, #8]
 800a7d4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	68ba      	ldr	r2, [r7, #8]
 800a7da:	2100      	movs	r1, #0
 800a7dc:	68f8      	ldr	r0, [r7, #12]
 800a7de:	f00e fe69 	bl	80194b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7e2:	2300      	movs	r3, #0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3710      	adds	r7, #16
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2204      	movs	r2, #4
 800a7f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	2200      	movs	r2, #0
 800a800:	2100      	movs	r1, #0
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f00e fe35 	bl	8019472 <USBD_LL_Transmit>

  return USBD_OK;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3708      	adds	r7, #8
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a812:	b580      	push	{r7, lr}
 800a814:	b082      	sub	sp, #8
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2205      	movs	r2, #5
 800a81e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a822:	2300      	movs	r3, #0
 800a824:	2200      	movs	r2, #0
 800a826:	2100      	movs	r1, #0
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f00e fe43 	bl	80194b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	3708      	adds	r7, #8
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800a838:	b480      	push	{r7}
 800a83a:	b08b      	sub	sp, #44	; 0x2c
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	ed87 0a02 	vstr	s0, [r7, #8]
 800a844:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	881b      	ldrh	r3, [r3, #0]
 800a856:	461a      	mov	r2, r3
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	885b      	ldrh	r3, [r3, #2]
 800a85c:	fb02 f303 	mul.w	r3, r2, r3
 800a860:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800a862:	69bb      	ldr	r3, [r7, #24]
 800a864:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800a866:	e010      	b.n	800a88a <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800a868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86a:	1d1a      	adds	r2, r3, #4
 800a86c:	627a      	str	r2, [r7, #36]	; 0x24
 800a86e:	ed93 7a00 	vldr	s14, [r3]
 800a872:	6a3b      	ldr	r3, [r7, #32]
 800a874:	1d1a      	adds	r2, r3, #4
 800a876:	623a      	str	r2, [r7, #32]
 800a878:	edd7 7a02 	vldr	s15, [r7, #8]
 800a87c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a880:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800a884:	69fb      	ldr	r3, [r7, #28]
 800a886:	3b01      	subs	r3, #1
 800a888:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800a88a:	69fb      	ldr	r3, [r7, #28]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d1eb      	bne.n	800a868 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800a890:	2300      	movs	r3, #0
 800a892:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800a894:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a898:	4618      	mov	r0, r3
 800a89a:	372c      	adds	r7, #44	; 0x2c
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <arm_fully_connected_s8>:
                                  const q7_t *kernel,
                                  const cmsis_nn_dims *bias_dims,
                                  const int32_t *bias,
                                  const cmsis_nn_dims *output_dims,
                                  q7_t *output)
{
 800a8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8a6:	b093      	sub	sp, #76	; 0x4c
 800a8a8:	af0a      	add	r7, sp, #40	; 0x28
 800a8aa:	6178      	str	r0, [r7, #20]
 800a8ac:	6139      	str	r1, [r7, #16]
 800a8ae:	60fa      	str	r2, [r7, #12]
 800a8b0:	60bb      	str	r3, [r7, #8]
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	61fb      	str	r3, [r7, #28]

    while (batch_cnt)
 800a8b8:	e033      	b.n	800a922 <arm_fully_connected_s8+0x7e>
    {
        arm_nn_vec_mat_mult_t_s8(input,
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	607b      	str	r3, [r7, #4]
 800a8c0:	693a      	ldr	r2, [r7, #16]
 800a8c2:	6852      	ldr	r2, [r2, #4]
 800a8c4:	6939      	ldr	r1, [r7, #16]
 800a8c6:	6889      	ldr	r1, [r1, #8]
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	6800      	ldr	r0, [r0, #0]
 800a8cc:	68fc      	ldr	r4, [r7, #12]
 800a8ce:	6864      	ldr	r4, [r4, #4]
 800a8d0:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 800a8d2:	682d      	ldr	r5, [r5, #0]
 800a8d4:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 800a8d6:	68f6      	ldr	r6, [r6, #12]
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	603b      	str	r3, [r7, #0]
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	691b      	ldr	r3, [r3, #16]
 800a8e2:	9308      	str	r3, [sp, #32]
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	9307      	str	r3, [sp, #28]
 800a8e8:	9606      	str	r6, [sp, #24]
 800a8ea:	9505      	str	r5, [sp, #20]
 800a8ec:	9404      	str	r4, [sp, #16]
 800a8ee:	9003      	str	r0, [sp, #12]
 800a8f0:	9102      	str	r1, [sp, #8]
 800a8f2:	9201      	str	r2, [sp, #4]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	9300      	str	r3, [sp, #0]
 800a8f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a8fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a900:	f000 f822 	bl	800a948 <arm_nn_vec_mat_mult_t_s8>
                                 quant_params->shift,
                                 filter_dims->n, /* col_dim or accum_depth */
                                 output_dims->c, /* row_dim or output_depth */
                                 fc_params->activation.min,
                                 fc_params->activation.max);
        input += filter_dims->n;
 800a904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	461a      	mov	r2, r3
 800a90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a90c:	4413      	add	r3, r2
 800a90e:	63bb      	str	r3, [r7, #56]	; 0x38
        output += output_dims->c;
 800a910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a912:	68db      	ldr	r3, [r3, #12]
 800a914:	461a      	mov	r2, r3
 800a916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a918:	4413      	add	r3, r2
 800a91a:	653b      	str	r3, [r7, #80]	; 0x50
        batch_cnt--;
 800a91c:	69fb      	ldr	r3, [r7, #28]
 800a91e:	3b01      	subs	r3, #1
 800a920:	61fb      	str	r3, [r7, #28]
    while (batch_cnt)
 800a922:	69fb      	ldr	r3, [r7, #28]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d1c8      	bne.n	800a8ba <arm_fully_connected_s8+0x16>
    }
    return (ARM_MATH_SUCCESS);
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3724      	adds	r7, #36	; 0x24
 800a92e:	46bd      	mov	sp, r7
 800a930:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a932 <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
 800a932:	b480      	push	{r7}
 800a934:	b083      	sub	sp, #12
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
    (void)filter_dims;
    return 0;
 800a93a:	2300      	movs	r3, #0
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
 800a948:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a94c:	f5ad 6dc6 	sub.w	sp, sp, #1584	; 0x630
 800a950:	af00      	add	r7, sp, #0
 800a952:	f507 64c6 	add.w	r4, r7, #1584	; 0x630
 800a956:	f2a4 54dc 	subw	r4, r4, #1500	; 0x5dc
 800a95a:	6020      	str	r0, [r4, #0]
 800a95c:	f507 60c6 	add.w	r0, r7, #1584	; 0x630
 800a960:	f5a0 60bc 	sub.w	r0, r0, #1504	; 0x5e0
 800a964:	6001      	str	r1, [r0, #0]
 800a966:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800a96a:	f2a1 51e4 	subw	r1, r1, #1508	; 0x5e4
 800a96e:	600a      	str	r2, [r1, #0]
 800a970:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800a974:	f5a2 62bd 	sub.w	r2, r2, #1512	; 0x5e8
 800a978:	6013      	str	r3, [r2, #0]
        *dst = MIN(acc_0, activation_max);
        dst++;
    }

#elif defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
 800a97a:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800a97e:	3b04      	subs	r3, #4
 800a980:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
    const int16_t lhs_offset_s16 = lhs_offset;
 800a984:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800a988:	f8a7 3612 	strh.w	r3, [r7, #1554]	; 0x612
    const int16_t rhs_offset_s16 = rhs_offset;
 800a98c:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800a990:	f8a7 3610 	strh.w	r3, [r7, #1552]	; 0x610

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 800a994:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 800a998:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 800a99c:	f9b7 3612 	ldrsh.w	r3, [r7, #1554]	; 0x612
 800a9a0:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
 800a9a4:	f8d7 260c 	ldr.w	r2, [r7, #1548]	; 0x60c
 800a9a8:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 800a9ac:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 800a9b0:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 800a9b4:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 800a9b8:	f8c7 3600 	str.w	r3, [r7, #1536]	; 0x600
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 800a9bc:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 800a9c0:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 800a9c4:	f9b7 3610 	ldrsh.w	r3, [r7, #1552]	; 0x610
 800a9c8:	f8c7 35f8 	str.w	r3, [r7, #1528]	; 0x5f8
 800a9cc:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 800a9d0:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 800a9d4:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
 800a9d8:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 800a9dc:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 800a9e0:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 800a9ea:	f001 bd13 	b.w	800c414 <arm_nn_vec_mat_mult_t_s8+0x1acc>
    {
        const q7_t *lhs_ptr = &lhs[0];
 800a9ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a9f2:	f5a3 62ac 	sub.w	r2, r3, #1376	; 0x560
 800a9f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a9fa:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	6013      	str	r3, [r2, #0]
        const q7_t *rhs_ptr = &rhs[0];
 800aa02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aa06:	f2a3 5264 	subw	r2, r3, #1380	; 0x564
 800aa0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aa0e:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	6013      	str	r3, [r2, #0]

        q31_t res00 = 0;
 800aa16:	2300      	movs	r3, #0
 800aa18:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        q31_t res01 = 0;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        if (bias)
 800aa22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aa26:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d01b      	beq.n	800aa68 <arm_nn_vec_mat_mult_t_s8+0x120>
        {
            res00 = *bias++;
 800aa30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aa34:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800aa38:	6819      	ldr	r1, [r3, #0]
 800aa3a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aa3e:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 800aa42:	1d0b      	adds	r3, r1, #4
 800aa44:	6013      	str	r3, [r2, #0]
 800aa46:	680b      	ldr	r3, [r1, #0]
 800aa48:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 = *bias++;
 800aa4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aa50:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800aa54:	6819      	ldr	r1, [r3, #0]
 800aa56:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aa5a:	f2a3 52e4 	subw	r2, r3, #1508	; 0x5e4
 800aa5e:	1d0b      	adds	r3, r1, #4
 800aa60:	6013      	str	r3, [r2, #0]
 800aa62:	680b      	ldr	r3, [r1, #0]
 800aa64:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        }

        int32_t rhs_cols_idx = 0;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620

        q31_t val0, val1, val2, val3, val4, val5;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800aa6e:	f001 b9db 	b.w	800be28 <arm_nn_vec_mat_mult_t_s8+0x14e0>
 800aa72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aa76:	f5a3 724b 	sub.w	r2, r3, #812	; 0x32c
 800aa7a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800aa7e:	6013      	str	r3, [r2, #0]
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 800aa80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aa84:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	461a      	mov	r2, r3
 800aa90:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aa94:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 800aa98:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800aa9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aa9e:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	1d1a      	adds	r2, r3, #4
 800aaa8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aaac:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	601a      	str	r2, [r3, #0]

    return (val);
 800aab4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aab8:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 800aabc:	681b      	ldr	r3, [r3, #0]
        {
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800aabe:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800aac2:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800aac6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aaca:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 800aace:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800aad2:	6013      	str	r3, [r2, #0]
 800aad4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aad8:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 800aadc:	6019      	str	r1, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800aade:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aae2:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800aae6:	681a      	ldr	r2, [r3, #0]
 800aae8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aaec:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	fa22 f283 	sxtab16	r2, r2, r3
 800aaf6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aafa:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800aafe:	601a      	str	r2, [r3, #0]
  return(result);
 800ab00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ab04:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800ab0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ab12:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 800ab16:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800ab1a:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800ab1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ab20:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ab30:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800ab34:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800ab36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ab3a:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	1d1a      	adds	r2, r3, #4
 800ab44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ab48:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	601a      	str	r2, [r3, #0]
    return (val);
 800ab50:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ab54:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 800ab58:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800ab5a:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800ab5e:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800ab62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ab66:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 800ab6a:	601a      	str	r2, [r3, #0]
 800ab6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ab70:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 800ab74:	2308      	movs	r3, #8
 800ab76:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800ab78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ab7c:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 800ab80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ab84:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f003 031f 	and.w	r3, r3, #31
 800ab8e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800ab90:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ab94:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d105      	bne.n	800abaa <arm_nn_vec_mat_mult_t_s8+0x262>
    return op1;
 800ab9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aba2:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 800aba6:	6819      	ldr	r1, [r3, #0]
 800aba8:	e00b      	b.n	800abc2 <arm_nn_vec_mat_mult_t_s8+0x27a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800abaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800abae:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 800abb2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800abb6:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800abba:	6812      	ldr	r2, [r2, #0]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	fa62 f103 	ror.w	r1, r2, r3
 800abc2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800abc6:	f5a3 7242 	sub.w	r2, r3, #776	; 0x308
 800abca:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800abce:	6013      	str	r3, [r2, #0]
 800abd0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800abd4:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800abd8:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800abda:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800abde:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800abe8:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	fa22 f283 	sxtab16	r2, r2, r3
 800abf2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800abf6:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800abfa:	601a      	str	r2, [r3, #0]
  return(result);
 800abfc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ac00:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800ac0a:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800ac0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ac12:	f5a3 723f 	sub.w	r2, r3, #764	; 0x2fc
 800ac16:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800ac1a:	6013      	str	r3, [r2, #0]
 800ac1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ac20:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800ac24:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800ac26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ac2a:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ac34:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	fa22 f283 	sxtab16	r2, r2, r3
 800ac3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ac42:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 800ac46:	601a      	str	r2, [r3, #0]
  return(result);
 800ac48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ac4c:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800ac56:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ac5a:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800ac64:	441a      	add	r2, r3
 800ac66:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ac6a:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 800ac6e:	601a      	str	r2, [r3, #0]
 800ac70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ac74:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	461a      	mov	r2, r3
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
{
    q31_t val;
    memcpy(&val, in_q7, 4);
 800ac7e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ac82:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800ac86:	601a      	str	r2, [r3, #0]

    return (val);
 800ac88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ac8c:	f2a3 5384 	subw	r3, r3, #1412	; 0x584
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800ac96:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800ac9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ac9e:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 800aca2:	601a      	str	r2, [r3, #0]
 800aca4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aca8:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 800acac:	2308      	movs	r3, #8
 800acae:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800acb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800acb4:	f5a3 723d 	sub.w	r2, r3, #756	; 0x2f4
 800acb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800acbc:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f003 031f 	and.w	r3, r3, #31
 800acc6:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800acc8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800accc:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d105      	bne.n	800ace2 <arm_nn_vec_mat_mult_t_s8+0x39a>
    return op1;
 800acd6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800acda:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 800acde:	6819      	ldr	r1, [r3, #0]
 800ace0:	e00b      	b.n	800acfa <arm_nn_vec_mat_mult_t_s8+0x3b2>
  return (op1 >> op2) | (op1 << (32U - op2));
 800ace2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ace6:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 800acea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800acee:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 800acf2:	6812      	ldr	r2, [r2, #0]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	fa62 f103 	ror.w	r1, r2, r3
 800acfa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800acfe:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 800ad02:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800ad06:	6013      	str	r3, [r2, #0]
 800ad08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ad0c:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800ad10:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800ad12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ad16:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ad20:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	fa22 f283 	sxtab16	r2, r2, r3
 800ad2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ad2e:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 800ad32:	601a      	str	r2, [r3, #0]
  return(result);
 800ad34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ad38:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800ad42:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800ad46:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800ad4a:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800ad4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ad52:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800ad56:	601a      	str	r2, [r3, #0]
 800ad58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ad5c:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 800ad60:	6019      	str	r1, [r3, #0]
 800ad62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ad66:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800ad6a:	6018      	str	r0, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ad6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ad70:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800ad74:	6819      	ldr	r1, [r3, #0]
 800ad76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ad7a:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ad84:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	fb21 3202 	smlad	r2, r1, r2, r3
 800ad8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ad92:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ad96:	601a      	str	r2, [r3, #0]
  return(result);
 800ad98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ad9c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800ada6:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800adaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800adae:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 800adb2:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800adb6:	6013      	str	r3, [r2, #0]
 800adb8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800adbc:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800adc0:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800adc2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800adc6:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800add0:	f5a3 7333 	sub.w	r3, r3, #716	; 0x2cc
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	fa22 f283 	sxtab16	r2, r2, r3
 800adda:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800adde:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800ade2:	601a      	str	r2, [r3, #0]
  return(result);
 800ade4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ade8:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800adf2:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800adf6:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800adfa:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800adfe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ae02:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 800ae06:	601a      	str	r2, [r3, #0]
 800ae08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ae0c:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800ae10:	6019      	str	r1, [r3, #0]
 800ae12:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ae16:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800ae1a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ae1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ae20:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 800ae24:	6819      	ldr	r1, [r3, #0]
 800ae26:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ae2a:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ae34:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	fb21 3202 	smlad	r2, r1, r2, r3
 800ae3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ae42:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800ae46:	601a      	str	r2, [r3, #0]
  return(result);
 800ae48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ae4c:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800ae56:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800ae5a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ae5e:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800ae62:	601a      	str	r2, [r3, #0]
 800ae64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ae68:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 800ae6c:	2308      	movs	r3, #8
 800ae6e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800ae70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ae74:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 800ae78:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ae7c:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f003 031f 	and.w	r3, r3, #31
 800ae86:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800ae88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ae8c:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d105      	bne.n	800aea2 <arm_nn_vec_mat_mult_t_s8+0x55a>
    return op1;
 800ae96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ae9a:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 800ae9e:	6819      	ldr	r1, [r3, #0]
 800aea0:	e00b      	b.n	800aeba <arm_nn_vec_mat_mult_t_s8+0x572>
  return (op1 >> op2) | (op1 << (32U - op2));
 800aea2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aea6:	f5a3 722c 	sub.w	r2, r3, #688	; 0x2b0
 800aeaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aeae:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800aeb2:	6812      	ldr	r2, [r2, #0]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	fa62 f103 	ror.w	r1, r2, r3
 800aeba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aebe:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 800aec2:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800aec6:	6013      	str	r3, [r2, #0]
 800aec8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aecc:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800aed0:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800aed2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aed6:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aee0:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	fa22 f283 	sxtab16	r2, r2, r3
 800aeea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aeee:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 800aef2:	601a      	str	r2, [r3, #0]
  return(result);
 800aef4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aef8:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800af02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800af06:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 800af0a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800af0e:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800af10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800af14:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	461a      	mov	r2, r3
 800af20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800af24:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 800af28:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800af2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800af2e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	1d1a      	adds	r2, r3, #4
 800af38:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800af3c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	601a      	str	r2, [r3, #0]
    return (val);
 800af44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800af48:	f5a3 63b1 	sub.w	r3, r3, #1416	; 0x588
 800af4c:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800af4e:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 800af52:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800af56:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800af5a:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800af5e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800af62:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800af66:	601a      	str	r2, [r3, #0]
 800af68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800af6c:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800af70:	6019      	str	r1, [r3, #0]
 800af72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800af76:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800af7a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800af7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800af80:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800af84:	6819      	ldr	r1, [r3, #0]
 800af86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800af8a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800af8e:	681a      	ldr	r2, [r3, #0]
 800af90:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800af94:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	fb21 3202 	smlad	r2, r1, r2, r3
 800af9e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800afa2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800afa6:	601a      	str	r2, [r3, #0]
  return(result);
 800afa8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800afac:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800afb6:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800afba:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800afbe:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800afc2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800afc6:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800afca:	601a      	str	r2, [r3, #0]
 800afcc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800afd0:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800afd4:	6019      	str	r1, [r3, #0]
 800afd6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800afda:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800afde:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800afe0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800afe4:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800afe8:	6819      	ldr	r1, [r3, #0]
 800afea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800afee:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800aff8:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	fb21 3202 	smlad	r2, r1, r2, r3
 800b002:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b006:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800b00a:	601a      	str	r2, [r3, #0]
  return(result);
 800b00c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b010:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800b01a:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800b01e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b022:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 800b026:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800b02a:	6013      	str	r3, [r2, #0]
 800b02c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b030:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800b034:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b036:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b03a:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b044:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	fa22 f283 	sxtab16	r2, r2, r3
 800b04e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b052:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800b056:	601a      	str	r2, [r3, #0]
  return(result);
 800b058:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b05c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800b066:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b06a:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 800b06e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800b072:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800b074:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b078:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	461a      	mov	r2, r3
 800b084:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b088:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 800b08c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800b08e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b092:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	1d1a      	adds	r2, r3, #4
 800b09c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b0a0:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	601a      	str	r2, [r3, #0]
    return (val);
 800b0a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b0ac:	f2a3 538c 	subw	r3, r3, #1420	; 0x58c
 800b0b0:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800b0b2:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800b0b6:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800b0ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b0be:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800b0c2:	601a      	str	r2, [r3, #0]
 800b0c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b0c8:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 800b0cc:	2308      	movs	r3, #8
 800b0ce:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800b0d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b0d4:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 800b0d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b0dc:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f003 031f 	and.w	r3, r3, #31
 800b0e6:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800b0e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b0ec:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d105      	bne.n	800b102 <arm_nn_vec_mat_mult_t_s8+0x7ba>
    return op1;
 800b0f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b0fa:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800b0fe:	6819      	ldr	r1, [r3, #0]
 800b100:	e00b      	b.n	800b11a <arm_nn_vec_mat_mult_t_s8+0x7d2>
  return (op1 >> op2) | (op1 << (32U - op2));
 800b102:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b106:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 800b10a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b10e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800b112:	6812      	ldr	r2, [r2, #0]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	fa62 f103 	ror.w	r1, r2, r3
 800b11a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b11e:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 800b122:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800b126:	6013      	str	r3, [r2, #0]
 800b128:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b12c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800b130:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b132:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b136:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b13a:	681a      	ldr	r2, [r3, #0]
 800b13c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b140:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	fa22 f283 	sxtab16	r2, r2, r3
 800b14a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b14e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800b152:	601a      	str	r2, [r3, #0]
  return(result);
 800b154:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b158:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800b162:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800b166:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b16a:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 800b16e:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800b172:	6013      	str	r3, [r2, #0]
 800b174:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b178:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800b17c:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b17e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b182:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800b186:	681a      	ldr	r2, [r3, #0]
 800b188:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b18c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	fa22 f283 	sxtab16	r2, r2, r3
 800b196:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b19a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800b19e:	601a      	str	r2, [r3, #0]
  return(result);
 800b1a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b1a4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800b1ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b1b2:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800b1b6:	681a      	ldr	r2, [r3, #0]
 800b1b8:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800b1bc:	441a      	add	r2, r3
 800b1be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b1c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800b1c6:	601a      	str	r2, [r3, #0]
 800b1c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b1cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800b1d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b1da:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 800b1de:	601a      	str	r2, [r3, #0]
    return (val);
 800b1e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b1e4:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800b1ee:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800b1f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b1f6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b1fa:	601a      	str	r2, [r3, #0]
 800b1fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b200:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 800b204:	2308      	movs	r3, #8
 800b206:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800b208:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b20c:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 800b210:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b214:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f003 031f 	and.w	r3, r3, #31
 800b21e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800b220:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b224:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d105      	bne.n	800b23a <arm_nn_vec_mat_mult_t_s8+0x8f2>
    return op1;
 800b22e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b232:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b236:	6819      	ldr	r1, [r3, #0]
 800b238:	e00b      	b.n	800b252 <arm_nn_vec_mat_mult_t_s8+0x90a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800b23a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b23e:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 800b242:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b246:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800b24a:	6812      	ldr	r2, [r2, #0]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	fa62 f103 	ror.w	r1, r2, r3
 800b252:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b256:	f5a3 720e 	sub.w	r2, r3, #568	; 0x238
 800b25a:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800b25e:	6013      	str	r3, [r2, #0]
 800b260:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b264:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800b268:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b26a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b26e:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b278:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	fa22 f283 	sxtab16	r2, r2, r3
 800b282:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b286:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800b28a:	601a      	str	r2, [r3, #0]
  return(result);
 800b28c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b290:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800b29a:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800b29e:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800b2a2:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800b2a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b2aa:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800b2ae:	601a      	str	r2, [r3, #0]
 800b2b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b2b4:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800b2b8:	6019      	str	r1, [r3, #0]
 800b2ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b2be:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b2c2:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b2c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b2c8:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800b2cc:	6819      	ldr	r1, [r3, #0]
 800b2ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b2d2:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b2dc:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	fb21 3202 	smlad	r2, r1, r2, r3
 800b2e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b2ea:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800b2ee:	601a      	str	r2, [r3, #0]
  return(result);
 800b2f0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b2f4:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800b2fe:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800b302:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b306:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 800b30a:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800b30e:	6013      	str	r3, [r2, #0]
 800b310:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b314:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800b318:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b31a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b31e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800b322:	681a      	ldr	r2, [r3, #0]
 800b324:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b328:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	fa22 f283 	sxtab16	r2, r2, r3
 800b332:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b336:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800b33a:	601a      	str	r2, [r3, #0]
  return(result);
 800b33c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b340:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800b34a:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800b34e:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800b352:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800b356:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b35a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800b35e:	601a      	str	r2, [r3, #0]
 800b360:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b364:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800b368:	6019      	str	r1, [r3, #0]
 800b36a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b36e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800b372:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b374:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b378:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800b37c:	6819      	ldr	r1, [r3, #0]
 800b37e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b382:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b38c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	fb21 3202 	smlad	r2, r1, r2, r3
 800b396:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b39a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800b39e:	601a      	str	r2, [r3, #0]
  return(result);
 800b3a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b3a4:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800b3ae:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800b3b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b3b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800b3ba:	601a      	str	r2, [r3, #0]
 800b3bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b3c0:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 800b3c4:	2308      	movs	r3, #8
 800b3c6:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800b3c8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b3cc:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 800b3d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b3d4:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f003 031f 	and.w	r3, r3, #31
 800b3de:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800b3e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b3e4:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d105      	bne.n	800b3fa <arm_nn_vec_mat_mult_t_s8+0xab2>
    return op1;
 800b3ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b3f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800b3f6:	6819      	ldr	r1, [r3, #0]
 800b3f8:	e00b      	b.n	800b412 <arm_nn_vec_mat_mult_t_s8+0xaca>
  return (op1 >> op2) | (op1 << (32U - op2));
 800b3fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b3fe:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 800b402:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b406:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800b40a:	6812      	ldr	r2, [r2, #0]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	fa62 f103 	ror.w	r1, r2, r3
 800b412:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b416:	f5a3 72fc 	sub.w	r2, r3, #504	; 0x1f8
 800b41a:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800b41e:	6013      	str	r3, [r2, #0]
 800b420:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b424:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800b428:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b42a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b42e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b438:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	fa22 f283 	sxtab16	r2, r2, r3
 800b442:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b446:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800b44a:	601a      	str	r2, [r3, #0]
  return(result);
 800b44c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b450:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800b45a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b45e:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 800b462:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800b466:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800b468:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b46c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	461a      	mov	r2, r3
 800b478:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b47c:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 800b480:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800b482:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b486:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	1d1a      	adds	r2, r3, #4
 800b490:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b494:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	601a      	str	r2, [r3, #0]
    return (val);
 800b49c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b4a0:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 800b4a4:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800b4a6:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 800b4aa:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800b4ae:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800b4b2:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800b4b6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b4ba:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800b4be:	601a      	str	r2, [r3, #0]
 800b4c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b4c4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800b4c8:	6019      	str	r1, [r3, #0]
 800b4ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b4ce:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800b4d2:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b4d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b4d8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800b4dc:	6819      	ldr	r1, [r3, #0]
 800b4de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b4e2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b4ec:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	fb21 3202 	smlad	r2, r1, r2, r3
 800b4f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b4fa:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800b4fe:	601a      	str	r2, [r3, #0]
  return(result);
 800b500:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b504:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800b50e:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800b512:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800b516:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800b51a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b51e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800b522:	601a      	str	r2, [r3, #0]
 800b524:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b528:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800b52c:	6019      	str	r1, [r3, #0]
 800b52e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b532:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b536:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b538:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b53c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800b540:	6819      	ldr	r1, [r3, #0]
 800b542:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b546:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b550:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	fb21 3202 	smlad	r2, r1, r2, r3
 800b55a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b55e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800b562:	601a      	str	r2, [r3, #0]
  return(result);
 800b564:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b568:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800b572:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800b576:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b57a:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 800b57e:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800b582:	6013      	str	r3, [r2, #0]
 800b584:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b588:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800b58c:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b58e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b592:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b59c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	fa22 f283 	sxtab16	r2, r2, r3
 800b5a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b5aa:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800b5ae:	601a      	str	r2, [r3, #0]
  return(result);
 800b5b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b5b4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800b5be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b5c2:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 800b5c6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800b5ca:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800b5cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b5d0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	461a      	mov	r2, r3
 800b5dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b5e0:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 800b5e4:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800b5e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b5ea:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	1d1a      	adds	r2, r3, #4
 800b5f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b5f8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	601a      	str	r2, [r3, #0]
    return (val);
 800b600:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b604:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 800b608:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800b60a:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800b60e:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800b612:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b616:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b61a:	601a      	str	r2, [r3, #0]
 800b61c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b620:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 800b624:	2308      	movs	r3, #8
 800b626:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800b628:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b62c:	f5a3 72e0 	sub.w	r2, r3, #448	; 0x1c0
 800b630:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b634:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f003 031f 	and.w	r3, r3, #31
 800b63e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800b640:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b644:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d105      	bne.n	800b65a <arm_nn_vec_mat_mult_t_s8+0xd12>
    return op1;
 800b64e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b652:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800b656:	6819      	ldr	r1, [r3, #0]
 800b658:	e00b      	b.n	800b672 <arm_nn_vec_mat_mult_t_s8+0xd2a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800b65a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b65e:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 800b662:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b666:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800b66a:	6812      	ldr	r2, [r2, #0]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	fa62 f103 	ror.w	r1, r2, r3
 800b672:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b676:	f5a3 72d8 	sub.w	r2, r3, #432	; 0x1b0
 800b67a:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800b67e:	6013      	str	r3, [r2, #0]
 800b680:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b684:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800b688:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b68a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b68e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800b692:	681a      	ldr	r2, [r3, #0]
 800b694:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b698:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	fa22 f283 	sxtab16	r2, r2, r3
 800b6a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6a6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800b6aa:	601a      	str	r2, [r3, #0]
  return(result);
 800b6ac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6b0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800b6ba:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800b6be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6c2:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 800b6c6:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800b6ca:	6013      	str	r3, [r2, #0]
 800b6cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6d0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800b6d4:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b6d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6da:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6e4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	fa22 f283 	sxtab16	r2, r2, r3
 800b6ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6f2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800b6f6:	601a      	str	r2, [r3, #0]
  return(result);
 800b6f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b6fc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800b706:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b70a:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800b70e:	681a      	ldr	r2, [r3, #0]
 800b710:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800b714:	441a      	add	r2, r3
 800b716:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b71a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800b71e:	601a      	str	r2, [r3, #0]
 800b720:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b724:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800b72e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b732:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 800b736:	601a      	str	r2, [r3, #0]
    return (val);
 800b738:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b73c:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800b746:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800b74a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b74e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800b752:	601a      	str	r2, [r3, #0]
 800b754:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b758:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800b75c:	2308      	movs	r3, #8
 800b75e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800b760:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b764:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800b768:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b76c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f003 031f 	and.w	r3, r3, #31
 800b776:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800b778:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b77c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d105      	bne.n	800b792 <arm_nn_vec_mat_mult_t_s8+0xe4a>
    return op1;
 800b786:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b78a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800b78e:	6819      	ldr	r1, [r3, #0]
 800b790:	e00b      	b.n	800b7aa <arm_nn_vec_mat_mult_t_s8+0xe62>
  return (op1 >> op2) | (op1 << (32U - op2));
 800b792:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b796:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 800b79a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b79e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800b7a2:	6812      	ldr	r2, [r2, #0]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	fa62 f103 	ror.w	r1, r2, r3
 800b7aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b7ae:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 800b7b2:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800b7b6:	6013      	str	r3, [r2, #0]
 800b7b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b7bc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800b7c0:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b7c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b7c6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b7d0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	fa22 f283 	sxtab16	r2, r2, r3
 800b7da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b7de:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800b7e2:	601a      	str	r2, [r3, #0]
  return(result);
 800b7e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b7e8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800b7f2:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800b7f6:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800b7fa:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800b7fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b802:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800b806:	601a      	str	r2, [r3, #0]
 800b808:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b80c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800b810:	6019      	str	r1, [r3, #0]
 800b812:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b816:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800b81a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b81c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b820:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800b824:	6819      	ldr	r1, [r3, #0]
 800b826:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b82a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b834:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	fb21 3202 	smlad	r2, r1, r2, r3
 800b83e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b842:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800b846:	601a      	str	r2, [r3, #0]
  return(result);
 800b848:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b84c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800b856:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800b85a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b85e:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 800b862:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800b866:	6013      	str	r3, [r2, #0]
 800b868:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b86c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800b870:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b872:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b876:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b880:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	fa22 f283 	sxtab16	r2, r2, r3
 800b88a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b88e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800b892:	601a      	str	r2, [r3, #0]
  return(result);
 800b894:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b898:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800b8a2:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800b8a6:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800b8aa:	f8d7 0628 	ldr.w	r0, [r7, #1576]	; 0x628
 800b8ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8b2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800b8b6:	601a      	str	r2, [r3, #0]
 800b8b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8bc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800b8c0:	6019      	str	r1, [r3, #0]
 800b8c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8c6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800b8ca:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b8cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8d0:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800b8d4:	6819      	ldr	r1, [r3, #0]
 800b8d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8da:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8e4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	fb21 3202 	smlad	r2, r1, r2, r3
 800b8ee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8f2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800b8f6:	601a      	str	r2, [r3, #0]
  return(result);
 800b8f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b8fc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800b906:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800b90a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b90e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800b912:	601a      	str	r2, [r3, #0]
 800b914:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b918:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800b91c:	2308      	movs	r3, #8
 800b91e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800b920:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b924:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800b928:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b92c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f003 031f 	and.w	r3, r3, #31
 800b936:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800b938:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b93c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d105      	bne.n	800b952 <arm_nn_vec_mat_mult_t_s8+0x100a>
    return op1;
 800b946:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b94a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800b94e:	6819      	ldr	r1, [r3, #0]
 800b950:	e00b      	b.n	800b96a <arm_nn_vec_mat_mult_t_s8+0x1022>
  return (op1 >> op2) | (op1 << (32U - op2));
 800b952:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b956:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 800b95a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b95e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800b962:	6812      	ldr	r2, [r2, #0]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	fa62 f103 	ror.w	r1, r2, r3
 800b96a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b96e:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 800b972:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800b976:	6013      	str	r3, [r2, #0]
 800b978:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b97c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800b980:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b982:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b986:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b990:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	fa22 f283 	sxtab16	r2, r2, r3
 800b99a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b99e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800b9a2:	601a      	str	r2, [r3, #0]
  return(result);
 800b9a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b9a8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800b9b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b9b6:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 800b9ba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800b9be:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800b9c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b9c4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b9d4:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 800b9d8:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800b9da:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b9de:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	1d1a      	adds	r2, r3, #4
 800b9e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b9ec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	601a      	str	r2, [r3, #0]
    return (val);
 800b9f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800b9f8:	f5a3 63b4 	sub.w	r3, r3, #1440	; 0x5a0
 800b9fc:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800b9fe:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            res01 = __SMLAD(val3, val5, res01);
 800ba02:	f8d7 25bc 	ldr.w	r2, [r7, #1468]	; 0x5bc
 800ba06:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800ba0a:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800ba0e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba12:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ba16:	601a      	str	r2, [r3, #0]
 800ba18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba1c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ba20:	6019      	str	r1, [r3, #0]
 800ba22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba26:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800ba2a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ba2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba30:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ba34:	6819      	ldr	r1, [r3, #0]
 800ba36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba3a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba44:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	fb21 3202 	smlad	r2, r1, r2, r3
 800ba4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba52:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800ba56:	601a      	str	r2, [r3, #0]
  return(result);
 800ba58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba5c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800ba66:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800ba6a:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800ba6e:	f8d7 0624 	ldr.w	r0, [r7, #1572]	; 0x624
 800ba72:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba76:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800ba7a:	601a      	str	r2, [r3, #0]
 800ba7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ba84:	6019      	str	r1, [r3, #0]
 800ba86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba8e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ba90:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba94:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800ba98:	6819      	ldr	r1, [r3, #0]
 800ba9a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ba9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800baa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	fb21 3202 	smlad	r2, r1, r2, r3
 800bab2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bab6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800baba:	601a      	str	r2, [r3, #0]
  return(result);
 800babc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bac0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800baca:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800bace:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bad2:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800bad6:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800bada:	6013      	str	r3, [r2, #0]
 800badc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bae0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800bae4:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bae6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800baea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800baf4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	fa22 f283 	sxtab16	r2, r2, r3
 800bafe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb02:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800bb06:	601a      	str	r2, [r3, #0]
  return(result);
 800bb08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb0c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800bb16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb1a:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 800bb1e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800bb22:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 800bb24:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb28:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	461a      	mov	r2, r3
 800bb34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb38:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 800bb3c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800bb3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb42:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	1d1a      	adds	r2, r3, #4
 800bb4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb50:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	601a      	str	r2, [r3, #0]
    return (val);
 800bb58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb5c:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 800bb60:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800bb62:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800bb66:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800bb6a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb6e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800bb72:	601a      	str	r2, [r3, #0]
 800bb74:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb78:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 800bb7c:	2308      	movs	r3, #8
 800bb7e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800bb80:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb84:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 800bb88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb8c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f003 031f 	and.w	r3, r3, #31
 800bb96:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 800bb98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bb9c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d105      	bne.n	800bbb2 <arm_nn_vec_mat_mult_t_s8+0x126a>
    return op1;
 800bba6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bbaa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800bbae:	6819      	ldr	r1, [r3, #0]
 800bbb0:	e00b      	b.n	800bbca <arm_nn_vec_mat_mult_t_s8+0x1282>
  return (op1 >> op2) | (op1 << (32U - op2));
 800bbb2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bbb6:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800bbba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bbbe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800bbc2:	6812      	ldr	r2, [r2, #0]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	fa62 f103 	ror.w	r1, r2, r3
 800bbca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bbce:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 800bbd2:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800bbd6:	6013      	str	r3, [r2, #0]
 800bbd8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bbdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbe0:	6019      	str	r1, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bbe2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bbe6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbea:	681a      	ldr	r2, [r3, #0]
 800bbec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bbf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	fa22 f283 	sxtab16	r2, r2, r3
 800bbfa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bbfe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800bc02:	601a      	str	r2, [r3, #0]
  return(result);
 800bc04:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc08:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800bc12:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800bc16:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800bc1a:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
 800bc1e:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bc22:	f8d7 2538 	ldr.w	r2, [r7, #1336]	; 0x538
 800bc26:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 800bc2a:	fa22 f283 	sxtab16	r2, r2, r3
 800bc2e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc32:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800bc36:	601a      	str	r2, [r3, #0]
  return(result);
 800bc38:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc3c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800bc46:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc4a:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800bc54:	4413      	add	r3, r2
 800bc56:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 800bc5a:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800bc62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc66:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 800bc6a:	601a      	str	r2, [r3, #0]
    return (val);
 800bc6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bc70:	f5a3 63b5 	sub.w	r3, r3, #1448	; 0x5a8
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800bc7a:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	; 0x5c0
 800bc7e:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 800bc82:	2308      	movs	r3, #8
 800bc84:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  op2 %= 32U;
 800bc88:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800bc8c:	f003 031f 	and.w	r3, r3, #31
 800bc90:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  if (op2 == 0U)
 800bc94:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d102      	bne.n	800bca2 <arm_nn_vec_mat_mult_t_s8+0x135a>
    return op1;
 800bc9c:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 800bca0:	e004      	b.n	800bcac <arm_nn_vec_mat_mult_t_s8+0x1364>
  return (op1 >> op2) | (op1 << (32U - op2));
 800bca2:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 800bca6:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800bcaa:	41da      	rors	r2, r3
 800bcac:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800bcb0:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
 800bcb4:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bcb8:	f8d7 2550 	ldr.w	r2, [r7, #1360]	; 0x550
 800bcbc:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 800bcc0:	fa22 f383 	sxtab16	r3, r2, r3
 800bcc4:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
  return(result);
 800bcc8:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 800bccc:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800bcd0:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 800bcd4:	f8d7 25c4 	ldr.w	r2, [r7, #1476]	; 0x5c4
 800bcd8:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800bcdc:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 800bce0:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 800bce4:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800bce8:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 800bcec:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 800bcf0:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 800bcf4:	fb21 3302 	smlad	r3, r1, r2, r3
 800bcf8:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
  return(result);
 800bcfc:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 800bd00:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800bd04:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800bd08:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800bd0c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 800bd10:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bd14:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 800bd18:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 800bd1c:	fa22 f383 	sxtab16	r3, r2, r3
 800bd20:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
  return(result);
 800bd24:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 800bd28:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
            res00 = __SMLAD(val1, val0, res00);
 800bd2c:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800bd30:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800bd34:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800bd38:	f8c7 157c 	str.w	r1, [r7, #1404]	; 0x57c
 800bd3c:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 800bd40:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800bd44:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 800bd48:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 800bd4c:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 800bd50:	fb21 3302 	smlad	r3, r1, r2, r3
 800bd54:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
  return(result);
 800bd58:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 800bd5c:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800bd60:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 800bd64:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800bd68:	2308      	movs	r3, #8
 800bd6a:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  op2 %= 32U;
 800bd6e:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 800bd72:	f003 031f 	and.w	r3, r3, #31
 800bd76:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
  if (op2 == 0U)
 800bd7a:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d102      	bne.n	800bd88 <arm_nn_vec_mat_mult_t_s8+0x1440>
    return op1;
 800bd82:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 800bd86:	e004      	b.n	800bd92 <arm_nn_vec_mat_mult_t_s8+0x144a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800bd88:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 800bd8c:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 800bd90:	41da      	rors	r2, r3
 800bd92:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800bd96:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 800bd9a:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bd9e:	f8d7 2590 	ldr.w	r2, [r7, #1424]	; 0x590
 800bda2:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 800bda6:	fa22 f383 	sxtab16	r3, r2, r3
 800bdaa:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
  return(result);
 800bdae:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 800bdb2:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
            res01 = __SMLAD(val3, val5, res01);
 800bdb6:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 800bdba:	f8d7 25b4 	ldr.w	r2, [r7, #1460]	; 0x5b4
 800bdbe:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800bdc2:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 800bdc6:	f8c7 259c 	str.w	r2, [r7, #1436]	; 0x59c
 800bdca:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800bdce:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 800bdd2:	f8d7 259c 	ldr.w	r2, [r7, #1436]	; 0x59c
 800bdd6:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
 800bdda:	fb21 3302 	smlad	r3, r1, r2, r3
 800bdde:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
  return(result);
 800bde2:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 800bde6:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
            res01 = __SMLAD(val1, val4, res01);
 800bdea:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800bdee:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800bdf2:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800bdf6:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 800bdfa:	f8c7 25ac 	str.w	r2, [r7, #1452]	; 0x5ac
 800bdfe:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800be02:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800be06:	f8d7 25ac 	ldr.w	r2, [r7, #1452]	; 0x5ac
 800be0a:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 800be0e:	fb21 3302 	smlad	r3, r1, r2, r3
 800be12:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
  return(result);
 800be16:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 800be1a:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800be1e:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 800be22:	3310      	adds	r3, #16
 800be24:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 800be28:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800be2c:	f1a3 020f 	sub.w	r2, r3, #15
 800be30:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 800be34:	4293      	cmp	r3, r2
 800be36:	f6fe ae1c 	blt.w	800aa72 <arm_nn_vec_mat_mult_t_s8+0x12a>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800be3a:	e05a      	b.n	800bef2 <arm_nn_vec_mat_mult_t_s8+0x15aa>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800be3c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be40:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f993 3000 	ldrsb.w	r3, [r3]
 800be4a:	461a      	mov	r2, r3
 800be4c:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800be50:	4413      	add	r3, r2
 800be52:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800be56:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be5a:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800be5e:	681a      	ldr	r2, [r3, #0]
 800be60:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800be64:	4413      	add	r3, r2
 800be66:	f993 3000 	ldrsb.w	r3, [r3]
 800be6a:	461a      	mov	r2, r3
 800be6c:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800be70:	4413      	add	r3, r2
 800be72:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 800be76:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800be7a:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f993 3000 	ldrsb.w	r3, [r3]
 800be84:	461a      	mov	r2, r3
 800be86:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800be8a:	4413      	add	r3, r2
 800be8c:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc

            res00 += lhs_value * rhs_value0;
 800be90:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 800be94:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 800be98:	fb03 f202 	mul.w	r2, r3, r2
 800be9c:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800bea0:	4413      	add	r3, r2
 800bea2:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
            res01 += lhs_value * rhs_value1;
 800bea6:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 800beaa:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 800beae:	fb03 f202 	mul.w	r2, r3, r2
 800beb2:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800beb6:	4413      	add	r3, r2
 800beb8:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

            ++rhs_ptr;
 800bebc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bec0:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	1c5a      	adds	r2, r3, #1
 800bec8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800becc:	f2a3 5364 	subw	r3, r3, #1380	; 0x564
 800bed0:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 800bed2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bed6:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	1c5a      	adds	r2, r3, #1
 800bede:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bee2:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 800bee6:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800bee8:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 800beec:	3301      	adds	r3, #1
 800beee:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 800bef2:	f8d7 2620 	ldr.w	r2, [r7, #1568]	; 0x620
 800bef6:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800befa:	429a      	cmp	r2, r3
 800befc:	db9e      	blt.n	800be3c <arm_nn_vec_mat_mult_t_s8+0x14f4>
 800befe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf02:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800bf06:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800bf0a:	6013      	str	r3, [r2, #0]
 800bf0c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf10:	f5a3 7259 	sub.w	r2, r3, #868	; 0x364
 800bf14:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800bf18:	6013      	str	r3, [r2, #0]
 800bf1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf1e:	f5a3 725a 	sub.w	r2, r3, #872	; 0x368
 800bf22:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 800bf26:	6013      	str	r3, [r2, #0]
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800bf28:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf2c:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800bf36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf3a:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	fa03 f202 	lsl.w	r2, r3, r2
 800bf44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf48:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 800bf4c:	601a      	str	r2, [r3, #0]
 800bf4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf52:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 800bf56:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf5a:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800bf62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf66:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800bf6e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800bf72:	461a      	mov	r2, r3
 800bf74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bf78:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 800bf7a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800bf7e:	461a      	mov	r2, r3
 800bf80:	2300      	movs	r3, #0
 800bf82:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800bf84:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800bf88:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bf90:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	17da      	asrs	r2, r3, #31
 800bf98:	633b      	str	r3, [r7, #48]	; 0x30
 800bf9a:	637a      	str	r2, [r7, #52]	; 0x34
 800bf9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bfa0:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	17da      	asrs	r2, r3, #31
 800bfa8:	62bb      	str	r3, [r7, #40]	; 0x28
 800bfaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bfac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfb0:	fb02 f203 	mul.w	r2, r2, r3
 800bfb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb6:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800bfb8:	fb04 f303 	mul.w	r3, r4, r3
 800bfbc:	4413      	add	r3, r2
 800bfbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfc0:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800bfc2:	fba2 5604 	umull	r5, r6, r2, r4
 800bfc6:	4433      	add	r3, r6
 800bfc8:	461e      	mov	r6, r3
 800bfca:	1943      	adds	r3, r0, r5
 800bfcc:	61bb      	str	r3, [r7, #24]
 800bfce:	eb41 0306 	adc.w	r3, r1, r6
 800bfd2:	61fb      	str	r3, [r7, #28]
 800bfd4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800bfd8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bfdc:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 800bfe0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800bfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe8:	f04f 0000 	mov.w	r0, #0
 800bfec:	f04f 0100 	mov.w	r1, #0
 800bff0:	0fd0      	lsrs	r0, r2, #31
 800bff2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800bff6:	17d9      	asrs	r1, r3, #31
 800bff8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800bffc:	f5a3 725d 	sub.w	r2, r3, #884	; 0x374
 800c000:	4603      	mov	r3, r0
 800c002:	6013      	str	r3, [r2, #0]
    return result;
 800c004:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c008:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 800c00c:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800c00e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c012:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	dc06      	bgt.n	800c02a <arm_nn_vec_mat_mult_t_s8+0x16e2>
 800c01c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c020:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	425a      	negs	r2, r3
 800c028:	e000      	b.n	800c02c <arm_nn_vec_mat_mult_t_s8+0x16e4>
 800c02a:	2200      	movs	r2, #0
 800c02c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c030:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 800c034:	6019      	str	r1, [r3, #0]
 800c036:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c03a:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800c03e:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800c040:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c044:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 800c048:	2300      	movs	r3, #0
 800c04a:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800c04c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c050:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800c054:	2201      	movs	r2, #1
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	fa02 f103 	lsl.w	r1, r2, r3
 800c05c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c060:	f5a3 7261 	sub.w	r2, r3, #900	; 0x384
 800c064:	1e4b      	subs	r3, r1, #1
 800c066:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800c068:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c06c:	f5a3 7162 	sub.w	r1, r3, #904	; 0x388
 800c070:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c074:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 800c078:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c07c:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800c080:	6812      	ldr	r2, [r2, #0]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	4013      	ands	r3, r2
 800c086:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800c088:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c08c:	f5a3 7160 	sub.w	r1, r3, #896	; 0x380
 800c090:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c094:	f5a3 725e 	sub.w	r2, r3, #888	; 0x378
 800c098:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c09c:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800c0a0:	6812      	ldr	r2, [r2, #0]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	fa42 f303 	asr.w	r3, r2, r3
 800c0a8:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 800c0aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0ae:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 800c0b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0b6:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	105b      	asrs	r3, r3, #1
 800c0be:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800c0c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0c4:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	da0a      	bge.n	800c0e4 <arm_nn_vec_mat_mult_t_s8+0x179c>
        threshold++;
 800c0ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0d2:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 800c0d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0da:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	3301      	adds	r3, #1
 800c0e2:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800c0e4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0e8:	f5a3 7262 	sub.w	r2, r3, #904	; 0x388
 800c0ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c0f0:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 800c0f4:	6812      	ldr	r2, [r2, #0]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	dd0a      	ble.n	800c112 <arm_nn_vec_mat_mult_t_s8+0x17ca>
        result++;
 800c0fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c100:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 800c104:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c108:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	3301      	adds	r3, #1
 800c110:	6013      	str	r3, [r2, #0]
    return result;
 800c112:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c116:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800c11a:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800c11c:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 800c11e:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
 800c122:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c126:	f5a3 724c 	sub.w	r2, r3, #816	; 0x330
 800c12a:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800c12e:	6013      	str	r3, [r2, #0]
 800c130:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c134:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 800c138:	f8d7 365c 	ldr.w	r3, [r7, #1628]	; 0x65c
 800c13c:	6013      	str	r3, [r2, #0]
 800c13e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c142:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 800c146:	f8d7 3660 	ldr.w	r3, [r7, #1632]	; 0x660
 800c14a:	6013      	str	r3, [r2, #0]
 800c14c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c150:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800c15a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c15e:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	fa03 f202 	lsl.w	r2, r3, r2
 800c168:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c16c:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 800c170:	601a      	str	r2, [r3, #0]
 800c172:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c176:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 800c17a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c17e:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800c186:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c18a:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800c18e:	2300      	movs	r3, #0
 800c190:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800c192:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800c196:	461a      	mov	r2, r3
 800c198:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c19c:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 800c1a0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800c1ac:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800c1b0:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c1b4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1b8:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	17da      	asrs	r2, r3, #31
 800c1c0:	643b      	str	r3, [r7, #64]	; 0x40
 800c1c2:	647a      	str	r2, [r7, #68]	; 0x44
 800c1c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c1c8:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	17da      	asrs	r2, r3, #31
 800c1d0:	63bb      	str	r3, [r7, #56]	; 0x38
 800c1d2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c1d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1d8:	fb02 f203 	mul.w	r2, r2, r3
 800c1dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1de:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800c1e0:	fb04 f303 	mul.w	r3, r4, r3
 800c1e4:	4413      	add	r3, r2
 800c1e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c1e8:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800c1ea:	fba2 ab04 	umull	sl, fp, r2, r4
 800c1ee:	445b      	add	r3, fp
 800c1f0:	469b      	mov	fp, r3
 800c1f2:	eb10 030a 	adds.w	r3, r0, sl
 800c1f6:	623b      	str	r3, [r7, #32]
 800c1f8:	eb41 030b 	adc.w	r3, r1, fp
 800c1fc:	627b      	str	r3, [r7, #36]	; 0x24
 800c1fe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800c202:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c206:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 800c20a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800c20e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c212:	f04f 0000 	mov.w	r0, #0
 800c216:	f04f 0100 	mov.w	r1, #0
 800c21a:	0fd0      	lsrs	r0, r2, #31
 800c21c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800c220:	17d9      	asrs	r1, r3, #31
 800c222:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c226:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800c22a:	4603      	mov	r3, r0
 800c22c:	6013      	str	r3, [r2, #0]
    return result;
 800c22e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c232:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 800c236:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800c238:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c23c:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	2b00      	cmp	r3, #0
 800c244:	dc06      	bgt.n	800c254 <arm_nn_vec_mat_mult_t_s8+0x190c>
 800c246:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c24a:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	425a      	negs	r2, r3
 800c252:	e000      	b.n	800c256 <arm_nn_vec_mat_mult_t_s8+0x190e>
 800c254:	2200      	movs	r2, #0
 800c256:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c25a:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 800c25e:	6019      	str	r1, [r3, #0]
 800c260:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c264:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800c268:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800c26a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c26e:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 800c272:	2300      	movs	r3, #0
 800c274:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800c276:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c27a:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800c27e:	2201      	movs	r2, #1
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	fa02 f103 	lsl.w	r1, r2, r3
 800c286:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c28a:	f5a3 7255 	sub.w	r2, r3, #852	; 0x354
 800c28e:	1e4b      	subs	r3, r1, #1
 800c290:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800c292:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c296:	f5a3 7156 	sub.w	r1, r3, #856	; 0x358
 800c29a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c29e:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 800c2a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2a6:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800c2aa:	6812      	ldr	r2, [r2, #0]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	4013      	ands	r3, r2
 800c2b0:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800c2b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2b6:	f5a3 7154 	sub.w	r1, r3, #848	; 0x350
 800c2ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2be:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 800c2c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2c6:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800c2ca:	6812      	ldr	r2, [r2, #0]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	fa42 f303 	asr.w	r3, r2, r3
 800c2d2:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 800c2d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2d8:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 800c2dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2e0:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	105b      	asrs	r3, r3, #1
 800c2e8:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800c2ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2ee:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	da0a      	bge.n	800c30e <arm_nn_vec_mat_mult_t_s8+0x19c6>
        threshold++;
 800c2f8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c2fc:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 800c300:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c304:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	3301      	adds	r3, #1
 800c30c:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800c30e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c312:	f5a3 7256 	sub.w	r2, r3, #856	; 0x358
 800c316:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c31a:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 800c31e:	6812      	ldr	r2, [r2, #0]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	429a      	cmp	r2, r3
 800c324:	dd0a      	ble.n	800c33c <arm_nn_vec_mat_mult_t_s8+0x19f4>
        result++;
 800c326:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c32a:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 800c32e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c332:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	3301      	adds	r3, #1
 800c33a:	6013      	str	r3, [r2, #0]
    return result;
 800c33c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c340:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800c344:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800c346:	bf00      	nop
        res01 = arm_nn_requantize(res01, dst_multiplier, dst_shift);
 800c348:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Add offset
        res00 += dst_offset;
 800c34c:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 800c350:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800c354:	4413      	add	r3, r2
 800c356:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 += dst_offset;
 800c35a:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 800c35e:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800c362:	4413      	add	r3, r2
 800c364:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        // Clamp the result
        res00 = MAX(res00, activation_min);
 800c368:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 800c36c:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 800c370:	4293      	cmp	r3, r2
 800c372:	bfb8      	it	lt
 800c374:	4613      	movlt	r3, r2
 800c376:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res00 = MIN(res00, activation_max);
 800c37a:	f8d7 2628 	ldr.w	r2, [r7, #1576]	; 0x628
 800c37e:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 800c382:	4293      	cmp	r3, r2
 800c384:	bfa8      	it	ge
 800c386:	4613      	movge	r3, r2
 800c388:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
        res01 = MAX(res01, activation_min);
 800c38c:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 800c390:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 800c394:	4293      	cmp	r3, r2
 800c396:	bfb8      	it	lt
 800c398:	4613      	movlt	r3, r2
 800c39a:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
        res01 = MIN(res01, activation_max);
 800c39e:	f8d7 2624 	ldr.w	r2, [r7, #1572]	; 0x624
 800c3a2:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	bfa8      	it	ge
 800c3aa:	4613      	movge	r3, r2
 800c3ac:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

        *dst++ = (q7_t)res00;
 800c3b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3b4:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 800c3b8:	6819      	ldr	r1, [r3, #0]
 800c3ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3be:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 800c3c2:	1c4b      	adds	r3, r1, #1
 800c3c4:	6013      	str	r3, [r2, #0]
 800c3c6:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800c3ca:	b25b      	sxtb	r3, r3
 800c3cc:	700b      	strb	r3, [r1, #0]
        *dst++ = (q7_t)res01;
 800c3ce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3d2:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 800c3d6:	6819      	ldr	r1, [r3, #0]
 800c3d8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3dc:	f5a3 62bd 	sub.w	r2, r3, #1512	; 0x5e8
 800c3e0:	1c4b      	adds	r3, r1, #1
 800c3e2:	6013      	str	r3, [r2, #0]
 800c3e4:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800c3e8:	b25b      	sxtb	r3, r3
 800c3ea:	700b      	strb	r3, [r1, #0]

        rhs += 2 * rhs_cols;
 800c3ec:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800c3f0:	005b      	lsls	r3, r3, #1
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c3f8:	f5a3 62bc 	sub.w	r2, r3, #1504	; 0x5e0
 800c3fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c400:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	440b      	add	r3, r1
 800c408:	6013      	str	r3, [r2, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800c40a:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800c40e:	3302      	adds	r3, #2
 800c410:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 800c414:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 800c418:	1e5a      	subs	r2, r3, #1
 800c41a:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800c41e:	4293      	cmp	r3, r2
 800c420:	f6fe aae5 	blt.w	800a9ee <arm_nn_vec_mat_mult_t_s8+0xa6>
    }

    if (rhs_rows % 2)
 800c424:	f8d7 3668 	ldr.w	r3, [r7, #1640]	; 0x668
 800c428:	f003 0301 	and.w	r3, r3, #1
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	f001 806e 	beq.w	800d50e <arm_nn_vec_mat_mult_t_s8+0x2bc6>
    {
        const q7_t *lhs_ptr = &lhs[0];
 800c432:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c436:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800c43a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c43e:	f2a2 52dc 	subw	r2, r2, #1500	; 0x5dc
 800c442:	6812      	ldr	r2, [r2, #0]
 800c444:	601a      	str	r2, [r3, #0]
        const q7_t *rhs_ptr = &rhs[0];
 800c446:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c44a:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800c44e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c452:	f5a2 62bc 	sub.w	r2, r2, #1504	; 0x5e0
 800c456:	6812      	ldr	r2, [r2, #0]
 800c458:	601a      	str	r2, [r3, #0]

        q31_t res00 = 0;
 800c45a:	2300      	movs	r3, #0
 800c45c:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        if (bias)
 800c460:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c464:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d00d      	beq.n	800c48a <arm_nn_vec_mat_mult_t_s8+0x1b42>
        {
            res00 = *bias++;
 800c46e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c472:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c47c:	f2a2 52e4 	subw	r2, r2, #1508	; 0x5e4
 800c480:	1d19      	adds	r1, r3, #4
 800c482:	6011      	str	r1, [r2, #0]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        }

        int32_t rhs_cols_idx = 0;
 800c48a:	2300      	movs	r3, #0
 800c48c:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800c490:	f000 beb5 	b.w	800d1fe <arm_nn_vec_mat_mult_t_s8+0x28b6>
 800c494:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c498:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800c49c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800c4a0:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800c4a2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4a6:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4b6:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 800c4ba:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800c4bc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4c0:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	1d1a      	adds	r2, r3, #4
 800c4ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4ce:	f2a3 532c 	subw	r3, r3, #1324	; 0x52c
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	601a      	str	r2, [r3, #0]
    return (val);
 800c4d6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4da:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 800c4de:	681b      	ldr	r3, [r3, #0]
        {
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800c4e0:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800c4e4:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800c4e8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4ec:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800c4f0:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800c4f4:	6019      	str	r1, [r3, #0]
 800c4f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c4fa:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800c4fe:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c500:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c504:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c50e:	f2a2 5224 	subw	r2, r2, #1316	; 0x524
 800c512:	6812      	ldr	r2, [r2, #0]
 800c514:	fa23 f282 	sxtab16	r2, r3, r2
 800c518:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c51c:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800c520:	601a      	str	r2, [r3, #0]
  return(result);
 800c522:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c526:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800c530:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c534:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800c538:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800c53c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800c53e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c542:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	461a      	mov	r2, r3
 800c54e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c552:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 800c556:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800c558:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c55c:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	1d1a      	adds	r2, r3, #4
 800c566:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c56a:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	601a      	str	r2, [r3, #0]
    return (val);
 800c572:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c576:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 800c57a:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800c57c:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800c580:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800c584:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c588:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 800c58c:	601a      	str	r2, [r3, #0]
 800c58e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c592:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800c596:	2208      	movs	r2, #8
 800c598:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800c59a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c59e:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800c5a2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c5a6:	f5a2 62a3 	sub.w	r2, r2, #1304	; 0x518
 800c5aa:	6812      	ldr	r2, [r2, #0]
 800c5ac:	f002 021f 	and.w	r2, r2, #31
 800c5b0:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800c5b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5b6:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d105      	bne.n	800c5cc <arm_nn_vec_mat_mult_t_s8+0x1c84>
    return op1;
 800c5c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5c4:	f2a3 5314 	subw	r3, r3, #1300	; 0x514
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	e00b      	b.n	800c5e4 <arm_nn_vec_mat_mult_t_s8+0x1c9c>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c5cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5d0:	f2a3 5214 	subw	r2, r3, #1300	; 0x514
 800c5d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5d8:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800c5dc:	6812      	ldr	r2, [r2, #0]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	fa62 f303 	ror.w	r3, r2, r3
 800c5e4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c5e8:	f5a2 62a1 	sub.w	r2, r2, #1288	; 0x508
 800c5ec:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800c5f0:	6011      	str	r1, [r2, #0]
 800c5f2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c5f6:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 800c5fa:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c5fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c600:	f5a3 63a1 	sub.w	r3, r3, #1288	; 0x508
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c60a:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 800c60e:	6812      	ldr	r2, [r2, #0]
 800c610:	fa23 f282 	sxtab16	r2, r3, r2
 800c614:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c618:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 800c61c:	601a      	str	r2, [r3, #0]
  return(result);
 800c61e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c622:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800c62c:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800c630:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c634:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 800c638:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800c63c:	6019      	str	r1, [r3, #0]
 800c63e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c642:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 800c646:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c648:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c64c:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c656:	f5a2 62a0 	sub.w	r2, r2, #1280	; 0x500
 800c65a:	6812      	ldr	r2, [r2, #0]
 800c65c:	fa23 f282 	sxtab16	r2, r3, r2
 800c660:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c664:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 800c668:	601a      	str	r2, [r3, #0]
  return(result);
 800c66a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c66e:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800c678:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800c67c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c680:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800c684:	601a      	str	r2, [r3, #0]
 800c686:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c68a:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800c68e:	2208      	movs	r2, #8
 800c690:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800c692:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c696:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800c69a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c69e:	f5a2 629f 	sub.w	r2, r2, #1272	; 0x4f8
 800c6a2:	6812      	ldr	r2, [r2, #0]
 800c6a4:	f002 021f 	and.w	r2, r2, #31
 800c6a8:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800c6aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6ae:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d105      	bne.n	800c6c4 <arm_nn_vec_mat_mult_t_s8+0x1d7c>
    return op1;
 800c6b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6bc:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	e00b      	b.n	800c6dc <arm_nn_vec_mat_mult_t_s8+0x1d94>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c6c4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6c8:	f2a3 42f4 	subw	r2, r3, #1268	; 0x4f4
 800c6cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6d0:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 800c6d4:	6812      	ldr	r2, [r2, #0]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	fa62 f303 	ror.w	r3, r2, r3
 800c6dc:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c6e0:	f5a2 629d 	sub.w	r2, r2, #1256	; 0x4e8
 800c6e4:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800c6e8:	6011      	str	r1, [r2, #0]
 800c6ea:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c6ee:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 800c6f2:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c6f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c6f8:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c702:	f2a2 42ec 	subw	r2, r2, #1260	; 0x4ec
 800c706:	6812      	ldr	r2, [r2, #0]
 800c708:	fa23 f282 	sxtab16	r2, r3, r2
 800c70c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c710:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 800c714:	601a      	str	r2, [r3, #0]
  return(result);
 800c716:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c71a:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800c724:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800c728:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800c72c:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800c730:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c734:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 800c738:	6018      	str	r0, [r3, #0]
 800c73a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c73e:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 800c742:	6019      	str	r1, [r3, #0]
 800c744:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c748:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 800c74c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c74e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c752:	f5a3 639b 	sub.w	r3, r3, #1240	; 0x4d8
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c75c:	f2a2 42dc 	subw	r2, r2, #1244	; 0x4dc
 800c760:	6812      	ldr	r2, [r2, #0]
 800c762:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800c766:	f5a1 619c 	sub.w	r1, r1, #1248	; 0x4e0
 800c76a:	6809      	ldr	r1, [r1, #0]
 800c76c:	fb23 1202 	smlad	r2, r3, r2, r1
 800c770:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c774:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 800c778:	601a      	str	r2, [r3, #0]
  return(result);
 800c77a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c77e:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800c788:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800c78c:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800c790:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800c794:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c798:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800c79c:	6018      	str	r0, [r3, #0]
 800c79e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7a2:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 800c7a6:	6019      	str	r1, [r3, #0]
 800c7a8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7ac:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 800c7b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c7b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7b6:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c7c0:	f2a2 42cc 	subw	r2, r2, #1228	; 0x4cc
 800c7c4:	6812      	ldr	r2, [r2, #0]
 800c7c6:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800c7ca:	f5a1 619a 	sub.w	r1, r1, #1232	; 0x4d0
 800c7ce:	6809      	ldr	r1, [r1, #0]
 800c7d0:	fb23 1202 	smlad	r2, r3, r2, r1
 800c7d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7d8:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 800c7dc:	601a      	str	r2, [r3, #0]
  return(result);
 800c7de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7e2:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800c7ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7f0:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800c7f4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800c7f8:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800c7fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c7fe:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	461a      	mov	r2, r3
 800c80a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c80e:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 800c812:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800c814:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c818:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	1d1a      	adds	r2, r3, #4
 800c822:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c826:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	601a      	str	r2, [r3, #0]
    return (val);
 800c82e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c832:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 800c836:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800c838:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800c83c:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800c840:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c844:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 800c848:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800c84c:	6019      	str	r1, [r3, #0]
 800c84e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c852:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 800c856:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c858:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c85c:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c866:	f2a2 42bc 	subw	r2, r2, #1212	; 0x4bc
 800c86a:	6812      	ldr	r2, [r2, #0]
 800c86c:	fa23 f282 	sxtab16	r2, r3, r2
 800c870:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c874:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 800c878:	601a      	str	r2, [r3, #0]
  return(result);
 800c87a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c87e:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800c888:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c88c:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800c890:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800c894:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800c896:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c89a:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8aa:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 800c8ae:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800c8b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8b4:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	1d1a      	adds	r2, r3, #4
 800c8be:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8c2:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	601a      	str	r2, [r3, #0]
    return (val);
 800c8ca:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8ce:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 800c8d2:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800c8d4:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800c8d8:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800c8dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8e0:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800c8e4:	601a      	str	r2, [r3, #0]
 800c8e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8ea:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800c8ee:	2208      	movs	r2, #8
 800c8f0:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800c8f2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c8f6:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800c8fa:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c8fe:	f5a2 6296 	sub.w	r2, r2, #1200	; 0x4b0
 800c902:	6812      	ldr	r2, [r2, #0]
 800c904:	f002 021f 	and.w	r2, r2, #31
 800c908:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800c90a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c90e:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d105      	bne.n	800c924 <arm_nn_vec_mat_mult_t_s8+0x1fdc>
    return op1;
 800c918:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c91c:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	e00b      	b.n	800c93c <arm_nn_vec_mat_mult_t_s8+0x1ff4>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c924:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c928:	f2a3 42ac 	subw	r2, r3, #1196	; 0x4ac
 800c92c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c930:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800c934:	6812      	ldr	r2, [r2, #0]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	fa62 f303 	ror.w	r3, r2, r3
 800c93c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c940:	f5a2 6294 	sub.w	r2, r2, #1184	; 0x4a0
 800c944:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800c948:	6011      	str	r1, [r2, #0]
 800c94a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c94e:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 800c952:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c954:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c958:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c962:	f2a2 42a4 	subw	r2, r2, #1188	; 0x4a4
 800c966:	6812      	ldr	r2, [r2, #0]
 800c968:	fa23 f282 	sxtab16	r2, r3, r2
 800c96c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c970:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 800c974:	601a      	str	r2, [r3, #0]
  return(result);
 800c976:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c97a:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800c984:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800c988:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c98c:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 800c990:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800c994:	6019      	str	r1, [r3, #0]
 800c996:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c99a:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 800c99e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c9a0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9a4:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c9ae:	f5a2 6293 	sub.w	r2, r2, #1176	; 0x498
 800c9b2:	6812      	ldr	r2, [r2, #0]
 800c9b4:	fa23 f282 	sxtab16	r2, r3, r2
 800c9b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9bc:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 800c9c0:	601a      	str	r2, [r3, #0]
  return(result);
 800c9c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9c6:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800c9d0:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800c9d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9d8:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 800c9dc:	601a      	str	r2, [r3, #0]
 800c9de:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9e2:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800c9e6:	2208      	movs	r2, #8
 800c9e8:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800c9ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c9ee:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800c9f2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800c9f6:	f5a2 6292 	sub.w	r2, r2, #1168	; 0x490
 800c9fa:	6812      	ldr	r2, [r2, #0]
 800c9fc:	f002 021f 	and.w	r2, r2, #31
 800ca00:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800ca02:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca06:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d105      	bne.n	800ca1c <arm_nn_vec_mat_mult_t_s8+0x20d4>
    return op1;
 800ca10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca14:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	e00b      	b.n	800ca34 <arm_nn_vec_mat_mult_t_s8+0x20ec>
  return (op1 >> op2) | (op1 << (32U - op2));
 800ca1c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca20:	f2a3 428c 	subw	r2, r3, #1164	; 0x48c
 800ca24:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca28:	f5a3 6392 	sub.w	r3, r3, #1168	; 0x490
 800ca2c:	6812      	ldr	r2, [r2, #0]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	fa62 f303 	ror.w	r3, r2, r3
 800ca34:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ca38:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 800ca3c:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800ca40:	6011      	str	r1, [r2, #0]
 800ca42:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ca46:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 800ca4a:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800ca4c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca50:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ca5a:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 800ca5e:	6812      	ldr	r2, [r2, #0]
 800ca60:	fa23 f282 	sxtab16	r2, r3, r2
 800ca64:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca68:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 800ca6c:	601a      	str	r2, [r3, #0]
  return(result);
 800ca6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca72:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800ca7c:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800ca80:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800ca84:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800ca88:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca8c:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800ca90:	6018      	str	r0, [r3, #0]
 800ca92:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ca96:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 800ca9a:	6019      	str	r1, [r3, #0]
 800ca9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800caa0:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800caa4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800caa6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800caaa:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cab4:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 800cab8:	6812      	ldr	r2, [r2, #0]
 800caba:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800cabe:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 800cac2:	6809      	ldr	r1, [r1, #0]
 800cac4:	fb23 1202 	smlad	r2, r3, r2, r1
 800cac8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cacc:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800cad0:	601a      	str	r2, [r3, #0]
  return(result);
 800cad2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cad6:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800cae0:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800cae4:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800cae8:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800caec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800caf0:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 800caf4:	6018      	str	r0, [r3, #0]
 800caf6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cafa:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800cafe:	6019      	str	r1, [r3, #0]
 800cb00:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb04:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 800cb08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800cb0a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb0e:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cb18:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 800cb1c:	6812      	ldr	r2, [r2, #0]
 800cb1e:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800cb22:	f5a1 618d 	sub.w	r1, r1, #1128	; 0x468
 800cb26:	6809      	ldr	r1, [r1, #0]
 800cb28:	fb23 1202 	smlad	r2, r3, r2, r1
 800cb2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb30:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800cb34:	601a      	str	r2, [r3, #0]
  return(result);
 800cb36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb3a:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800cb44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb48:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800cb4c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800cb50:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800cb52:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb56:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	461a      	mov	r2, r3
 800cb62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb66:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 800cb6a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800cb6c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb70:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	1d1a      	adds	r2, r3, #4
 800cb7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb7e:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	601a      	str	r2, [r3, #0]
    return (val);
 800cb86:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb8a:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 800cb8e:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800cb90:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800cb94:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800cb98:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cb9c:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 800cba0:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800cba4:	6019      	str	r1, [r3, #0]
 800cba6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbaa:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 800cbae:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800cbb0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbb4:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cbbe:	f2a2 4254 	subw	r2, r2, #1108	; 0x454
 800cbc2:	6812      	ldr	r2, [r2, #0]
 800cbc4:	fa23 f282 	sxtab16	r2, r3, r2
 800cbc8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbcc:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 800cbd0:	601a      	str	r2, [r3, #0]
  return(result);
 800cbd2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbd6:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800cbe0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbe4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cbe8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800cbec:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800cbee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cbf2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc02:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800cc06:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800cc08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc0c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	1d1a      	adds	r2, r3, #4
 800cc16:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc1a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	601a      	str	r2, [r3, #0]
    return (val);
 800cc22:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc26:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 800cc2a:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800cc2c:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800cc30:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800cc34:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc38:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800cc3c:	601a      	str	r2, [r3, #0]
 800cc3e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc42:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800cc46:	2208      	movs	r2, #8
 800cc48:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800cc4a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc4e:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800cc52:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cc56:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 800cc5a:	6812      	ldr	r2, [r2, #0]
 800cc5c:	f002 021f 	and.w	r2, r2, #31
 800cc60:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800cc62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc66:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d105      	bne.n	800cc7c <arm_nn_vec_mat_mult_t_s8+0x2334>
    return op1;
 800cc70:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc74:	f2a3 4344 	subw	r3, r3, #1092	; 0x444
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	e00b      	b.n	800cc94 <arm_nn_vec_mat_mult_t_s8+0x234c>
  return (op1 >> op2) | (op1 << (32U - op2));
 800cc7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc80:	f2a3 4244 	subw	r2, r3, #1092	; 0x444
 800cc84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cc88:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800cc8c:	6812      	ldr	r2, [r2, #0]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	fa62 f303 	ror.w	r3, r2, r3
 800cc94:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cc98:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 800cc9c:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800cca0:	6011      	str	r1, [r2, #0]
 800cca2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cca6:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 800ccaa:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800ccac:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccb0:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ccba:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 800ccbe:	6812      	ldr	r2, [r2, #0]
 800ccc0:	fa23 f282 	sxtab16	r2, r3, r2
 800ccc4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccc8:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800cccc:	601a      	str	r2, [r3, #0]
  return(result);
 800ccce:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccd2:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800ccdc:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800cce0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cce4:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800cce8:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800ccec:	6019      	str	r1, [r3, #0]
 800ccee:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccf2:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 800ccf6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800ccf8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ccfc:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cd06:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 800cd0a:	6812      	ldr	r2, [r2, #0]
 800cd0c:	fa23 f282 	sxtab16	r2, r3, r2
 800cd10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd14:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800cd18:	601a      	str	r2, [r3, #0]
  return(result);
 800cd1a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd1e:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800cd28:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800cd2c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd30:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800cd34:	601a      	str	r2, [r3, #0]
 800cd36:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd3a:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800cd3e:	2208      	movs	r2, #8
 800cd40:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800cd42:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd46:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800cd4a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cd4e:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
 800cd52:	6812      	ldr	r2, [r2, #0]
 800cd54:	f002 021f 	and.w	r2, r2, #31
 800cd58:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800cd5a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd5e:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d105      	bne.n	800cd74 <arm_nn_vec_mat_mult_t_s8+0x242c>
    return op1;
 800cd68:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd6c:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	e00b      	b.n	800cd8c <arm_nn_vec_mat_mult_t_s8+0x2444>
  return (op1 >> op2) | (op1 << (32U - op2));
 800cd74:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd78:	f2a3 4224 	subw	r2, r3, #1060	; 0x424
 800cd7c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cd80:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800cd84:	6812      	ldr	r2, [r2, #0]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	fa62 f303 	ror.w	r3, r2, r3
 800cd8c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cd90:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 800cd94:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800cd98:	6011      	str	r1, [r2, #0]
 800cd9a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cd9e:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 800cda2:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800cda4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cda8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cdb2:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 800cdb6:	6812      	ldr	r2, [r2, #0]
 800cdb8:	fa23 f282 	sxtab16	r2, r3, r2
 800cdbc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdc0:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 800cdc4:	601a      	str	r2, [r3, #0]
  return(result);
 800cdc6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdca:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800cdd4:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800cdd8:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800cddc:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800cde0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cde4:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800cde8:	6018      	str	r0, [r3, #0]
 800cdea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdee:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800cdf2:	6019      	str	r1, [r3, #0]
 800cdf4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cdf8:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800cdfc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800cdfe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce02:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ce0c:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 800ce10:	6812      	ldr	r2, [r2, #0]
 800ce12:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800ce16:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
 800ce1a:	6809      	ldr	r1, [r1, #0]
 800ce1c:	fb23 1202 	smlad	r2, r3, r2, r1
 800ce20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce24:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 800ce28:	601a      	str	r2, [r3, #0]
  return(result);
 800ce2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce2e:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800ce38:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800ce3c:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800ce40:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800ce44:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce48:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800ce4c:	6018      	str	r0, [r3, #0]
 800ce4e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce52:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800ce56:	6019      	str	r1, [r3, #0]
 800ce58:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce5c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ce60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ce62:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce66:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800ce70:	f5a2 727f 	sub.w	r2, r2, #1020	; 0x3fc
 800ce74:	6812      	ldr	r2, [r2, #0]
 800ce76:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800ce7a:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 800ce7e:	6809      	ldr	r1, [r1, #0]
 800ce80:	fb23 1202 	smlad	r2, r3, r2, r1
 800ce84:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce88:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800ce8c:	601a      	str	r2, [r3, #0]
  return(result);
 800ce8e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ce92:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800ce9c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cea0:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800cea4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800cea8:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800ceaa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ceae:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	461a      	mov	r2, r3
 800ceba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cebe:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 800cec2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800cec4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cec8:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	1d1a      	adds	r2, r3, #4
 800ced2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ced6:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	601a      	str	r2, [r3, #0]
    return (val);
 800cede:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cee2:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 800cee6:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800cee8:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800ceec:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800cef0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cef4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800cef8:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800cefc:	6019      	str	r1, [r3, #0]
 800cefe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf02:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800cf06:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800cf08:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf0c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cf16:	f5a2 727b 	sub.w	r2, r2, #1004	; 0x3ec
 800cf1a:	6812      	ldr	r2, [r2, #0]
 800cf1c:	fa23 f282 	sxtab16	r2, r3, r2
 800cf20:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf24:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800cf28:	601a      	str	r2, [r3, #0]
  return(result);
 800cf2a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf2e:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800cf38:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf3c:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800cf40:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800cf44:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800cf46:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf4a:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	461a      	mov	r2, r3
 800cf56:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf5a:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 800cf5e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800cf60:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf64:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	1d1a      	adds	r2, r3, #4
 800cf6e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf72:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	601a      	str	r2, [r3, #0]
    return (val);
 800cf7a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf7e:	f5a3 63bb 	sub.w	r3, r3, #1496	; 0x5d8
 800cf82:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800cf84:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800cf88:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800cf8c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf90:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800cf94:	601a      	str	r2, [r3, #0]
 800cf96:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cf9a:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800cf9e:	2208      	movs	r2, #8
 800cfa0:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800cfa2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfa6:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800cfaa:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cfae:	f5a2 7278 	sub.w	r2, r2, #992	; 0x3e0
 800cfb2:	6812      	ldr	r2, [r2, #0]
 800cfb4:	f002 021f 	and.w	r2, r2, #31
 800cfb8:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800cfba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfbe:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d105      	bne.n	800cfd4 <arm_nn_vec_mat_mult_t_s8+0x268c>
    return op1;
 800cfc8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfcc:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	e00b      	b.n	800cfec <arm_nn_vec_mat_mult_t_s8+0x26a4>
  return (op1 >> op2) | (op1 << (32U - op2));
 800cfd4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfd8:	f5a3 7277 	sub.w	r2, r3, #988	; 0x3dc
 800cfdc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800cfe0:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800cfe4:	6812      	ldr	r2, [r2, #0]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	fa62 f303 	ror.w	r3, r2, r3
 800cfec:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cff0:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 800cff4:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 800cff8:	6011      	str	r1, [r2, #0]
 800cffa:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800cffe:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 800d002:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d004:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d008:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d012:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 800d016:	6812      	ldr	r2, [r2, #0]
 800d018:	fa23 f282 	sxtab16	r2, r3, r2
 800d01c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d020:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800d024:	601a      	str	r2, [r3, #0]
  return(result);
 800d026:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d02a:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800d034:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800d038:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d03c:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800d040:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800d044:	6019      	str	r1, [r3, #0]
 800d046:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d04a:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 800d04e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d050:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d054:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d05e:	f5a2 7272 	sub.w	r2, r2, #968	; 0x3c8
 800d062:	6812      	ldr	r2, [r2, #0]
 800d064:	fa23 f282 	sxtab16	r2, r3, r2
 800d068:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d06c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 800d070:	601a      	str	r2, [r3, #0]
  return(result);
 800d072:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d076:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800d080:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800d084:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d088:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800d08c:	601a      	str	r2, [r3, #0]
 800d08e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d092:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800d096:	2208      	movs	r2, #8
 800d098:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800d09a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d09e:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800d0a2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d0a6:	f5a2 7270 	sub.w	r2, r2, #960	; 0x3c0
 800d0aa:	6812      	ldr	r2, [r2, #0]
 800d0ac:	f002 021f 	and.w	r2, r2, #31
 800d0b0:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800d0b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0b6:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d105      	bne.n	800d0cc <arm_nn_vec_mat_mult_t_s8+0x2784>
    return op1;
 800d0c0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0c4:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	e00b      	b.n	800d0e4 <arm_nn_vec_mat_mult_t_s8+0x279c>
  return (op1 >> op2) | (op1 << (32U - op2));
 800d0cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0d0:	f5a3 726f 	sub.w	r2, r3, #956	; 0x3bc
 800d0d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d0d8:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800d0dc:	6812      	ldr	r2, [r2, #0]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	fa62 f303 	ror.w	r3, r2, r3
 800d0e4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d0e8:	f5a2 726c 	sub.w	r2, r2, #944	; 0x3b0
 800d0ec:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 800d0f0:	6011      	str	r1, [r2, #0]
 800d0f2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d0f6:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 800d0fa:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800d0fc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d100:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d10a:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 800d10e:	6812      	ldr	r2, [r2, #0]
 800d110:	fa23 f282 	sxtab16	r2, r3, r2
 800d114:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d118:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 800d11c:	601a      	str	r2, [r3, #0]
  return(result);
 800d11e:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d122:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800d12c:	f8d7 05d8 	ldr.w	r0, [r7, #1496]	; 0x5d8
 800d130:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800d134:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800d138:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d13c:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800d140:	6018      	str	r0, [r3, #0]
 800d142:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d146:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800d14a:	6019      	str	r1, [r3, #0]
 800d14c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d150:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800d154:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d156:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d15a:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d164:	f5a2 7269 	sub.w	r2, r2, #932	; 0x3a4
 800d168:	6812      	ldr	r2, [r2, #0]
 800d16a:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800d16e:	f5a1 716a 	sub.w	r1, r1, #936	; 0x3a8
 800d172:	6809      	ldr	r1, [r1, #0]
 800d174:	fb23 1202 	smlad	r2, r3, r2, r1
 800d178:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d17c:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800d180:	601a      	str	r2, [r3, #0]
  return(result);
 800d182:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d186:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
            res00 = __SMLAD(val2, val0, res00);
 800d190:	f8d7 05dc 	ldr.w	r0, [r7, #1500]	; 0x5dc
 800d194:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800d198:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800d19c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1a0:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800d1a4:	6018      	str	r0, [r3, #0]
 800d1a6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1aa:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 800d1ae:	6019      	str	r1, [r3, #0]
 800d1b0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1b4:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 800d1b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800d1ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1be:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d1c8:	f5a2 7265 	sub.w	r2, r2, #916	; 0x394
 800d1cc:	6812      	ldr	r2, [r2, #0]
 800d1ce:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800d1d2:	f5a1 7166 	sub.w	r1, r1, #920	; 0x398
 800d1d6:	6809      	ldr	r1, [r1, #0]
 800d1d8:	fb23 1202 	smlad	r2, r3, r2, r1
 800d1dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1e0:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 800d1e4:	601a      	str	r2, [r3, #0]
  return(result);
 800d1e6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d1ea:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800d1f4:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 800d1f8:	3310      	adds	r3, #16
 800d1fa:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 800d1fe:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800d202:	3b0f      	subs	r3, #15
 800d204:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 800d208:	429a      	cmp	r2, r3
 800d20a:	f6ff a943 	blt.w	800c494 <arm_nn_vec_mat_mult_t_s8+0x1b4c>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800d20e:	e03f      	b.n	800d290 <arm_nn_vec_mat_mult_t_s8+0x2948>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800d210:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d214:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f993 3000 	ldrsb.w	r3, [r3]
 800d21e:	461a      	mov	r2, r3
 800d220:	f8d7 3654 	ldr.w	r3, [r7, #1620]	; 0x654
 800d224:	4413      	add	r3, r2
 800d226:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 800d22a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d22e:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	f993 3000 	ldrsb.w	r3, [r3]
 800d238:	461a      	mov	r2, r3
 800d23a:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800d23e:	4413      	add	r3, r2
 800d240:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8

            res00 += lhs_value * rhs_value0;
 800d244:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 800d248:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 800d24c:	fb02 f303 	mul.w	r3, r2, r3
 800d250:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800d254:	4413      	add	r3, r2
 800d256:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

            ++rhs_ptr;
 800d25a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d25e:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	1c5a      	adds	r2, r3, #1
 800d266:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d26a:	f5a3 63b6 	sub.w	r3, r3, #1456	; 0x5b0
 800d26e:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 800d270:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d274:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	1c5a      	adds	r2, r3, #1
 800d27c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d280:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 800d284:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800d286:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 800d28a:	3301      	adds	r3, #1
 800d28c:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 800d290:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 800d294:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800d298:	429a      	cmp	r2, r3
 800d29a:	dbb9      	blt.n	800d210 <arm_nn_vec_mat_mult_t_s8+0x28c8>
 800d29c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2a0:	f5a3 63a6 	sub.w	r3, r3, #1328	; 0x530
 800d2a4:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800d2a8:	601a      	str	r2, [r3, #0]
 800d2aa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2ae:	f2a3 5334 	subw	r3, r3, #1332	; 0x534
 800d2b2:	f8d7 265c 	ldr.w	r2, [r7, #1628]	; 0x65c
 800d2b6:	601a      	str	r2, [r3, #0]
 800d2b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2bc:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800d2c0:	f8d7 2660 	ldr.w	r2, [r7, #1632]	; 0x660
 800d2c4:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800d2c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2ca:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d2d4:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d2d8:	f5a2 62a6 	sub.w	r2, r2, #1328	; 0x530
 800d2dc:	6812      	ldr	r2, [r2, #0]
 800d2de:	409a      	lsls	r2, r3
 800d2e0:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2e4:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 800d2e8:	601a      	str	r2, [r3, #0]
 800d2ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d2ee:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 800d2f2:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d2f6:	f2a2 5234 	subw	r2, r2, #1332	; 0x534
 800d2fa:	6812      	ldr	r2, [r2, #0]
 800d2fc:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800d2fe:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d302:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 800d306:	2200      	movs	r2, #0
 800d308:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 800d30a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d30e:	461a      	mov	r2, r3
 800d310:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d314:	f842 3c08 	str.w	r3, [r2, #-8]
    mult.word.high = 0;
 800d318:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d31c:	461a      	mov	r2, r3
 800d31e:	2300      	movs	r3, #0
 800d320:	f842 3c04 	str.w	r3, [r2, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800d324:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d328:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d32c:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800d330:	f2a1 513c 	subw	r1, r1, #1340	; 0x53c
 800d334:	6809      	ldr	r1, [r1, #0]
 800d336:	17c8      	asrs	r0, r1, #31
 800d338:	6139      	str	r1, [r7, #16]
 800d33a:	6178      	str	r0, [r7, #20]
 800d33c:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800d340:	f5a1 61a8 	sub.w	r1, r1, #1344	; 0x540
 800d344:	6809      	ldr	r1, [r1, #0]
 800d346:	17c8      	asrs	r0, r1, #31
 800d348:	60b9      	str	r1, [r7, #8]
 800d34a:	60f8      	str	r0, [r7, #12]
 800d34c:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 800d350:	4631      	mov	r1, r6
 800d352:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800d356:	4650      	mov	r0, sl
 800d358:	fb00 f001 	mul.w	r0, r0, r1
 800d35c:	4659      	mov	r1, fp
 800d35e:	462c      	mov	r4, r5
 800d360:	fb04 f101 	mul.w	r1, r4, r1
 800d364:	4401      	add	r1, r0
 800d366:	4628      	mov	r0, r5
 800d368:	4654      	mov	r4, sl
 800d36a:	fba0 8904 	umull	r8, r9, r0, r4
 800d36e:	4449      	add	r1, r9
 800d370:	4689      	mov	r9, r1
 800d372:	eb12 0108 	adds.w	r1, r2, r8
 800d376:	6039      	str	r1, [r7, #0]
 800d378:	eb43 0309 	adc.w	r3, r3, r9
 800d37c:	607b      	str	r3, [r7, #4]
 800d37e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d382:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d386:	e943 1202 	strd	r1, r2, [r3, #-8]
    result = (int32_t)(mult.long_long >> 31);
 800d38a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d38e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d392:	f04f 0200 	mov.w	r2, #0
 800d396:	f04f 0300 	mov.w	r3, #0
 800d39a:	0fc2      	lsrs	r2, r0, #31
 800d39c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800d3a0:	17cb      	asrs	r3, r1, #31
 800d3a2:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800d3a6:	f2a1 5144 	subw	r1, r1, #1348	; 0x544
 800d3aa:	4613      	mov	r3, r2
 800d3ac:	600b      	str	r3, [r1, #0]
    return result;
 800d3ae:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d3b2:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 800d3b6:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800d3b8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d3bc:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	dc06      	bgt.n	800d3d4 <arm_nn_vec_mat_mult_t_s8+0x2a8c>
 800d3c6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d3ca:	f5a3 63a7 	sub.w	r3, r3, #1336	; 0x538
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	425b      	negs	r3, r3
 800d3d2:	e000      	b.n	800d3d6 <arm_nn_vec_mat_mult_t_s8+0x2a8e>
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d3da:	f5a2 62a9 	sub.w	r2, r2, #1352	; 0x548
 800d3de:	6011      	str	r1, [r2, #0]
 800d3e0:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d3e4:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 800d3e8:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800d3ea:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d3ee:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800d3f6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d3fa:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 800d3fe:	2201      	movs	r2, #1
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	409a      	lsls	r2, r3
 800d404:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d408:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 800d40c:	3a01      	subs	r2, #1
 800d40e:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 800d410:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d414:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800d418:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d41c:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 800d420:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d424:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 800d428:	6809      	ldr	r1, [r1, #0]
 800d42a:	6812      	ldr	r2, [r2, #0]
 800d42c:	400a      	ands	r2, r1
 800d42e:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 800d430:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d434:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800d438:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d43c:	f5a2 61a9 	sub.w	r1, r2, #1352	; 0x548
 800d440:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d444:	f2a2 524c 	subw	r2, r2, #1356	; 0x54c
 800d448:	6809      	ldr	r1, [r1, #0]
 800d44a:	6812      	ldr	r2, [r2, #0]
 800d44c:	fa41 f202 	asr.w	r2, r1, r2
 800d450:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 800d452:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d456:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 800d45a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d45e:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 800d462:	6812      	ldr	r2, [r2, #0]
 800d464:	1052      	asrs	r2, r2, #1
 800d466:	601a      	str	r2, [r3, #0]
    if (result < 0)
 800d468:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d46c:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	2b00      	cmp	r3, #0
 800d474:	da0a      	bge.n	800d48c <arm_nn_vec_mat_mult_t_s8+0x2b44>
        threshold++;
 800d476:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d47a:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 800d47e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d482:	f2a2 525c 	subw	r2, r2, #1372	; 0x55c
 800d486:	6812      	ldr	r2, [r2, #0]
 800d488:	3201      	adds	r2, #1
 800d48a:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 800d48c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d490:	f5a3 62ab 	sub.w	r2, r3, #1368	; 0x558
 800d494:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d498:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 800d49c:	6812      	ldr	r2, [r2, #0]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	dd0a      	ble.n	800d4ba <arm_nn_vec_mat_mult_t_s8+0x2b72>
        result++;
 800d4a4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d4a8:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800d4ac:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800d4b0:	f5a2 62aa 	sub.w	r2, r2, #1360	; 0x550
 800d4b4:	6812      	ldr	r2, [r2, #0]
 800d4b6:	3201      	adds	r2, #1
 800d4b8:	601a      	str	r2, [r3, #0]
    return result;
 800d4ba:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d4be:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 800d4c2:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800d4c4:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 800d4c6:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Add offset
        res00 += dst_offset;
 800d4ca:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800d4ce:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 800d4d2:	4413      	add	r3, r2
 800d4d4:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        // Clamp the result
        res00 = MAX(res00, activation_min);
 800d4d8:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800d4dc:	f8d7 366c 	ldr.w	r3, [r7, #1644]	; 0x66c
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	bfb8      	it	lt
 800d4e4:	4613      	movlt	r3, r2
 800d4e6:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
        res00 = MIN(res00, activation_max);
 800d4ea:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800d4ee:	f8d7 3670 	ldr.w	r3, [r7, #1648]	; 0x670
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	bfa8      	it	ge
 800d4f6:	4613      	movge	r3, r2
 800d4f8:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c

        *dst = (q7_t)res00;
 800d4fc:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 800d500:	b25a      	sxtb	r2, r3
 800d502:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800d506:	f5a3 63bd 	sub.w	r3, r3, #1512	; 0x5e8
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	701a      	strb	r2, [r3, #0]

        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
 800d50e:	2300      	movs	r3, #0
}
 800d510:	4618      	mov	r0, r3
 800d512:	f507 67c6 	add.w	r7, r7, #1584	; 0x630
 800d516:	46bd      	mov	sp, r7
 800d518:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d51c:	4770      	bx	lr
	...

0800d520 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 800d520:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d524:	f6ad 1da8 	subw	sp, sp, #2472	; 0x9a8
 800d528:	af00      	add	r7, sp, #0
 800d52a:	f607 14a8 	addw	r4, r7, #2472	; 0x9a8
 800d52e:	f5a4 7471 	sub.w	r4, r4, #964	; 0x3c4
 800d532:	6020      	str	r0, [r4, #0]
 800d534:	f607 10a8 	addw	r0, r7, #2472	; 0x9a8
 800d538:	f5a0 7072 	sub.w	r0, r0, #968	; 0x3c8
 800d53c:	6001      	str	r1, [r0, #0]
 800d53e:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 800d542:	f5a1 7173 	sub.w	r1, r1, #972	; 0x3cc
 800d546:	600a      	str	r2, [r1, #0]
 800d548:	f607 12a8 	addw	r2, r7, #2472	; 0x9a8
 800d54c:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 800d550:	6013      	str	r3, [r2, #0]

        input += row_size;
        output += row_size;
    }
#else
    const int32_t mask = (1 << shift);
 800d552:	2201      	movs	r2, #1
 800d554:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	; 0x9c8
 800d558:	fa02 f303 	lsl.w	r3, r2, r3
 800d55c:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994

    int32_t col = 0;
 800d560:	2300      	movs	r3, #0
 800d562:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 800d566:	2300      	movs	r3, #0
 800d568:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 800d56c:	f004 b863 	b.w	8011636 <arm_softmax_s8+0x4116>
    {
        // Find the maximum value in order to ensure numerical stability
        int8_t max = *input;
 800d570:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d574:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	781b      	ldrb	r3, [r3, #0]
 800d57c:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f

        for (col = 1; col < row_size; ++col)
 800d580:	2301      	movs	r3, #1
 800d582:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 800d586:	e015      	b.n	800d5b4 <arm_softmax_s8+0x94>
        {
            max = MAX(max, input[col]);
 800d588:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 800d58c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d590:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4413      	add	r3, r2
 800d598:	f993 2000 	ldrsb.w	r2, [r3]
 800d59c:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	bfb8      	it	lt
 800d5a4:	4613      	movlt	r3, r2
 800d5a6:	f887 399f 	strb.w	r3, [r7, #2463]	; 0x99f
        for (col = 1; col < row_size; ++col)
 800d5aa:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 800d5b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d5b8:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 800d5bc:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	dbe0      	blt.n	800d588 <arm_softmax_s8+0x68>
        }

        int32_t diff = 0;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
        int32_t sum = 0;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998

        for (col = 0; col < row_size; ++col)
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 800d5d8:	f001 ba24 	b.w	800ea24 <arm_softmax_s8+0x1504>
        {
            diff = input[col] - max;
 800d5dc:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 800d5e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d5e4:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	4413      	add	r3, r2
 800d5ec:	f993 3000 	ldrsb.w	r3, [r3]
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 800d5f6:	1ad3      	subs	r3, r2, r3
 800d5f8:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 800d5fc:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 800d600:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 800d604:	429a      	cmp	r2, r3
 800d606:	f2c1 8208 	blt.w	800ea1a <arm_softmax_s8+0x14fa>
            {
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 800d60a:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 800d60e:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 800d612:	fb03 f202 	mul.w	r2, r3, r2
 800d616:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d61a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800d61e:	601a      	str	r2, [r3, #0]
 800d620:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d624:	f5a3 72b0 	sub.w	r2, r3, #352	; 0x160
 800d628:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d62c:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800d634:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d638:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 800d63c:	2300      	movs	r3, #0
 800d63e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800d640:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d644:	f04f 0300 	mov.w	r3, #0
 800d648:	f607 0138 	addw	r1, r7, #2104	; 0x838
 800d64c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800d650:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d654:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	0fdb      	lsrs	r3, r3, #31
 800d65c:	b2da      	uxtb	r2, r3
 800d65e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d662:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	0fdb      	lsrs	r3, r3, #31
 800d66a:	b2db      	uxtb	r3, r3
 800d66c:	4053      	eors	r3, r2
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	2b00      	cmp	r3, #0
 800d672:	d012      	beq.n	800d69a <arm_softmax_s8+0x17a>
        mult = 1 - mult;
 800d674:	f607 0338 	addw	r3, r7, #2104	; 0x838
 800d678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d67c:	2100      	movs	r1, #0
 800d67e:	f1d2 0001 	rsbs	r0, r2, #1
 800d682:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
 800d686:	eb61 0303 	sbc.w	r3, r1, r3
 800d68a:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 800d68e:	e9d7 34cc 	ldrd	r3, r4, [r7, #816]	; 0x330
 800d692:	f607 0238 	addw	r2, r7, #2104	; 0x838
 800d696:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800d69a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d69e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	17da      	asrs	r2, r3, #31
 800d6a6:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 800d6aa:	f8c7 2464 	str.w	r2, [r7, #1124]	; 0x464
 800d6ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d6b2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	17da      	asrs	r2, r3, #31
 800d6ba:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 800d6be:	f8c7 245c 	str.w	r2, [r7, #1116]	; 0x45c
 800d6c2:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800d6c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d6ca:	460b      	mov	r3, r1
 800d6cc:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 800d6d0:	fb02 f203 	mul.w	r2, r2, r3
 800d6d4:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 800d6d8:	f507 648c 	add.w	r4, r7, #1120	; 0x460
 800d6dc:	e9c4 0100 	strd	r0, r1, [r4]
 800d6e0:	4601      	mov	r1, r0
 800d6e2:	fb01 f303 	mul.w	r3, r1, r3
 800d6e6:	4413      	add	r3, r2
 800d6e8:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 800d6ec:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 800d6f0:	fba2 1201 	umull	r1, r2, r2, r1
 800d6f4:	f8c7 258c 	str.w	r2, [r7, #1420]	; 0x58c
 800d6f8:	460a      	mov	r2, r1
 800d6fa:	f8c7 2588 	str.w	r2, [r7, #1416]	; 0x588
 800d6fe:	f8d7 258c 	ldr.w	r2, [r7, #1420]	; 0x58c
 800d702:	4413      	add	r3, r2
 800d704:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 800d708:	f607 0338 	addw	r3, r7, #2104	; 0x838
 800d70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d710:	f8d7 1588 	ldr.w	r1, [r7, #1416]	; 0x588
 800d714:	1851      	adds	r1, r2, r1
 800d716:	f8c7 1328 	str.w	r1, [r7, #808]	; 0x328
 800d71a:	f8d7 158c 	ldr.w	r1, [r7, #1420]	; 0x58c
 800d71e:	414b      	adcs	r3, r1
 800d720:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 800d724:	e9d7 34ca 	ldrd	r3, r4, [r7, #808]	; 0x328
 800d728:	f607 0238 	addw	r2, r7, #2104	; 0x838
 800d72c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800d730:	f607 0338 	addw	r3, r7, #2104	; 0x838
 800d734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	da0a      	bge.n	800d752 <arm_softmax_s8+0x232>
 800d73c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d740:	1851      	adds	r1, r2, r1
 800d742:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 800d746:	f143 0300 	adc.w	r3, r3, #0
 800d74a:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 800d74e:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 800d752:	f04f 0000 	mov.w	r0, #0
 800d756:	f04f 0100 	mov.w	r1, #0
 800d75a:	0fd0      	lsrs	r0, r2, #31
 800d75c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800d760:	17d9      	asrs	r1, r3, #31
 800d762:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d766:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 800d76a:	4603      	mov	r3, r0
 800d76c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800d76e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d772:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 800d776:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d77a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800d77e:	6812      	ldr	r2, [r2, #0]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	429a      	cmp	r2, r3
 800d784:	d10e      	bne.n	800d7a4 <arm_softmax_s8+0x284>
 800d786:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d78a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d794:	d106      	bne.n	800d7a4 <arm_softmax_s8+0x284>
        result = Q31_MAX;
 800d796:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d79a:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 800d79e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d7a2:	6013      	str	r3, [r2, #0]
    return result;
 800d7a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800d7a8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968

// @note The following functions are used only for softmax layer, scaled bits = 5 assumed

__STATIC_FORCEINLINE int32_t arm_nn_exp_on_negative_values(int32_t val)
{
    int32_t mask = 0;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    int32_t shift = 24;
 800d7b8:	2318      	movs	r3, #24
 800d7ba:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960

    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 800d7be:	2201      	movs	r2, #1
 800d7c0:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 800d7c4:	fa02 f303 	lsl.w	r3, r2, r3
 800d7c8:	1e5a      	subs	r2, r3, #1
 800d7ca:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 800d7ce:	ea02 0103 	and.w	r1, r2, r3
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 800d7d8:	fa02 f303 	lsl.w	r3, r2, r3
 800d7dc:	1acb      	subs	r3, r1, r3
 800d7de:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
    const int32_t remainder = val_mod_minus_quarter - val;
 800d7e2:	f8d7 295c 	ldr.w	r2, [r7, #2396]	; 0x95c
 800d7e6:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 800d7ea:	1ad3      	subs	r3, r2, r3
 800d7ec:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 800d7f0:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 800d7f4:	015b      	lsls	r3, r3, #5
 800d7f6:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 800d7fa:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 800d7fe:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 800d802:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
 800d806:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 800d80a:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
    q31_t result = 0;
 800d80e:	2300      	movs	r3, #0
 800d810:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    q63_t mult = 1 << 30;
 800d814:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d818:	f04f 0300 	mov.w	r3, #0
 800d81c:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 800d820:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800d824:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 800d828:	0fdb      	lsrs	r3, r3, #31
 800d82a:	b2da      	uxtb	r2, r3
 800d82c:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 800d830:	0fdb      	lsrs	r3, r3, #31
 800d832:	b2db      	uxtb	r3, r3
 800d834:	4053      	eors	r3, r2
 800d836:	b2db      	uxtb	r3, r3
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d012      	beq.n	800d862 <arm_softmax_s8+0x342>
        mult = 1 - mult;
 800d83c:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800d840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d844:	2100      	movs	r1, #0
 800d846:	f1d2 0001 	rsbs	r0, r2, #1
 800d84a:	f8c7 0318 	str.w	r0, [r7, #792]	; 0x318
 800d84e:	eb61 0303 	sbc.w	r3, r1, r3
 800d852:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 800d856:	e9d7 34c6 	ldrd	r3, r4, [r7, #792]	; 0x318
 800d85a:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800d85e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800d862:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 800d866:	17da      	asrs	r2, r3, #31
 800d868:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 800d86c:	f8c7 24dc 	str.w	r2, [r7, #1244]	; 0x4dc
 800d870:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 800d874:	17da      	asrs	r2, r3, #31
 800d876:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
 800d87a:	f8c7 24d4 	str.w	r2, [r7, #1236]	; 0x4d4
 800d87e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800d882:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d886:	460b      	mov	r3, r1
 800d888:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 800d88c:	fb02 f203 	mul.w	r2, r2, r3
 800d890:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 800d894:	f507 649b 	add.w	r4, r7, #1240	; 0x4d8
 800d898:	e9c4 0100 	strd	r0, r1, [r4]
 800d89c:	4601      	mov	r1, r0
 800d89e:	fb01 f303 	mul.w	r3, r1, r3
 800d8a2:	4413      	add	r3, r2
 800d8a4:	f8d7 24d8 	ldr.w	r2, [r7, #1240]	; 0x4d8
 800d8a8:	f8d7 14d0 	ldr.w	r1, [r7, #1232]	; 0x4d0
 800d8ac:	fba2 8901 	umull	r8, r9, r2, r1
 800d8b0:	444b      	add	r3, r9
 800d8b2:	4699      	mov	r9, r3
 800d8b4:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800d8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8bc:	eb12 0108 	adds.w	r1, r2, r8
 800d8c0:	f8c7 1310 	str.w	r1, [r7, #784]	; 0x310
 800d8c4:	eb43 0309 	adc.w	r3, r3, r9
 800d8c8:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 800d8cc:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 800d8d0:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800d8d4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800d8d8:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800d8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	da0a      	bge.n	800d8fa <arm_softmax_s8+0x3da>
 800d8e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d8e8:	1851      	adds	r1, r2, r1
 800d8ea:	f8c7 1308 	str.w	r1, [r7, #776]	; 0x308
 800d8ee:	f143 0300 	adc.w	r3, r3, #0
 800d8f2:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 800d8f6:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 800d8fa:	f04f 0000 	mov.w	r0, #0
 800d8fe:	f04f 0100 	mov.w	r1, #0
 800d902:	0fd0      	lsrs	r0, r2, #31
 800d904:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800d908:	17d9      	asrs	r1, r3, #31
 800d90a:	4602      	mov	r2, r0
 800d90c:	460b      	mov	r3, r1
 800d90e:	4613      	mov	r3, r2
 800d910:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800d914:	f8d7 2950 	ldr.w	r2, [r7, #2384]	; 0x950
 800d918:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d108      	bne.n	800d932 <arm_softmax_s8+0x412>
 800d920:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 800d924:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d928:	d103      	bne.n	800d932 <arm_softmax_s8+0x412>
        result = Q31_MAX;
 800d92a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d92e:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
    return result;
 800d932:	f8d7 3948 	ldr.w	r3, [r7, #2376]	; 0x948
    const int32_t x2 = MUL_SAT(x, x);
 800d936:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 800d93a:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 800d93e:	f8c7 3938 	str.w	r3, [r7, #2360]	; 0x938
 800d942:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 800d946:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
    q31_t result = 0;
 800d94a:	2300      	movs	r3, #0
 800d94c:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    q63_t mult = 1 << 30;
 800d950:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d954:	f04f 0300 	mov.w	r3, #0
 800d958:	f607 1128 	addw	r1, r7, #2344	; 0x928
 800d95c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800d960:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 800d964:	0fdb      	lsrs	r3, r3, #31
 800d966:	b2da      	uxtb	r2, r3
 800d968:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 800d96c:	0fdb      	lsrs	r3, r3, #31
 800d96e:	b2db      	uxtb	r3, r3
 800d970:	4053      	eors	r3, r2
 800d972:	b2db      	uxtb	r3, r3
 800d974:	2b00      	cmp	r3, #0
 800d976:	d012      	beq.n	800d99e <arm_softmax_s8+0x47e>
        mult = 1 - mult;
 800d978:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800d97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d980:	2100      	movs	r1, #0
 800d982:	f1d2 0001 	rsbs	r0, r2, #1
 800d986:	f8c7 0300 	str.w	r0, [r7, #768]	; 0x300
 800d98a:	eb61 0303 	sbc.w	r3, r1, r3
 800d98e:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 800d992:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 800d996:	f607 1228 	addw	r2, r7, #2344	; 0x928
 800d99a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800d99e:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 800d9a2:	17da      	asrs	r2, r3, #31
 800d9a4:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 800d9a8:	f8c7 24cc 	str.w	r2, [r7, #1228]	; 0x4cc
 800d9ac:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 800d9b0:	17da      	asrs	r2, r3, #31
 800d9b2:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 800d9b6:	f8c7 24c4 	str.w	r2, [r7, #1220]	; 0x4c4
 800d9ba:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800d9be:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d9c2:	460b      	mov	r3, r1
 800d9c4:	f8d7 24c0 	ldr.w	r2, [r7, #1216]	; 0x4c0
 800d9c8:	fb02 f203 	mul.w	r2, r2, r3
 800d9cc:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 800d9d0:	f507 6499 	add.w	r4, r7, #1224	; 0x4c8
 800d9d4:	e9c4 0100 	strd	r0, r1, [r4]
 800d9d8:	4601      	mov	r1, r0
 800d9da:	fb01 f303 	mul.w	r3, r1, r3
 800d9de:	4413      	add	r3, r2
 800d9e0:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 800d9e4:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 800d9e8:	fba2 ab01 	umull	sl, fp, r2, r1
 800d9ec:	445b      	add	r3, fp
 800d9ee:	469b      	mov	fp, r3
 800d9f0:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800d9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f8:	eb12 010a 	adds.w	r1, r2, sl
 800d9fc:	f8c7 12f8 	str.w	r1, [r7, #760]	; 0x2f8
 800da00:	eb43 030b 	adc.w	r3, r3, fp
 800da04:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 800da08:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 800da0c:	f607 1228 	addw	r2, r7, #2344	; 0x928
 800da10:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800da14:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800da18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	da0a      	bge.n	800da36 <arm_softmax_s8+0x516>
 800da20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800da24:	1851      	adds	r1, r2, r1
 800da26:	f8c7 12f0 	str.w	r1, [r7, #752]	; 0x2f0
 800da2a:	f143 0300 	adc.w	r3, r3, #0
 800da2e:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 800da32:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 800da36:	f04f 0000 	mov.w	r0, #0
 800da3a:	f04f 0100 	mov.w	r1, #0
 800da3e:	0fd0      	lsrs	r0, r2, #31
 800da40:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800da44:	17d9      	asrs	r1, r3, #31
 800da46:	4602      	mov	r2, r0
 800da48:	460b      	mov	r3, r1
 800da4a:	4613      	mov	r3, r2
 800da4c:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800da50:	f8d7 2938 	ldr.w	r2, [r7, #2360]	; 0x938
 800da54:	f8d7 3934 	ldr.w	r3, [r7, #2356]	; 0x934
 800da58:	429a      	cmp	r2, r3
 800da5a:	d108      	bne.n	800da6e <arm_softmax_s8+0x54e>
 800da5c:	f8d7 3938 	ldr.w	r3, [r7, #2360]	; 0x938
 800da60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800da64:	d103      	bne.n	800da6e <arm_softmax_s8+0x54e>
        result = Q31_MAX;
 800da66:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800da6a:	f8c7 3930 	str.w	r3, [r7, #2352]	; 0x930
    return result;
 800da6e:	f8d7 3930 	ldr.w	r3, [r7, #2352]	; 0x930
 800da72:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
    q31_t result = 0;
 800da76:	2300      	movs	r3, #0
 800da78:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    const q31_t remainder_mask = (1 << exponent) - 1;
 800da7c:	2304      	movs	r3, #4
 800da7e:	3b01      	subs	r3, #1
 800da80:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
    int32_t remainder = remainder_mask & dividend;
 800da84:	f8d7 2924 	ldr.w	r2, [r7, #2340]	; 0x924
 800da88:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 800da8c:	4013      	ands	r3, r2
 800da8e:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
    result = dividend >> exponent;
 800da92:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 800da96:	109b      	asrs	r3, r3, #2
 800da98:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    q31_t threshold = remainder_mask >> 1;
 800da9c:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 800daa0:	105b      	asrs	r3, r3, #1
 800daa2:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (result < 0)
 800daa6:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800daaa:	2b00      	cmp	r3, #0
 800daac:	da04      	bge.n	800dab8 <arm_softmax_s8+0x598>
        threshold++;
 800daae:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 800dab2:	3301      	adds	r3, #1
 800dab4:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
    if (remainder > threshold)
 800dab8:	f8d7 2918 	ldr.w	r2, [r7, #2328]	; 0x918
 800dabc:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 800dac0:	429a      	cmp	r2, r3
 800dac2:	dd04      	ble.n	800dace <arm_softmax_s8+0x5ae>
        result++;
 800dac4:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800dac8:	3301      	adds	r3, #1
 800daca:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
    return result;
 800dace:	f8d7 4920 	ldr.w	r4, [r7, #2336]	; 0x920
 800dad2:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 800dad6:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 800dada:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 800dade:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
    q31_t result = 0;
 800dae2:	2300      	movs	r3, #0
 800dae4:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    q63_t mult = 1 << 30;
 800dae8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800daec:	f04f 0300 	mov.w	r3, #0
 800daf0:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 800daf4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800daf8:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 800dafc:	0fdb      	lsrs	r3, r3, #31
 800dafe:	b2da      	uxtb	r2, r3
 800db00:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 800db04:	0fdb      	lsrs	r3, r3, #31
 800db06:	b2db      	uxtb	r3, r3
 800db08:	4053      	eors	r3, r2
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d012      	beq.n	800db36 <arm_softmax_s8+0x616>
        mult = 1 - mult;
 800db10:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800db14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db18:	2100      	movs	r1, #0
 800db1a:	f1d2 0001 	rsbs	r0, r2, #1
 800db1e:	f8c7 02e8 	str.w	r0, [r7, #744]	; 0x2e8
 800db22:	eb61 0303 	sbc.w	r3, r1, r3
 800db26:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800db2a:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 800db2e:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 800db32:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 800db36:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 800db3a:	17da      	asrs	r2, r3, #31
 800db3c:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 800db40:	f8c7 24bc 	str.w	r2, [r7, #1212]	; 0x4bc
 800db44:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 800db48:	17da      	asrs	r2, r3, #31
 800db4a:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
 800db4e:	f8c7 24b4 	str.w	r2, [r7, #1204]	; 0x4b4
 800db52:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800db56:	e9d3 0100 	ldrd	r0, r1, [r3]
 800db5a:	460b      	mov	r3, r1
 800db5c:	f8d7 24b0 	ldr.w	r2, [r7, #1200]	; 0x4b0
 800db60:	fb02 f203 	mul.w	r2, r2, r3
 800db64:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 800db68:	f507 6c97 	add.w	ip, r7, #1208	; 0x4b8
 800db6c:	e9cc 0100 	strd	r0, r1, [ip]
 800db70:	4601      	mov	r1, r0
 800db72:	fb01 f303 	mul.w	r3, r1, r3
 800db76:	4413      	add	r3, r2
 800db78:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	; 0x4b8
 800db7c:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	; 0x4b0
 800db80:	fba2 5601 	umull	r5, r6, r2, r1
 800db84:	4433      	add	r3, r6
 800db86:	461e      	mov	r6, r3
 800db88:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800db8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db90:	1951      	adds	r1, r2, r5
 800db92:	f8c7 12e0 	str.w	r1, [r7, #736]	; 0x2e0
 800db96:	4173      	adcs	r3, r6
 800db98:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800db9c:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 800dba0:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 800dba4:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 800dba8:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800dbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	da0a      	bge.n	800dbca <arm_softmax_s8+0x6aa>
 800dbb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dbb8:	1851      	adds	r1, r2, r1
 800dbba:	f8c7 12d8 	str.w	r1, [r7, #728]	; 0x2d8
 800dbbe:	f143 0300 	adc.w	r3, r3, #0
 800dbc2:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 800dbc6:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 800dbca:	f04f 0000 	mov.w	r0, #0
 800dbce:	f04f 0100 	mov.w	r1, #0
 800dbd2:	0fd0      	lsrs	r0, r2, #31
 800dbd4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800dbd8:	17d9      	asrs	r1, r3, #31
 800dbda:	4602      	mov	r2, r0
 800dbdc:	460b      	mov	r3, r1
 800dbde:	4613      	mov	r3, r2
 800dbe0:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800dbe4:	f8d7 2910 	ldr.w	r2, [r7, #2320]	; 0x910
 800dbe8:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d108      	bne.n	800dc02 <arm_softmax_s8+0x6e2>
 800dbf0:	f8d7 3910 	ldr.w	r3, [r7, #2320]	; 0x910
 800dbf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dbf8:	d103      	bne.n	800dc02 <arm_softmax_s8+0x6e2>
        result = Q31_MAX;
 800dbfa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800dbfe:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
    return result;
 800dc02:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908

    int32_t result = 1895147668 +
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 800dc06:	4423      	add	r3, r4
 800dc08:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
    q31_t result = 0;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    q63_t mult = 1 << 30;
 800dc12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800dc16:	f04f 0300 	mov.w	r3, #0
 800dc1a:	f507 610f 	add.w	r1, r7, #2288	; 0x8f0
 800dc1e:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800dc22:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 800dc26:	0fdb      	lsrs	r3, r3, #31
 800dc28:	b2da      	uxtb	r2, r3
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	4053      	eors	r3, r2
 800dc2e:	b2db      	uxtb	r3, r3
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d012      	beq.n	800dc5a <arm_softmax_s8+0x73a>
        mult = 1 - mult;
 800dc34:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800dc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc3c:	2100      	movs	r1, #0
 800dc3e:	f1d2 0001 	rsbs	r0, r2, #1
 800dc42:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
 800dc46:	eb61 0303 	sbc.w	r3, r1, r3
 800dc4a:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 800dc4e:	e9d7 34b4 	ldrd	r3, r4, [r7, #720]	; 0x2d0
 800dc52:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 800dc56:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800dc5a:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 800dc5e:	17da      	asrs	r2, r3, #31
 800dc60:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 800dc64:	f8c7 24ac 	str.w	r2, [r7, #1196]	; 0x4ac
 800dc68:	a3f0      	add	r3, pc, #960	; (adr r3, 800e02c <arm_softmax_s8+0xb0c>)
 800dc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc6e:	f8d7 14ac 	ldr.w	r1, [r7, #1196]	; 0x4ac
 800dc72:	fb02 f001 	mul.w	r0, r2, r1
 800dc76:	f8d7 14a8 	ldr.w	r1, [r7, #1192]	; 0x4a8
 800dc7a:	fb01 f103 	mul.w	r1, r1, r3
 800dc7e:	4401      	add	r1, r0
 800dc80:	f8d7 04a8 	ldr.w	r0, [r7, #1192]	; 0x4a8
 800dc84:	fba0 2302 	umull	r2, r3, r0, r2
 800dc88:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 800dc8c:	4613      	mov	r3, r2
 800dc8e:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
 800dc92:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 800dc96:	18cb      	adds	r3, r1, r3
 800dc98:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 800dc9c:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800dca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca4:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	; 0x5d0
 800dca8:	1851      	adds	r1, r2, r1
 800dcaa:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 800dcae:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	; 0x5d4
 800dcb2:	414b      	adcs	r3, r1
 800dcb4:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 800dcb8:	e9d7 34b2 	ldrd	r3, r4, [r7, #712]	; 0x2c8
 800dcbc:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 800dcc0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800dcc4:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800dcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	da0a      	bge.n	800dce6 <arm_softmax_s8+0x7c6>
 800dcd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dcd4:	1851      	adds	r1, r2, r1
 800dcd6:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 800dcda:	f143 0300 	adc.w	r3, r3, #0
 800dcde:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 800dce2:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 800dce6:	f04f 0000 	mov.w	r0, #0
 800dcea:	f04f 0100 	mov.w	r1, #0
 800dcee:	0fd0      	lsrs	r0, r2, #31
 800dcf0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800dcf4:	17d9      	asrs	r1, r3, #31
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	4613      	mov	r3, r2
 800dcfc:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800dd00:	f8d7 28fc 	ldr.w	r2, [r7, #2300]	; 0x8fc
 800dd04:	4bc6      	ldr	r3, [pc, #792]	; (800e020 <arm_softmax_s8+0xb00>)
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d108      	bne.n	800dd1c <arm_softmax_s8+0x7fc>
 800dd0a:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 800dd0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd12:	d103      	bne.n	800dd1c <arm_softmax_s8+0x7fc>
        result = Q31_MAX;
 800dd14:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800dd18:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
    return result;
 800dd1c:	f8d7 28f8 	ldr.w	r2, [r7, #2296]	; 0x8f8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 800dd20:	f8d7 393c 	ldr.w	r3, [r7, #2364]	; 0x93c
 800dd24:	4413      	add	r3, r2
 800dd26:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
    q31_t result = 0;
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    const q31_t remainder_mask = (1 << exponent) - 1;
 800dd30:	2302      	movs	r3, #2
 800dd32:	3b01      	subs	r3, #1
 800dd34:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
    int32_t remainder = remainder_mask & dividend;
 800dd38:	f8d7 28ec 	ldr.w	r2, [r7, #2284]	; 0x8ec
 800dd3c:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 800dd40:	4013      	ands	r3, r2
 800dd42:	f8c7 38e0 	str.w	r3, [r7, #2272]	; 0x8e0
    result = dividend >> exponent;
 800dd46:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	; 0x8ec
 800dd4a:	105b      	asrs	r3, r3, #1
 800dd4c:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    q31_t threshold = remainder_mask >> 1;
 800dd50:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 800dd54:	105b      	asrs	r3, r3, #1
 800dd56:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (result < 0)
 800dd5a:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	da04      	bge.n	800dd6c <arm_softmax_s8+0x84c>
        threshold++;
 800dd62:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 800dd66:	3301      	adds	r3, #1
 800dd68:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
    if (remainder > threshold)
 800dd6c:	f8d7 28e0 	ldr.w	r2, [r7, #2272]	; 0x8e0
 800dd70:	f8d7 38dc 	ldr.w	r3, [r7, #2268]	; 0x8dc
 800dd74:	429a      	cmp	r2, r3
 800dd76:	dd04      	ble.n	800dd82 <arm_softmax_s8+0x862>
        result++;
 800dd78:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	; 0x8e8
 800dd7c:	3301      	adds	r3, #1
 800dd7e:	f8c7 38e8 	str.w	r3, [r7, #2280]	; 0x8e8
    return result;
 800dd82:	f8d7 28e8 	ldr.w	r2, [r7, #2280]	; 0x8e8
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 800dd86:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
 800dd8a:	4413      	add	r3, r2
 800dd8c:	f8c7 38d8 	str.w	r3, [r7, #2264]	; 0x8d8
    q31_t result = 0;
 800dd90:	2300      	movs	r3, #0
 800dd92:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    q63_t mult = 1 << 30;
 800dd96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800dd9a:	f04f 0300 	mov.w	r3, #0
 800dd9e:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 800dda2:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800dda6:	2200      	movs	r2, #0
 800dda8:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 800ddac:	0fdb      	lsrs	r3, r3, #31
 800ddae:	b2db      	uxtb	r3, r3
 800ddb0:	4053      	eors	r3, r2
 800ddb2:	b2db      	uxtb	r3, r3
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d012      	beq.n	800ddde <arm_softmax_s8+0x8be>
        mult = 1 - mult;
 800ddb8:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800ddbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc0:	2100      	movs	r1, #0
 800ddc2:	f1d2 0001 	rsbs	r0, r2, #1
 800ddc6:	f8c7 02b8 	str.w	r0, [r7, #696]	; 0x2b8
 800ddca:	eb61 0303 	sbc.w	r3, r1, r3
 800ddce:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 800ddd2:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	; 0x2b8
 800ddd6:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800ddda:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800ddde:	a18c      	add	r1, pc, #560	; (adr r1, 800e010 <arm_softmax_s8+0xaf0>)
 800dde0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dde4:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 800dde8:	17da      	asrs	r2, r3, #31
 800ddea:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 800ddee:	f8c7 24a4 	str.w	r2, [r7, #1188]	; 0x4a4
 800ddf2:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 800ddf6:	fb03 f201 	mul.w	r2, r3, r1
 800ddfa:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 800ddfe:	fb00 f303 	mul.w	r3, r0, r3
 800de02:	4413      	add	r3, r2
 800de04:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 800de08:	fba0 1202 	umull	r1, r2, r0, r2
 800de0c:	f8c7 25cc 	str.w	r2, [r7, #1484]	; 0x5cc
 800de10:	460a      	mov	r2, r1
 800de12:	f8c7 25c8 	str.w	r2, [r7, #1480]	; 0x5c8
 800de16:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 800de1a:	4413      	add	r3, r2
 800de1c:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 800de20:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800de24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de28:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800de2c:	1851      	adds	r1, r2, r1
 800de2e:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 800de32:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 800de36:	414b      	adcs	r3, r1
 800de38:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 800de3c:	e9d7 34ac 	ldrd	r3, r4, [r7, #688]	; 0x2b0
 800de40:	f607 02c8 	addw	r2, r7, #2248	; 0x8c8
 800de44:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800de48:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 800de4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de50:	2b00      	cmp	r3, #0
 800de52:	da0a      	bge.n	800de6a <arm_softmax_s8+0x94a>
 800de54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800de58:	1851      	adds	r1, r2, r1
 800de5a:	f8c7 12a8 	str.w	r1, [r7, #680]	; 0x2a8
 800de5e:	f143 0300 	adc.w	r3, r3, #0
 800de62:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 800de66:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800de6a:	f04f 0000 	mov.w	r0, #0
 800de6e:	f04f 0100 	mov.w	r1, #0
 800de72:	0fd0      	lsrs	r0, r2, #31
 800de74:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800de78:	17d9      	asrs	r1, r3, #31
 800de7a:	4602      	mov	r2, r0
 800de7c:	460b      	mov	r3, r1
 800de7e:	4613      	mov	r3, r2
 800de80:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
    return result;
 800de84:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	; 0x8d4
    int32_t result = 1895147668 +
 800de88:	4b66      	ldr	r3, [pc, #408]	; (800e024 <arm_softmax_s8+0xb04>)
 800de8a:	4413      	add	r3, r2
 800de8c:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    {                                                                                                                  \
        mask = MASK_IF_NON_ZERO(remainder & (1 << shift++));                                                           \
        result = SELECT_USING_MASK(mask, MUL_SAT(result, x), result);                                                  \
    }

    SELECT_IF_NON_ZERO(1672461947)
 800de90:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800de94:	1c53      	adds	r3, r2, #1
 800de96:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800de9a:	2301      	movs	r3, #1
 800de9c:	fa03 f202 	lsl.w	r2, r3, r2
 800dea0:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800dea4:	4013      	ands	r3, r2
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d002      	beq.n	800deb0 <arm_softmax_s8+0x990>
 800deaa:	f04f 33ff 	mov.w	r3, #4294967295
 800deae:	e000      	b.n	800deb2 <arm_softmax_s8+0x992>
 800deb0:	2300      	movs	r3, #0
 800deb2:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800deb6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800deba:	f8c7 38c0 	str.w	r3, [r7, #2240]	; 0x8c0
    q31_t result = 0;
 800debe:	2300      	movs	r3, #0
 800dec0:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    q63_t mult = 1 << 30;
 800dec4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800dec8:	f04f 0300 	mov.w	r3, #0
 800decc:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 800ded0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800ded4:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800ded8:	0fdb      	lsrs	r3, r3, #31
 800deda:	b2da      	uxtb	r2, r3
 800dedc:	2300      	movs	r3, #0
 800dede:	4053      	eors	r3, r2
 800dee0:	b2db      	uxtb	r3, r3
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d012      	beq.n	800df0c <arm_softmax_s8+0x9ec>
        mult = 1 - mult;
 800dee6:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800deea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deee:	2100      	movs	r1, #0
 800def0:	f1d2 0001 	rsbs	r0, r2, #1
 800def4:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
 800def8:	eb61 0303 	sbc.w	r3, r1, r3
 800defc:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 800df00:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 800df04:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800df08:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800df0c:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800df10:	17da      	asrs	r2, r3, #31
 800df12:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
 800df16:	f8c7 249c 	str.w	r2, [r7, #1180]	; 0x49c
 800df1a:	a33f      	add	r3, pc, #252	; (adr r3, 800e018 <arm_softmax_s8+0xaf8>)
 800df1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df20:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 800df24:	fb02 f001 	mul.w	r0, r2, r1
 800df28:	f8d7 1498 	ldr.w	r1, [r7, #1176]	; 0x498
 800df2c:	fb01 f103 	mul.w	r1, r1, r3
 800df30:	4401      	add	r1, r0
 800df32:	f8d7 0498 	ldr.w	r0, [r7, #1176]	; 0x498
 800df36:	fba0 2302 	umull	r2, r3, r0, r2
 800df3a:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800df3e:	4613      	mov	r3, r2
 800df40:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
 800df44:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 800df48:	18cb      	adds	r3, r1, r3
 800df4a:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800df4e:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800df52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df56:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800df5a:	1851      	adds	r1, r2, r1
 800df5c:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 800df60:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 800df64:	414b      	adcs	r3, r1
 800df66:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 800df6a:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 800df6e:	f507 620b 	add.w	r2, r7, #2224	; 0x8b0
 800df72:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800df76:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800df7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	da0a      	bge.n	800df98 <arm_softmax_s8+0xa78>
 800df82:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800df86:	1851      	adds	r1, r2, r1
 800df88:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 800df8c:	f143 0300 	adc.w	r3, r3, #0
 800df90:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800df94:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 800df98:	f04f 0000 	mov.w	r0, #0
 800df9c:	f04f 0100 	mov.w	r1, #0
 800dfa0:	0fd0      	lsrs	r0, r2, #31
 800dfa2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800dfa6:	17d9      	asrs	r1, r3, #31
 800dfa8:	4602      	mov	r2, r0
 800dfaa:	460b      	mov	r3, r1
 800dfac:	4613      	mov	r3, r2
 800dfae:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800dfb2:	f8d7 28c0 	ldr.w	r2, [r7, #2240]	; 0x8c0
 800dfb6:	4b1c      	ldr	r3, [pc, #112]	; (800e028 <arm_softmax_s8+0xb08>)
 800dfb8:	429a      	cmp	r2, r3
 800dfba:	d108      	bne.n	800dfce <arm_softmax_s8+0xaae>
 800dfbc:	f8d7 38c0 	ldr.w	r3, [r7, #2240]	; 0x8c0
 800dfc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dfc4:	d103      	bne.n	800dfce <arm_softmax_s8+0xaae>
        result = Q31_MAX;
 800dfc6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800dfca:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
    return result;
 800dfce:	f8d7 28bc 	ldr.w	r2, [r7, #2236]	; 0x8bc
    SELECT_IF_NON_ZERO(1672461947)
 800dfd2:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800dfd6:	ea02 0103 	and.w	r1, r2, r3
 800dfda:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800dfde:	43da      	mvns	r2, r3
 800dfe0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800dfe4:	4013      	ands	r3, r2
 800dfe6:	404b      	eors	r3, r1
 800dfe8:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(1302514674)
 800dfec:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800dff0:	1c53      	adds	r3, r2, #1
 800dff2:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800dff6:	2301      	movs	r3, #1
 800dff8:	fa03 f202 	lsl.w	r2, r3, r2
 800dffc:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800e000:	4013      	ands	r3, r2
 800e002:	2b00      	cmp	r3, #0
 800e004:	d016      	beq.n	800e034 <arm_softmax_s8+0xb14>
 800e006:	f04f 33ff 	mov.w	r3, #4294967295
 800e00a:	e014      	b.n	800e036 <arm_softmax_s8+0xb16>
 800e00c:	f3af 8000 	nop.w
 800e010:	70f5a894 	.word	0x70f5a894
 800e014:	00000000 	.word	0x00000000
 800e018:	63afbe7b 	.word	0x63afbe7b
 800e01c:	00000000 	.word	0x00000000
 800e020:	2aaaaaab 	.word	0x2aaaaaab
 800e024:	70f5a894 	.word	0x70f5a894
 800e028:	63afbe7b 	.word	0x63afbe7b
 800e02c:	2aaaaaab 	.word	0x2aaaaaab
 800e030:	00000000 	.word	0x00000000
 800e034:	2300      	movs	r3, #0
 800e036:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800e03a:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800e03e:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
    q31_t result = 0;
 800e042:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e046:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 800e04a:	2300      	movs	r3, #0
 800e04c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800e04e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e052:	f04f 0300 	mov.w	r3, #0
 800e056:	f507 610a 	add.w	r1, r7, #2208	; 0x8a0
 800e05a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800e05e:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 800e062:	0fdb      	lsrs	r3, r3, #31
 800e064:	b2da      	uxtb	r2, r3
 800e066:	2300      	movs	r3, #0
 800e068:	4053      	eors	r3, r2
 800e06a:	b2db      	uxtb	r3, r3
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d012      	beq.n	800e096 <arm_softmax_s8+0xb76>
        mult = 1 - mult;
 800e070:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800e074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e078:	2100      	movs	r1, #0
 800e07a:	f1d2 0001 	rsbs	r0, r2, #1
 800e07e:	f8c7 0288 	str.w	r0, [r7, #648]	; 0x288
 800e082:	eb61 0303 	sbc.w	r3, r1, r3
 800e086:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800e08a:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	; 0x288
 800e08e:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 800e092:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800e096:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 800e09a:	17da      	asrs	r2, r3, #31
 800e09c:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 800e0a0:	f8c7 2494 	str.w	r2, [r7, #1172]	; 0x494
 800e0a4:	a3a8      	add	r3, pc, #672	; (adr r3, 800e348 <arm_softmax_s8+0xe28>)
 800e0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0aa:	f8d7 1494 	ldr.w	r1, [r7, #1172]	; 0x494
 800e0ae:	fb02 f001 	mul.w	r0, r2, r1
 800e0b2:	f8d7 1490 	ldr.w	r1, [r7, #1168]	; 0x490
 800e0b6:	fb01 f103 	mul.w	r1, r1, r3
 800e0ba:	4401      	add	r1, r0
 800e0bc:	f8d7 0490 	ldr.w	r0, [r7, #1168]	; 0x490
 800e0c0:	fba0 2302 	umull	r2, r3, r0, r2
 800e0c4:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 800e0c8:	4613      	mov	r3, r2
 800e0ca:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800e0ce:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 800e0d2:	18cb      	adds	r3, r1, r3
 800e0d4:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 800e0d8:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800e0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e0:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800e0e4:	1851      	adds	r1, r2, r1
 800e0e6:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 800e0ea:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 800e0ee:	414b      	adcs	r3, r1
 800e0f0:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800e0f4:	e9d7 34a0 	ldrd	r3, r4, [r7, #640]	; 0x280
 800e0f8:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 800e0fc:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800e100:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800e104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	da0a      	bge.n	800e122 <arm_softmax_s8+0xc02>
 800e10c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e110:	1851      	adds	r1, r2, r1
 800e112:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 800e116:	f143 0300 	adc.w	r3, r3, #0
 800e11a:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 800e11e:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800e122:	f04f 0000 	mov.w	r0, #0
 800e126:	f04f 0100 	mov.w	r1, #0
 800e12a:	0fd0      	lsrs	r0, r2, #31
 800e12c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800e130:	17d9      	asrs	r1, r3, #31
 800e132:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e136:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 800e13a:	4603      	mov	r3, r0
 800e13c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800e13e:	f8d7 28ac 	ldr.w	r2, [r7, #2220]	; 0x8ac
 800e142:	4b7f      	ldr	r3, [pc, #508]	; (800e340 <arm_softmax_s8+0xe20>)
 800e144:	429a      	cmp	r2, r3
 800e146:	d10b      	bne.n	800e160 <arm_softmax_s8+0xc40>
 800e148:	f8d7 38ac 	ldr.w	r3, [r7, #2220]	; 0x8ac
 800e14c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e150:	d106      	bne.n	800e160 <arm_softmax_s8+0xc40>
        result = Q31_MAX;
 800e152:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e156:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 800e15a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e15e:	6013      	str	r3, [r2, #0]
    return result;
 800e160:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e164:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e168:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 800e16a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800e16e:	ea02 0103 	and.w	r1, r2, r3
 800e172:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800e176:	43da      	mvns	r2, r3
 800e178:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800e17c:	4013      	ands	r3, r2
 800e17e:	404b      	eors	r3, r1
 800e180:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(790015084)
 800e184:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800e188:	1c53      	adds	r3, r2, #1
 800e18a:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800e18e:	2301      	movs	r3, #1
 800e190:	fa03 f202 	lsl.w	r2, r3, r2
 800e194:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800e198:	4013      	ands	r3, r2
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d002      	beq.n	800e1a4 <arm_softmax_s8+0xc84>
 800e19e:	f04f 33ff 	mov.w	r3, #4294967295
 800e1a2:	e000      	b.n	800e1a6 <arm_softmax_s8+0xc86>
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800e1aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e1ae:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 800e1b2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800e1b6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800e1b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e1bc:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800e1c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e1c8:	f04f 0300 	mov.w	r3, #0
 800e1cc:	f507 6109 	add.w	r1, r7, #2192	; 0x890
 800e1d0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800e1d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e1d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	0fdb      	lsrs	r3, r3, #31
 800e1e0:	b2da      	uxtb	r2, r3
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	4053      	eors	r3, r2
 800e1e6:	b2db      	uxtb	r3, r3
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d012      	beq.n	800e212 <arm_softmax_s8+0xcf2>
        mult = 1 - mult;
 800e1ec:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800e1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f4:	2100      	movs	r1, #0
 800e1f6:	f1d2 0001 	rsbs	r0, r2, #1
 800e1fa:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
 800e1fe:	eb61 0303 	sbc.w	r3, r1, r3
 800e202:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 800e206:	e9d7 349c 	ldrd	r3, r4, [r7, #624]	; 0x270
 800e20a:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 800e20e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800e212:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e216:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	17da      	asrs	r2, r3, #31
 800e21e:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 800e222:	f8c7 248c 	str.w	r2, [r7, #1164]	; 0x48c
 800e226:	a344      	add	r3, pc, #272	; (adr r3, 800e338 <arm_softmax_s8+0xe18>)
 800e228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e22c:	f8d7 148c 	ldr.w	r1, [r7, #1164]	; 0x48c
 800e230:	fb02 f001 	mul.w	r0, r2, r1
 800e234:	f8d7 1488 	ldr.w	r1, [r7, #1160]	; 0x488
 800e238:	fb01 f103 	mul.w	r1, r1, r3
 800e23c:	4401      	add	r1, r0
 800e23e:	f8d7 0488 	ldr.w	r0, [r7, #1160]	; 0x488
 800e242:	fba0 2302 	umull	r2, r3, r0, r2
 800e246:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 800e24a:	4613      	mov	r3, r2
 800e24c:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 800e250:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 800e254:	18cb      	adds	r3, r1, r3
 800e256:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 800e25a:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800e25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e262:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800e266:	1851      	adds	r1, r2, r1
 800e268:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 800e26c:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 800e270:	414b      	adcs	r3, r1
 800e272:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 800e276:	e9d7 349a 	ldrd	r3, r4, [r7, #616]	; 0x268
 800e27a:	f507 6209 	add.w	r2, r7, #2192	; 0x890
 800e27e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800e282:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800e286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	da0a      	bge.n	800e2a4 <arm_softmax_s8+0xd84>
 800e28e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e292:	1851      	adds	r1, r2, r1
 800e294:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 800e298:	f143 0300 	adc.w	r3, r3, #0
 800e29c:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 800e2a0:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 800e2a4:	f04f 0000 	mov.w	r0, #0
 800e2a8:	f04f 0100 	mov.w	r1, #0
 800e2ac:	0fd0      	lsrs	r0, r2, #31
 800e2ae:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800e2b2:	17d9      	asrs	r1, r3, #31
 800e2b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e2b8:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800e2bc:	4603      	mov	r3, r0
 800e2be:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800e2c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e2c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800e2c8:	681a      	ldr	r2, [r3, #0]
 800e2ca:	4b1e      	ldr	r3, [pc, #120]	; (800e344 <arm_softmax_s8+0xe24>)
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d10e      	bne.n	800e2ee <arm_softmax_s8+0xdce>
 800e2d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e2d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e2de:	d106      	bne.n	800e2ee <arm_softmax_s8+0xdce>
        result = Q31_MAX;
 800e2e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e2e4:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800e2e8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e2ec:	6013      	str	r3, [r2, #0]
    return result;
 800e2ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e2f2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800e2f6:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 800e2f8:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800e2fc:	ea02 0103 	and.w	r1, r2, r3
 800e300:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800e304:	43da      	mvns	r2, r3
 800e306:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800e30a:	4013      	ands	r3, r2
 800e30c:	404b      	eors	r3, r1
 800e30e:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(290630308)
 800e312:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800e316:	1c53      	adds	r3, r2, #1
 800e318:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800e31c:	2301      	movs	r3, #1
 800e31e:	fa03 f202 	lsl.w	r2, r3, r2
 800e322:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800e326:	4013      	ands	r3, r2
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d011      	beq.n	800e350 <arm_softmax_s8+0xe30>
 800e32c:	f04f 33ff 	mov.w	r3, #4294967295
 800e330:	e00f      	b.n	800e352 <arm_softmax_s8+0xe32>
 800e332:	bf00      	nop
 800e334:	f3af 8000 	nop.w
 800e338:	2f16ac6c 	.word	0x2f16ac6c
 800e33c:	00000000 	.word	0x00000000
 800e340:	4da2cbf2 	.word	0x4da2cbf2
 800e344:	2f16ac6c 	.word	0x2f16ac6c
 800e348:	4da2cbf2 	.word	0x4da2cbf2
 800e34c:	00000000 	.word	0x00000000
 800e350:	2300      	movs	r3, #0
 800e352:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800e356:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e35a:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800e35e:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800e362:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800e364:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e368:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 800e36c:	2300      	movs	r3, #0
 800e36e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800e370:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e374:	f04f 0300 	mov.w	r3, #0
 800e378:	f507 6108 	add.w	r1, r7, #2176	; 0x880
 800e37c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800e380:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e384:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	0fdb      	lsrs	r3, r3, #31
 800e38c:	b2da      	uxtb	r2, r3
 800e38e:	2300      	movs	r3, #0
 800e390:	4053      	eors	r3, r2
 800e392:	b2db      	uxtb	r3, r3
 800e394:	2b00      	cmp	r3, #0
 800e396:	d012      	beq.n	800e3be <arm_softmax_s8+0xe9e>
        mult = 1 - mult;
 800e398:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800e39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3a0:	2100      	movs	r1, #0
 800e3a2:	f1d2 0001 	rsbs	r0, r2, #1
 800e3a6:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
 800e3aa:	eb61 0303 	sbc.w	r3, r1, r3
 800e3ae:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800e3b2:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 800e3b6:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 800e3ba:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800e3be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e3c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	17da      	asrs	r2, r3, #31
 800e3ca:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 800e3ce:	f8c7 2484 	str.w	r2, [r7, #1156]	; 0x484
 800e3d2:	a3ab      	add	r3, pc, #684	; (adr r3, 800e680 <arm_softmax_s8+0x1160>)
 800e3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d8:	f8d7 1484 	ldr.w	r1, [r7, #1156]	; 0x484
 800e3dc:	fb02 f001 	mul.w	r0, r2, r1
 800e3e0:	f8d7 1480 	ldr.w	r1, [r7, #1152]	; 0x480
 800e3e4:	fb01 f103 	mul.w	r1, r1, r3
 800e3e8:	4401      	add	r1, r0
 800e3ea:	f8d7 0480 	ldr.w	r0, [r7, #1152]	; 0x480
 800e3ee:	fba0 2302 	umull	r2, r3, r0, r2
 800e3f2:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 800e3f6:	4613      	mov	r3, r2
 800e3f8:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
 800e3fc:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 800e400:	18cb      	adds	r3, r1, r3
 800e402:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 800e406:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800e40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e40e:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	; 0x5a8
 800e412:	1851      	adds	r1, r2, r1
 800e414:	f8c7 1250 	str.w	r1, [r7, #592]	; 0x250
 800e418:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	; 0x5ac
 800e41c:	414b      	adcs	r3, r1
 800e41e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800e422:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 800e426:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 800e42a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800e42e:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800e432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e436:	2b00      	cmp	r3, #0
 800e438:	da0a      	bge.n	800e450 <arm_softmax_s8+0xf30>
 800e43a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e43e:	1851      	adds	r1, r2, r1
 800e440:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 800e444:	f143 0300 	adc.w	r3, r3, #0
 800e448:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800e44c:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 800e450:	f04f 0000 	mov.w	r0, #0
 800e454:	f04f 0100 	mov.w	r1, #0
 800e458:	0fd0      	lsrs	r0, r2, #31
 800e45a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800e45e:	17d9      	asrs	r1, r3, #31
 800e460:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e464:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 800e468:	4603      	mov	r3, r0
 800e46a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800e46c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e470:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800e474:	681a      	ldr	r2, [r3, #0]
 800e476:	4b80      	ldr	r3, [pc, #512]	; (800e678 <arm_softmax_s8+0x1158>)
 800e478:	429a      	cmp	r2, r3
 800e47a:	d10e      	bne.n	800e49a <arm_softmax_s8+0xf7a>
 800e47c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e480:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e48a:	d106      	bne.n	800e49a <arm_softmax_s8+0xf7a>
        result = Q31_MAX;
 800e48c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e490:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 800e494:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e498:	6013      	str	r3, [r2, #0]
    return result;
 800e49a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e49e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800e4a2:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 800e4a4:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800e4a8:	ea02 0103 	and.w	r1, r2, r3
 800e4ac:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800e4b0:	43da      	mvns	r2, r3
 800e4b2:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800e4b6:	4013      	ands	r3, r2
 800e4b8:	404b      	eors	r3, r1
 800e4ba:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(39332535)
 800e4be:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800e4c2:	1c53      	adds	r3, r2, #1
 800e4c4:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	fa03 f202 	lsl.w	r2, r3, r2
 800e4ce:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800e4d2:	4013      	ands	r3, r2
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d002      	beq.n	800e4de <arm_softmax_s8+0xfbe>
 800e4d8:	f04f 33ff 	mov.w	r3, #4294967295
 800e4dc:	e000      	b.n	800e4e0 <arm_softmax_s8+0xfc0>
 800e4de:	2300      	movs	r3, #0
 800e4e0:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800e4e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e4e8:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 800e4ec:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800e4f0:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800e4f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e4f6:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800e4fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e502:	f04f 0300 	mov.w	r3, #0
 800e506:	f507 6107 	add.w	r1, r7, #2160	; 0x870
 800e50a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800e50e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e512:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	0fdb      	lsrs	r3, r3, #31
 800e51a:	b2da      	uxtb	r2, r3
 800e51c:	2300      	movs	r3, #0
 800e51e:	4053      	eors	r3, r2
 800e520:	b2db      	uxtb	r3, r3
 800e522:	2b00      	cmp	r3, #0
 800e524:	d012      	beq.n	800e54c <arm_softmax_s8+0x102c>
        mult = 1 - mult;
 800e526:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800e52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e52e:	2100      	movs	r1, #0
 800e530:	f1d2 0001 	rsbs	r0, r2, #1
 800e534:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
 800e538:	eb61 0303 	sbc.w	r3, r1, r3
 800e53c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800e540:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 800e544:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 800e548:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800e54c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e550:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	17da      	asrs	r2, r3, #31
 800e558:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 800e55c:	f8c7 247c 	str.w	r2, [r7, #1148]	; 0x47c
 800e560:	a343      	add	r3, pc, #268	; (adr r3, 800e670 <arm_softmax_s8+0x1150>)
 800e562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e566:	f8d7 147c 	ldr.w	r1, [r7, #1148]	; 0x47c
 800e56a:	fb02 f001 	mul.w	r0, r2, r1
 800e56e:	f8d7 1478 	ldr.w	r1, [r7, #1144]	; 0x478
 800e572:	fb01 f103 	mul.w	r1, r1, r3
 800e576:	4401      	add	r1, r0
 800e578:	f8d7 0478 	ldr.w	r0, [r7, #1144]	; 0x478
 800e57c:	fba0 2302 	umull	r2, r3, r0, r2
 800e580:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 800e584:	4613      	mov	r3, r2
 800e586:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 800e58a:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 800e58e:	18cb      	adds	r3, r1, r3
 800e590:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 800e594:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800e598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e59c:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 800e5a0:	1851      	adds	r1, r2, r1
 800e5a2:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 800e5a6:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 800e5aa:	414b      	adcs	r3, r1
 800e5ac:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 800e5b0:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 800e5b4:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 800e5b8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800e5bc:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800e5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	da0a      	bge.n	800e5de <arm_softmax_s8+0x10be>
 800e5c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e5cc:	1851      	adds	r1, r2, r1
 800e5ce:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 800e5d2:	f143 0300 	adc.w	r3, r3, #0
 800e5d6:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 800e5da:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 800e5de:	f04f 0000 	mov.w	r0, #0
 800e5e2:	f04f 0100 	mov.w	r1, #0
 800e5e6:	0fd0      	lsrs	r0, r2, #31
 800e5e8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800e5ec:	17d9      	asrs	r1, r3, #31
 800e5ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e5f2:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800e5fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e5fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e602:	681a      	ldr	r2, [r3, #0]
 800e604:	4b1d      	ldr	r3, [pc, #116]	; (800e67c <arm_softmax_s8+0x115c>)
 800e606:	429a      	cmp	r2, r3
 800e608:	d10e      	bne.n	800e628 <arm_softmax_s8+0x1108>
 800e60a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e60e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e618:	d106      	bne.n	800e628 <arm_softmax_s8+0x1108>
        result = Q31_MAX;
 800e61a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e61e:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 800e622:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e626:	6013      	str	r3, [r2, #0]
    return result;
 800e628:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e62c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e630:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 800e632:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800e636:	ea02 0103 	and.w	r1, r2, r3
 800e63a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800e63e:	43da      	mvns	r2, r3
 800e640:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800e644:	4013      	ands	r3, r2
 800e646:	404b      	eors	r3, r1
 800e648:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(720401)
 800e64c:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800e650:	1c53      	adds	r3, r2, #1
 800e652:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800e656:	2301      	movs	r3, #1
 800e658:	fa03 f202 	lsl.w	r2, r3, r2
 800e65c:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800e660:	4013      	ands	r3, r2
 800e662:	2b00      	cmp	r3, #0
 800e664:	d010      	beq.n	800e688 <arm_softmax_s8+0x1168>
 800e666:	f04f 33ff 	mov.w	r3, #4294967295
 800e66a:	e00e      	b.n	800e68a <arm_softmax_s8+0x116a>
 800e66c:	f3af 8000 	nop.w
 800e670:	02582ab7 	.word	0x02582ab7
 800e674:	00000000 	.word	0x00000000
 800e678:	1152aaa4 	.word	0x1152aaa4
 800e67c:	02582ab7 	.word	0x02582ab7
 800e680:	1152aaa4 	.word	0x1152aaa4
 800e684:	00000000 	.word	0x00000000
 800e688:	2300      	movs	r3, #0
 800e68a:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800e68e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e692:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800e696:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800e69a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800e69c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e6a0:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800e6a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e6ac:	f04f 0300 	mov.w	r3, #0
 800e6b0:	f507 6106 	add.w	r1, r7, #2144	; 0x860
 800e6b4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800e6b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e6bc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	0fdb      	lsrs	r3, r3, #31
 800e6c4:	b2da      	uxtb	r2, r3
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	4053      	eors	r3, r2
 800e6ca:	b2db      	uxtb	r3, r3
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d012      	beq.n	800e6f6 <arm_softmax_s8+0x11d6>
        mult = 1 - mult;
 800e6d0:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800e6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d8:	2100      	movs	r1, #0
 800e6da:	f1d2 0001 	rsbs	r0, r2, #1
 800e6de:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228
 800e6e2:	eb61 0303 	sbc.w	r3, r1, r3
 800e6e6:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800e6ea:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 800e6ee:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 800e6f2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800e6f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e6fa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	17da      	asrs	r2, r3, #31
 800e702:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 800e706:	f8c7 2474 	str.w	r2, [r7, #1140]	; 0x474
 800e70a:	4ad3      	ldr	r2, [pc, #844]	; (800ea58 <arm_softmax_s8+0x1538>)
 800e70c:	f04f 0300 	mov.w	r3, #0
 800e710:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 800e714:	fb02 f001 	mul.w	r0, r2, r1
 800e718:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 800e71c:	fb01 f103 	mul.w	r1, r1, r3
 800e720:	4401      	add	r1, r0
 800e722:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 800e726:	fba0 2302 	umull	r2, r3, r0, r2
 800e72a:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 800e72e:	4613      	mov	r3, r2
 800e730:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
 800e734:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 800e738:	18cb      	adds	r3, r1, r3
 800e73a:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 800e73e:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800e742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e746:	f8d7 1598 	ldr.w	r1, [r7, #1432]	; 0x598
 800e74a:	1851      	adds	r1, r2, r1
 800e74c:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 800e750:	f8d7 159c 	ldr.w	r1, [r7, #1436]	; 0x59c
 800e754:	414b      	adcs	r3, r1
 800e756:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800e75a:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 800e75e:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 800e762:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800e766:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800e76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	da0a      	bge.n	800e788 <arm_softmax_s8+0x1268>
 800e772:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e776:	1851      	adds	r1, r2, r1
 800e778:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 800e77c:	f143 0300 	adc.w	r3, r3, #0
 800e780:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800e784:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 800e788:	f04f 0000 	mov.w	r0, #0
 800e78c:	f04f 0100 	mov.w	r1, #0
 800e790:	0fd0      	lsrs	r0, r2, #31
 800e792:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800e796:	17d9      	asrs	r1, r3, #31
 800e798:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e79c:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800e7a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e7a8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800e7ac:	681a      	ldr	r2, [r3, #0]
 800e7ae:	4baa      	ldr	r3, [pc, #680]	; (800ea58 <arm_softmax_s8+0x1538>)
 800e7b0:	429a      	cmp	r2, r3
 800e7b2:	d10e      	bne.n	800e7d2 <arm_softmax_s8+0x12b2>
 800e7b4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e7b8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e7c2:	d106      	bne.n	800e7d2 <arm_softmax_s8+0x12b2>
        result = Q31_MAX;
 800e7c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e7c8:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 800e7cc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e7d0:	6013      	str	r3, [r2, #0]
    return result;
 800e7d2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e7d6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800e7da:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 800e7dc:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800e7e0:	ea02 0103 	and.w	r1, r2, r3
 800e7e4:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800e7e8:	43da      	mvns	r2, r3
 800e7ea:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800e7ee:	4013      	ands	r3, r2
 800e7f0:	404b      	eors	r3, r1
 800e7f2:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
    SELECT_IF_NON_ZERO(242)
 800e7f6:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 800e7fa:	1c53      	adds	r3, r2, #1
 800e7fc:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 800e800:	2301      	movs	r3, #1
 800e802:	fa03 f202 	lsl.w	r2, r3, r2
 800e806:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 800e80a:	4013      	ands	r3, r2
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d002      	beq.n	800e816 <arm_softmax_s8+0x12f6>
 800e810:	f04f 33ff 	mov.w	r3, #4294967295
 800e814:	e000      	b.n	800e818 <arm_softmax_s8+0x12f8>
 800e816:	2300      	movs	r3, #0
 800e818:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 800e81c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e820:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 800e824:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800e828:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800e82a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e82e:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 800e832:	2300      	movs	r3, #0
 800e834:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800e836:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e83a:	f04f 0300 	mov.w	r3, #0
 800e83e:	f507 6105 	add.w	r1, r7, #2128	; 0x850
 800e842:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800e846:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e84a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	0fdb      	lsrs	r3, r3, #31
 800e852:	b2da      	uxtb	r2, r3
 800e854:	2300      	movs	r3, #0
 800e856:	4053      	eors	r3, r2
 800e858:	b2db      	uxtb	r3, r3
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d012      	beq.n	800e884 <arm_softmax_s8+0x1364>
        mult = 1 - mult;
 800e85e:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800e862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e866:	2100      	movs	r1, #0
 800e868:	f1d2 0001 	rsbs	r0, r2, #1
 800e86c:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
 800e870:	eb61 0303 	sbc.w	r3, r1, r3
 800e874:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800e878:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 800e87c:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 800e880:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800e884:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e888:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	17da      	asrs	r2, r3, #31
 800e890:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 800e894:	f8c7 246c 	str.w	r2, [r7, #1132]	; 0x46c
 800e898:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 800e89c:	f04f 0300 	mov.w	r3, #0
 800e8a0:	f8d7 146c 	ldr.w	r1, [r7, #1132]	; 0x46c
 800e8a4:	fb02 f001 	mul.w	r0, r2, r1
 800e8a8:	f8d7 1468 	ldr.w	r1, [r7, #1128]	; 0x468
 800e8ac:	fb01 f103 	mul.w	r1, r1, r3
 800e8b0:	4401      	add	r1, r0
 800e8b2:	f8d7 0468 	ldr.w	r0, [r7, #1128]	; 0x468
 800e8b6:	fba0 2302 	umull	r2, r3, r0, r2
 800e8ba:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 800e8be:	4613      	mov	r3, r2
 800e8c0:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 800e8c4:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 800e8c8:	18cb      	adds	r3, r1, r3
 800e8ca:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 800e8ce:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800e8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d6:	f8d7 1590 	ldr.w	r1, [r7, #1424]	; 0x590
 800e8da:	1851      	adds	r1, r2, r1
 800e8dc:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 800e8e0:	f8d7 1594 	ldr.w	r1, [r7, #1428]	; 0x594
 800e8e4:	414b      	adcs	r3, r1
 800e8e6:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800e8ea:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 800e8ee:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 800e8f2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800e8f6:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800e8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	da0a      	bge.n	800e918 <arm_softmax_s8+0x13f8>
 800e902:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e906:	1851      	adds	r1, r2, r1
 800e908:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200
 800e90c:	f143 0300 	adc.w	r3, r3, #0
 800e910:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800e914:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 800e918:	f04f 0000 	mov.w	r0, #0
 800e91c:	f04f 0100 	mov.w	r1, #0
 800e920:	0fd0      	lsrs	r0, r2, #31
 800e922:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800e926:	17d9      	asrs	r1, r3, #31
 800e928:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e92c:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 800e930:	4603      	mov	r3, r0
 800e932:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800e934:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e938:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	2bf2      	cmp	r3, #242	; 0xf2
 800e940:	d10e      	bne.n	800e960 <arm_softmax_s8+0x1440>
 800e942:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e946:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e950:	d106      	bne.n	800e960 <arm_softmax_s8+0x1440>
        result = Q31_MAX;
 800e952:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e956:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 800e95a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e95e:	6013      	str	r3, [r2, #0]
    return result;
 800e960:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800e964:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800e968:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 800e96a:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800e96e:	ea02 0103 	and.w	r1, r2, r3
 800e972:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800e976:	43da      	mvns	r2, r3
 800e978:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800e97c:	4013      	ands	r3, r2
 800e97e:	404b      	eors	r3, r1
 800e980:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4

#undef SELECT_IF_NON_ZERO

    mask = MASK_IF_ZERO(val);
 800e984:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d102      	bne.n	800e992 <arm_softmax_s8+0x1472>
 800e98c:	f04f 33ff 	mov.w	r3, #4294967295
 800e990:	e000      	b.n	800e994 <arm_softmax_s8+0x1474>
 800e992:	2300      	movs	r3, #0
 800e994:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 800e998:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800e99c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e9a0:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 800e9a4:	43da      	mvns	r2, r3
 800e9a6:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800e9aa:	4013      	ands	r3, r2
 800e9ac:	404b      	eors	r3, r1
 800e9ae:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
    q31_t result = 0;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    const q31_t remainder_mask = (1 << exponent) - 1;
 800e9b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e9bc:	3b01      	subs	r3, #1
 800e9be:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
    int32_t remainder = remainder_mask & dividend;
 800e9c2:	f8d7 297c 	ldr.w	r2, [r7, #2428]	; 0x97c
 800e9c6:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 800e9ca:	4013      	ands	r3, r2
 800e9cc:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
    result = dividend >> exponent;
 800e9d0:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 800e9d4:	131b      	asrs	r3, r3, #12
 800e9d6:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    q31_t threshold = remainder_mask >> 1;
 800e9da:	f8d7 3974 	ldr.w	r3, [r7, #2420]	; 0x974
 800e9de:	105b      	asrs	r3, r3, #1
 800e9e0:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (result < 0)
 800e9e4:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	da04      	bge.n	800e9f6 <arm_softmax_s8+0x14d6>
        threshold++;
 800e9ec:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800e9f0:	3301      	adds	r3, #1
 800e9f2:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
    if (remainder > threshold)
 800e9f6:	f8d7 2970 	ldr.w	r2, [r7, #2416]	; 0x970
 800e9fa:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	dd04      	ble.n	800ea0c <arm_softmax_s8+0x14ec>
        result++;
 800ea02:	f8d7 3978 	ldr.w	r3, [r7, #2424]	; 0x978
 800ea06:	3301      	adds	r3, #1
 800ea08:	f8c7 3978 	str.w	r3, [r7, #2424]	; 0x978
    return result;
 800ea0c:	f8d7 2978 	ldr.w	r2, [r7, #2424]	; 0x978
 800ea10:	f8d7 3998 	ldr.w	r3, [r7, #2456]	; 0x998
 800ea14:	4413      	add	r3, r2
 800ea16:	f8c7 3998 	str.w	r3, [r7, #2456]	; 0x998
        for (col = 0; col < row_size; ++col)
 800ea1a:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 800ea1e:	3301      	adds	r3, #1
 800ea20:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 800ea24:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ea28:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 800ea2c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	429a      	cmp	r2, r3
 800ea34:	f6fe add2 	blt.w	800d5dc <arm_softmax_s8+0xbc>
            }
        }

        const int32_t headroom = __CLZ(sum);
 800ea38:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 800ea3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ea40:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ea44:	601a      	str	r2, [r3, #0]
  if (value == 0U)
 800ea46:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ea4a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d103      	bne.n	800ea5c <arm_softmax_s8+0x153c>
    return 32U;
 800ea54:	2320      	movs	r3, #32
 800ea56:	e009      	b.n	800ea6c <arm_softmax_s8+0x154c>
 800ea58:	000afe11 	.word	0x000afe11
  return __builtin_clz(value);
 800ea5c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ea60:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	fab3 f383 	clz	r3, r3
 800ea6a:	b2db      	uxtb	r3, r3
 800ea6c:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
 800ea70:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 800ea74:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 800ea78:	f8c7 3988 	str.w	r3, [r7, #2440]	; 0x988
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
 800ea7c:	f8d7 2998 	ldr.w	r2, [r7, #2456]	; 0x998
 800ea80:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 800ea84:	fa02 f303 	lsl.w	r3, r2, r3
 800ea88:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 800ea8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ea90:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800ea94:	601a      	str	r2, [r3, #0]
    return result;
}

__STATIC_FORCEINLINE int32_t arm_nn_one_over_one_plus_x_for_x_in_0_1(int32_t val)
{
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
 800ea96:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ea9a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	17da      	asrs	r2, r3, #31
 800eaa2:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 800eaa6:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 800eaaa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800eaae:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 800eab2:	4602      	mov	r2, r0
 800eab4:	18d3      	adds	r3, r2, r3
 800eab6:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800eaba:	460b      	mov	r3, r1
 800eabc:	f143 0300 	adc.w	r3, r3, #0
 800eac0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800eac4:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 800eac8:	f607 0228 	addw	r2, r7, #2088	; 0x828
 800eacc:	e9c2 3400 	strd	r3, r4, [r2]
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 800ead0:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800ead4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	db04      	blt.n	800eae6 <arm_softmax_s8+0x15c6>
 800eadc:	f04f 0001 	mov.w	r0, #1
 800eae0:	f04f 0100 	mov.w	r1, #0
 800eae4:	e003      	b.n	800eaee <arm_softmax_s8+0x15ce>
 800eae6:	f04f 30ff 	mov.w	r0, #4294967295
 800eaea:	f04f 31ff 	mov.w	r1, #4294967295
 800eaee:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800eaf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf6:	1884      	adds	r4, r0, r2
 800eaf8:	f8c7 4338 	str.w	r4, [r7, #824]	; 0x338
 800eafc:	eb41 0303 	adc.w	r3, r1, r3
 800eb00:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800eb04:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 800eb08:	460b      	mov	r3, r1
 800eb0a:	0fdb      	lsrs	r3, r3, #31
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 800eb12:	f8c7 234c 	str.w	r2, [r7, #844]	; 0x34c
 800eb16:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 800eb1a:	4602      	mov	r2, r0
 800eb1c:	189b      	adds	r3, r3, r2
 800eb1e:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800eb22:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800eb26:	460a      	mov	r2, r1
 800eb28:	4153      	adcs	r3, r2
 800eb2a:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800eb2e:	f04f 0200 	mov.w	r2, #0
 800eb32:	f04f 0300 	mov.w	r3, #0
 800eb36:	f8d7 1350 	ldr.w	r1, [r7, #848]	; 0x350
 800eb3a:	084a      	lsrs	r2, r1, #1
 800eb3c:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 800eb40:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800eb44:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 800eb48:	104b      	asrs	r3, r1, #1
 800eb4a:	4610      	mov	r0, r2
 800eb4c:	4619      	mov	r1, r3
 800eb4e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eb52:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 800eb56:	4603      	mov	r3, r0
 800eb58:	6013      	str	r3, [r2, #0]
 800eb5a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eb5e:	f5a3 72c4 	sub.w	r2, r3, #392	; 0x188
 800eb62:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eb66:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800eb6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eb72:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 800eb76:	2300      	movs	r3, #0
 800eb78:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800eb7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800eb7e:	f04f 0300 	mov.w	r3, #0
 800eb82:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 800eb86:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800eb8a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eb8e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	0fdb      	lsrs	r3, r3, #31
 800eb96:	b2da      	uxtb	r2, r3
 800eb98:	2301      	movs	r3, #1
 800eb9a:	4053      	eors	r3, r2
 800eb9c:	b2db      	uxtb	r3, r3
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d012      	beq.n	800ebc8 <arm_softmax_s8+0x16a8>
        mult = 1 - mult;
 800eba2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800eba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebaa:	2100      	movs	r1, #0
 800ebac:	f1d2 0001 	rsbs	r0, r2, #1
 800ebb0:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
 800ebb4:	eb61 0303 	sbc.w	r3, r1, r3
 800ebb8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800ebbc:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 800ebc0:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800ebc4:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800ebc8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ebcc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	17da      	asrs	r2, r3, #31
 800ebd4:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 800ebd8:	f8c7 2454 	str.w	r2, [r7, #1108]	; 0x454
 800ebdc:	f60f 53a0 	addw	r3, pc, #3488	; 0xda0
 800ebe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebe4:	f8d7 1454 	ldr.w	r1, [r7, #1108]	; 0x454
 800ebe8:	fb02 f001 	mul.w	r0, r2, r1
 800ebec:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 800ebf0:	fb01 f103 	mul.w	r1, r1, r3
 800ebf4:	4401      	add	r1, r0
 800ebf6:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 800ebfa:	fba0 2302 	umull	r2, r3, r0, r2
 800ebfe:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800ec02:	4613      	mov	r3, r2
 800ec04:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
 800ec08:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 800ec0c:	18cb      	adds	r3, r1, r3
 800ec0e:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800ec12:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800ec16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec1a:	f8d7 1580 	ldr.w	r1, [r7, #1408]	; 0x580
 800ec1e:	1851      	adds	r1, r2, r1
 800ec20:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 800ec24:	f8d7 1584 	ldr.w	r1, [r7, #1412]	; 0x584
 800ec28:	414b      	adcs	r3, r1
 800ec2a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800ec2e:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 800ec32:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800ec36:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800ec3a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800ec3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	da0a      	bge.n	800ec5c <arm_softmax_s8+0x173c>
 800ec46:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ec4a:	1851      	adds	r1, r2, r1
 800ec4c:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 800ec50:	f143 0300 	adc.w	r3, r3, #0
 800ec54:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800ec58:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800ec5c:	f04f 0000 	mov.w	r0, #0
 800ec60:	f04f 0100 	mov.w	r1, #0
 800ec64:	0fd0      	lsrs	r0, r2, #31
 800ec66:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800ec6a:	17d9      	asrs	r1, r3, #31
 800ec6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ec70:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 800ec74:	4603      	mov	r3, r0
 800ec76:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800ec78:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ec7c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	f113 3f3c 	cmn.w	r3, #1010580540	; 0x3c3c3c3c
 800ec86:	d10e      	bne.n	800eca6 <arm_softmax_s8+0x1786>
 800ec88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ec8c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ec96:	d106      	bne.n	800eca6 <arm_softmax_s8+0x1786>
        result = Q31_MAX;
 800ec98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ec9c:	f5a3 72c6 	sub.w	r2, r3, #396	; 0x18c
 800eca0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800eca4:	6013      	str	r3, [r2, #0]
    return result;
 800eca6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ecaa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800ecae:	6819      	ldr	r1, [r3, #0]
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 800ecb0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ecb4:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800ecb8:	f101 335a 	add.w	r3, r1, #1515870810	; 0x5a5a5a5a
 800ecbc:	6013      	str	r3, [r2, #0]

    const int32_t shift = (1 << 29);
 800ecbe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ecc2:	f5a3 72d0 	sub.w	r2, r3, #416	; 0x1a0
 800ecc6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800ecca:	6013      	str	r3, [r2, #0]
 800eccc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ecd0:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 800ecd4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ecd8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	6013      	str	r3, [r2, #0]
 800ece0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ece4:	f5a3 72d4 	sub.w	r2, r3, #424	; 0x1a8
 800ece8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ecec:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800ecf4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ecf8:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800ed00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ed04:	f04f 0300 	mov.w	r3, #0
 800ed08:	f507 61fe 	add.w	r1, r7, #2032	; 0x7f0
 800ed0c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800ed10:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed14:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	0fdb      	lsrs	r3, r3, #31
 800ed1c:	b2da      	uxtb	r2, r3
 800ed1e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed22:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	0fdb      	lsrs	r3, r3, #31
 800ed2a:	b2db      	uxtb	r3, r3
 800ed2c:	4053      	eors	r3, r2
 800ed2e:	b2db      	uxtb	r3, r3
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d012      	beq.n	800ed5a <arm_softmax_s8+0x183a>
        mult = 1 - mult;
 800ed34:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800ed38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed3c:	2100      	movs	r1, #0
 800ed3e:	f1d2 0001 	rsbs	r0, r2, #1
 800ed42:	f8c7 01d8 	str.w	r0, [r7, #472]	; 0x1d8
 800ed46:	eb61 0303 	sbc.w	r3, r1, r3
 800ed4a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800ed4e:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 800ed52:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800ed56:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800ed5a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed5e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	17da      	asrs	r2, r3, #31
 800ed66:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 800ed6a:	f8c7 244c 	str.w	r2, [r7, #1100]	; 0x44c
 800ed6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ed72:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	17da      	asrs	r2, r3, #31
 800ed7a:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 800ed7e:	f8c7 2444 	str.w	r2, [r7, #1092]	; 0x444
 800ed82:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800ed86:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ed8a:	460b      	mov	r3, r1
 800ed8c:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 800ed90:	fb02 f203 	mul.w	r2, r2, r3
 800ed94:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 800ed98:	f507 6489 	add.w	r4, r7, #1096	; 0x448
 800ed9c:	e9c4 0100 	strd	r0, r1, [r4]
 800eda0:	4601      	mov	r1, r0
 800eda2:	fb01 f303 	mul.w	r3, r1, r3
 800eda6:	4413      	add	r3, r2
 800eda8:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 800edac:	f8d7 1440 	ldr.w	r1, [r7, #1088]	; 0x440
 800edb0:	fba2 1201 	umull	r1, r2, r2, r1
 800edb4:	f8c7 257c 	str.w	r2, [r7, #1404]	; 0x57c
 800edb8:	460a      	mov	r2, r1
 800edba:	f8c7 2578 	str.w	r2, [r7, #1400]	; 0x578
 800edbe:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 800edc2:	4413      	add	r3, r2
 800edc4:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 800edc8:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800edcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd0:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 800edd4:	1851      	adds	r1, r2, r1
 800edd6:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 800edda:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 800edde:	414b      	adcs	r3, r1
 800ede0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800ede4:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 800ede8:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800edec:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800edf0:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800edf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	da0a      	bge.n	800ee12 <arm_softmax_s8+0x18f2>
 800edfc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ee00:	1851      	adds	r1, r2, r1
 800ee02:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 800ee06:	f143 0300 	adc.w	r3, r3, #0
 800ee0a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800ee0e:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800ee12:	f04f 0000 	mov.w	r0, #0
 800ee16:	f04f 0100 	mov.w	r1, #0
 800ee1a:	0fd0      	lsrs	r0, r2, #31
 800ee1c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800ee20:	17d9      	asrs	r1, r3, #31
 800ee22:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee26:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800ee2e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee32:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 800ee36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee3a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800ee3e:	6812      	ldr	r2, [r2, #0]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d10e      	bne.n	800ee64 <arm_softmax_s8+0x1944>
 800ee46:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee4a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ee54:	d106      	bne.n	800ee64 <arm_softmax_s8+0x1944>
        result = Q31_MAX;
 800ee56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee5a:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800ee5e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ee62:	6013      	str	r3, [r2, #0]
    return result;
 800ee64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee68:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800ee6c:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 800ee6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee72:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	1a99      	subs	r1, r3, r2
 800ee7a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee7e:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 800ee82:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee86:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	6013      	str	r3, [r2, #0]
 800ee8e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee92:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800ee96:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 800ee98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ee9c:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 800eea0:	2300      	movs	r3, #0
 800eea2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800eea4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800eea8:	f04f 0300 	mov.w	r3, #0
 800eeac:	f507 61fb 	add.w	r1, r7, #2008	; 0x7d8
 800eeb0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800eeb4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eeb8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	0fdb      	lsrs	r3, r3, #31
 800eec0:	b2da      	uxtb	r2, r3
 800eec2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800eec6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	0fdb      	lsrs	r3, r3, #31
 800eece:	b2db      	uxtb	r3, r3
 800eed0:	4053      	eors	r3, r2
 800eed2:	b2db      	uxtb	r3, r3
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d012      	beq.n	800eefe <arm_softmax_s8+0x19de>
        mult = 1 - mult;
 800eed8:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800eedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee0:	2100      	movs	r1, #0
 800eee2:	f1d2 0001 	rsbs	r0, r2, #1
 800eee6:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
 800eeea:	eb61 0303 	sbc.w	r3, r1, r3
 800eeee:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800eef2:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 800eef6:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800eefa:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800eefe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ef02:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	17da      	asrs	r2, r3, #31
 800ef0a:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 800ef0e:	f8c7 243c 	str.w	r2, [r7, #1084]	; 0x43c
 800ef12:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ef16:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	17da      	asrs	r2, r3, #31
 800ef1e:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 800ef22:	f8c7 2434 	str.w	r2, [r7, #1076]	; 0x434
 800ef26:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800ef2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ef2e:	460b      	mov	r3, r1
 800ef30:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 800ef34:	fb02 f203 	mul.w	r2, r2, r3
 800ef38:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800ef3c:	f507 6487 	add.w	r4, r7, #1080	; 0x438
 800ef40:	e9c4 0100 	strd	r0, r1, [r4]
 800ef44:	4601      	mov	r1, r0
 800ef46:	fb01 f303 	mul.w	r3, r1, r3
 800ef4a:	4413      	add	r3, r2
 800ef4c:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 800ef50:	f8d7 1430 	ldr.w	r1, [r7, #1072]	; 0x430
 800ef54:	fba2 1201 	umull	r1, r2, r2, r1
 800ef58:	f8c7 2574 	str.w	r2, [r7, #1396]	; 0x574
 800ef5c:	460a      	mov	r2, r1
 800ef5e:	f8c7 2570 	str.w	r2, [r7, #1392]	; 0x570
 800ef62:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 800ef66:	4413      	add	r3, r2
 800ef68:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 800ef6c:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800ef70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef74:	f8d7 1570 	ldr.w	r1, [r7, #1392]	; 0x570
 800ef78:	1851      	adds	r1, r2, r1
 800ef7a:	f8c7 11b8 	str.w	r1, [r7, #440]	; 0x1b8
 800ef7e:	f8d7 1574 	ldr.w	r1, [r7, #1396]	; 0x574
 800ef82:	414b      	adcs	r3, r1
 800ef84:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800ef88:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 800ef8c:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800ef90:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800ef94:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800ef98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	da0a      	bge.n	800efb6 <arm_softmax_s8+0x1a96>
 800efa0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800efa4:	1851      	adds	r1, r2, r1
 800efa6:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 800efaa:	f143 0300 	adc.w	r3, r3, #0
 800efae:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800efb2:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 800efb6:	f04f 0000 	mov.w	r0, #0
 800efba:	f04f 0100 	mov.w	r1, #0
 800efbe:	0fd0      	lsrs	r0, r2, #31
 800efc0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800efc4:	17d9      	asrs	r1, r3, #31
 800efc6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800efca:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 800efce:	4603      	mov	r3, r0
 800efd0:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800efd2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800efd6:	f5a3 72de 	sub.w	r2, r3, #444	; 0x1bc
 800efda:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800efde:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800efe2:	6812      	ldr	r2, [r2, #0]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d10e      	bne.n	800f008 <arm_softmax_s8+0x1ae8>
 800efea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800efee:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eff8:	d106      	bne.n	800f008 <arm_softmax_s8+0x1ae8>
        result = Q31_MAX;
 800effa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800effe:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 800f002:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f006:	6013      	str	r3, [r2, #0]
    return result;
 800f008:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f00c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800f010:	681a      	ldr	r2, [r3, #0]
 800f012:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f016:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800f01a:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 800f01c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800f020:	4619      	mov	r1, r3
 800f022:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f026:	f5a3 72ec 	sub.w	r2, r3, #472	; 0x1d8
 800f02a:	1e4b      	subs	r3, r1, #1
 800f02c:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 800f02e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f032:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 800f036:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f03a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	009b      	lsls	r3, r3, #2
 800f042:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 800f044:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f048:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 800f04c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f050:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800f054:	6812      	ldr	r2, [r2, #0]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	429a      	cmp	r2, r3
 800f05a:	dd02      	ble.n	800f062 <arm_softmax_s8+0x1b42>
 800f05c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800f060:	e000      	b.n	800f064 <arm_softmax_s8+0x1b44>
 800f062:	2000      	movs	r0, #0
 800f064:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f068:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 800f06c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f070:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800f074:	6812      	ldr	r2, [r2, #0]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	429a      	cmp	r2, r3
 800f07a:	dd01      	ble.n	800f080 <arm_softmax_s8+0x1b60>
 800f07c:	2200      	movs	r2, #0
 800f07e:	e001      	b.n	800f084 <arm_softmax_s8+0x1b64>
 800f080:	f04f 32ff 	mov.w	r2, #4294967295
 800f084:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f088:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	ea02 0103 	and.w	r1, r2, r3
 800f092:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f096:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 800f09a:	ea81 0300 	eor.w	r3, r1, r0
 800f09e:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 800f0a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f0a4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	425a      	negs	r2, r3
 800f0ac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f0b0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	4293      	cmp	r3, r2
 800f0b8:	da02      	bge.n	800f0c0 <arm_softmax_s8+0x1ba0>
 800f0ba:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800f0be:	e000      	b.n	800f0c2 <arm_softmax_s8+0x1ba2>
 800f0c0:	2000      	movs	r0, #0
 800f0c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f0c6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	425a      	negs	r2, r3
 800f0ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f0d2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	4293      	cmp	r3, r2
 800f0da:	da01      	bge.n	800f0e0 <arm_softmax_s8+0x1bc0>
 800f0dc:	2200      	movs	r2, #0
 800f0de:	e001      	b.n	800f0e4 <arm_softmax_s8+0x1bc4>
 800f0e0:	f04f 32ff 	mov.w	r2, #4294967295
 800f0e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f0e8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	ea02 0103 	and.w	r1, r2, r3
 800f0f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f0f6:	f5a3 72ee 	sub.w	r2, r3, #476	; 0x1dc
 800f0fa:	ea81 0300 	eor.w	r3, r1, r0
 800f0fe:	6013      	str	r3, [r2, #0]
    return result;
 800f100:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f104:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800f108:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 800f10a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f10e:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800f112:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f116:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	440b      	add	r3, r1
 800f11e:	6013      	str	r3, [r2, #0]
 800f120:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f124:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 800f128:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f12c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	6013      	str	r3, [r2, #0]
 800f134:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f138:	f5a3 72f2 	sub.w	r2, r3, #484	; 0x1e4
 800f13c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f140:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800f148:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f14c:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 800f150:	2300      	movs	r3, #0
 800f152:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800f154:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f158:	f04f 0300 	mov.w	r3, #0
 800f15c:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 800f160:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f164:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f168:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	0fdb      	lsrs	r3, r3, #31
 800f170:	b2da      	uxtb	r2, r3
 800f172:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f176:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	0fdb      	lsrs	r3, r3, #31
 800f17e:	b2db      	uxtb	r3, r3
 800f180:	4053      	eors	r3, r2
 800f182:	b2db      	uxtb	r3, r3
 800f184:	2b00      	cmp	r3, #0
 800f186:	d012      	beq.n	800f1ae <arm_softmax_s8+0x1c8e>
        mult = 1 - mult;
 800f188:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 800f18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f190:	2100      	movs	r1, #0
 800f192:	f1d2 0001 	rsbs	r0, r2, #1
 800f196:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
 800f19a:	eb61 0303 	sbc.w	r3, r1, r3
 800f19e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800f1a2:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 800f1a6:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 800f1aa:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f1ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f1b2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	17da      	asrs	r2, r3, #31
 800f1ba:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 800f1be:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
 800f1c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f1c6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	17da      	asrs	r2, r3, #31
 800f1ce:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 800f1d2:	f8c7 2424 	str.w	r2, [r7, #1060]	; 0x424
 800f1d6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800f1da:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f1de:	460b      	mov	r3, r1
 800f1e0:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 800f1e4:	fb02 f203 	mul.w	r2, r2, r3
 800f1e8:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 800f1ec:	f507 6485 	add.w	r4, r7, #1064	; 0x428
 800f1f0:	e9c4 0100 	strd	r0, r1, [r4]
 800f1f4:	4601      	mov	r1, r0
 800f1f6:	fb01 f303 	mul.w	r3, r1, r3
 800f1fa:	4413      	add	r3, r2
 800f1fc:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 800f200:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 800f204:	fba2 1201 	umull	r1, r2, r2, r1
 800f208:	f8c7 256c 	str.w	r2, [r7, #1388]	; 0x56c
 800f20c:	460a      	mov	r2, r1
 800f20e:	f8c7 2568 	str.w	r2, [r7, #1384]	; 0x568
 800f212:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 800f216:	4413      	add	r3, r2
 800f218:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 800f21c:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 800f220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f224:	f8d7 1568 	ldr.w	r1, [r7, #1384]	; 0x568
 800f228:	1851      	adds	r1, r2, r1
 800f22a:	f8c7 11a0 	str.w	r1, [r7, #416]	; 0x1a0
 800f22e:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 800f232:	414b      	adcs	r3, r1
 800f234:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800f238:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 800f23c:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 800f240:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f244:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 800f248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	da0a      	bge.n	800f266 <arm_softmax_s8+0x1d46>
 800f250:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f254:	1851      	adds	r1, r2, r1
 800f256:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 800f25a:	f143 0300 	adc.w	r3, r3, #0
 800f25e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800f262:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800f266:	f04f 0000 	mov.w	r0, #0
 800f26a:	f04f 0100 	mov.w	r1, #0
 800f26e:	0fd0      	lsrs	r0, r2, #31
 800f270:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f274:	17d9      	asrs	r1, r3, #31
 800f276:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f27a:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 800f27e:	4603      	mov	r3, r0
 800f280:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f282:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f286:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 800f28a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f28e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800f292:	6812      	ldr	r2, [r2, #0]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	429a      	cmp	r2, r3
 800f298:	d10e      	bne.n	800f2b8 <arm_softmax_s8+0x1d98>
 800f29a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f29e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f2a8:	d106      	bne.n	800f2b8 <arm_softmax_s8+0x1d98>
        result = Q31_MAX;
 800f2aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f2ae:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 800f2b2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f2b6:	6013      	str	r3, [r2, #0]
    return result;
 800f2b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f2bc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800f2c0:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 800f2c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f2c6:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	1a99      	subs	r1, r3, r2
 800f2ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f2d2:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 800f2d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f2da:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	6013      	str	r3, [r2, #0]
 800f2e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f2e6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800f2ea:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 800f2ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f2f0:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800f2f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f2fc:	f04f 0300 	mov.w	r3, #0
 800f300:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 800f304:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f308:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f30c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	0fdb      	lsrs	r3, r3, #31
 800f314:	b2da      	uxtb	r2, r3
 800f316:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f31a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	0fdb      	lsrs	r3, r3, #31
 800f322:	b2db      	uxtb	r3, r3
 800f324:	4053      	eors	r3, r2
 800f326:	b2db      	uxtb	r3, r3
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d012      	beq.n	800f352 <arm_softmax_s8+0x1e32>
        mult = 1 - mult;
 800f32c:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 800f330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f334:	2100      	movs	r1, #0
 800f336:	f1d2 0001 	rsbs	r0, r2, #1
 800f33a:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 800f33e:	eb61 0303 	sbc.w	r3, r1, r3
 800f342:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800f346:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 800f34a:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 800f34e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f352:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f356:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	17da      	asrs	r2, r3, #31
 800f35e:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 800f362:	f8c7 241c 	str.w	r2, [r7, #1052]	; 0x41c
 800f366:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f36a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	17da      	asrs	r2, r3, #31
 800f372:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 800f376:	f8c7 2414 	str.w	r2, [r7, #1044]	; 0x414
 800f37a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800f37e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f382:	460b      	mov	r3, r1
 800f384:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 800f388:	fb02 f203 	mul.w	r2, r2, r3
 800f38c:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800f390:	f507 6483 	add.w	r4, r7, #1048	; 0x418
 800f394:	e9c4 0100 	strd	r0, r1, [r4]
 800f398:	4601      	mov	r1, r0
 800f39a:	fb01 f303 	mul.w	r3, r1, r3
 800f39e:	4413      	add	r3, r2
 800f3a0:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 800f3a4:	f8d7 1410 	ldr.w	r1, [r7, #1040]	; 0x410
 800f3a8:	fba2 1201 	umull	r1, r2, r2, r1
 800f3ac:	f8c7 2564 	str.w	r2, [r7, #1380]	; 0x564
 800f3b0:	460a      	mov	r2, r1
 800f3b2:	f8c7 2560 	str.w	r2, [r7, #1376]	; 0x560
 800f3b6:	f8d7 2564 	ldr.w	r2, [r7, #1380]	; 0x564
 800f3ba:	4413      	add	r3, r2
 800f3bc:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 800f3c0:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 800f3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3c8:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 800f3cc:	1851      	adds	r1, r2, r1
 800f3ce:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 800f3d2:	f8d7 1564 	ldr.w	r1, [r7, #1380]	; 0x564
 800f3d6:	414b      	adcs	r3, r1
 800f3d8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800f3dc:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 800f3e0:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 800f3e4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f3e8:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 800f3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	da0a      	bge.n	800f40a <arm_softmax_s8+0x1eea>
 800f3f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f3f8:	1851      	adds	r1, r2, r1
 800f3fa:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 800f3fe:	f143 0300 	adc.w	r3, r3, #0
 800f402:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800f406:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800f40a:	f04f 0000 	mov.w	r0, #0
 800f40e:	f04f 0100 	mov.w	r1, #0
 800f412:	0fd0      	lsrs	r0, r2, #31
 800f414:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f418:	17d9      	asrs	r1, r3, #31
 800f41a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f41e:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 800f422:	4603      	mov	r3, r0
 800f424:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f426:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f42a:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 800f42e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f432:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800f436:	6812      	ldr	r2, [r2, #0]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	429a      	cmp	r2, r3
 800f43c:	d10e      	bne.n	800f45c <arm_softmax_s8+0x1f3c>
 800f43e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f442:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f44c:	d106      	bne.n	800f45c <arm_softmax_s8+0x1f3c>
        result = Q31_MAX;
 800f44e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f452:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 800f456:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f45a:	6013      	str	r3, [r2, #0]
    return result;
 800f45c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f460:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800f464:	681a      	ldr	r2, [r3, #0]
 800f466:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f46a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800f46e:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 800f470:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800f474:	4619      	mov	r1, r3
 800f476:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f47a:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 800f47e:	1e4b      	subs	r3, r1, #1
 800f480:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 800f482:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f486:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 800f48a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f48e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	009b      	lsls	r3, r3, #2
 800f496:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 800f498:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f49c:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 800f4a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f4a4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800f4a8:	6812      	ldr	r2, [r2, #0]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	429a      	cmp	r2, r3
 800f4ae:	dd02      	ble.n	800f4b6 <arm_softmax_s8+0x1f96>
 800f4b0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800f4b4:	e000      	b.n	800f4b8 <arm_softmax_s8+0x1f98>
 800f4b6:	2000      	movs	r0, #0
 800f4b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f4bc:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 800f4c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f4c4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800f4c8:	6812      	ldr	r2, [r2, #0]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	dd01      	ble.n	800f4d4 <arm_softmax_s8+0x1fb4>
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	e001      	b.n	800f4d8 <arm_softmax_s8+0x1fb8>
 800f4d4:	f04f 32ff 	mov.w	r2, #4294967295
 800f4d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f4dc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	ea02 0103 	and.w	r1, r2, r3
 800f4e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f4ea:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 800f4ee:	ea81 0300 	eor.w	r3, r1, r0
 800f4f2:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 800f4f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f4f8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	425a      	negs	r2, r3
 800f500:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f504:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	4293      	cmp	r3, r2
 800f50c:	da02      	bge.n	800f514 <arm_softmax_s8+0x1ff4>
 800f50e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800f512:	e000      	b.n	800f516 <arm_softmax_s8+0x1ff6>
 800f514:	2000      	movs	r0, #0
 800f516:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f51a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	425a      	negs	r2, r3
 800f522:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f526:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	4293      	cmp	r3, r2
 800f52e:	da01      	bge.n	800f534 <arm_softmax_s8+0x2014>
 800f530:	2200      	movs	r2, #0
 800f532:	e001      	b.n	800f538 <arm_softmax_s8+0x2018>
 800f534:	f04f 32ff 	mov.w	r2, #4294967295
 800f538:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f53c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	ea02 0103 	and.w	r1, r2, r3
 800f546:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f54a:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 800f54e:	ea81 0300 	eor.w	r3, r1, r0
 800f552:	6013      	str	r3, [r2, #0]
    return result;
 800f554:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f558:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f55c:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 800f55e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f562:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800f566:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f56a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	440b      	add	r3, r1
 800f572:	6013      	str	r3, [r2, #0]
 800f574:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f578:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 800f57c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f580:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	6013      	str	r3, [r2, #0]
 800f588:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f58c:	f5a3 7207 	sub.w	r2, r3, #540	; 0x21c
 800f590:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f594:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800f59c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f5a0:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800f5a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f5ac:	f04f 0300 	mov.w	r3, #0
 800f5b0:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 800f5b4:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f5b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f5bc:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	0fdb      	lsrs	r3, r3, #31
 800f5c4:	b2da      	uxtb	r2, r3
 800f5c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f5ca:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	0fdb      	lsrs	r3, r3, #31
 800f5d2:	b2db      	uxtb	r3, r3
 800f5d4:	4053      	eors	r3, r2
 800f5d6:	b2db      	uxtb	r3, r3
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d012      	beq.n	800f602 <arm_softmax_s8+0x20e2>
        mult = 1 - mult;
 800f5dc:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800f5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5e4:	2100      	movs	r1, #0
 800f5e6:	f1d2 0001 	rsbs	r0, r2, #1
 800f5ea:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 800f5ee:	eb61 0303 	sbc.w	r3, r1, r3
 800f5f2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800f5f6:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800f5fa:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 800f5fe:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f602:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f606:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	17da      	asrs	r2, r3, #31
 800f60e:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 800f612:	f8c7 240c 	str.w	r2, [r7, #1036]	; 0x40c
 800f616:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f61a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	17da      	asrs	r2, r3, #31
 800f622:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 800f626:	f8c7 2404 	str.w	r2, [r7, #1028]	; 0x404
 800f62a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800f62e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f632:	460b      	mov	r3, r1
 800f634:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 800f638:	fb02 f203 	mul.w	r2, r2, r3
 800f63c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800f640:	f507 6481 	add.w	r4, r7, #1032	; 0x408
 800f644:	e9c4 0100 	strd	r0, r1, [r4]
 800f648:	4601      	mov	r1, r0
 800f64a:	fb01 f303 	mul.w	r3, r1, r3
 800f64e:	4413      	add	r3, r2
 800f650:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 800f654:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
 800f658:	fba2 1201 	umull	r1, r2, r2, r1
 800f65c:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 800f660:	460a      	mov	r2, r1
 800f662:	f8c7 2558 	str.w	r2, [r7, #1368]	; 0x558
 800f666:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 800f66a:	4413      	add	r3, r2
 800f66c:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 800f670:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800f674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f678:	f8d7 1558 	ldr.w	r1, [r7, #1368]	; 0x558
 800f67c:	1851      	adds	r1, r2, r1
 800f67e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 800f682:	f8d7 155c 	ldr.w	r1, [r7, #1372]	; 0x55c
 800f686:	414b      	adcs	r3, r1
 800f688:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800f68c:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 800f690:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 800f694:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f698:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800f69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	da0a      	bge.n	800f6ba <arm_softmax_s8+0x219a>
 800f6a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f6a8:	1851      	adds	r1, r2, r1
 800f6aa:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 800f6ae:	f143 0300 	adc.w	r3, r3, #0
 800f6b2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800f6b6:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800f6ba:	f04f 0000 	mov.w	r0, #0
 800f6be:	f04f 0100 	mov.w	r1, #0
 800f6c2:	0fd0      	lsrs	r0, r2, #31
 800f6c4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f6c8:	17d9      	asrs	r1, r3, #31
 800f6ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f6ce:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f6d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f6da:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 800f6de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f6e2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800f6e6:	6812      	ldr	r2, [r2, #0]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	429a      	cmp	r2, r3
 800f6ec:	d10e      	bne.n	800f70c <arm_softmax_s8+0x21ec>
 800f6ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f6f2:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f6fc:	d106      	bne.n	800f70c <arm_softmax_s8+0x21ec>
        result = Q31_MAX;
 800f6fe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f702:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 800f706:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f70a:	6013      	str	r3, [r2, #0]
    return result;
 800f70c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f710:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800f714:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 800f716:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f71a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	1a99      	subs	r1, r3, r2
 800f722:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f726:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 800f72a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f72e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	6013      	str	r3, [r2, #0]
 800f736:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f73a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800f73e:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 800f740:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f744:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 800f748:	2300      	movs	r3, #0
 800f74a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800f74c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f750:	f04f 0300 	mov.w	r3, #0
 800f754:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 800f758:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800f75c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f760:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	0fdb      	lsrs	r3, r3, #31
 800f768:	b2da      	uxtb	r2, r3
 800f76a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f76e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	0fdb      	lsrs	r3, r3, #31
 800f776:	b2db      	uxtb	r3, r3
 800f778:	4053      	eors	r3, r2
 800f77a:	b2db      	uxtb	r3, r3
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d012      	beq.n	800f7a6 <arm_softmax_s8+0x2286>
        mult = 1 - mult;
 800f780:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800f784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f788:	2100      	movs	r1, #0
 800f78a:	f1d2 0001 	rsbs	r0, r2, #1
 800f78e:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
 800f792:	eb61 0303 	sbc.w	r3, r1, r3
 800f796:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800f79a:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 800f79e:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 800f7a2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800f7a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f7aa:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	17da      	asrs	r2, r3, #31
 800f7b2:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 800f7b6:	f8c7 23fc 	str.w	r2, [r7, #1020]	; 0x3fc
 800f7ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f7be:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	17da      	asrs	r2, r3, #31
 800f7c6:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 800f7ca:	f8c7 23f4 	str.w	r2, [r7, #1012]	; 0x3f4
 800f7ce:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 800f7d2:	460b      	mov	r3, r1
 800f7d4:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 800f7d8:	fb02 f203 	mul.w	r2, r2, r3
 800f7dc:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800f7e0:	e9c7 01fe 	strd	r0, r1, [r7, #1016]	; 0x3f8
 800f7e4:	4601      	mov	r1, r0
 800f7e6:	fb01 f303 	mul.w	r3, r1, r3
 800f7ea:	4413      	add	r3, r2
 800f7ec:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	; 0x3f8
 800f7f0:	f8d7 13f0 	ldr.w	r1, [r7, #1008]	; 0x3f0
 800f7f4:	fba2 1201 	umull	r1, r2, r2, r1
 800f7f8:	f8c7 2554 	str.w	r2, [r7, #1364]	; 0x554
 800f7fc:	460a      	mov	r2, r1
 800f7fe:	f8c7 2550 	str.w	r2, [r7, #1360]	; 0x550
 800f802:	f8d7 2554 	ldr.w	r2, [r7, #1364]	; 0x554
 800f806:	4413      	add	r3, r2
 800f808:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 800f80c:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800f810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f814:	f8d7 1550 	ldr.w	r1, [r7, #1360]	; 0x550
 800f818:	1851      	adds	r1, r2, r1
 800f81a:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 800f81e:	f8d7 1554 	ldr.w	r1, [r7, #1364]	; 0x554
 800f822:	414b      	adcs	r3, r1
 800f824:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800f828:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 800f82c:	f507 62ed 	add.w	r2, r7, #1896	; 0x768
 800f830:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800f834:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800f838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	da0a      	bge.n	800f856 <arm_softmax_s8+0x2336>
 800f840:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f844:	1851      	adds	r1, r2, r1
 800f846:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 800f84a:	f143 0300 	adc.w	r3, r3, #0
 800f84e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800f852:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800f856:	f04f 0000 	mov.w	r0, #0
 800f85a:	f04f 0100 	mov.w	r1, #0
 800f85e:	0fd0      	lsrs	r0, r2, #31
 800f860:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f864:	17d9      	asrs	r1, r3, #31
 800f866:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f86a:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 800f86e:	4603      	mov	r3, r0
 800f870:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f872:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f876:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 800f87a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f87e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800f882:	6812      	ldr	r2, [r2, #0]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	429a      	cmp	r2, r3
 800f888:	d10e      	bne.n	800f8a8 <arm_softmax_s8+0x2388>
 800f88a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f88e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f898:	d106      	bne.n	800f8a8 <arm_softmax_s8+0x2388>
        result = Q31_MAX;
 800f89a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f89e:	f5a3 720d 	sub.w	r2, r3, #564	; 0x234
 800f8a2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f8a6:	6013      	str	r3, [r2, #0]
    return result;
 800f8a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f8ac:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800f8b0:	681a      	ldr	r2, [r3, #0]
 800f8b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f8b6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800f8ba:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 800f8bc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800f8c0:	4619      	mov	r1, r3
 800f8c2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f8c6:	f5a3 7212 	sub.w	r2, r3, #584	; 0x248
 800f8ca:	1e4b      	subs	r3, r1, #1
 800f8cc:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 800f8ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f8d2:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 800f8d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f8da:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	009b      	lsls	r3, r3, #2
 800f8e2:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 800f8e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f8e8:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 800f8ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f8f0:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800f8f4:	6812      	ldr	r2, [r2, #0]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	dd02      	ble.n	800f902 <arm_softmax_s8+0x23e2>
 800f8fc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800f900:	e000      	b.n	800f904 <arm_softmax_s8+0x23e4>
 800f902:	2000      	movs	r0, #0
 800f904:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f908:	f5a3 7211 	sub.w	r2, r3, #580	; 0x244
 800f90c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f910:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800f914:	6812      	ldr	r2, [r2, #0]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	429a      	cmp	r2, r3
 800f91a:	dd01      	ble.n	800f920 <arm_softmax_s8+0x2400>
 800f91c:	2200      	movs	r2, #0
 800f91e:	e001      	b.n	800f924 <arm_softmax_s8+0x2404>
 800f920:	f04f 32ff 	mov.w	r2, #4294967295
 800f924:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f928:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	ea02 0103 	and.w	r1, r2, r3
 800f932:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f936:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 800f93a:	ea81 0300 	eor.w	r3, r1, r0
 800f93e:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 800f940:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f944:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	425a      	negs	r2, r3
 800f94c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f950:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	4293      	cmp	r3, r2
 800f958:	da02      	bge.n	800f960 <arm_softmax_s8+0x2440>
 800f95a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800f95e:	e000      	b.n	800f962 <arm_softmax_s8+0x2442>
 800f960:	2000      	movs	r0, #0
 800f962:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f966:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	425a      	negs	r2, r3
 800f96e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f972:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	4293      	cmp	r3, r2
 800f97a:	da05      	bge.n	800f988 <arm_softmax_s8+0x2468>
 800f97c:	2200      	movs	r2, #0
 800f97e:	e005      	b.n	800f98c <arm_softmax_s8+0x246c>
 800f980:	c3c3c3c4 	.word	0xc3c3c3c4
 800f984:	ffffffff 	.word	0xffffffff
 800f988:	f04f 32ff 	mov.w	r2, #4294967295
 800f98c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f990:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	ea02 0103 	and.w	r1, r2, r3
 800f99a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f99e:	f5a3 7213 	sub.w	r2, r3, #588	; 0x24c
 800f9a2:	ea81 0300 	eor.w	r3, r1, r0
 800f9a6:	6013      	str	r3, [r2, #0]
    return result;
 800f9a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f9ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800f9b0:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 800f9b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f9b6:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 800f9ba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f9be:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	440b      	add	r3, r1
 800f9c6:	6013      	str	r3, [r2, #0]
 800f9c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f9cc:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 800f9d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f9d4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	6013      	str	r3, [r2, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 800f9dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f9e0:	4619      	mov	r1, r3
 800f9e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f9e6:	f5a3 7215 	sub.w	r2, r3, #596	; 0x254
 800f9ea:	1e4b      	subs	r3, r1, #1
 800f9ec:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 800f9ee:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f9f2:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 800f9f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800f9fa:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	005b      	lsls	r3, r3, #1
 800fa02:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 800fa04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa08:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 800fa0c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa10:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800fa14:	6812      	ldr	r2, [r2, #0]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	429a      	cmp	r2, r3
 800fa1a:	dd02      	ble.n	800fa22 <arm_softmax_s8+0x2502>
 800fa1c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800fa20:	e000      	b.n	800fa24 <arm_softmax_s8+0x2504>
 800fa22:	2000      	movs	r0, #0
 800fa24:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa28:	f5a3 7214 	sub.w	r2, r3, #592	; 0x250
 800fa2c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa30:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800fa34:	6812      	ldr	r2, [r2, #0]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	429a      	cmp	r2, r3
 800fa3a:	dd01      	ble.n	800fa40 <arm_softmax_s8+0x2520>
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	e001      	b.n	800fa44 <arm_softmax_s8+0x2524>
 800fa40:	f04f 32ff 	mov.w	r2, #4294967295
 800fa44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa48:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	ea02 0103 	and.w	r1, r2, r3
 800fa52:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa56:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 800fa5a:	ea81 0300 	eor.w	r3, r1, r0
 800fa5e:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 800fa60:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa64:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	425a      	negs	r2, r3
 800fa6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa70:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	4293      	cmp	r3, r2
 800fa78:	da02      	bge.n	800fa80 <arm_softmax_s8+0x2560>
 800fa7a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800fa7e:	e000      	b.n	800fa82 <arm_softmax_s8+0x2562>
 800fa80:	2000      	movs	r0, #0
 800fa82:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa86:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	425a      	negs	r2, r3
 800fa8e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fa92:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	4293      	cmp	r3, r2
 800fa9a:	da01      	bge.n	800faa0 <arm_softmax_s8+0x2580>
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	e001      	b.n	800faa4 <arm_softmax_s8+0x2584>
 800faa0:	f04f 32ff 	mov.w	r2, #4294967295
 800faa4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800faa8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	ea02 0103 	and.w	r1, r2, r3
 800fab2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fab6:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 800faba:	ea81 0300 	eor.w	r3, r1, r0
 800fabe:	6013      	str	r3, [r2, #0]
    return result;
 800fac0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fac4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800fac8:	681b      	ldr	r3, [r3, #0]

    return MUL_POW2(x, 1);
 800faca:	bf00      	nop
 800facc:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984

        for (col = 0; col < row_size; ++col)
 800fad0:	2300      	movs	r3, #0
 800fad2:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 800fad6:	f001 bd85 	b.w	80115e4 <arm_softmax_s8+0x40c4>
        {
            diff = input[col] - max;
 800fada:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 800fade:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fae2:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	4413      	add	r3, r2
 800faea:	f993 3000 	ldrsb.w	r3, [r3]
 800faee:	461a      	mov	r2, r3
 800faf0:	f997 399f 	ldrsb.w	r3, [r7, #2463]	; 0x99f
 800faf4:	1ad3      	subs	r3, r2, r3
 800faf6:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
            if (diff >= diff_min)
 800fafa:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 800fafe:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 800fb02:	429a      	cmp	r2, r3
 800fb04:	f2c1 8562 	blt.w	80115cc <arm_softmax_s8+0x40ac>
            {
                const int32_t res =
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 800fb08:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 800fb0c:	f8d7 3994 	ldr.w	r3, [r7, #2452]	; 0x994
 800fb10:	fb03 f202 	mul.w	r2, r3, r2
 800fb14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb18:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800fb1c:	601a      	str	r2, [r3, #0]
 800fb1e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb22:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 800fb26:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb2a:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800fb32:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb36:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800fb3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800fb42:	f04f 0300 	mov.w	r3, #0
 800fb46:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 800fb4a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800fb4e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb52:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	0fdb      	lsrs	r3, r3, #31
 800fb5a:	b2da      	uxtb	r2, r3
 800fb5c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb60:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	0fdb      	lsrs	r3, r3, #31
 800fb68:	b2db      	uxtb	r3, r3
 800fb6a:	4053      	eors	r3, r2
 800fb6c:	b2db      	uxtb	r3, r3
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d012      	beq.n	800fb98 <arm_softmax_s8+0x2678>
        mult = 1 - mult;
 800fb72:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 800fb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb7a:	2100      	movs	r1, #0
 800fb7c:	f1d2 0001 	rsbs	r0, r2, #1
 800fb80:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
 800fb84:	eb61 0303 	sbc.w	r3, r1, r3
 800fb88:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800fb8c:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 800fb90:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 800fb94:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800fb98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fb9c:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	17da      	asrs	r2, r3, #31
 800fba4:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 800fba8:	f8c7 2364 	str.w	r2, [r7, #868]	; 0x364
 800fbac:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fbb0:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	17da      	asrs	r2, r3, #31
 800fbb8:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 800fbbc:	f8c7 235c 	str.w	r2, [r7, #860]	; 0x35c
 800fbc0:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 800fbc4:	460b      	mov	r3, r1
 800fbc6:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 800fbca:	fb02 f203 	mul.w	r2, r2, r3
 800fbce:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 800fbd2:	e9c7 01d8 	strd	r0, r1, [r7, #864]	; 0x360
 800fbd6:	4601      	mov	r1, r0
 800fbd8:	fb01 f303 	mul.w	r3, r1, r3
 800fbdc:	4413      	add	r3, r2
 800fbde:	f8d7 2360 	ldr.w	r2, [r7, #864]	; 0x360
 800fbe2:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 800fbe6:	fba2 1201 	umull	r1, r2, r2, r1
 800fbea:	f8c7 24e4 	str.w	r2, [r7, #1252]	; 0x4e4
 800fbee:	460a      	mov	r2, r1
 800fbf0:	f8c7 24e0 	str.w	r2, [r7, #1248]	; 0x4e0
 800fbf4:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	; 0x4e4
 800fbf8:	4413      	add	r3, r2
 800fbfa:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 800fbfe:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 800fc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc06:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 800fc0a:	1851      	adds	r1, r2, r1
 800fc0c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 800fc10:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	; 0x4e4
 800fc14:	414b      	adcs	r3, r1
 800fc16:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800fc1a:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800fc1e:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 800fc22:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800fc26:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 800fc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	da0a      	bge.n	800fc48 <arm_softmax_s8+0x2728>
 800fc32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fc36:	1851      	adds	r1, r2, r1
 800fc38:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 800fc3c:	f143 0300 	adc.w	r3, r3, #0
 800fc40:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800fc44:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800fc48:	f04f 0000 	mov.w	r0, #0
 800fc4c:	f04f 0100 	mov.w	r1, #0
 800fc50:	0fd0      	lsrs	r0, r2, #31
 800fc52:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800fc56:	17d9      	asrs	r1, r3, #31
 800fc58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fc5c:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 800fc60:	4603      	mov	r3, r0
 800fc62:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800fc64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fc68:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 800fc6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fc70:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800fc74:	6812      	ldr	r2, [r2, #0]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	d10e      	bne.n	800fc9a <arm_softmax_s8+0x277a>
 800fc7c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fc80:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fc8a:	d106      	bne.n	800fc9a <arm_softmax_s8+0x277a>
        result = Q31_MAX;
 800fc8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fc90:	f5a3 726d 	sub.w	r2, r3, #948	; 0x3b4
 800fc94:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fc98:	6013      	str	r3, [r2, #0]
    return result;
 800fc9a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fc9e:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 800fca2:	681a      	ldr	r2, [r3, #0]
 800fca4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fca8:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800fcac:	601a      	str	r2, [r3, #0]
    int32_t mask = 0;
 800fcae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fcb2:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	6013      	str	r3, [r2, #0]
    int32_t shift = 24;
 800fcba:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fcbe:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 800fcc2:	2318      	movs	r3, #24
 800fcc4:	6013      	str	r3, [r2, #0]
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 800fcc6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fcca:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800fcce:	2201      	movs	r2, #1
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	fa02 f303 	lsl.w	r3, r2, r3
 800fcd6:	1e5a      	subs	r2, r3, #1
 800fcd8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fcdc:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	ea02 0003 	and.w	r0, r2, r3
 800fce6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fcea:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800fcee:	2201      	movs	r2, #1
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	fa02 f103 	lsl.w	r1, r2, r3
 800fcf6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fcfa:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 800fcfe:	1a43      	subs	r3, r0, r1
 800fd00:	6013      	str	r3, [r2, #0]
    const int32_t remainder = val_mod_minus_quarter - val;
 800fd02:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd06:	f5a3 7127 	sub.w	r1, r3, #668	; 0x29c
 800fd0a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd0e:	f5a3 7226 	sub.w	r2, r3, #664	; 0x298
 800fd12:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd16:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 800fd1a:	6812      	ldr	r2, [r2, #0]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	1ad3      	subs	r3, r2, r3
 800fd20:	600b      	str	r3, [r1, #0]
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 800fd22:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd26:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	0159      	lsls	r1, r3, #5
 800fd2e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd32:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 800fd36:	f101 5380 	add.w	r3, r1, #268435456	; 0x10000000
 800fd3a:	6013      	str	r3, [r2, #0]
 800fd3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd40:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 800fd44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd48:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	6013      	str	r3, [r2, #0]
 800fd50:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd54:	f5a3 722a 	sub.w	r2, r3, #680	; 0x2a8
 800fd58:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd5c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800fd64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd68:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800fd70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800fd74:	f04f 0300 	mov.w	r3, #0
 800fd78:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 800fd7c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800fd80:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd84:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	0fdb      	lsrs	r3, r3, #31
 800fd8c:	b2da      	uxtb	r2, r3
 800fd8e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fd92:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	0fdb      	lsrs	r3, r3, #31
 800fd9a:	b2db      	uxtb	r3, r3
 800fd9c:	4053      	eors	r3, r2
 800fd9e:	b2db      	uxtb	r3, r3
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d012      	beq.n	800fdca <arm_softmax_s8+0x28aa>
        mult = 1 - mult;
 800fda4:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800fda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdac:	2100      	movs	r1, #0
 800fdae:	f1d2 0001 	rsbs	r0, r2, #1
 800fdb2:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 800fdb6:	eb61 0303 	sbc.w	r3, r1, r3
 800fdba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800fdbe:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800fdc2:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 800fdc6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800fdca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fdce:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	17da      	asrs	r2, r3, #31
 800fdd6:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 800fdda:	f8c7 23dc 	str.w	r2, [r7, #988]	; 0x3dc
 800fdde:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fde2:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	17da      	asrs	r2, r3, #31
 800fdea:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 800fdee:	f8c7 23d4 	str.w	r2, [r7, #980]	; 0x3d4
 800fdf2:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 800fdf6:	460b      	mov	r3, r1
 800fdf8:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 800fdfc:	fb02 f203 	mul.w	r2, r2, r3
 800fe00:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 800fe04:	e9c7 01f6 	strd	r0, r1, [r7, #984]	; 0x3d8
 800fe08:	4601      	mov	r1, r0
 800fe0a:	fb01 f303 	mul.w	r3, r1, r3
 800fe0e:	4413      	add	r3, r2
 800fe10:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 800fe14:	f8d7 13d0 	ldr.w	r1, [r7, #976]	; 0x3d0
 800fe18:	fba2 1201 	umull	r1, r2, r2, r1
 800fe1c:	f8c7 2544 	str.w	r2, [r7, #1348]	; 0x544
 800fe20:	460a      	mov	r2, r1
 800fe22:	f8c7 2540 	str.w	r2, [r7, #1344]	; 0x540
 800fe26:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 800fe2a:	4413      	add	r3, r2
 800fe2c:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 800fe30:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800fe34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe38:	f8d7 1540 	ldr.w	r1, [r7, #1344]	; 0x540
 800fe3c:	1851      	adds	r1, r2, r1
 800fe3e:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 800fe42:	f8d7 1544 	ldr.w	r1, [r7, #1348]	; 0x544
 800fe46:	414b      	adcs	r3, r1
 800fe48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800fe4c:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 800fe50:	f507 62de 	add.w	r2, r7, #1776	; 0x6f0
 800fe54:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800fe58:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800fe5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	da0a      	bge.n	800fe7a <arm_softmax_s8+0x295a>
 800fe64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fe68:	1851      	adds	r1, r2, r1
 800fe6a:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 800fe6e:	f143 0300 	adc.w	r3, r3, #0
 800fe72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800fe76:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800fe7a:	f04f 0000 	mov.w	r0, #0
 800fe7e:	f04f 0100 	mov.w	r1, #0
 800fe82:	0fd0      	lsrs	r0, r2, #31
 800fe84:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800fe88:	17d9      	asrs	r1, r3, #31
 800fe8a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe8e:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 800fe92:	4603      	mov	r3, r0
 800fe94:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800fe96:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fe9a:	f5a3 7229 	sub.w	r2, r3, #676	; 0x2a4
 800fe9e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fea2:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800fea6:	6812      	ldr	r2, [r2, #0]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	429a      	cmp	r2, r3
 800feac:	d10e      	bne.n	800fecc <arm_softmax_s8+0x29ac>
 800feae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800feb2:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800febc:	d106      	bne.n	800fecc <arm_softmax_s8+0x29ac>
        result = Q31_MAX;
 800febe:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fec2:	f5a3 722b 	sub.w	r2, r3, #684	; 0x2ac
 800fec6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800feca:	6013      	str	r3, [r2, #0]
    return result;
 800fecc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fed0:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 800fed4:	681a      	ldr	r2, [r3, #0]
    const int32_t x2 = MUL_SAT(x, x);
 800fed6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800feda:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800fede:	601a      	str	r2, [r3, #0]
 800fee0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fee4:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 800fee8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800feec:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	6013      	str	r3, [r2, #0]
 800fef4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800fef8:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 800fefc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff00:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800ff08:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff0c:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 800ff10:	2300      	movs	r3, #0
 800ff12:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800ff14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ff18:	f04f 0300 	mov.w	r3, #0
 800ff1c:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 800ff20:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800ff24:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff28:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	0fdb      	lsrs	r3, r3, #31
 800ff30:	b2da      	uxtb	r2, r3
 800ff32:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff36:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	0fdb      	lsrs	r3, r3, #31
 800ff3e:	b2db      	uxtb	r3, r3
 800ff40:	4053      	eors	r3, r2
 800ff42:	b2db      	uxtb	r3, r3
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d012      	beq.n	800ff6e <arm_softmax_s8+0x2a4e>
        mult = 1 - mult;
 800ff48:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 800ff4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff50:	2100      	movs	r1, #0
 800ff52:	f1d2 0001 	rsbs	r0, r2, #1
 800ff56:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 800ff5a:	eb61 0303 	sbc.w	r3, r1, r3
 800ff5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800ff62:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 800ff66:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 800ff6a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800ff6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff72:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	17da      	asrs	r2, r3, #31
 800ff7a:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 800ff7e:	f8c7 23cc 	str.w	r2, [r7, #972]	; 0x3cc
 800ff82:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 800ff86:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	17da      	asrs	r2, r3, #31
 800ff8e:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 800ff92:	f8c7 23c4 	str.w	r2, [r7, #964]	; 0x3c4
 800ff96:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	; 0x3c8
 800ff9a:	460b      	mov	r3, r1
 800ff9c:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 800ffa0:	fb02 f203 	mul.w	r2, r2, r3
 800ffa4:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 800ffa8:	e9c7 01f2 	strd	r0, r1, [r7, #968]	; 0x3c8
 800ffac:	4601      	mov	r1, r0
 800ffae:	fb01 f303 	mul.w	r3, r1, r3
 800ffb2:	4413      	add	r3, r2
 800ffb4:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 800ffb8:	f8d7 13c0 	ldr.w	r1, [r7, #960]	; 0x3c0
 800ffbc:	fba2 1201 	umull	r1, r2, r2, r1
 800ffc0:	f8c7 253c 	str.w	r2, [r7, #1340]	; 0x53c
 800ffc4:	460a      	mov	r2, r1
 800ffc6:	f8c7 2538 	str.w	r2, [r7, #1336]	; 0x538
 800ffca:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 800ffce:	4413      	add	r3, r2
 800ffd0:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 800ffd4:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 800ffd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffdc:	f8d7 1538 	ldr.w	r1, [r7, #1336]	; 0x538
 800ffe0:	1851      	adds	r1, r2, r1
 800ffe2:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 800ffe6:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
 800ffea:	414b      	adcs	r3, r1
 800ffec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800fff0:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800fff4:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 800fff8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800fffc:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8010000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010004:	2b00      	cmp	r3, #0
 8010006:	da0a      	bge.n	801001e <arm_softmax_s8+0x2afe>
 8010008:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801000c:	1851      	adds	r1, r2, r1
 801000e:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8010012:	f143 0300 	adc.w	r3, r3, #0
 8010016:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801001a:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 801001e:	f04f 0000 	mov.w	r0, #0
 8010022:	f04f 0100 	mov.w	r1, #0
 8010026:	0fd0      	lsrs	r0, r2, #31
 8010028:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801002c:	17d9      	asrs	r1, r3, #31
 801002e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010032:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 8010036:	4603      	mov	r3, r0
 8010038:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801003a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801003e:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8010042:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010046:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 801004a:	6812      	ldr	r2, [r2, #0]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	429a      	cmp	r2, r3
 8010050:	d10e      	bne.n	8010070 <arm_softmax_s8+0x2b50>
 8010052:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010056:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010060:	d106      	bne.n	8010070 <arm_softmax_s8+0x2b50>
        result = Q31_MAX;
 8010062:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010066:	f5a3 7232 	sub.w	r2, r3, #712	; 0x2c8
 801006a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801006e:	6013      	str	r3, [r2, #0]
    return result;
 8010070:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010074:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8010078:	681a      	ldr	r2, [r3, #0]
 801007a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801007e:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8010082:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8010084:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010088:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 801008c:	2300      	movs	r3, #0
 801008e:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8010090:	2104      	movs	r1, #4
 8010092:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010096:	f5a3 7237 	sub.w	r2, r3, #732	; 0x2dc
 801009a:	1e4b      	subs	r3, r1, #1
 801009c:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801009e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80100a2:	f5a3 7138 	sub.w	r1, r3, #736	; 0x2e0
 80100a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80100aa:	f5a3 7235 	sub.w	r2, r3, #724	; 0x2d4
 80100ae:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80100b2:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 80100b6:	6812      	ldr	r2, [r2, #0]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	4013      	ands	r3, r2
 80100bc:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80100be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80100c2:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 80100c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80100ca:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	109b      	asrs	r3, r3, #2
 80100d2:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 80100d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80100d8:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 80100dc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80100e0:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	105b      	asrs	r3, r3, #1
 80100e8:	6013      	str	r3, [r2, #0]
    if (result < 0)
 80100ea:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80100ee:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	da0a      	bge.n	801010e <arm_softmax_s8+0x2bee>
        threshold++;
 80100f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80100fc:	f5a3 7239 	sub.w	r2, r3, #740	; 0x2e4
 8010100:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010104:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	3301      	adds	r3, #1
 801010c:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801010e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010112:	f5a3 7238 	sub.w	r2, r3, #736	; 0x2e0
 8010116:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801011a:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 801011e:	6812      	ldr	r2, [r2, #0]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	429a      	cmp	r2, r3
 8010124:	dd0a      	ble.n	801013c <arm_softmax_s8+0x2c1c>
        result++;
 8010126:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801012a:	f5a3 7236 	sub.w	r2, r3, #728	; 0x2d8
 801012e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010132:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	3301      	adds	r3, #1
 801013a:	6013      	str	r3, [r2, #0]
    return result;
 801013c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010140:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8010144:	681c      	ldr	r4, [r3, #0]
 8010146:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801014a:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 801014e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010152:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	6013      	str	r3, [r2, #0]
 801015a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801015e:	f5a3 723b 	sub.w	r2, r3, #748	; 0x2ec
 8010162:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010166:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801016e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010172:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 8010176:	2300      	movs	r3, #0
 8010178:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801017a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801017e:	f04f 0300 	mov.w	r3, #0
 8010182:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8010186:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801018a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801018e:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	0fdb      	lsrs	r3, r3, #31
 8010196:	b2da      	uxtb	r2, r3
 8010198:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801019c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	0fdb      	lsrs	r3, r3, #31
 80101a4:	b2db      	uxtb	r3, r3
 80101a6:	4053      	eors	r3, r2
 80101a8:	b2db      	uxtb	r3, r3
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d012      	beq.n	80101d4 <arm_softmax_s8+0x2cb4>
        mult = 1 - mult;
 80101ae:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 80101b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101b6:	2100      	movs	r1, #0
 80101b8:	f1d2 0001 	rsbs	r0, r2, #1
 80101bc:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 80101c0:	eb61 0303 	sbc.w	r3, r1, r3
 80101c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80101c8:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 80101cc:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 80101d0:	e9c1 2300 	strd	r2, r3, [r1]
    mult = mult + (q63_t)m1 * m2;
 80101d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80101d8:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	17da      	asrs	r2, r3, #31
 80101e0:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 80101e4:	f8c7 23bc 	str.w	r2, [r7, #956]	; 0x3bc
 80101e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80101ec:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	17da      	asrs	r2, r3, #31
 80101f4:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 80101f8:	f8c7 23b4 	str.w	r2, [r7, #948]	; 0x3b4
 80101fc:	e9d7 01ee 	ldrd	r0, r1, [r7, #952]	; 0x3b8
 8010200:	460b      	mov	r3, r1
 8010202:	f8d7 23b0 	ldr.w	r2, [r7, #944]	; 0x3b0
 8010206:	fb02 f203 	mul.w	r2, r2, r3
 801020a:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 801020e:	e9c7 01ee 	strd	r0, r1, [r7, #952]	; 0x3b8
 8010212:	4601      	mov	r1, r0
 8010214:	fb01 f303 	mul.w	r3, r1, r3
 8010218:	4413      	add	r3, r2
 801021a:	f8d7 23b8 	ldr.w	r2, [r7, #952]	; 0x3b8
 801021e:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 8010222:	fba2 1201 	umull	r1, r2, r2, r1
 8010226:	f8c7 2534 	str.w	r2, [r7, #1332]	; 0x534
 801022a:	460a      	mov	r2, r1
 801022c:	f8c7 2530 	str.w	r2, [r7, #1328]	; 0x530
 8010230:	f8d7 2534 	ldr.w	r2, [r7, #1332]	; 0x534
 8010234:	4413      	add	r3, r2
 8010236:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 801023a:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 801023e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010242:	f8d7 1530 	ldr.w	r1, [r7, #1328]	; 0x530
 8010246:	1851      	adds	r1, r2, r1
 8010248:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 801024c:	f8d7 1534 	ldr.w	r1, [r7, #1332]	; 0x534
 8010250:	414b      	adcs	r3, r1
 8010252:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010256:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 801025a:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 801025e:	e9c1 2300 	strd	r2, r3, [r1]
    result = (int32_t)(mult / (1ll << 31));
 8010262:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8010266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801026a:	2b00      	cmp	r3, #0
 801026c:	da0a      	bge.n	8010284 <arm_softmax_s8+0x2d64>
 801026e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010272:	1851      	adds	r1, r2, r1
 8010274:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8010278:	f143 0300 	adc.w	r3, r3, #0
 801027c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010280:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8010284:	f04f 0000 	mov.w	r0, #0
 8010288:	f04f 0100 	mov.w	r1, #0
 801028c:	0fd0      	lsrs	r0, r2, #31
 801028e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010292:	17d9      	asrs	r1, r3, #31
 8010294:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010298:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 801029c:	4603      	mov	r3, r0
 801029e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80102a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80102a4:	f5a3 723a 	sub.w	r2, r3, #744	; 0x2e8
 80102a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80102ac:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80102b0:	6812      	ldr	r2, [r2, #0]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	429a      	cmp	r2, r3
 80102b6:	d10e      	bne.n	80102d6 <arm_softmax_s8+0x2db6>
 80102b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80102bc:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80102c6:	d106      	bne.n	80102d6 <arm_softmax_s8+0x2db6>
        result = Q31_MAX;
 80102c8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80102cc:	f5a3 723c 	sub.w	r2, r3, #752	; 0x2f0
 80102d0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80102d4:	6013      	str	r3, [r2, #0]
    return result;
 80102d6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80102da:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 80102de:	681b      	ldr	r3, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 80102e0:	18e2      	adds	r2, r4, r3
 80102e2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80102e6:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 80102ea:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80102ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80102f0:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 80102f4:	2300      	movs	r3, #0
 80102f6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80102f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80102fc:	f04f 0300 	mov.w	r3, #0
 8010300:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 8010304:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010308:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801030c:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	0fdb      	lsrs	r3, r3, #31
 8010314:	b2da      	uxtb	r2, r3
 8010316:	2300      	movs	r3, #0
 8010318:	4053      	eors	r3, r2
 801031a:	b2db      	uxtb	r3, r3
 801031c:	2b00      	cmp	r3, #0
 801031e:	d012      	beq.n	8010346 <arm_softmax_s8+0x2e26>
        mult = 1 - mult;
 8010320:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8010324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010328:	2100      	movs	r1, #0
 801032a:	f1d2 0001 	rsbs	r0, r2, #1
 801032e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 8010332:	eb61 0303 	sbc.w	r3, r1, r3
 8010336:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801033a:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 801033e:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8010342:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8010346:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801034a:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	17da      	asrs	r2, r3, #31
 8010352:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 8010356:	f8c7 23ac 	str.w	r2, [r7, #940]	; 0x3ac
 801035a:	a3c9      	add	r3, pc, #804	; (adr r3, 8010680 <arm_softmax_s8+0x3160>)
 801035c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010360:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
 8010364:	fb02 f001 	mul.w	r0, r2, r1
 8010368:	f8d7 13a8 	ldr.w	r1, [r7, #936]	; 0x3a8
 801036c:	fb01 f103 	mul.w	r1, r1, r3
 8010370:	4401      	add	r1, r0
 8010372:	f8d7 03a8 	ldr.w	r0, [r7, #936]	; 0x3a8
 8010376:	fba0 2302 	umull	r2, r3, r0, r2
 801037a:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 801037e:	4613      	mov	r3, r2
 8010380:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 8010384:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8010388:	18cb      	adds	r3, r1, r3
 801038a:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 801038e:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8010392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010396:	f8d7 1528 	ldr.w	r1, [r7, #1320]	; 0x528
 801039a:	1851      	adds	r1, r2, r1
 801039c:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 80103a0:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 80103a4:	414b      	adcs	r3, r1
 80103a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80103aa:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80103ae:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80103b2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80103b6:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80103ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	da0a      	bge.n	80103d8 <arm_softmax_s8+0x2eb8>
 80103c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80103c6:	1851      	adds	r1, r2, r1
 80103c8:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80103cc:	f143 0300 	adc.w	r3, r3, #0
 80103d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80103d4:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80103d8:	f04f 0000 	mov.w	r0, #0
 80103dc:	f04f 0100 	mov.w	r1, #0
 80103e0:	0fd0      	lsrs	r0, r2, #31
 80103e2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80103e6:	17d9      	asrs	r1, r3, #31
 80103e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80103ec:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 80103f0:	4603      	mov	r3, r0
 80103f2:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80103f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80103f8:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 80103fc:	681a      	ldr	r2, [r3, #0]
 80103fe:	4b9e      	ldr	r3, [pc, #632]	; (8010678 <arm_softmax_s8+0x3158>)
 8010400:	429a      	cmp	r2, r3
 8010402:	d10e      	bne.n	8010422 <arm_softmax_s8+0x2f02>
 8010404:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010408:	f5a3 733f 	sub.w	r3, r3, #764	; 0x2fc
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010412:	d106      	bne.n	8010422 <arm_softmax_s8+0x2f02>
        result = Q31_MAX;
 8010414:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010418:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 801041c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010420:	6013      	str	r3, [r2, #0]
    return result;
 8010422:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010426:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 801042a:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 801042c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010430:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	441a      	add	r2, r3
 8010438:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801043c:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8010440:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8010442:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010446:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 801044a:	2300      	movs	r3, #0
 801044c:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801044e:	2102      	movs	r1, #2
 8010450:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010454:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 8010458:	1e4b      	subs	r3, r1, #1
 801045a:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801045c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010460:	f5a3 7146 	sub.w	r1, r3, #792	; 0x318
 8010464:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010468:	f5a3 7243 	sub.w	r2, r3, #780	; 0x30c
 801046c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010470:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8010474:	6812      	ldr	r2, [r2, #0]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	4013      	ands	r3, r2
 801047a:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801047c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010480:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8010484:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010488:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	105b      	asrs	r3, r3, #1
 8010490:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 8010492:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010496:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 801049a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801049e:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	105b      	asrs	r3, r3, #1
 80104a6:	6013      	str	r3, [r2, #0]
    if (result < 0)
 80104a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80104ac:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	da0a      	bge.n	80104cc <arm_softmax_s8+0x2fac>
        threshold++;
 80104b6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80104ba:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 80104be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80104c2:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	3301      	adds	r3, #1
 80104ca:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80104cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80104d0:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 80104d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80104d8:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80104dc:	6812      	ldr	r2, [r2, #0]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	429a      	cmp	r2, r3
 80104e2:	dd0a      	ble.n	80104fa <arm_softmax_s8+0x2fda>
        result++;
 80104e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80104e8:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 80104ec:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80104f0:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	3301      	adds	r3, #1
 80104f8:	6013      	str	r3, [r2, #0]
    return result;
 80104fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80104fe:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8010502:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 8010504:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010508:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	441a      	add	r2, r3
 8010510:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010514:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8010518:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801051a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801051e:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 8010522:	2300      	movs	r3, #0
 8010524:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010526:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801052a:	f04f 0300 	mov.w	r3, #0
 801052e:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 8010532:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010536:	2200      	movs	r2, #0
 8010538:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801053c:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	0fdb      	lsrs	r3, r3, #31
 8010544:	b2db      	uxtb	r3, r3
 8010546:	4053      	eors	r3, r2
 8010548:	b2db      	uxtb	r3, r3
 801054a:	2b00      	cmp	r3, #0
 801054c:	d012      	beq.n	8010574 <arm_softmax_s8+0x3054>
        mult = 1 - mult;
 801054e:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8010552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010556:	2100      	movs	r1, #0
 8010558:	f1d2 0001 	rsbs	r0, r2, #1
 801055c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8010560:	eb61 0303 	sbc.w	r3, r1, r3
 8010564:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010568:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 801056c:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 8010570:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8010574:	a13e      	add	r1, pc, #248	; (adr r1, 8010670 <arm_softmax_s8+0x3150>)
 8010576:	e9d1 0100 	ldrd	r0, r1, [r1]
 801057a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801057e:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	17da      	asrs	r2, r3, #31
 8010586:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 801058a:	f8c7 23a4 	str.w	r2, [r7, #932]	; 0x3a4
 801058e:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8010592:	fb03 f201 	mul.w	r2, r3, r1
 8010596:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 801059a:	fb00 f303 	mul.w	r3, r0, r3
 801059e:	4413      	add	r3, r2
 80105a0:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 80105a4:	fba0 1202 	umull	r1, r2, r0, r2
 80105a8:	f8c7 2524 	str.w	r2, [r7, #1316]	; 0x524
 80105ac:	460a      	mov	r2, r1
 80105ae:	f8c7 2520 	str.w	r2, [r7, #1312]	; 0x520
 80105b2:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 80105b6:	4413      	add	r3, r2
 80105b8:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 80105bc:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80105c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c4:	f8d7 1520 	ldr.w	r1, [r7, #1312]	; 0x520
 80105c8:	1851      	adds	r1, r2, r1
 80105ca:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80105ce:	f8d7 1524 	ldr.w	r1, [r7, #1316]	; 0x524
 80105d2:	414b      	adcs	r3, r1
 80105d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80105d8:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80105dc:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 80105e0:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 80105e4:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80105e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	da0a      	bge.n	8010606 <arm_softmax_s8+0x30e6>
 80105f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80105f4:	1851      	adds	r1, r2, r1
 80105f6:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80105fa:	f143 0300 	adc.w	r3, r3, #0
 80105fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010602:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8010606:	f04f 0000 	mov.w	r0, #0
 801060a:	f04f 0100 	mov.w	r1, #0
 801060e:	0fd0      	lsrs	r0, r2, #31
 8010610:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010614:	17d9      	asrs	r1, r3, #31
 8010616:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801061a:	f5a3 7249 	sub.w	r2, r3, #804	; 0x324
 801061e:	4603      	mov	r3, r0
 8010620:	6013      	str	r3, [r2, #0]
    return result;
 8010622:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010626:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 801062a:	6819      	ldr	r1, [r3, #0]
    int32_t result = 1895147668 +
 801062c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010630:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8010634:	4b11      	ldr	r3, [pc, #68]	; (801067c <arm_softmax_s8+0x315c>)
 8010636:	440b      	add	r3, r1
 8010638:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1672461947)
 801063a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801063e:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8010642:	6819      	ldr	r1, [r3, #0]
 8010644:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010648:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 801064c:	1c4b      	adds	r3, r1, #1
 801064e:	6013      	str	r3, [r2, #0]
 8010650:	2301      	movs	r3, #1
 8010652:	fa03 f201 	lsl.w	r2, r3, r1
 8010656:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801065a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	4013      	ands	r3, r2
 8010662:	2b00      	cmp	r3, #0
 8010664:	d010      	beq.n	8010688 <arm_softmax_s8+0x3168>
 8010666:	f04f 32ff 	mov.w	r2, #4294967295
 801066a:	e00e      	b.n	801068a <arm_softmax_s8+0x316a>
 801066c:	f3af 8000 	nop.w
 8010670:	70f5a894 	.word	0x70f5a894
 8010674:	00000000 	.word	0x00000000
 8010678:	2aaaaaab 	.word	0x2aaaaaab
 801067c:	70f5a894 	.word	0x70f5a894
 8010680:	2aaaaaab 	.word	0x2aaaaaab
 8010684:	00000000 	.word	0x00000000
 8010688:	2200      	movs	r2, #0
 801068a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801068e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8010692:	601a      	str	r2, [r3, #0]
 8010694:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010698:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 801069c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106a0:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80106a8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106ac:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 80106b0:	2300      	movs	r3, #0
 80106b2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 80106b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80106b8:	f04f 0300 	mov.w	r3, #0
 80106bc:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 80106c0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 80106c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80106c8:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	0fdb      	lsrs	r3, r3, #31
 80106d0:	b2da      	uxtb	r2, r3
 80106d2:	2300      	movs	r3, #0
 80106d4:	4053      	eors	r3, r2
 80106d6:	b2db      	uxtb	r3, r3
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d012      	beq.n	8010702 <arm_softmax_s8+0x31e2>
        mult = 1 - mult;
 80106dc:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 80106e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e4:	2100      	movs	r1, #0
 80106e6:	f1d2 0001 	rsbs	r0, r2, #1
 80106ea:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 80106ee:	eb61 0303 	sbc.w	r3, r1, r3
 80106f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80106f6:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80106fa:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 80106fe:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8010702:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010706:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	17da      	asrs	r2, r3, #31
 801070e:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 8010712:	f8c7 239c 	str.w	r2, [r7, #924]	; 0x39c
 8010716:	a3c4      	add	r3, pc, #784	; (adr r3, 8010a28 <arm_softmax_s8+0x3508>)
 8010718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801071c:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 8010720:	fb02 f001 	mul.w	r0, r2, r1
 8010724:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 8010728:	fb01 f103 	mul.w	r1, r1, r3
 801072c:	4401      	add	r1, r0
 801072e:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 8010732:	fba0 2302 	umull	r2, r3, r0, r2
 8010736:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 801073a:	4613      	mov	r3, r2
 801073c:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 8010740:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8010744:	18cb      	adds	r3, r1, r3
 8010746:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 801074a:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 801074e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010752:	f8d7 1518 	ldr.w	r1, [r7, #1304]	; 0x518
 8010756:	1851      	adds	r1, r2, r1
 8010758:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801075c:	f8d7 151c 	ldr.w	r1, [r7, #1308]	; 0x51c
 8010760:	414b      	adcs	r3, r1
 8010762:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010766:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 801076a:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 801076e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010772:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8010776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801077a:	2b00      	cmp	r3, #0
 801077c:	da0a      	bge.n	8010794 <arm_softmax_s8+0x3274>
 801077e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010782:	1851      	adds	r1, r2, r1
 8010784:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8010788:	f143 0300 	adc.w	r3, r3, #0
 801078c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010790:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8010794:	f04f 0000 	mov.w	r0, #0
 8010798:	f04f 0100 	mov.w	r1, #0
 801079c:	0fd0      	lsrs	r0, r2, #31
 801079e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80107a2:	17d9      	asrs	r1, r3, #31
 80107a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107a8:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 80107ac:	4603      	mov	r3, r0
 80107ae:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80107b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107b4:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80107b8:	681a      	ldr	r2, [r3, #0]
 80107ba:	4b99      	ldr	r3, [pc, #612]	; (8010a20 <arm_softmax_s8+0x3500>)
 80107bc:	429a      	cmp	r2, r3
 80107be:	d10e      	bne.n	80107de <arm_softmax_s8+0x32be>
 80107c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107c4:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80107ce:	d106      	bne.n	80107de <arm_softmax_s8+0x32be>
        result = Q31_MAX;
 80107d0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107d4:	f5a3 724f 	sub.w	r2, r3, #828	; 0x33c
 80107d8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80107dc:	6013      	str	r3, [r2, #0]
    return result;
 80107de:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107e2:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 80107e6:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1672461947)
 80107e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107ec:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	ea02 0003 	and.w	r0, r2, r3
 80107f6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80107fa:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	43da      	mvns	r2, r3
 8010802:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010806:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	ea02 0103 	and.w	r1, r2, r3
 8010810:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010814:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8010818:	ea80 0301 	eor.w	r3, r0, r1
 801081c:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1302514674)
 801081e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010822:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8010826:	6819      	ldr	r1, [r3, #0]
 8010828:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801082c:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8010830:	1c4b      	adds	r3, r1, #1
 8010832:	6013      	str	r3, [r2, #0]
 8010834:	2301      	movs	r3, #1
 8010836:	fa03 f201 	lsl.w	r2, r3, r1
 801083a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801083e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	4013      	ands	r3, r2
 8010846:	2b00      	cmp	r3, #0
 8010848:	d002      	beq.n	8010850 <arm_softmax_s8+0x3330>
 801084a:	f04f 32ff 	mov.w	r2, #4294967295
 801084e:	e000      	b.n	8010852 <arm_softmax_s8+0x3332>
 8010850:	2200      	movs	r2, #0
 8010852:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010856:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801085a:	601a      	str	r2, [r3, #0]
 801085c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010860:	f5a3 7253 	sub.w	r2, r3, #844	; 0x34c
 8010864:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010868:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8010870:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010874:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8010878:	2300      	movs	r3, #0
 801087a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801087c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010880:	f04f 0300 	mov.w	r3, #0
 8010884:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 8010888:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801088c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010890:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	0fdb      	lsrs	r3, r3, #31
 8010898:	b2da      	uxtb	r2, r3
 801089a:	2300      	movs	r3, #0
 801089c:	4053      	eors	r3, r2
 801089e:	b2db      	uxtb	r3, r3
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d012      	beq.n	80108ca <arm_softmax_s8+0x33aa>
        mult = 1 - mult;
 80108a4:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80108a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ac:	2100      	movs	r1, #0
 80108ae:	f1d2 0001 	rsbs	r0, r2, #1
 80108b2:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 80108b6:	eb61 0303 	sbc.w	r3, r1, r3
 80108ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80108be:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 80108c2:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 80108c6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80108ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80108ce:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	17da      	asrs	r2, r3, #31
 80108d6:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 80108da:	f8c7 2394 	str.w	r2, [r7, #916]	; 0x394
 80108de:	a34e      	add	r3, pc, #312	; (adr r3, 8010a18 <arm_softmax_s8+0x34f8>)
 80108e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108e4:	f8d7 1394 	ldr.w	r1, [r7, #916]	; 0x394
 80108e8:	fb02 f001 	mul.w	r0, r2, r1
 80108ec:	f8d7 1390 	ldr.w	r1, [r7, #912]	; 0x390
 80108f0:	fb01 f103 	mul.w	r1, r1, r3
 80108f4:	4401      	add	r1, r0
 80108f6:	f8d7 0390 	ldr.w	r0, [r7, #912]	; 0x390
 80108fa:	fba0 2302 	umull	r2, r3, r0, r2
 80108fe:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8010902:	4613      	mov	r3, r2
 8010904:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8010908:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 801090c:	18cb      	adds	r3, r1, r3
 801090e:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8010912:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8010916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801091a:	f8d7 1510 	ldr.w	r1, [r7, #1296]	; 0x510
 801091e:	1851      	adds	r1, r2, r1
 8010920:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8010924:	f8d7 1514 	ldr.w	r1, [r7, #1300]	; 0x514
 8010928:	414b      	adcs	r3, r1
 801092a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801092e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8010932:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 8010936:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 801093a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 801093e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010942:	2b00      	cmp	r3, #0
 8010944:	da0a      	bge.n	801095c <arm_softmax_s8+0x343c>
 8010946:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801094a:	1851      	adds	r1, r2, r1
 801094c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8010950:	f143 0300 	adc.w	r3, r3, #0
 8010954:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010958:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 801095c:	f04f 0000 	mov.w	r0, #0
 8010960:	f04f 0100 	mov.w	r1, #0
 8010964:	0fd0      	lsrs	r0, r2, #31
 8010966:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801096a:	17d9      	asrs	r1, r3, #31
 801096c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010970:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 8010974:	4603      	mov	r3, r0
 8010976:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010978:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801097c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8010980:	681a      	ldr	r2, [r3, #0]
 8010982:	4b28      	ldr	r3, [pc, #160]	; (8010a24 <arm_softmax_s8+0x3504>)
 8010984:	429a      	cmp	r2, r3
 8010986:	d10e      	bne.n	80109a6 <arm_softmax_s8+0x3486>
 8010988:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801098c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010996:	d106      	bne.n	80109a6 <arm_softmax_s8+0x3486>
        result = Q31_MAX;
 8010998:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801099c:	f5a3 7254 	sub.w	r2, r3, #848	; 0x350
 80109a0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80109a4:	6013      	str	r3, [r2, #0]
    return result;
 80109a6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80109aa:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 80109ae:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 80109b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80109b4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	ea02 0003 	and.w	r0, r2, r3
 80109be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80109c2:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	43da      	mvns	r2, r3
 80109ca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80109ce:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	ea02 0103 	and.w	r1, r2, r3
 80109d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80109dc:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80109e0:	ea80 0301 	eor.w	r3, r0, r1
 80109e4:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(790015084)
 80109e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80109ea:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80109ee:	6819      	ldr	r1, [r3, #0]
 80109f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80109f4:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 80109f8:	1c4b      	adds	r3, r1, #1
 80109fa:	6013      	str	r3, [r2, #0]
 80109fc:	2301      	movs	r3, #1
 80109fe:	fa03 f201 	lsl.w	r2, r3, r1
 8010a02:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a06:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	4013      	ands	r3, r2
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d00e      	beq.n	8010a30 <arm_softmax_s8+0x3510>
 8010a12:	f04f 32ff 	mov.w	r2, #4294967295
 8010a16:	e00c      	b.n	8010a32 <arm_softmax_s8+0x3512>
 8010a18:	4da2cbf2 	.word	0x4da2cbf2
 8010a1c:	00000000 	.word	0x00000000
 8010a20:	63afbe7b 	.word	0x63afbe7b
 8010a24:	4da2cbf2 	.word	0x4da2cbf2
 8010a28:	63afbe7b 	.word	0x63afbe7b
 8010a2c:	00000000 	.word	0x00000000
 8010a30:	2200      	movs	r2, #0
 8010a32:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a36:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8010a3a:	601a      	str	r2, [r3, #0]
 8010a3c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a40:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
 8010a44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a48:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8010a50:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a54:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8010a58:	2300      	movs	r3, #0
 8010a5a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010a5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010a60:	f04f 0300 	mov.w	r3, #0
 8010a64:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 8010a68:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010a6c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010a70:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	0fdb      	lsrs	r3, r3, #31
 8010a78:	b2da      	uxtb	r2, r3
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	4053      	eors	r3, r2
 8010a7e:	b2db      	uxtb	r3, r3
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d012      	beq.n	8010aaa <arm_softmax_s8+0x358a>
        mult = 1 - mult;
 8010a84:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8010a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a8c:	2100      	movs	r1, #0
 8010a8e:	f1d2 0001 	rsbs	r0, r2, #1
 8010a92:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 8010a96:	eb61 0303 	sbc.w	r3, r1, r3
 8010a9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010a9e:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8010aa2:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8010aa6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8010aaa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010aae:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	17da      	asrs	r2, r3, #31
 8010ab6:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 8010aba:	f8c7 238c 	str.w	r2, [r7, #908]	; 0x38c
 8010abe:	a3c0      	add	r3, pc, #768	; (adr r3, 8010dc0 <arm_softmax_s8+0x38a0>)
 8010ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ac4:	f8d7 138c 	ldr.w	r1, [r7, #908]	; 0x38c
 8010ac8:	fb02 f001 	mul.w	r0, r2, r1
 8010acc:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8010ad0:	fb01 f103 	mul.w	r1, r1, r3
 8010ad4:	4401      	add	r1, r0
 8010ad6:	f8d7 0388 	ldr.w	r0, [r7, #904]	; 0x388
 8010ada:	fba0 2302 	umull	r2, r3, r0, r2
 8010ade:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8010ae2:	4613      	mov	r3, r2
 8010ae4:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
 8010ae8:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8010aec:	18cb      	adds	r3, r1, r3
 8010aee:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8010af2:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8010af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010afa:	f8d7 1508 	ldr.w	r1, [r7, #1288]	; 0x508
 8010afe:	1851      	adds	r1, r2, r1
 8010b00:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8010b04:	f8d7 150c 	ldr.w	r1, [r7, #1292]	; 0x50c
 8010b08:	414b      	adcs	r3, r1
 8010b0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010b0e:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8010b12:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8010b16:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010b1a:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8010b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	da08      	bge.n	8010b38 <arm_softmax_s8+0x3618>
 8010b26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010b2a:	1851      	adds	r1, r2, r1
 8010b2c:	67b9      	str	r1, [r7, #120]	; 0x78
 8010b2e:	f143 0300 	adc.w	r3, r3, #0
 8010b32:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010b34:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8010b38:	f04f 0000 	mov.w	r0, #0
 8010b3c:	f04f 0100 	mov.w	r1, #0
 8010b40:	0fd0      	lsrs	r0, r2, #31
 8010b42:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010b46:	17d9      	asrs	r1, r3, #31
 8010b48:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b4c:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8010b50:	4603      	mov	r3, r0
 8010b52:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010b54:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b58:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8010b5c:	681a      	ldr	r2, [r3, #0]
 8010b5e:	4b96      	ldr	r3, [pc, #600]	; (8010db8 <arm_softmax_s8+0x3898>)
 8010b60:	429a      	cmp	r2, r3
 8010b62:	d10e      	bne.n	8010b82 <arm_softmax_s8+0x3662>
 8010b64:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b68:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010b72:	d106      	bne.n	8010b82 <arm_softmax_s8+0x3662>
        result = Q31_MAX;
 8010b74:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b78:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8010b7c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010b80:	6013      	str	r3, [r2, #0]
    return result;
 8010b82:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b86:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8010b8a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 8010b8c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b90:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	ea02 0003 	and.w	r0, r2, r3
 8010b9a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010b9e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	43da      	mvns	r2, r3
 8010ba6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010baa:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	ea02 0103 	and.w	r1, r2, r3
 8010bb4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010bb8:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8010bbc:	ea80 0301 	eor.w	r3, r0, r1
 8010bc0:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(290630308)
 8010bc2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010bc6:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8010bca:	6819      	ldr	r1, [r3, #0]
 8010bcc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010bd0:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8010bd4:	1c4b      	adds	r3, r1, #1
 8010bd6:	6013      	str	r3, [r2, #0]
 8010bd8:	2301      	movs	r3, #1
 8010bda:	fa03 f201 	lsl.w	r2, r3, r1
 8010bde:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010be2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	4013      	ands	r3, r2
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d002      	beq.n	8010bf4 <arm_softmax_s8+0x36d4>
 8010bee:	f04f 32ff 	mov.w	r2, #4294967295
 8010bf2:	e000      	b.n	8010bf6 <arm_softmax_s8+0x36d6>
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010bfa:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8010bfe:	601a      	str	r2, [r3, #0]
 8010c00:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c04:	f5a3 725b 	sub.w	r2, r3, #876	; 0x36c
 8010c08:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c0c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8010c14:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c18:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010c20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010c24:	f04f 0300 	mov.w	r3, #0
 8010c28:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8010c2c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010c30:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c34:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	0fdb      	lsrs	r3, r3, #31
 8010c3c:	b2da      	uxtb	r2, r3
 8010c3e:	2300      	movs	r3, #0
 8010c40:	4053      	eors	r3, r2
 8010c42:	b2db      	uxtb	r3, r3
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d010      	beq.n	8010c6a <arm_softmax_s8+0x374a>
        mult = 1 - mult;
 8010c48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8010c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c50:	2100      	movs	r1, #0
 8010c52:	f1d2 0001 	rsbs	r0, r2, #1
 8010c56:	6738      	str	r0, [r7, #112]	; 0x70
 8010c58:	eb61 0303 	sbc.w	r3, r1, r3
 8010c5c:	677b      	str	r3, [r7, #116]	; 0x74
 8010c5e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8010c62:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8010c66:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8010c6a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010c6e:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	17da      	asrs	r2, r3, #31
 8010c76:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 8010c7a:	f8c7 2384 	str.w	r2, [r7, #900]	; 0x384
 8010c7e:	a34c      	add	r3, pc, #304	; (adr r3, 8010db0 <arm_softmax_s8+0x3890>)
 8010c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c84:	f8d7 1384 	ldr.w	r1, [r7, #900]	; 0x384
 8010c88:	fb02 f001 	mul.w	r0, r2, r1
 8010c8c:	f8d7 1380 	ldr.w	r1, [r7, #896]	; 0x380
 8010c90:	fb01 f103 	mul.w	r1, r1, r3
 8010c94:	4401      	add	r1, r0
 8010c96:	f8d7 0380 	ldr.w	r0, [r7, #896]	; 0x380
 8010c9a:	fba0 2302 	umull	r2, r3, r0, r2
 8010c9e:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8010ca2:	4613      	mov	r3, r2
 8010ca4:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8010ca8:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 8010cac:	18cb      	adds	r3, r1, r3
 8010cae:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8010cb2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8010cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cba:	f8d7 1500 	ldr.w	r1, [r7, #1280]	; 0x500
 8010cbe:	1851      	adds	r1, r2, r1
 8010cc0:	66b9      	str	r1, [r7, #104]	; 0x68
 8010cc2:	f8d7 1504 	ldr.w	r1, [r7, #1284]	; 0x504
 8010cc6:	414b      	adcs	r3, r1
 8010cc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010cca:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8010cce:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8010cd2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010cd6:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8010cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	da08      	bge.n	8010cf4 <arm_softmax_s8+0x37d4>
 8010ce2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010ce6:	1851      	adds	r1, r2, r1
 8010ce8:	6639      	str	r1, [r7, #96]	; 0x60
 8010cea:	f143 0300 	adc.w	r3, r3, #0
 8010cee:	667b      	str	r3, [r7, #100]	; 0x64
 8010cf0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010cf4:	f04f 0000 	mov.w	r0, #0
 8010cf8:	f04f 0100 	mov.w	r1, #0
 8010cfc:	0fd0      	lsrs	r0, r2, #31
 8010cfe:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010d02:	17d9      	asrs	r1, r3, #31
 8010d04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010d08:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010d10:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010d14:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8010d18:	681a      	ldr	r2, [r3, #0]
 8010d1a:	4b28      	ldr	r3, [pc, #160]	; (8010dbc <arm_softmax_s8+0x389c>)
 8010d1c:	429a      	cmp	r2, r3
 8010d1e:	d10e      	bne.n	8010d3e <arm_softmax_s8+0x381e>
 8010d20:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010d24:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010d2e:	d106      	bne.n	8010d3e <arm_softmax_s8+0x381e>
        result = Q31_MAX;
 8010d30:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010d34:	f5a3 725c 	sub.w	r2, r3, #880	; 0x370
 8010d38:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010d3c:	6013      	str	r3, [r2, #0]
    return result;
 8010d3e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010d42:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8010d46:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 8010d48:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010d4c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	ea02 0003 	and.w	r0, r2, r3
 8010d56:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010d5a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	43da      	mvns	r2, r3
 8010d62:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010d66:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	ea02 0103 	and.w	r1, r2, r3
 8010d70:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010d74:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8010d78:	ea80 0301 	eor.w	r3, r0, r1
 8010d7c:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(39332535)
 8010d7e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010d82:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8010d86:	6819      	ldr	r1, [r3, #0]
 8010d88:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010d8c:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8010d90:	1c4b      	adds	r3, r1, #1
 8010d92:	6013      	str	r3, [r2, #0]
 8010d94:	2301      	movs	r3, #1
 8010d96:	fa03 f201 	lsl.w	r2, r3, r1
 8010d9a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010d9e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	4013      	ands	r3, r2
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d00e      	beq.n	8010dc8 <arm_softmax_s8+0x38a8>
 8010daa:	f04f 32ff 	mov.w	r2, #4294967295
 8010dae:	e00c      	b.n	8010dca <arm_softmax_s8+0x38aa>
 8010db0:	1152aaa4 	.word	0x1152aaa4
 8010db4:	00000000 	.word	0x00000000
 8010db8:	2f16ac6c 	.word	0x2f16ac6c
 8010dbc:	1152aaa4 	.word	0x1152aaa4
 8010dc0:	2f16ac6c 	.word	0x2f16ac6c
 8010dc4:	00000000 	.word	0x00000000
 8010dc8:	2200      	movs	r2, #0
 8010dca:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010dce:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8010dd2:	601a      	str	r2, [r3, #0]
 8010dd4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010dd8:	f5a3 725f 	sub.w	r2, r3, #892	; 0x37c
 8010ddc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010de0:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8010de8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010dec:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8010df0:	2300      	movs	r3, #0
 8010df2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010df4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010df8:	f04f 0300 	mov.w	r3, #0
 8010dfc:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 8010e00:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010e04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e08:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	0fdb      	lsrs	r3, r3, #31
 8010e10:	b2da      	uxtb	r2, r3
 8010e12:	2300      	movs	r3, #0
 8010e14:	4053      	eors	r3, r2
 8010e16:	b2db      	uxtb	r3, r3
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d010      	beq.n	8010e3e <arm_softmax_s8+0x391e>
        mult = 1 - mult;
 8010e1c:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8010e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e24:	2100      	movs	r1, #0
 8010e26:	f1d2 0001 	rsbs	r0, r2, #1
 8010e2a:	65b8      	str	r0, [r7, #88]	; 0x58
 8010e2c:	eb61 0303 	sbc.w	r3, r1, r3
 8010e30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010e32:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8010e36:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8010e3a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8010e3e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010e42:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	17da      	asrs	r2, r3, #31
 8010e4a:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8010e4e:	f8c7 237c 	str.w	r2, [r7, #892]	; 0x37c
 8010e52:	a3bd      	add	r3, pc, #756	; (adr r3, 8011148 <arm_softmax_s8+0x3c28>)
 8010e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e58:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8010e5c:	fb02 f001 	mul.w	r0, r2, r1
 8010e60:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 8010e64:	fb01 f103 	mul.w	r1, r1, r3
 8010e68:	4401      	add	r1, r0
 8010e6a:	f8d7 0378 	ldr.w	r0, [r7, #888]	; 0x378
 8010e6e:	fba0 2302 	umull	r2, r3, r0, r2
 8010e72:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8010e76:	4613      	mov	r3, r2
 8010e78:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
 8010e7c:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8010e80:	18cb      	adds	r3, r1, r3
 8010e82:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8010e86:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8010e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e8e:	f8d7 14f8 	ldr.w	r1, [r7, #1272]	; 0x4f8
 8010e92:	1851      	adds	r1, r2, r1
 8010e94:	6539      	str	r1, [r7, #80]	; 0x50
 8010e96:	f8d7 14fc 	ldr.w	r1, [r7, #1276]	; 0x4fc
 8010e9a:	414b      	adcs	r3, r1
 8010e9c:	657b      	str	r3, [r7, #84]	; 0x54
 8010e9e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8010ea2:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8010ea6:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8010eaa:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8010eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	da08      	bge.n	8010ec8 <arm_softmax_s8+0x39a8>
 8010eb6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010eba:	1851      	adds	r1, r2, r1
 8010ebc:	64b9      	str	r1, [r7, #72]	; 0x48
 8010ebe:	f143 0300 	adc.w	r3, r3, #0
 8010ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010ec4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8010ec8:	f04f 0000 	mov.w	r0, #0
 8010ecc:	f04f 0100 	mov.w	r1, #0
 8010ed0:	0fd0      	lsrs	r0, r2, #31
 8010ed2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8010ed6:	17d9      	asrs	r1, r3, #31
 8010ed8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010edc:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010ee4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010ee8:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8010eec:	681a      	ldr	r2, [r3, #0]
 8010eee:	4b94      	ldr	r3, [pc, #592]	; (8011140 <arm_softmax_s8+0x3c20>)
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	d10e      	bne.n	8010f12 <arm_softmax_s8+0x39f2>
 8010ef4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010ef8:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010f02:	d106      	bne.n	8010f12 <arm_softmax_s8+0x39f2>
        result = Q31_MAX;
 8010f04:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f08:	f5a3 7260 	sub.w	r2, r3, #896	; 0x380
 8010f0c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010f10:	6013      	str	r3, [r2, #0]
    return result;
 8010f12:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f16:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8010f1a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 8010f1c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f20:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	ea02 0003 	and.w	r0, r2, r3
 8010f2a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f2e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	43da      	mvns	r2, r3
 8010f36:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f3a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	ea02 0103 	and.w	r1, r2, r3
 8010f44:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f48:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8010f4c:	ea80 0301 	eor.w	r3, r0, r1
 8010f50:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(720401)
 8010f52:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f56:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8010f5a:	6819      	ldr	r1, [r3, #0]
 8010f5c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f60:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8010f64:	1c4b      	adds	r3, r1, #1
 8010f66:	6013      	str	r3, [r2, #0]
 8010f68:	2301      	movs	r3, #1
 8010f6a:	fa03 f201 	lsl.w	r2, r3, r1
 8010f6e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f72:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	4013      	ands	r3, r2
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d002      	beq.n	8010f84 <arm_softmax_s8+0x3a64>
 8010f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8010f82:	e000      	b.n	8010f86 <arm_softmax_s8+0x3a66>
 8010f84:	2200      	movs	r2, #0
 8010f86:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f8a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8010f8e:	601a      	str	r2, [r3, #0]
 8010f90:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f94:	f5a3 7263 	sub.w	r2, r3, #908	; 0x38c
 8010f98:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010f9c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8010fa4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010fa8:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 8010fac:	2300      	movs	r3, #0
 8010fae:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8010fb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010fb4:	f04f 0300 	mov.w	r3, #0
 8010fb8:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 8010fbc:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8010fc0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010fc4:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	0fdb      	lsrs	r3, r3, #31
 8010fcc:	b2da      	uxtb	r2, r3
 8010fce:	2300      	movs	r3, #0
 8010fd0:	4053      	eors	r3, r2
 8010fd2:	b2db      	uxtb	r3, r3
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d010      	beq.n	8010ffa <arm_softmax_s8+0x3ada>
        mult = 1 - mult;
 8010fd8:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8010fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fe0:	2100      	movs	r1, #0
 8010fe2:	f1d2 0001 	rsbs	r0, r2, #1
 8010fe6:	6438      	str	r0, [r7, #64]	; 0x40
 8010fe8:	eb61 0303 	sbc.w	r3, r1, r3
 8010fec:	647b      	str	r3, [r7, #68]	; 0x44
 8010fee:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8010ff2:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 8010ff6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 8010ffa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8010ffe:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	17da      	asrs	r2, r3, #31
 8011006:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 801100a:	f8c7 2374 	str.w	r2, [r7, #884]	; 0x374
 801100e:	4a4d      	ldr	r2, [pc, #308]	; (8011144 <arm_softmax_s8+0x3c24>)
 8011010:	f04f 0300 	mov.w	r3, #0
 8011014:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 8011018:	fb02 f001 	mul.w	r0, r2, r1
 801101c:	f8d7 1370 	ldr.w	r1, [r7, #880]	; 0x370
 8011020:	fb01 f103 	mul.w	r1, r1, r3
 8011024:	4401      	add	r1, r0
 8011026:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 801102a:	fba0 2302 	umull	r2, r3, r0, r2
 801102e:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8011032:	4613      	mov	r3, r2
 8011034:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 8011038:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 801103c:	18cb      	adds	r3, r1, r3
 801103e:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8011042:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8011046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801104a:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	; 0x4f0
 801104e:	1851      	adds	r1, r2, r1
 8011050:	63b9      	str	r1, [r7, #56]	; 0x38
 8011052:	f8d7 14f4 	ldr.w	r1, [r7, #1268]	; 0x4f4
 8011056:	414b      	adcs	r3, r1
 8011058:	63fb      	str	r3, [r7, #60]	; 0x3c
 801105a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 801105e:	f507 62c2 	add.w	r2, r7, #1552	; 0x610
 8011062:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8011066:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 801106a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801106e:	2b00      	cmp	r3, #0
 8011070:	da08      	bge.n	8011084 <arm_softmax_s8+0x3b64>
 8011072:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011076:	1851      	adds	r1, r2, r1
 8011078:	6339      	str	r1, [r7, #48]	; 0x30
 801107a:	f143 0300 	adc.w	r3, r3, #0
 801107e:	637b      	str	r3, [r7, #52]	; 0x34
 8011080:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8011084:	f04f 0000 	mov.w	r0, #0
 8011088:	f04f 0100 	mov.w	r1, #0
 801108c:	0fd0      	lsrs	r0, r2, #31
 801108e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011092:	17d9      	asrs	r1, r3, #31
 8011094:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011098:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 801109c:	4603      	mov	r3, r0
 801109e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80110a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110a4:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80110a8:	681a      	ldr	r2, [r3, #0]
 80110aa:	4b26      	ldr	r3, [pc, #152]	; (8011144 <arm_softmax_s8+0x3c24>)
 80110ac:	429a      	cmp	r2, r3
 80110ae:	d10e      	bne.n	80110ce <arm_softmax_s8+0x3bae>
 80110b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110b4:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80110be:	d106      	bne.n	80110ce <arm_softmax_s8+0x3bae>
        result = Q31_MAX;
 80110c0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110c4:	f5a3 7264 	sub.w	r2, r3, #912	; 0x390
 80110c8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80110cc:	6013      	str	r3, [r2, #0]
    return result;
 80110ce:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110d2:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80110d6:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 80110d8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110dc:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	ea02 0003 	and.w	r0, r2, r3
 80110e6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110ea:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	43da      	mvns	r2, r3
 80110f2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80110f6:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	ea02 0103 	and.w	r1, r2, r3
 8011100:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011104:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 8011108:	ea80 0301 	eor.w	r3, r0, r1
 801110c:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(242)
 801110e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011112:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8011116:	6819      	ldr	r1, [r3, #0]
 8011118:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801111c:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8011120:	1c4b      	adds	r3, r1, #1
 8011122:	6013      	str	r3, [r2, #0]
 8011124:	2301      	movs	r3, #1
 8011126:	fa03 f201 	lsl.w	r2, r3, r1
 801112a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801112e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	4013      	ands	r3, r2
 8011136:	2b00      	cmp	r3, #0
 8011138:	d00a      	beq.n	8011150 <arm_softmax_s8+0x3c30>
 801113a:	f04f 32ff 	mov.w	r2, #4294967295
 801113e:	e008      	b.n	8011152 <arm_softmax_s8+0x3c32>
 8011140:	02582ab7 	.word	0x02582ab7
 8011144:	000afe11 	.word	0x000afe11
 8011148:	02582ab7 	.word	0x02582ab7
 801114c:	00000000 	.word	0x00000000
 8011150:	2200      	movs	r2, #0
 8011152:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011156:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 801115a:	601a      	str	r2, [r3, #0]
 801115c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011160:	f5a3 7267 	sub.w	r2, r3, #924	; 0x39c
 8011164:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011168:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8011170:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011174:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8011178:	2300      	movs	r3, #0
 801117a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 801117c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011180:	f04f 0300 	mov.w	r3, #0
 8011184:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 8011188:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 801118c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011190:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	0fdb      	lsrs	r3, r3, #31
 8011198:	b2da      	uxtb	r2, r3
 801119a:	2300      	movs	r3, #0
 801119c:	4053      	eors	r3, r2
 801119e:	b2db      	uxtb	r3, r3
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d010      	beq.n	80111c6 <arm_softmax_s8+0x3ca6>
        mult = 1 - mult;
 80111a4:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80111a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ac:	2100      	movs	r1, #0
 80111ae:	f1d2 0001 	rsbs	r0, r2, #1
 80111b2:	62b8      	str	r0, [r7, #40]	; 0x28
 80111b4:	eb61 0303 	sbc.w	r3, r1, r3
 80111b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80111ba:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80111be:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 80111c2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 80111c6:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80111ca:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	17da      	asrs	r2, r3, #31
 80111d2:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 80111d6:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 80111da:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 80111de:	f04f 0300 	mov.w	r3, #0
 80111e2:	f8d7 136c 	ldr.w	r1, [r7, #876]	; 0x36c
 80111e6:	fb02 f001 	mul.w	r0, r2, r1
 80111ea:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 80111ee:	fb01 f103 	mul.w	r1, r1, r3
 80111f2:	4401      	add	r1, r0
 80111f4:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 80111f8:	fba0 2302 	umull	r2, r3, r0, r2
 80111fc:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 8011200:	4613      	mov	r3, r2
 8011202:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 8011206:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 801120a:	18cb      	adds	r3, r1, r3
 801120c:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 8011210:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8011214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011218:	f8d7 14e8 	ldr.w	r1, [r7, #1256]	; 0x4e8
 801121c:	1851      	adds	r1, r2, r1
 801121e:	6239      	str	r1, [r7, #32]
 8011220:	f8d7 14ec 	ldr.w	r1, [r7, #1260]	; 0x4ec
 8011224:	414b      	adcs	r3, r1
 8011226:	627b      	str	r3, [r7, #36]	; 0x24
 8011228:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801122c:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8011230:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8011234:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8011238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801123c:	2b00      	cmp	r3, #0
 801123e:	da08      	bge.n	8011252 <arm_softmax_s8+0x3d32>
 8011240:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011244:	1851      	adds	r1, r2, r1
 8011246:	61b9      	str	r1, [r7, #24]
 8011248:	f143 0300 	adc.w	r3, r3, #0
 801124c:	61fb      	str	r3, [r7, #28]
 801124e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011252:	f04f 0000 	mov.w	r0, #0
 8011256:	f04f 0100 	mov.w	r1, #0
 801125a:	0fd0      	lsrs	r0, r2, #31
 801125c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011260:	17d9      	asrs	r1, r3, #31
 8011262:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011266:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 801126a:	4603      	mov	r3, r0
 801126c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801126e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011272:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	2bf2      	cmp	r3, #242	; 0xf2
 801127a:	d10e      	bne.n	801129a <arm_softmax_s8+0x3d7a>
 801127c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011280:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801128a:	d106      	bne.n	801129a <arm_softmax_s8+0x3d7a>
        result = Q31_MAX;
 801128c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011290:	f5a3 7268 	sub.w	r2, r3, #928	; 0x3a0
 8011294:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011298:	6013      	str	r3, [r2, #0]
    return result;
 801129a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801129e:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 80112a2:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 80112a4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80112a8:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	ea02 0003 	and.w	r0, r2, r3
 80112b2:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80112b6:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	43da      	mvns	r2, r3
 80112be:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80112c2:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	ea02 0103 	and.w	r1, r2, r3
 80112cc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80112d0:	f5a3 724d 	sub.w	r2, r3, #820	; 0x334
 80112d4:	ea80 0301 	eor.w	r3, r0, r1
 80112d8:	6013      	str	r3, [r2, #0]
    mask = MASK_IF_ZERO(val);
 80112da:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80112de:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d102      	bne.n	80112ee <arm_softmax_s8+0x3dce>
 80112e8:	f04f 32ff 	mov.w	r2, #4294967295
 80112ec:	e000      	b.n	80112f0 <arm_softmax_s8+0x3dd0>
 80112ee:	2200      	movs	r2, #0
 80112f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80112f4:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80112f8:	601a      	str	r2, [r3, #0]
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 80112fa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80112fe:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011308:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801130c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	43da      	mvns	r2, r3
 8011314:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011318:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	4013      	ands	r3, r2
 8011320:	4059      	eors	r1, r3
 8011322:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011326:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 801132a:	f8d7 3984 	ldr.w	r3, [r7, #2436]	; 0x984
 801132e:	6013      	str	r3, [r2, #0]
 8011330:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011334:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8011338:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 801133a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801133e:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8011342:	2300      	movs	r3, #0
 8011344:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 8011346:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801134a:	f04f 0300 	mov.w	r3, #0
 801134e:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 8011352:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 8011356:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801135a:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	0fdb      	lsrs	r3, r3, #31
 8011362:	b2da      	uxtb	r2, r3
 8011364:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011368:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	0fdb      	lsrs	r3, r3, #31
 8011370:	b2db      	uxtb	r3, r3
 8011372:	4053      	eors	r3, r2
 8011374:	b2db      	uxtb	r3, r3
 8011376:	2b00      	cmp	r3, #0
 8011378:	d010      	beq.n	801139c <arm_softmax_s8+0x3e7c>
        mult = 1 - mult;
 801137a:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 801137e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011382:	2100      	movs	r1, #0
 8011384:	f1d2 0001 	rsbs	r0, r2, #1
 8011388:	6138      	str	r0, [r7, #16]
 801138a:	eb61 0303 	sbc.w	r3, r1, r3
 801138e:	617b      	str	r3, [r7, #20]
 8011390:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8011394:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8011398:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 801139c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113a0:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	17da      	asrs	r2, r3, #31
 80113a8:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 80113ac:	f8c7 23ec 	str.w	r2, [r7, #1004]	; 0x3ec
 80113b0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80113b4:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	17da      	asrs	r2, r3, #31
 80113bc:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 80113c0:	f8c7 23e4 	str.w	r2, [r7, #996]	; 0x3e4
 80113c4:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	; 0x3e8
 80113c8:	460b      	mov	r3, r1
 80113ca:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 80113ce:	fb02 f203 	mul.w	r2, r2, r3
 80113d2:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80113d6:	e9c7 01fa 	strd	r0, r1, [r7, #1000]	; 0x3e8
 80113da:	4601      	mov	r1, r0
 80113dc:	fb01 f303 	mul.w	r3, r1, r3
 80113e0:	4413      	add	r3, r2
 80113e2:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 80113e6:	f8d7 13e0 	ldr.w	r1, [r7, #992]	; 0x3e0
 80113ea:	fba2 1201 	umull	r1, r2, r2, r1
 80113ee:	f8c7 254c 	str.w	r2, [r7, #1356]	; 0x54c
 80113f2:	460a      	mov	r2, r1
 80113f4:	f8c7 2548 	str.w	r2, [r7, #1352]	; 0x548
 80113f8:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 80113fc:	4413      	add	r3, r2
 80113fe:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 8011402:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8011406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801140a:	f8d7 1548 	ldr.w	r1, [r7, #1352]	; 0x548
 801140e:	1851      	adds	r1, r2, r1
 8011410:	60b9      	str	r1, [r7, #8]
 8011412:	f8d7 154c 	ldr.w	r1, [r7, #1356]	; 0x54c
 8011416:	414b      	adcs	r3, r1
 8011418:	60fb      	str	r3, [r7, #12]
 801141a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801141e:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8011422:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 8011426:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 801142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801142e:	2b00      	cmp	r3, #0
 8011430:	da08      	bge.n	8011444 <arm_softmax_s8+0x3f24>
 8011432:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011436:	1851      	adds	r1, r2, r1
 8011438:	6039      	str	r1, [r7, #0]
 801143a:	f143 0300 	adc.w	r3, r3, #0
 801143e:	607b      	str	r3, [r7, #4]
 8011440:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011444:	f04f 0000 	mov.w	r0, #0
 8011448:	f04f 0100 	mov.w	r1, #0
 801144c:	0fd0      	lsrs	r0, r2, #31
 801144e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011452:	17d9      	asrs	r1, r3, #31
 8011454:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011458:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 801145c:	4603      	mov	r3, r0
 801145e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8011460:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011464:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8011468:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801146c:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8011470:	6812      	ldr	r2, [r2, #0]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	429a      	cmp	r2, r3
 8011476:	d10e      	bne.n	8011496 <arm_softmax_s8+0x3f76>
 8011478:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801147c:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011486:	d106      	bne.n	8011496 <arm_softmax_s8+0x3f76>
        result = Q31_MAX;
 8011488:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801148c:	f5a3 7220 	sub.w	r2, r3, #640	; 0x280
 8011490:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011494:	6013      	str	r3, [r2, #0]
    return result;
 8011496:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801149a:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 801149e:	681a      	ldr	r2, [r3, #0]
 80114a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80114a4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80114a8:	601a      	str	r2, [r3, #0]
 80114aa:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80114ae:	f5a3 7219 	sub.w	r2, r3, #612	; 0x264
 80114b2:	f8d7 3988 	ldr.w	r3, [r7, #2440]	; 0x988
 80114b6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80114b8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80114bc:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 80114c0:	2300      	movs	r3, #0
 80114c2:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80114c4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80114c8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80114cc:	2201      	movs	r2, #1
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	fa02 f103 	lsl.w	r1, r2, r3
 80114d4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80114d8:	f5a3 721b 	sub.w	r2, r3, #620	; 0x26c
 80114dc:	1e4b      	subs	r3, r1, #1
 80114de:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80114e0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80114e4:	f5a3 711c 	sub.w	r1, r3, #624	; 0x270
 80114e8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80114ec:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 80114f0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80114f4:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80114f8:	6812      	ldr	r2, [r2, #0]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	4013      	ands	r3, r2
 80114fe:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8011500:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011504:	f5a3 711a 	sub.w	r1, r3, #616	; 0x268
 8011508:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801150c:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8011510:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011514:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8011518:	6812      	ldr	r2, [r2, #0]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	fa42 f303 	asr.w	r3, r2, r3
 8011520:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8011522:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011526:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 801152a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801152e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	105b      	asrs	r3, r3, #1
 8011536:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8011538:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801153c:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	2b00      	cmp	r3, #0
 8011544:	da0a      	bge.n	801155c <arm_softmax_s8+0x403c>
        threshold++;
 8011546:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801154a:	f5a3 721d 	sub.w	r2, r3, #628	; 0x274
 801154e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011552:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	3301      	adds	r3, #1
 801155a:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801155c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011560:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 8011564:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011568:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 801156c:	6812      	ldr	r2, [r2, #0]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	429a      	cmp	r2, r3
 8011572:	dd0a      	ble.n	801158a <arm_softmax_s8+0x406a>
        result++;
 8011574:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011578:	f5a3 721a 	sub.w	r2, r3, #616	; 0x268
 801157c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011580:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	3301      	adds	r3, #1
 8011588:	6013      	str	r3, [r2, #0]
    return result;
 801158a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801158e:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8011592:	681b      	ldr	r3, [r3, #0]
                const int32_t res =
 8011594:	3b80      	subs	r3, #128	; 0x80
 8011596:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 801159a:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 801159e:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 80115a2:	db09      	blt.n	80115b8 <arm_softmax_s8+0x4098>
 80115a4:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 80115a8:	2b7e      	cmp	r3, #126	; 0x7e
 80115aa:	dc03      	bgt.n	80115b4 <arm_softmax_s8+0x4094>
 80115ac:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 80115b0:	b259      	sxtb	r1, r3
 80115b2:	e003      	b.n	80115bc <arm_softmax_s8+0x409c>
 80115b4:	217f      	movs	r1, #127	; 0x7f
 80115b6:	e001      	b.n	80115bc <arm_softmax_s8+0x409c>
 80115b8:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 80115bc:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 80115c0:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 80115c4:	441a      	add	r2, r3
 80115c6:	460b      	mov	r3, r1
 80115c8:	7013      	strb	r3, [r2, #0]
 80115ca:	e006      	b.n	80115da <arm_softmax_s8+0x40ba>
            }
            else
            {
                output[col] = -128;
 80115cc:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 80115d0:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 80115d4:	441a      	add	r2, r3
 80115d6:	2380      	movs	r3, #128	; 0x80
 80115d8:	7013      	strb	r3, [r2, #0]
        for (col = 0; col < row_size; ++col)
 80115da:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 80115de:	3301      	adds	r3, #1
 80115e0:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
 80115e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115e8:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80115ec:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	429a      	cmp	r2, r3
 80115f4:	f6fe aa71 	blt.w	800fada <arm_softmax_s8+0x25ba>
            }
        }
        input += row_size;
 80115f8:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80115fc:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8011600:	6819      	ldr	r1, [r3, #0]
 8011602:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8011606:	f5a3 7271 	sub.w	r2, r3, #964	; 0x3c4
 801160a:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801160e:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	440b      	add	r3, r1
 8011616:	6013      	str	r3, [r2, #0]
        output += row_size;
 8011618:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801161c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8011620:	681a      	ldr	r2, [r3, #0]
 8011622:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8011626:	4413      	add	r3, r2
 8011628:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 801162c:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 8011630:	3301      	adds	r3, #1
 8011632:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
 8011636:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 801163a:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 801163e:	f8d7 29a0 	ldr.w	r2, [r7, #2464]	; 0x9a0
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	429a      	cmp	r2, r3
 8011646:	f6fb af93 	blt.w	800d570 <arm_softmax_s8+0x50>
    }

#endif
}
 801164a:	bf00      	nop
 801164c:	bf00      	nop
 801164e:	f607 17a8 	addw	r7, r7, #2472	; 0x9a8
 8011652:	46bd      	mov	sp, r7
 8011654:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8011658:	4770      	bx	lr
 801165a:	bf00      	nop

0801165c <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 801165c:	b580      	push	{r7, lr}
 801165e:	b082      	sub	sp, #8
 8011660:	af00      	add	r7, sp, #0
 8011662:	ed87 0a01 	vstr	s0, [r7, #4]
 8011666:	ed97 0a01 	vldr	s0, [r7, #4]
 801166a:	f008 f98d 	bl	8019988 <log10f>
 801166e:	eef0 7a40 	vmov.f32	s15, s0
 8011672:	eeb0 0a67 	vmov.f32	s0, s15
 8011676:	3708      	adds	r7, #8
 8011678:	46bd      	mov	sp, r7
 801167a:	bd80      	pop	{r7, pc}

0801167c <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 801167c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801167e:	b083      	sub	sp, #12
 8011680:	af00      	add	r7, sp, #0
 8011682:	ed87 0b00 	vstr	d0, [r7]
 8011686:	683c      	ldr	r4, [r7, #0]
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801168e:	2301      	movs	r3, #1
 8011690:	461e      	mov	r6, r3
 8011692:	f04f 32ff 	mov.w	r2, #4294967295
 8011696:	4b10      	ldr	r3, [pc, #64]	; (80116d8 <_ZSt5isinfd+0x5c>)
 8011698:	4620      	mov	r0, r4
 801169a:	4629      	mov	r1, r5
 801169c:	f7ef fa50 	bl	8000b40 <__aeabi_dcmpun>
 80116a0:	4603      	mov	r3, r0
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d10b      	bne.n	80116be <_ZSt5isinfd+0x42>
 80116a6:	f04f 32ff 	mov.w	r2, #4294967295
 80116aa:	4b0b      	ldr	r3, [pc, #44]	; (80116d8 <_ZSt5isinfd+0x5c>)
 80116ac:	4620      	mov	r0, r4
 80116ae:	4629      	mov	r1, r5
 80116b0:	f7ef fa28 	bl	8000b04 <__aeabi_dcmple>
 80116b4:	4603      	mov	r3, r0
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d101      	bne.n	80116be <_ZSt5isinfd+0x42>
 80116ba:	2300      	movs	r3, #0
 80116bc:	461e      	mov	r6, r3
 80116be:	b2f3      	uxtb	r3, r6
 80116c0:	f083 0301 	eor.w	r3, r3, #1
 80116c4:	b2db      	uxtb	r3, r3
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	bf14      	ite	ne
 80116ca:	2301      	movne	r3, #1
 80116cc:	2300      	moveq	r3, #0
 80116ce:	b2db      	uxtb	r3, r3
 80116d0:	4618      	mov	r0, r3
 80116d2:	370c      	adds	r7, #12
 80116d4:	46bd      	mov	sp, r7
 80116d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116d8:	7fefffff 	.word	0x7fefffff

080116dc <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 80116dc:	b480      	push	{r7}
 80116de:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 80116e0:	2300      	movs	r3, #0
}
 80116e2:	4618      	mov	r0, r3
 80116e4:	46bd      	mov	sp, r7
 80116e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ea:	4770      	bx	lr

080116ec <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_ms() {
    return HAL_GetTick();
}

uint64_t ei_read_timer_us() {
 80116ec:	b5b0      	push	{r4, r5, r7, lr}
 80116ee:	af00      	add	r7, sp, #0
    return HAL_GetTick() * 1000;
 80116f0:	f7f2 fce4 	bl	80040bc <HAL_GetTick>
 80116f4:	4603      	mov	r3, r0
 80116f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80116fa:	fb02 f303 	mul.w	r3, r2, r3
 80116fe:	2200      	movs	r2, #0
 8011700:	461c      	mov	r4, r3
 8011702:	4615      	mov	r5, r2
 8011704:	4622      	mov	r2, r4
 8011706:	462b      	mov	r3, r5
}
 8011708:	4610      	mov	r0, r2
 801170a:	4619      	mov	r1, r3
 801170c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08011710 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 8011710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011714:	b08c      	sub	sp, #48	; 0x30
 8011716:	af00      	add	r7, sp, #0
 8011718:	ed87 0a01 	vstr	s0, [r7, #4]
        }
        *(c) = '\0';
    }


    ei_printf("%s", s);
 801171c:	466b      	mov	r3, sp
 801171e:	4698      	mov	r8, r3
    float n = f;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	627b      	str	r3, [r7, #36]	; 0x24
    char s[MAX_NUMBER_STRING_SIZE];
 8011724:	4b7e      	ldr	r3, [pc, #504]	; (8011920 <_Z15ei_printf_floatf+0x210>)
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	1e5e      	subs	r6, r3, #1
 801172a:	623e      	str	r6, [r7, #32]
 801172c:	4633      	mov	r3, r6
 801172e:	3301      	adds	r3, #1
 8011730:	2200      	movs	r2, #0
 8011732:	461c      	mov	r4, r3
 8011734:	4615      	mov	r5, r2
 8011736:	f04f 0200 	mov.w	r2, #0
 801173a:	f04f 0300 	mov.w	r3, #0
 801173e:	00eb      	lsls	r3, r5, #3
 8011740:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011744:	00e2      	lsls	r2, r4, #3
 8011746:	4633      	mov	r3, r6
 8011748:	3301      	adds	r3, #1
 801174a:	2200      	movs	r2, #0
 801174c:	4618      	mov	r0, r3
 801174e:	4611      	mov	r1, r2
 8011750:	f04f 0200 	mov.w	r2, #0
 8011754:	f04f 0300 	mov.w	r3, #0
 8011758:	00cb      	lsls	r3, r1, #3
 801175a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801175e:	00c2      	lsls	r2, r0, #3
 8011760:	4633      	mov	r3, r6
 8011762:	3301      	adds	r3, #1
 8011764:	3307      	adds	r3, #7
 8011766:	08db      	lsrs	r3, r3, #3
 8011768:	00db      	lsls	r3, r3, #3
 801176a:	ebad 0d03 	sub.w	sp, sp, r3
 801176e:	466b      	mov	r3, sp
 8011770:	3300      	adds	r3, #0
 8011772:	61fb      	str	r3, [r7, #28]
    if (n == 0.0) {
 8011774:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011778:	eef5 7a40 	vcmp.f32	s15, #0.0
 801177c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011780:	d106      	bne.n	8011790 <_Z15ei_printf_floatf+0x80>
        strcpy(s, "0");
 8011782:	69fb      	ldr	r3, [r7, #28]
 8011784:	4967      	ldr	r1, [pc, #412]	; (8011924 <_Z15ei_printf_floatf+0x214>)
 8011786:	461a      	mov	r2, r3
 8011788:	460b      	mov	r3, r1
 801178a:	881b      	ldrh	r3, [r3, #0]
 801178c:	8013      	strh	r3, [r2, #0]
 801178e:	e0b6      	b.n	80118fe <_Z15ei_printf_floatf+0x1ee>
        char *c = s;
 8011790:	69fb      	ldr	r3, [r7, #28]
 8011792:	62fb      	str	r3, [r7, #44]	; 0x2c
        int neg = (n < 0);
 8011794:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8011798:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801179c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117a0:	bf4c      	ite	mi
 80117a2:	2301      	movmi	r3, #1
 80117a4:	2300      	movpl	r3, #0
 80117a6:	b2db      	uxtb	r3, r3
 80117a8:	61bb      	str	r3, [r7, #24]
        if (neg) {
 80117aa:	69bb      	ldr	r3, [r7, #24]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d005      	beq.n	80117bc <_Z15ei_printf_floatf+0xac>
            n = -n;
 80117b0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80117b4:	eef1 7a67 	vneg.f32	s15, s15
 80117b8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        m = log10(n);
 80117bc:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80117c0:	f7ff ff4c 	bl	801165c <_ZSt5log10f>
 80117c4:	eef0 7a40 	vmov.f32	s15, s0
 80117c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80117cc:	ee17 3a90 	vmov	r3, s15
 80117d0:	62bb      	str	r3, [r7, #40]	; 0x28
        if (neg) {
 80117d2:	69bb      	ldr	r3, [r7, #24]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d004      	beq.n	80117e2 <_Z15ei_printf_floatf+0xd2>
            *(c++) = '-';
 80117d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117da:	1c5a      	adds	r2, r3, #1
 80117dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80117de:	222d      	movs	r2, #45	; 0x2d
 80117e0:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 80117e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	dc01      	bgt.n	80117ec <_Z15ei_printf_floatf+0xdc>
            m = 0;
 80117e8:	2300      	movs	r3, #0
 80117ea:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 80117ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80117ee:	f7ee feb5 	bl	800055c <__aeabi_f2d>
 80117f2:	4b4d      	ldr	r3, [pc, #308]	; (8011928 <_Z15ei_printf_floatf+0x218>)
 80117f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117f8:	2401      	movs	r4, #1
 80117fa:	f7ef f997 	bl	8000b2c <__aeabi_dcmpgt>
 80117fe:	4603      	mov	r3, r0
 8011800:	2b00      	cmp	r3, #0
 8011802:	d101      	bne.n	8011808 <_Z15ei_printf_floatf+0xf8>
 8011804:	2300      	movs	r3, #0
 8011806:	461c      	mov	r4, r3
 8011808:	b2e3      	uxtb	r3, r4
 801180a:	f083 0301 	eor.w	r3, r3, #1
 801180e:	b2db      	uxtb	r3, r3
 8011810:	2b00      	cmp	r3, #0
 8011812:	d002      	beq.n	801181a <_Z15ei_printf_floatf+0x10a>
 8011814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011816:	2b00      	cmp	r3, #0
 8011818:	db6e      	blt.n	80118f8 <_Z15ei_printf_floatf+0x1e8>
            double weight = pow(10.0, m);
 801181a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801181c:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 8011918 <_Z15ei_printf_floatf+0x208>
 8011820:	f000 f89f 	bl	8011962 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8011824:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 8011828:	f04f 0200 	mov.w	r2, #0
 801182c:	f04f 0300 	mov.w	r3, #0
 8011830:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011834:	f7ef f97a 	bl	8000b2c <__aeabi_dcmpgt>
 8011838:	4603      	mov	r3, r0
 801183a:	2b00      	cmp	r3, #0
 801183c:	d00b      	beq.n	8011856 <_Z15ei_printf_floatf+0x146>
 801183e:	ed97 0b04 	vldr	d0, [r7, #16]
 8011842:	f7ff ff1b 	bl	801167c <_ZSt5isinfd>
 8011846:	4603      	mov	r3, r0
 8011848:	f083 0301 	eor.w	r3, r3, #1
 801184c:	b2db      	uxtb	r3, r3
 801184e:	2b00      	cmp	r3, #0
 8011850:	d001      	beq.n	8011856 <_Z15ei_printf_floatf+0x146>
 8011852:	2301      	movs	r3, #1
 8011854:	e000      	b.n	8011858 <_Z15ei_printf_floatf+0x148>
 8011856:	2300      	movs	r3, #0
 8011858:	2b00      	cmp	r3, #0
 801185a:	d03a      	beq.n	80118d2 <_Z15ei_printf_floatf+0x1c2>
                digit = floor(n / weight);
 801185c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801185e:	f7ee fe7d 	bl	800055c <__aeabi_f2d>
 8011862:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011866:	f7ee fffb 	bl	8000860 <__aeabi_ddiv>
 801186a:	4602      	mov	r2, r0
 801186c:	460b      	mov	r3, r1
 801186e:	ec43 2b17 	vmov	d7, r2, r3
 8011872:	eeb0 0a47 	vmov.f32	s0, s14
 8011876:	eef0 0a67 	vmov.f32	s1, s15
 801187a:	f007 febd 	bl	80195f8 <floor>
 801187e:	ec53 2b10 	vmov	r2, r3, d0
 8011882:	4610      	mov	r0, r2
 8011884:	4619      	mov	r1, r3
 8011886:	f7ef f971 	bl	8000b6c <__aeabi_d2iz>
 801188a:	4603      	mov	r3, r0
 801188c:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 801188e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011890:	f7ee fe64 	bl	800055c <__aeabi_f2d>
 8011894:	4604      	mov	r4, r0
 8011896:	460d      	mov	r5, r1
 8011898:	68f8      	ldr	r0, [r7, #12]
 801189a:	f7ee fe4d 	bl	8000538 <__aeabi_i2d>
 801189e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80118a2:	f7ee feb3 	bl	800060c <__aeabi_dmul>
 80118a6:	4602      	mov	r2, r0
 80118a8:	460b      	mov	r3, r1
 80118aa:	4620      	mov	r0, r4
 80118ac:	4629      	mov	r1, r5
 80118ae:	f7ee fcf5 	bl	800029c <__aeabi_dsub>
 80118b2:	4602      	mov	r2, r0
 80118b4:	460b      	mov	r3, r1
 80118b6:	4610      	mov	r0, r2
 80118b8:	4619      	mov	r1, r3
 80118ba:	f7ef f99f 	bl	8000bfc <__aeabi_d2f>
 80118be:	4603      	mov	r3, r0
 80118c0:	627b      	str	r3, [r7, #36]	; 0x24
                *(c++) = '0' + digit;
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	b2da      	uxtb	r2, r3
 80118c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118c8:	1c59      	adds	r1, r3, #1
 80118ca:	62f9      	str	r1, [r7, #44]	; 0x2c
 80118cc:	3230      	adds	r2, #48	; 0x30
 80118ce:	b2d2      	uxtb	r2, r2
 80118d0:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 80118d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d10b      	bne.n	80118f0 <_Z15ei_printf_floatf+0x1e0>
 80118d8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80118dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80118e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118e4:	dd04      	ble.n	80118f0 <_Z15ei_printf_floatf+0x1e0>
                *(c++) = '.';
 80118e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118e8:	1c5a      	adds	r2, r3, #1
 80118ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80118ec:	222e      	movs	r2, #46	; 0x2e
 80118ee:	701a      	strb	r2, [r3, #0]
            m--;
 80118f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118f2:	3b01      	subs	r3, #1
 80118f4:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 80118f6:	e779      	b.n	80117ec <_Z15ei_printf_floatf+0xdc>
        *(c) = '\0';
 80118f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118fa:	2200      	movs	r2, #0
 80118fc:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 80118fe:	69f9      	ldr	r1, [r7, #28]
 8011900:	480a      	ldr	r0, [pc, #40]	; (801192c <_Z15ei_printf_floatf+0x21c>)
 8011902:	f7f1 f8e2 	bl	8002aca <_Z9ei_printfPKcz>
 8011906:	46c5      	mov	sp, r8
}
 8011908:	bf00      	nop
 801190a:	3730      	adds	r7, #48	; 0x30
 801190c:	46bd      	mov	sp, r7
 801190e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011912:	bf00      	nop
 8011914:	f3af 8000 	nop.w
 8011918:	00000000 	.word	0x00000000
 801191c:	40240000 	.word	0x40240000
 8011920:	200000f8 	.word	0x200000f8
 8011924:	0801caa8 	.word	0x0801caa8
 8011928:	200000f0 	.word	0x200000f0
 801192c:	0801caac 	.word	0x0801caac

08011930 <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
    return malloc(size);
}

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 8011930:	b580      	push	{r7, lr}
 8011932:	b082      	sub	sp, #8
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
 8011938:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 801193a:	6839      	ldr	r1, [r7, #0]
 801193c:	6878      	ldr	r0, [r7, #4]
 801193e:	f009 f98f 	bl	801ac60 <calloc>
 8011942:	4603      	mov	r3, r0
}
 8011944:	4618      	mov	r0, r3
 8011946:	3708      	adds	r7, #8
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}

0801194c <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 801194c:	b580      	push	{r7, lr}
 801194e:	b082      	sub	sp, #8
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
    free(ptr);
 8011954:	6878      	ldr	r0, [r7, #4]
 8011956:	f009 f9d3 	bl	801ad00 <free>
}
 801195a:	bf00      	nop
 801195c:	3708      	adds	r7, #8
 801195e:	46bd      	mov	sp, r7
 8011960:	bd80      	pop	{r7, pc}

08011962 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8011962:	b580      	push	{r7, lr}
 8011964:	b084      	sub	sp, #16
 8011966:	af00      	add	r7, sp, #0
 8011968:	ed87 0b02 	vstr	d0, [r7, #8]
 801196c:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 801196e:	6878      	ldr	r0, [r7, #4]
 8011970:	f7ee fde2 	bl	8000538 <__aeabi_i2d>
 8011974:	4602      	mov	r2, r0
 8011976:	460b      	mov	r3, r1
 8011978:	ec43 2b11 	vmov	d1, r2, r3
 801197c:	ed97 0b02 	vldr	d0, [r7, #8]
 8011980:	f007 ff5c 	bl	801983c <pow>
 8011984:	eeb0 7a40 	vmov.f32	s14, s0
 8011988:	eef0 7a60 	vmov.f32	s15, s1
    }
 801198c:	eeb0 0a47 	vmov.f32	s0, s14
 8011990:	eef0 0a67 	vmov.f32	s1, s15
 8011994:	3710      	adds	r7, #16
 8011996:	46bd      	mov	sp, r7
 8011998:	bd80      	pop	{r7, pc}
	...

0801199c <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 801199c:	b480      	push	{r7}
 801199e:	b083      	sub	sp, #12
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	4603      	mov	r3, r0
 80119a4:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 80119a6:	79fb      	ldrb	r3, [r7, #7]
 80119a8:	2b10      	cmp	r3, #16
 80119aa:	d847      	bhi.n	8011a3c <TfLiteTypeGetName+0xa0>
 80119ac:	a201      	add	r2, pc, #4	; (adr r2, 80119b4 <TfLiteTypeGetName+0x18>)
 80119ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119b2:	bf00      	nop
 80119b4:	080119f9 	.word	0x080119f9
 80119b8:	080119fd 	.word	0x080119fd
 80119bc:	08011a05 	.word	0x08011a05
 80119c0:	08011a0d 	.word	0x08011a0d
 80119c4:	08011a15 	.word	0x08011a15
 80119c8:	08011a29 	.word	0x08011a29
 80119cc:	08011a1d 	.word	0x08011a1d
 80119d0:	08011a01 	.word	0x08011a01
 80119d4:	08011a21 	.word	0x08011a21
 80119d8:	08011a11 	.word	0x08011a11
 80119dc:	08011a2d 	.word	0x08011a2d
 80119e0:	08011a31 	.word	0x08011a31
 80119e4:	08011a25 	.word	0x08011a25
 80119e8:	08011a19 	.word	0x08011a19
 80119ec:	08011a35 	.word	0x08011a35
 80119f0:	08011a39 	.word	0x08011a39
 80119f4:	08011a09 	.word	0x08011a09
    case kTfLiteNoType:
      return "NOTYPE";
 80119f8:	4b14      	ldr	r3, [pc, #80]	; (8011a4c <TfLiteTypeGetName+0xb0>)
 80119fa:	e020      	b.n	8011a3e <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 80119fc:	4b14      	ldr	r3, [pc, #80]	; (8011a50 <TfLiteTypeGetName+0xb4>)
 80119fe:	e01e      	b.n	8011a3e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 8011a00:	4b14      	ldr	r3, [pc, #80]	; (8011a54 <TfLiteTypeGetName+0xb8>)
 8011a02:	e01c      	b.n	8011a3e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 8011a04:	4b14      	ldr	r3, [pc, #80]	; (8011a58 <TfLiteTypeGetName+0xbc>)
 8011a06:	e01a      	b.n	8011a3e <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 8011a08:	4b14      	ldr	r3, [pc, #80]	; (8011a5c <TfLiteTypeGetName+0xc0>)
 8011a0a:	e018      	b.n	8011a3e <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 8011a0c:	4b14      	ldr	r3, [pc, #80]	; (8011a60 <TfLiteTypeGetName+0xc4>)
 8011a0e:	e016      	b.n	8011a3e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 8011a10:	4b14      	ldr	r3, [pc, #80]	; (8011a64 <TfLiteTypeGetName+0xc8>)
 8011a12:	e014      	b.n	8011a3e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 8011a14:	4b14      	ldr	r3, [pc, #80]	; (8011a68 <TfLiteTypeGetName+0xcc>)
 8011a16:	e012      	b.n	8011a3e <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 8011a18:	4b14      	ldr	r3, [pc, #80]	; (8011a6c <TfLiteTypeGetName+0xd0>)
 8011a1a:	e010      	b.n	8011a3e <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 8011a1c:	4b14      	ldr	r3, [pc, #80]	; (8011a70 <TfLiteTypeGetName+0xd4>)
 8011a1e:	e00e      	b.n	8011a3e <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 8011a20:	4b14      	ldr	r3, [pc, #80]	; (8011a74 <TfLiteTypeGetName+0xd8>)
 8011a22:	e00c      	b.n	8011a3e <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 8011a24:	4b14      	ldr	r3, [pc, #80]	; (8011a78 <TfLiteTypeGetName+0xdc>)
 8011a26:	e00a      	b.n	8011a3e <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 8011a28:	4b14      	ldr	r3, [pc, #80]	; (8011a7c <TfLiteTypeGetName+0xe0>)
 8011a2a:	e008      	b.n	8011a3e <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 8011a2c:	4b14      	ldr	r3, [pc, #80]	; (8011a80 <TfLiteTypeGetName+0xe4>)
 8011a2e:	e006      	b.n	8011a3e <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 8011a30:	4b14      	ldr	r3, [pc, #80]	; (8011a84 <TfLiteTypeGetName+0xe8>)
 8011a32:	e004      	b.n	8011a3e <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 8011a34:	4b14      	ldr	r3, [pc, #80]	; (8011a88 <TfLiteTypeGetName+0xec>)
 8011a36:	e002      	b.n	8011a3e <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 8011a38:	4b14      	ldr	r3, [pc, #80]	; (8011a8c <TfLiteTypeGetName+0xf0>)
 8011a3a:	e000      	b.n	8011a3e <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 8011a3c:	4b14      	ldr	r3, [pc, #80]	; (8011a90 <TfLiteTypeGetName+0xf4>)
}
 8011a3e:	4618      	mov	r0, r3
 8011a40:	370c      	adds	r7, #12
 8011a42:	46bd      	mov	sp, r7
 8011a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a48:	4770      	bx	lr
 8011a4a:	bf00      	nop
 8011a4c:	0801cab0 	.word	0x0801cab0
 8011a50:	0801cab8 	.word	0x0801cab8
 8011a54:	0801cac0 	.word	0x0801cac0
 8011a58:	0801cac8 	.word	0x0801cac8
 8011a5c:	0801cad0 	.word	0x0801cad0
 8011a60:	0801cad8 	.word	0x0801cad8
 8011a64:	0801cae0 	.word	0x0801cae0
 8011a68:	0801cae8 	.word	0x0801cae8
 8011a6c:	0801caf0 	.word	0x0801caf0
 8011a70:	0801caf8 	.word	0x0801caf8
 8011a74:	0801cb00 	.word	0x0801cb00
 8011a78:	0801cb0c 	.word	0x0801cb0c
 8011a7c:	0801cb18 	.word	0x0801cb18
 8011a80:	0801cb20 	.word	0x0801cb20
 8011a84:	0801cb28 	.word	0x0801cb28
 8011a88:	0801cb30 	.word	0x0801cb30
 8011a8c:	0801cb3c 	.word	0x0801cb3c
 8011a90:	0801cb44 	.word	0x0801cb44

08011a94 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 8011a94:	b480      	push	{r7}
 8011a96:	af00      	add	r7, sp, #0
 8011a98:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa4:	4770      	bx	lr
	...

08011aa8 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8011aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011aac:	b088      	sub	sp, #32
 8011aae:	af00      	add	r7, sp, #0
 8011ab0:	ed87 0b02 	vstr	d0, [r7, #8]
 8011ab4:	6078      	str	r0, [r7, #4]
 8011ab6:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 8011ab8:	f04f 0200 	mov.w	r2, #0
 8011abc:	f04f 0300 	mov.w	r3, #0
 8011ac0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011ac4:	f7ef f80a 	bl	8000adc <__aeabi_dcmpeq>
 8011ac8:	4603      	mov	r3, r0
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d006      	beq.n	8011adc <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	601a      	str	r2, [r3, #0]
    *shift = 0;
 8011ad4:	683b      	ldr	r3, [r7, #0]
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	601a      	str	r2, [r3, #0]
    return;
 8011ada:	e068      	b.n	8011bae <_ZN6tflite18QuantizeMultiplierEdPlPi+0x106>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 8011adc:	6838      	ldr	r0, [r7, #0]
 8011ade:	ed97 0b02 	vldr	d0, [r7, #8]
 8011ae2:	f007 fe09 	bl	80196f8 <frexp>
 8011ae6:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 8011aea:	f04f 0200 	mov.w	r2, #0
 8011aee:	4b32      	ldr	r3, [pc, #200]	; (8011bb8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 8011af0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011af4:	f7ee fd8a 	bl	800060c <__aeabi_dmul>
 8011af8:	4602      	mov	r2, r0
 8011afa:	460b      	mov	r3, r1
 8011afc:	ec43 2b17 	vmov	d7, r2, r3
 8011b00:	eeb0 0a47 	vmov.f32	s0, s14
 8011b04:	eef0 0a67 	vmov.f32	s1, s15
 8011b08:	f000 f97b 	bl	8011e02 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 8011b0c:	ec53 2b10 	vmov	r2, r3, d0
 8011b10:	4610      	mov	r0, r2
 8011b12:	4619      	mov	r1, r3
 8011b14:	f7ef f92a 	bl	8000d6c <__aeabi_d2lz>
 8011b18:	4602      	mov	r2, r0
 8011b1a:	460b      	mov	r3, r1
 8011b1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 8011b20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011b24:	4925      	ldr	r1, [pc, #148]	; (8011bbc <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 8011b26:	428a      	cmp	r2, r1
 8011b28:	f173 0300 	sbcs.w	r3, r3, #0
 8011b2c:	db01      	blt.n	8011b32 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8a>
 8011b2e:	f009 f871 	bl	801ac14 <abort>
  if (q_fixed == (1ll << 31)) {
 8011b32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011b36:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 8011b3a:	430b      	orrs	r3, r1
 8011b3c:	d118      	bne.n	8011b70 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 8011b3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011b42:	0fd9      	lsrs	r1, r3, #31
 8011b44:	2000      	movs	r0, #0
 8011b46:	468a      	mov	sl, r1
 8011b48:	4683      	mov	fp, r0
 8011b4a:	eb1a 0402 	adds.w	r4, sl, r2
 8011b4e:	eb4b 0503 	adc.w	r5, fp, r3
 8011b52:	f04f 0200 	mov.w	r2, #0
 8011b56:	f04f 0300 	mov.w	r3, #0
 8011b5a:	0862      	lsrs	r2, r4, #1
 8011b5c:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8011b60:	106b      	asrs	r3, r5, #1
 8011b62:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 8011b66:	683b      	ldr	r3, [r7, #0]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	1c5a      	adds	r2, r3, #1
 8011b6c:	683b      	ldr	r3, [r7, #0]
 8011b6e:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 8011b70:	f7ff ff90 	bl	8011a94 <_ZNSt14numeric_limitsIlE3maxEv>
 8011b74:	4603      	mov	r3, r0
 8011b76:	17da      	asrs	r2, r3, #31
 8011b78:	4698      	mov	r8, r3
 8011b7a:	4691      	mov	r9, r2
 8011b7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011b80:	4590      	cmp	r8, r2
 8011b82:	eb79 0303 	sbcs.w	r3, r9, r3
 8011b86:	da01      	bge.n	8011b8c <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 8011b88:	f009 f844 	bl	801ac14 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 8011b8c:	683b      	ldr	r3, [r7, #0]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	f113 0f1f 	cmn.w	r3, #31
 8011b94:	da08      	bge.n	8011ba8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	2200      	movs	r2, #0
 8011b9a:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 8011b9c:	f04f 0200 	mov.w	r2, #0
 8011ba0:	f04f 0300 	mov.w	r3, #0
 8011ba4:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8011ba8:	69ba      	ldr	r2, [r7, #24]
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	601a      	str	r2, [r3, #0]
}
 8011bae:	3720      	adds	r7, #32
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011bb6:	bf00      	nop
 8011bb8:	41e00000 	.word	0x41e00000
 8011bbc:	80000001 	.word	0x80000001

08011bc0 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b084      	sub	sp, #16
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	ed87 0b02 	vstr	d0, [r7, #8]
 8011bca:	6078      	str	r0, [r7, #4]
 8011bcc:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 8011bce:	f04f 0200 	mov.w	r2, #0
 8011bd2:	4b0d      	ldr	r3, [pc, #52]	; (8011c08 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 8011bd4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011bd8:	f7ee ffa8 	bl	8000b2c <__aeabi_dcmpgt>
 8011bdc:	4603      	mov	r3, r0
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d101      	bne.n	8011be6 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 8011be2:	f009 f817 	bl	801ac14 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 8011be6:	6839      	ldr	r1, [r7, #0]
 8011be8:	6878      	ldr	r0, [r7, #4]
 8011bea:	ed97 0b02 	vldr	d0, [r7, #8]
 8011bee:	f7ff ff5b 	bl	8011aa8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	da01      	bge.n	8011bfe <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 8011bfa:	f009 f80b 	bl	801ac14 <abort>
}
 8011bfe:	bf00      	nop
 8011c00:	3710      	adds	r7, #16
 8011c02:	46bd      	mov	sp, r7
 8011c04:	bd80      	pop	{r7, pc}
 8011c06:	bf00      	nop
 8011c08:	3ff00000 	.word	0x3ff00000

08011c0c <_ZSt3minIdERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b082      	sub	sp, #8
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
 8011c14:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8011c16:	683b      	ldr	r3, [r7, #0]
 8011c18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c22:	f7ee ff65 	bl	8000af0 <__aeabi_dcmplt>
 8011c26:	4603      	mov	r3, r0
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d001      	beq.n	8011c30 <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 8011c2c:	683b      	ldr	r3, [r7, #0]
 8011c2e:	e000      	b.n	8011c32 <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 8011c30:	687b      	ldr	r3, [r7, #4]
    }
 8011c32:	4618      	mov	r0, r3
 8011c34:	3708      	adds	r7, #8
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bd80      	pop	{r7, pc}
 8011c3a:	0000      	movs	r0, r0
 8011c3c:	0000      	movs	r0, r0
	...

08011c40 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 8011c40:	b5b0      	push	{r4, r5, r7, lr}
 8011c42:	b08e      	sub	sp, #56	; 0x38
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	ed87 0b06 	vstr	d0, [r7, #24]
 8011c4a:	ed87 1b04 	vstr	d1, [r7, #16]
 8011c4e:	60f8      	str	r0, [r7, #12]
 8011c50:	60b9      	str	r1, [r7, #8]
 8011c52:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 8011c54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011c58:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011c5c:	f7ee fcd6 	bl	800060c <__aeabi_dmul>
 8011c60:	4602      	mov	r2, r0
 8011c62:	460b      	mov	r3, r1
 8011c64:	4614      	mov	r4, r2
 8011c66:	461d      	mov	r5, r3
 8011c68:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8011c72:	4618      	mov	r0, r3
 8011c74:	f7ee fc60 	bl	8000538 <__aeabi_i2d>
 8011c78:	4602      	mov	r2, r0
 8011c7a:	460b      	mov	r3, r1
 8011c7c:	4620      	mov	r0, r4
 8011c7e:	4629      	mov	r1, r5
 8011c80:	f7ee fcc4 	bl	800060c <__aeabi_dmul>
 8011c84:	4602      	mov	r2, r0
 8011c86:	460b      	mov	r3, r1
 8011c88:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8011c8c:	a30e      	add	r3, pc, #56	; (adr r3, 8011cc8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 8011c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c92:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8011c96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011c9a:	f107 0320 	add.w	r3, r7, #32
 8011c9e:	4611      	mov	r1, r2
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	f7ff ffb3 	bl	8011c0c <_ZSt3minIdERKT_S2_S2_>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cac:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 8011cb0:	6879      	ldr	r1, [r7, #4]
 8011cb2:	68b8      	ldr	r0, [r7, #8]
 8011cb4:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8011cb8:	f7ff ff82 	bl	8011bc0 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 8011cbc:	bf00      	nop
 8011cbe:	3738      	adds	r7, #56	; 0x38
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8011cc4:	f3af 8000 	nop.w
 8011cc8:	ffc00000 	.word	0xffc00000
 8011ccc:	41dfffff 	.word	0x41dfffff

08011cd0 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 8011cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cd4:	b087      	sub	sp, #28
 8011cd6:	af00      	add	r7, sp, #0
 8011cd8:	60f8      	str	r0, [r7, #12]
 8011cda:	60b9      	str	r1, [r7, #8]
 8011cdc:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 8011cde:	2201      	movs	r2, #1
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8011ce6:	3b01      	subs	r3, #1
 8011ce8:	4618      	mov	r0, r3
 8011cea:	f7ee fc25 	bl	8000538 <__aeabi_i2d>
 8011cee:	4682      	mov	sl, r0
 8011cf0:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 8011cf2:	687a      	ldr	r2, [r7, #4]
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	1ad1      	subs	r1, r2, r3
 8011cf8:	f04f 0201 	mov.w	r2, #1
 8011cfc:	f04f 0300 	mov.w	r3, #0
 8011d00:	f1a1 0620 	sub.w	r6, r1, #32
 8011d04:	f1c1 0020 	rsb	r0, r1, #32
 8011d08:	fa03 f901 	lsl.w	r9, r3, r1
 8011d0c:	fa02 f606 	lsl.w	r6, r2, r6
 8011d10:	ea49 0906 	orr.w	r9, r9, r6
 8011d14:	fa22 f000 	lsr.w	r0, r2, r0
 8011d18:	ea49 0900 	orr.w	r9, r9, r0
 8011d1c:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 8011d20:	4640      	mov	r0, r8
 8011d22:	4649      	mov	r1, r9
 8011d24:	f7ee fc44 	bl	80005b0 <__aeabi_l2d>
 8011d28:	4602      	mov	r2, r0
 8011d2a:	460b      	mov	r3, r1
 8011d2c:	4650      	mov	r0, sl
 8011d2e:	4659      	mov	r1, fp
 8011d30:	f7ee fc6c 	bl	800060c <__aeabi_dmul>
 8011d34:	4602      	mov	r2, r0
 8011d36:	460b      	mov	r3, r1
 8011d38:	4690      	mov	r8, r2
 8011d3a:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 8011d3c:	f04f 0201 	mov.w	r2, #1
 8011d40:	f04f 0300 	mov.w	r3, #0
 8011d44:	68b9      	ldr	r1, [r7, #8]
 8011d46:	f1a1 0620 	sub.w	r6, r1, #32
 8011d4a:	f1c1 0020 	rsb	r0, r1, #32
 8011d4e:	fa03 f501 	lsl.w	r5, r3, r1
 8011d52:	fa02 f606 	lsl.w	r6, r2, r6
 8011d56:	4335      	orrs	r5, r6
 8011d58:	fa22 f000 	lsr.w	r0, r2, r0
 8011d5c:	4305      	orrs	r5, r0
 8011d5e:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 8011d62:	4620      	mov	r0, r4
 8011d64:	4629      	mov	r1, r5
 8011d66:	f7ee fc23 	bl	80005b0 <__aeabi_l2d>
 8011d6a:	4602      	mov	r2, r0
 8011d6c:	460b      	mov	r3, r1
  const double max_input_rescaled =
 8011d6e:	4640      	mov	r0, r8
 8011d70:	4649      	mov	r1, r9
 8011d72:	f7ee fd75 	bl	8000860 <__aeabi_ddiv>
 8011d76:	4602      	mov	r2, r0
 8011d78:	460b      	mov	r3, r1
 8011d7a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 8011d7e:	ed97 0b04 	vldr	d0, [r7, #16]
 8011d82:	f007 fc39 	bl	80195f8 <floor>
 8011d86:	ec53 2b10 	vmov	r2, r3, d0
 8011d8a:	4610      	mov	r0, r2
 8011d8c:	4619      	mov	r1, r3
 8011d8e:	f7ee feed 	bl	8000b6c <__aeabi_d2iz>
 8011d92:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 8011d94:	4618      	mov	r0, r3
 8011d96:	371c      	adds	r7, #28
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d9e <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8011d9e:	b480      	push	{r7}
 8011da0:	b083      	sub	sp, #12
 8011da2:	af00      	add	r7, sp, #0
 8011da4:	6078      	str	r0, [r7, #4]
 8011da6:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8011da8:	683b      	ldr	r3, [r7, #0]
 8011daa:	ed93 7a00 	vldr	s14, [r3]
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	edd3 7a00 	vldr	s15, [r3]
 8011db4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dbc:	d501      	bpl.n	8011dc2 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8011dbe:	683b      	ldr	r3, [r7, #0]
 8011dc0:	e000      	b.n	8011dc4 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8011dc2:	687b      	ldr	r3, [r7, #4]
    }
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	370c      	adds	r7, #12
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dce:	4770      	bx	lr

08011dd0 <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8011dd0:	b480      	push	{r7}
 8011dd2:	b083      	sub	sp, #12
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
 8011dd8:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	ed93 7a00 	vldr	s14, [r3]
 8011de0:	683b      	ldr	r3, [r7, #0]
 8011de2:	edd3 7a00 	vldr	s15, [r3]
 8011de6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dee:	d501      	bpl.n	8011df4 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8011df0:	683b      	ldr	r3, [r7, #0]
 8011df2:	e000      	b.n	8011df6 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8011df4:	687b      	ldr	r3, [r7, #4]
    }
 8011df6:	4618      	mov	r0, r3
 8011df8:	370c      	adds	r7, #12
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e00:	4770      	bx	lr

08011e02 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 8011e02:	b580      	push	{r7, lr}
 8011e04:	b082      	sub	sp, #8
 8011e06:	af00      	add	r7, sp, #0
 8011e08:	ed87 0b00 	vstr	d0, [r7]
 8011e0c:	ed97 0b00 	vldr	d0, [r7]
 8011e10:	f007 fcaa 	bl	8019768 <round>
 8011e14:	eeb0 7a40 	vmov.f32	s14, s0
 8011e18:	eef0 7a60 	vmov.f32	s15, s1
 8011e1c:	eeb0 0a47 	vmov.f32	s0, s14
 8011e20:	eef0 0a67 	vmov.f32	s1, s15
 8011e24:	3708      	adds	r7, #8
 8011e26:	46bd      	mov	sp, r7
 8011e28:	bd80      	pop	{r7, pc}

08011e2a <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 8011e2a:	b580      	push	{r7, lr}
 8011e2c:	b082      	sub	sp, #8
 8011e2e:	af00      	add	r7, sp, #0
 8011e30:	ed87 0a01 	vstr	s0, [r7, #4]
 8011e34:	ed97 0a01 	vldr	s0, [r7, #4]
 8011e38:	f7ef fb7f 	bl	800153a <_ZSt5roundf>
 8011e3c:	eef0 7a40 	vmov.f32	s15, s0
 8011e40:	eeb0 0a67 	vmov.f32	s0, s15
 8011e44:	3708      	adds	r7, #8
 8011e46:	46bd      	mov	sp, r7
 8011e48:	bd80      	pop	{r7, pc}

08011e4a <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 8011e4a:	b480      	push	{r7}
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8011e52:	4618      	mov	r0, r3
 8011e54:	46bd      	mov	sp, r7
 8011e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5a:	4770      	bx	lr

08011e5c <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 8011e5c:	b480      	push	{r7}
 8011e5e:	af00      	add	r7, sp, #0
 8011e60:	237f      	movs	r3, #127	; 0x7f
 8011e62:	4618      	mov	r0, r3
 8011e64:	46bd      	mov	sp, r7
 8011e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e6a:	4770      	bx	lr

08011e6c <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 8011e6c:	b480      	push	{r7}
 8011e6e:	af00      	add	r7, sp, #0
 8011e70:	2300      	movs	r3, #0
 8011e72:	4618      	mov	r0, r3
 8011e74:	46bd      	mov	sp, r7
 8011e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7a:	4770      	bx	lr

08011e7c <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 8011e7c:	b480      	push	{r7}
 8011e7e:	af00      	add	r7, sp, #0
 8011e80:	23ff      	movs	r3, #255	; 0xff
 8011e82:	4618      	mov	r0, r3
 8011e84:	46bd      	mov	sp, r7
 8011e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8a:	4770      	bx	lr

08011e8c <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8011e8c:	b480      	push	{r7}
 8011e8e:	af00      	add	r7, sp, #0
 8011e90:	4b02      	ldr	r3, [pc, #8]	; (8011e9c <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 8011e92:	4618      	mov	r0, r3
 8011e94:	46bd      	mov	sp, r7
 8011e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e9a:	4770      	bx	lr
 8011e9c:	ffff8000 	.word	0xffff8000

08011ea0 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 8011ea0:	b480      	push	{r7}
 8011ea2:	af00      	add	r7, sp, #0
 8011ea4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb0:	4770      	bx	lr

08011eb2 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 8011eb2:	b480      	push	{r7}
 8011eb4:	b083      	sub	sp, #12
 8011eb6:	af00      	add	r7, sp, #0
 8011eb8:	6078      	str	r0, [r7, #4]
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	689b      	ldr	r3, [r3, #8]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	370c      	adds	r7, #12
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eca:	4770      	bx	lr

08011ecc <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8011ecc:	b480      	push	{r7}
 8011ece:	b083      	sub	sp, #12
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	ed87 0b00 	vstr	d0, [r7]
 8011ed6:	683a      	ldr	r2, [r7, #0]
 8011ed8:	6879      	ldr	r1, [r7, #4]
 8011eda:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011ede:	ec43 2b17 	vmov	d7, r2, r3
 8011ee2:	eeb0 0a47 	vmov.f32	s0, s14
 8011ee6:	eef0 0a67 	vmov.f32	s1, s15
 8011eea:	370c      	adds	r7, #12
 8011eec:	46bd      	mov	sp, r7
 8011eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef2:	4770      	bx	lr

08011ef4 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b082      	sub	sp, #8
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
 8011efc:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	689b      	ldr	r3, [r3, #8]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d005      	beq.n	8011f12 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	689a      	ldr	r2, [r3, #8]
 8011f0a:	683b      	ldr	r3, [r7, #0]
 8011f0c:	019b      	lsls	r3, r3, #6
 8011f0e:	4413      	add	r3, r2
 8011f10:	e006      	b.n	8011f20 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f16:	6839      	ldr	r1, [r7, #0]
 8011f18:	6878      	ldr	r0, [r7, #4]
 8011f1a:	4798      	blx	r3
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	bf00      	nop
  }
}
 8011f20:	4618      	mov	r0, r3
 8011f22:	3708      	adds	r7, #8
 8011f24:	46bd      	mov	sp, r7
 8011f26:	bd80      	pop	{r7, pc}

08011f28 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 8011f28:	b480      	push	{r7}
 8011f2a:	b087      	sub	sp, #28
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	60f8      	str	r0, [r7, #12]
 8011f30:	60b9      	str	r1, [r7, #8]
 8011f32:	607a      	str	r2, [r7, #4]
 8011f34:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 8011f36:	68bb      	ldr	r3, [r7, #8]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	db0f      	blt.n	8011f5c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 8011f3c:	68ba      	ldr	r2, [r7, #8]
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	429a      	cmp	r2, r3
 8011f42:	da0b      	bge.n	8011f5c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 8011f44:	68bb      	ldr	r3, [r7, #8]
 8011f46:	009b      	lsls	r3, r3, #2
 8011f48:	683a      	ldr	r2, [r7, #0]
 8011f4a:	4413      	add	r3, r2
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 8011f50:	697b      	ldr	r3, [r7, #20]
 8011f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f56:	d001      	beq.n	8011f5c <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 8011f58:	697b      	ldr	r3, [r7, #20]
 8011f5a:	e001      	b.n	8011f60 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 8011f5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011f60:	4618      	mov	r0, r3
 8011f62:	371c      	adds	r7, #28
 8011f64:	46bd      	mov	sp, r7
 8011f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6a:	4770      	bx	lr

08011f6c <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 8011f6c:	b580      	push	{r7, lr}
 8011f6e:	b086      	sub	sp, #24
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	60f8      	str	r0, [r7, #12]
 8011f74:	60b9      	str	r1, [r7, #8]
 8011f76:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 8011f78:	68bb      	ldr	r3, [r7, #8]
 8011f7a:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 8011f7c:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 8011f7e:	68bb      	ldr	r3, [r7, #8]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 8011f84:	6879      	ldr	r1, [r7, #4]
 8011f86:	68f8      	ldr	r0, [r7, #12]
 8011f88:	f7ff ffce 	bl	8011f28 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 8011f8c:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 8011f8e:	697b      	ldr	r3, [r7, #20]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	da01      	bge.n	8011f98 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 8011f94:	2300      	movs	r3, #0
 8011f96:	e005      	b.n	8011fa4 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 8011f98:	6979      	ldr	r1, [r7, #20]
 8011f9a:	68f8      	ldr	r0, [r7, #12]
 8011f9c:	f7ff ffaa 	bl	8011ef4 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	bf00      	nop
}
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	3718      	adds	r7, #24
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	bd80      	pop	{r7, pc}

08011fac <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b084      	sub	sp, #16
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	60f8      	str	r0, [r7, #12]
 8011fb4:	60b9      	str	r1, [r7, #8]
 8011fb6:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 8011fb8:	687a      	ldr	r2, [r7, #4]
 8011fba:	68b9      	ldr	r1, [r7, #8]
 8011fbc:	68f8      	ldr	r0, [r7, #12]
 8011fbe:	f7ff ffd5 	bl	8011f6c <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 8011fc2:	4603      	mov	r3, r0
}
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	3710      	adds	r7, #16
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	bd80      	pop	{r7, pc}

08011fcc <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  TfLiteTensor* tensor = GetMutableInput(context, node, index);
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b086      	sub	sp, #24
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	60f8      	str	r0, [r7, #12]
 8011fd4:	60b9      	str	r1, [r7, #8]
 8011fd6:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 8011fd8:	68bb      	ldr	r3, [r7, #8]
 8011fda:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 8011fdc:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 8011fde:	68bb      	ldr	r3, [r7, #8]
 8011fe0:	685b      	ldr	r3, [r3, #4]
 8011fe2:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 8011fe4:	6879      	ldr	r1, [r7, #4]
 8011fe6:	68f8      	ldr	r0, [r7, #12]
 8011fe8:	f7ff ff9e 	bl	8011f28 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 8011fec:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 8011fee:	697b      	ldr	r3, [r7, #20]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	da01      	bge.n	8011ff8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 8011ff4:	2300      	movs	r3, #0
 8011ff6:	e005      	b.n	8012004 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 8011ff8:	6979      	ldr	r1, [r7, #20]
 8011ffa:	68f8      	ldr	r0, [r7, #12]
 8011ffc:	f7ff ff7a 	bl	8011ef4 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 8012000:	4603      	mov	r3, r0
 8012002:	bf00      	nop
}
 8012004:	4618      	mov	r0, r3
 8012006:	3718      	adds	r7, #24
 8012008:	46bd      	mov	sp, r7
 801200a:	bd80      	pop	{r7, pc}

0801200c <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 801200c:	b580      	push	{r7, lr}
 801200e:	b084      	sub	sp, #16
 8012010:	af00      	add	r7, sp, #0
 8012012:	60f8      	str	r0, [r7, #12]
 8012014:	60b9      	str	r1, [r7, #8]
 8012016:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 8012018:	687a      	ldr	r2, [r7, #4]
 801201a:	68b9      	ldr	r1, [r7, #8]
 801201c:	68f8      	ldr	r0, [r7, #12]
 801201e:	f7ff ffc5 	bl	8011fac <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8012022:	4603      	mov	r3, r0
}
 8012024:	4618      	mov	r0, r3
 8012026:	3710      	adds	r7, #16
 8012028:	46bd      	mov	sp, r7
 801202a:	bd80      	pop	{r7, pc}
 801202c:	0000      	movs	r0, r0
	...

08012030 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8012030:	b5b0      	push	{r4, r5, r7, lr}
 8012032:	b08e      	sub	sp, #56	; 0x38
 8012034:	af02      	add	r7, sp, #8
 8012036:	60f8      	str	r0, [r7, #12]
 8012038:	60b9      	str	r1, [r7, #8]
 801203a:	607a      	str	r2, [r7, #4]
 801203c:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 801203e:	68bb      	ldr	r3, [r7, #8]
 8012040:	68db      	ldr	r3, [r3, #12]
 8012042:	4618      	mov	r0, r3
 8012044:	f7ee fa8a 	bl	800055c <__aeabi_f2d>
 8012048:	4604      	mov	r4, r0
 801204a:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	68db      	ldr	r3, [r3, #12]
 8012050:	4618      	mov	r0, r3
 8012052:	f7ee fa83 	bl	800055c <__aeabi_f2d>
 8012056:	4602      	mov	r2, r0
 8012058:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 801205a:	4620      	mov	r0, r4
 801205c:	4629      	mov	r1, r5
 801205e:	f7ee fad5 	bl	800060c <__aeabi_dmul>
 8012062:	4602      	mov	r2, r0
 8012064:	460b      	mov	r3, r1
 8012066:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 801206a:	683b      	ldr	r3, [r7, #0]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d04b      	beq.n	8012108 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 8012070:	683b      	ldr	r3, [r7, #0]
 8012072:	68db      	ldr	r3, [r3, #12]
 8012074:	4618      	mov	r0, r3
 8012076:	f7ee fa71 	bl	800055c <__aeabi_f2d>
 801207a:	4602      	mov	r2, r0
 801207c:	460b      	mov	r3, r1
 801207e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 8012082:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012086:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801208a:	f7ee f907 	bl	800029c <__aeabi_dsub>
 801208e:	4602      	mov	r2, r0
 8012090:	460b      	mov	r3, r1
 8012092:	ec43 2b17 	vmov	d7, r2, r3
 8012096:	eeb0 0a47 	vmov.f32	s0, s14
 801209a:	eef0 0a67 	vmov.f32	s1, s15
 801209e:	f7ff ff15 	bl	8011ecc <_ZSt3absd>
 80120a2:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 80120a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80120a8:	68db      	ldr	r3, [r3, #12]
 80120aa:	4618      	mov	r0, r3
 80120ac:	f7ee fa56 	bl	800055c <__aeabi_f2d>
 80120b0:	4602      	mov	r2, r0
 80120b2:	460b      	mov	r3, r1
 80120b4:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 80120b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80120bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80120c0:	f7ee fbce 	bl	8000860 <__aeabi_ddiv>
 80120c4:	4602      	mov	r2, r0
 80120c6:	460b      	mov	r3, r1
 80120c8:	4610      	mov	r0, r2
 80120ca:	4619      	mov	r1, r3
 80120cc:	2301      	movs	r3, #1
 80120ce:	461c      	mov	r4, r3
 80120d0:	a318      	add	r3, pc, #96	; (adr r3, 8012134 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 80120d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120d6:	f7ee fd15 	bl	8000b04 <__aeabi_dcmple>
 80120da:	4603      	mov	r3, r0
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d101      	bne.n	80120e4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 80120e0:	2300      	movs	r3, #0
 80120e2:	461c      	mov	r4, r3
 80120e4:	b2e3      	uxtb	r3, r4
 80120e6:	f083 0301 	eor.w	r3, r3, #1
 80120ea:	b2db      	uxtb	r3, r3
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d00b      	beq.n	8012108 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	695c      	ldr	r4, [r3, #20]
 80120f4:	4b0c      	ldr	r3, [pc, #48]	; (8012128 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 80120f6:	9300      	str	r3, [sp, #0]
 80120f8:	f44f 73a2 	mov.w	r3, #324	; 0x144
 80120fc:	4a0b      	ldr	r2, [pc, #44]	; (801212c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 80120fe:	490c      	ldr	r1, [pc, #48]	; (8012130 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 8012100:	68f8      	ldr	r0, [r7, #12]
 8012102:	47a0      	blx	r4
 8012104:	2301      	movs	r3, #1
 8012106:	e009      	b.n	801211c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8012108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801210a:	9300      	str	r3, [sp, #0]
 801210c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801210e:	687a      	ldr	r2, [r7, #4]
 8012110:	68b9      	ldr	r1, [r7, #8]
 8012112:	68f8      	ldr	r0, [r7, #12]
 8012114:	f000 f812 	bl	801213c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 8012118:	4603      	mov	r3, r0
                                          multiplier);
 801211a:	bf00      	nop
}
 801211c:	4618      	mov	r0, r3
 801211e:	3730      	adds	r7, #48	; 0x30
 8012120:	46bd      	mov	sp, r7
 8012122:	bdb0      	pop	{r4, r5, r7, pc}
 8012124:	f3af 8000 	nop.w
 8012128:	0801cdcc 	.word	0x0801cdcc
 801212c:	0801cbb4 	.word	0x0801cbb4
 8012130:	0801ccb8 	.word	0x0801ccb8
 8012134:	47ae147b 	.word	0x47ae147b
 8012138:	3f947ae1 	.word	0x3f947ae1

0801213c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 801213c:	b590      	push	{r4, r7, lr}
 801213e:	b089      	sub	sp, #36	; 0x24
 8012140:	af02      	add	r7, sp, #8
 8012142:	60f8      	str	r0, [r7, #12]
 8012144:	60b9      	str	r1, [r7, #8]
 8012146:	607a      	str	r2, [r7, #4]
 8012148:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 801214a:	68bb      	ldr	r3, [r7, #8]
 801214c:	ed93 7a03 	vldr	s14, [r3, #12]
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	edd3 7a03 	vldr	s15, [r3, #12]
 8012156:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 801215a:	ee17 0a90 	vmov	r0, s15
 801215e:	f7ee f9fd 	bl	800055c <__aeabi_f2d>
 8012162:	4602      	mov	r2, r0
 8012164:	460b      	mov	r3, r1
 8012166:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 801216a:	2301      	movs	r3, #1
 801216c:	461c      	mov	r4, r3
 801216e:	f04f 0200 	mov.w	r2, #0
 8012172:	f04f 0300 	mov.w	r3, #0
 8012176:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801217a:	f7ee fccd 	bl	8000b18 <__aeabi_dcmpge>
 801217e:	4603      	mov	r3, r0
 8012180:	2b00      	cmp	r3, #0
 8012182:	d101      	bne.n	8012188 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 8012184:	2300      	movs	r3, #0
 8012186:	461c      	mov	r4, r3
 8012188:	b2e3      	uxtb	r3, r4
 801218a:	f083 0301 	eor.w	r3, r3, #1
 801218e:	b2db      	uxtb	r3, r3
 8012190:	2b00      	cmp	r3, #0
 8012192:	d00b      	beq.n	80121ac <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	695c      	ldr	r4, [r3, #20]
 8012198:	4b0f      	ldr	r3, [pc, #60]	; (80121d8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 801219a:	9300      	str	r3, [sp, #0]
 801219c:	f240 1351 	movw	r3, #337	; 0x151
 80121a0:	4a0e      	ldr	r2, [pc, #56]	; (80121dc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 80121a2:	490f      	ldr	r1, [pc, #60]	; (80121e0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 80121a4:	68f8      	ldr	r0, [r7, #12]
 80121a6:	47a0      	blx	r4
 80121a8:	2301      	movs	r3, #1
 80121aa:	e010      	b.n	80121ce <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 80121ac:	683b      	ldr	r3, [r7, #0]
 80121ae:	68db      	ldr	r3, [r3, #12]
 80121b0:	4618      	mov	r0, r3
 80121b2:	f7ee f9d3 	bl	800055c <__aeabi_f2d>
 80121b6:	4602      	mov	r2, r0
 80121b8:	460b      	mov	r3, r1
 80121ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80121be:	f7ee fb4f 	bl	8000860 <__aeabi_ddiv>
 80121c2:	4602      	mov	r2, r0
 80121c4:	460b      	mov	r3, r1
 80121c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80121c8:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 80121cc:	2300      	movs	r3, #0
}
 80121ce:	4618      	mov	r0, r3
 80121d0:	371c      	adds	r7, #28
 80121d2:	46bd      	mov	sp, r7
 80121d4:	bd90      	pop	{r4, r7, pc}
 80121d6:	bf00      	nop
 80121d8:	0801cdf0 	.word	0x0801cdf0
 80121dc:	0801cbb4 	.word	0x0801cbb4
 80121e0:	0801ccb8 	.word	0x0801ccb8

080121e4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b082      	sub	sp, #8
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
 80121ec:	ed87 0a00 	vstr	s0, [r7]
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 80121f6:	ed97 7a00 	vldr	s14, [r7]
 80121fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80121fe:	eeb0 0a66 	vmov.f32	s0, s13
 8012202:	f7ff fe12 	bl	8011e2a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8012206:	eef0 7a40 	vmov.f32	s15, s0
 801220a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801220e:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	685b      	ldr	r3, [r3, #4]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 8012216:	4413      	add	r3, r2
  };
 8012218:	4618      	mov	r0, r3
 801221a:	3708      	adds	r7, #8
 801221c:	46bd      	mov	sp, r7
 801221e:	bd80      	pop	{r7, pc}

08012220 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 8012220:	b580      	push	{r7, lr}
 8012222:	b08e      	sub	sp, #56	; 0x38
 8012224:	af00      	add	r7, sp, #0
 8012226:	60b9      	str	r1, [r7, #8]
 8012228:	607a      	str	r2, [r7, #4]
 801222a:	603b      	str	r3, [r7, #0]
 801222c:	4603      	mov	r3, r0
 801222e:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 8012230:	683b      	ldr	r3, [r7, #0]
 8012232:	68db      	ldr	r3, [r3, #12]
 8012234:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 8012236:	683b      	ldr	r3, [r7, #0]
 8012238:	691b      	ldr	r3, [r3, #16]
 801223a:	633b      	str	r3, [r7, #48]	; 0x30
  };
 801223c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801223e:	617b      	str	r3, [r7, #20]
 8012240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012242:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 8012244:	7bfb      	ldrb	r3, [r7, #15]
 8012246:	2b01      	cmp	r3, #1
 8012248:	d118      	bne.n	801227c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 801224a:	f107 0314 	add.w	r3, r7, #20
 801224e:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8012344 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 8012252:	4618      	mov	r0, r3
 8012254:	f7ff ffc6 	bl	80121e4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8012258:	4603      	mov	r3, r0
 801225a:	61fb      	str	r3, [r7, #28]
 801225c:	f107 021c 	add.w	r2, r7, #28
 8012260:	f107 0308 	add.w	r3, r7, #8
 8012264:	4611      	mov	r1, r2
 8012266:	4618      	mov	r0, r3
 8012268:	f000 f8d6 	bl	8012418 <_ZSt3maxIlERKT_S2_S2_>
 801226c:	4603      	mov	r3, r0
 801226e:	681a      	ldr	r2, [r3, #0]
 8012270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012272:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8012274:	687a      	ldr	r2, [r7, #4]
 8012276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012278:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 801227a:	e05f      	b.n	801233c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 801227c:	7bfb      	ldrb	r3, [r7, #15]
 801227e:	2b03      	cmp	r3, #3
 8012280:	d129      	bne.n	80122d6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 8012282:	f107 0314 	add.w	r3, r7, #20
 8012286:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8012344 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 801228a:	4618      	mov	r0, r3
 801228c:	f7ff ffaa 	bl	80121e4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8012290:	4603      	mov	r3, r0
 8012292:	623b      	str	r3, [r7, #32]
 8012294:	f107 0220 	add.w	r2, r7, #32
 8012298:	f107 0308 	add.w	r3, r7, #8
 801229c:	4611      	mov	r1, r2
 801229e:	4618      	mov	r0, r3
 80122a0:	f000 f8ba 	bl	8012418 <_ZSt3maxIlERKT_S2_S2_>
 80122a4:	4603      	mov	r3, r0
 80122a6:	681a      	ldr	r2, [r3, #0]
 80122a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122aa:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 80122ac:	f107 0314 	add.w	r3, r7, #20
 80122b0:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80122b4:	4618      	mov	r0, r3
 80122b6:	f7ff ff95 	bl	80121e4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 80122ba:	4603      	mov	r3, r0
 80122bc:	627b      	str	r3, [r7, #36]	; 0x24
 80122be:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80122c2:	1d3b      	adds	r3, r7, #4
 80122c4:	4611      	mov	r1, r2
 80122c6:	4618      	mov	r0, r3
 80122c8:	f000 f892 	bl	80123f0 <_ZSt3minIlERKT_S2_S2_>
 80122cc:	4603      	mov	r3, r0
 80122ce:	681a      	ldr	r2, [r3, #0]
 80122d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122d2:	601a      	str	r2, [r3, #0]
}
 80122d4:	e032      	b.n	801233c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 80122d6:	7bfb      	ldrb	r3, [r7, #15]
 80122d8:	2b02      	cmp	r3, #2
 80122da:	d129      	bne.n	8012330 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 80122dc:	f107 0314 	add.w	r3, r7, #20
 80122e0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80122e4:	4618      	mov	r0, r3
 80122e6:	f7ff ff7d 	bl	80121e4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 80122ea:	4603      	mov	r3, r0
 80122ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80122ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80122f2:	f107 0308 	add.w	r3, r7, #8
 80122f6:	4611      	mov	r1, r2
 80122f8:	4618      	mov	r0, r3
 80122fa:	f000 f88d 	bl	8012418 <_ZSt3maxIlERKT_S2_S2_>
 80122fe:	4603      	mov	r3, r0
 8012300:	681a      	ldr	r2, [r3, #0]
 8012302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012304:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 8012306:	f107 0314 	add.w	r3, r7, #20
 801230a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801230e:	4618      	mov	r0, r3
 8012310:	f7ff ff68 	bl	80121e4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8012314:	4603      	mov	r3, r0
 8012316:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012318:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801231c:	1d3b      	adds	r3, r7, #4
 801231e:	4611      	mov	r1, r2
 8012320:	4618      	mov	r0, r3
 8012322:	f000 f865 	bl	80123f0 <_ZSt3minIlERKT_S2_S2_>
 8012326:	4603      	mov	r3, r0
 8012328:	681a      	ldr	r2, [r3, #0]
 801232a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801232c:	601a      	str	r2, [r3, #0]
}
 801232e:	e005      	b.n	801233c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 8012330:	68ba      	ldr	r2, [r7, #8]
 8012332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012334:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8012336:	687a      	ldr	r2, [r7, #4]
 8012338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801233a:	601a      	str	r2, [r3, #0]
}
 801233c:	bf00      	nop
 801233e:	3738      	adds	r7, #56	; 0x38
 8012340:	46bd      	mov	sp, r7
 8012342:	bd80      	pop	{r7, pc}
 8012344:	00000000 	.word	0x00000000

08012348 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8012348:	b590      	push	{r4, r7, lr}
 801234a:	b089      	sub	sp, #36	; 0x24
 801234c:	af02      	add	r7, sp, #8
 801234e:	60f8      	str	r0, [r7, #12]
 8012350:	607a      	str	r2, [r7, #4]
 8012352:	603b      	str	r3, [r7, #0]
 8012354:	460b      	mov	r3, r1
 8012356:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 8012358:	2300      	movs	r3, #0
 801235a:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 801235c:	2300      	movs	r3, #0
 801235e:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	781b      	ldrb	r3, [r3, #0]
 8012364:	2b03      	cmp	r3, #3
 8012366:	d108      	bne.n	801237a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 8012368:	f7ff fd80 	bl	8011e6c <_ZNSt14numeric_limitsIhE3minEv>
 801236c:	4603      	mov	r3, r0
 801236e:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 8012370:	f7ff fd84 	bl	8011e7c <_ZNSt14numeric_limitsIhE3maxEv>
 8012374:	4603      	mov	r3, r0
 8012376:	613b      	str	r3, [r7, #16]
 8012378:	e025      	b.n	80123c6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	781b      	ldrb	r3, [r3, #0]
 801237e:	2b09      	cmp	r3, #9
 8012380:	d108      	bne.n	8012394 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 8012382:	f7ff fd62 	bl	8011e4a <_ZNSt14numeric_limitsIaE3minEv>
 8012386:	4603      	mov	r3, r0
 8012388:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 801238a:	f7ff fd67 	bl	8011e5c <_ZNSt14numeric_limitsIaE3maxEv>
 801238e:	4603      	mov	r3, r0
 8012390:	613b      	str	r3, [r7, #16]
 8012392:	e018      	b.n	80123c6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	781b      	ldrb	r3, [r3, #0]
 8012398:	2b07      	cmp	r3, #7
 801239a:	d108      	bne.n	80123ae <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 801239c:	f7ff fd76 	bl	8011e8c <_ZNSt14numeric_limitsIsE3minEv>
 80123a0:	4603      	mov	r3, r0
 80123a2:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 80123a4:	f7ff fd7c 	bl	8011ea0 <_ZNSt14numeric_limitsIsE3maxEv>
 80123a8:	4603      	mov	r3, r0
 80123aa:	613b      	str	r3, [r7, #16]
 80123ac:	e00b      	b.n	80123c6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	695c      	ldr	r4, [r3, #20]
 80123b2:	4b0c      	ldr	r3, [pc, #48]	; (80123e4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 80123b4:	9300      	str	r3, [sp, #0]
 80123b6:	f44f 73c2 	mov.w	r3, #388	; 0x184
 80123ba:	4a0b      	ldr	r2, [pc, #44]	; (80123e8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 80123bc:	490b      	ldr	r1, [pc, #44]	; (80123ec <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 80123be:	68f8      	ldr	r0, [r7, #12]
 80123c0:	47a0      	blx	r4
 80123c2:	2301      	movs	r3, #1
 80123c4:	e00a      	b.n	80123dc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x94>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 80123c6:	7af8      	ldrb	r0, [r7, #11]
 80123c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123ca:	9301      	str	r3, [sp, #4]
 80123cc:	683b      	ldr	r3, [r7, #0]
 80123ce:	9300      	str	r3, [sp, #0]
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	693a      	ldr	r2, [r7, #16]
 80123d4:	6979      	ldr	r1, [r7, #20]
 80123d6:	f7ff ff23 	bl	8012220 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 80123da:	2300      	movs	r3, #0
}
 80123dc:	4618      	mov	r0, r3
 80123de:	371c      	adds	r7, #28
 80123e0:	46bd      	mov	sp, r7
 80123e2:	bd90      	pop	{r4, r7, pc}
 80123e4:	0801ce0c 	.word	0x0801ce0c
 80123e8:	0801cbb4 	.word	0x0801cbb4
 80123ec:	0801ccb8 	.word	0x0801ccb8

080123f0 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80123f0:	b480      	push	{r7}
 80123f2:	b083      	sub	sp, #12
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
 80123f8:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80123fa:	683b      	ldr	r3, [r7, #0]
 80123fc:	681a      	ldr	r2, [r3, #0]
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	429a      	cmp	r2, r3
 8012404:	da01      	bge.n	801240a <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 8012406:	683b      	ldr	r3, [r7, #0]
 8012408:	e000      	b.n	801240c <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 801240a:	687b      	ldr	r3, [r7, #4]
    }
 801240c:	4618      	mov	r0, r3
 801240e:	370c      	adds	r7, #12
 8012410:	46bd      	mov	sp, r7
 8012412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012416:	4770      	bx	lr

08012418 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8012418:	b480      	push	{r7}
 801241a:	b083      	sub	sp, #12
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
 8012420:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	681a      	ldr	r2, [r3, #0]
 8012426:	683b      	ldr	r3, [r7, #0]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	429a      	cmp	r2, r3
 801242c:	da01      	bge.n	8012432 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 801242e:	683b      	ldr	r3, [r7, #0]
 8012430:	e000      	b.n	8012434 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 8012432:	687b      	ldr	r3, [r7, #4]
    }
 8012434:	4618      	mov	r0, r3
 8012436:	370c      	adds	r7, #12
 8012438:	46bd      	mov	sp, r7
 801243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243e:	4770      	bx	lr

08012440 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 8012440:	b480      	push	{r7}
 8012442:	b083      	sub	sp, #12
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2200      	movs	r2, #0
 801244c:	601a      	str	r2, [r3, #0]
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	4618      	mov	r0, r3
 8012452:	370c      	adds	r7, #12
 8012454:	46bd      	mov	sp, r7
 8012456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801245a:	4770      	bx	lr

0801245c <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 801245c:	b580      	push	{r7, lr}
 801245e:	b084      	sub	sp, #16
 8012460:	af00      	add	r7, sp, #0
 8012462:	60f8      	str	r0, [r7, #12]
 8012464:	60b9      	str	r1, [r7, #8]
 8012466:	607a      	str	r2, [r7, #4]
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	2200      	movs	r2, #0
 801246c:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 801246e:	687a      	ldr	r2, [r7, #4]
 8012470:	68b9      	ldr	r1, [r7, #8]
 8012472:	68f8      	ldr	r0, [r7, #12]
 8012474:	f000 f866 	bl	8012544 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	4618      	mov	r0, r3
 801247c:	3710      	adds	r7, #16
 801247e:	46bd      	mov	sp, r7
 8012480:	bd80      	pop	{r7, pc}

08012482 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 8012482:	b580      	push	{r7, lr}
 8012484:	b082      	sub	sp, #8
 8012486:	af00      	add	r7, sp, #0
 8012488:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	2b05      	cmp	r3, #5
 8012490:	dd08      	ble.n	80124a4 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	685b      	ldr	r3, [r3, #4]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d004      	beq.n	80124a4 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	685b      	ldr	r3, [r3, #4]
 801249e:	4618      	mov	r0, r3
 80124a0:	f007 f882 	bl	80195a8 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	4618      	mov	r0, r3
 80124a8:	3708      	adds	r7, #8
 80124aa:	46bd      	mov	sp, r7
 80124ac:	bd80      	pop	{r7, pc}

080124ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 80124ae:	b480      	push	{r7}
 80124b0:	b083      	sub	sp, #12
 80124b2:	af00      	add	r7, sp, #0
 80124b4:	6078      	str	r0, [r7, #4]
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	4618      	mov	r0, r3
 80124bc:	370c      	adds	r7, #12
 80124be:	46bd      	mov	sp, r7
 80124c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c4:	4770      	bx	lr

080124c6 <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32_t* DimsData() {
 80124c6:	b480      	push	{r7}
 80124c8:	b083      	sub	sp, #12
 80124ca:	af00      	add	r7, sp, #0
 80124cc:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	2b05      	cmp	r3, #5
 80124d4:	dd02      	ble.n	80124dc <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	685b      	ldr	r3, [r3, #4]
 80124da:	e001      	b.n	80124e0 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	3304      	adds	r3, #4
  }
 80124e0:	4618      	mov	r0, r3
 80124e2:	370c      	adds	r7, #12
 80124e4:	46bd      	mov	sp, r7
 80124e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ea:	4770      	bx	lr

080124ec <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b082      	sub	sp, #8
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
 80124f4:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	2b05      	cmp	r3, #5
 80124fc:	dd08      	ble.n	8012510 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	685b      	ldr	r3, [r3, #4]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d004      	beq.n	8012510 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	685b      	ldr	r3, [r3, #4]
 801250a:	4618      	mov	r0, r3
 801250c:	f007 f84c 	bl	80195a8 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	683a      	ldr	r2, [r7, #0]
 8012514:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 8012516:	683b      	ldr	r3, [r7, #0]
 8012518:	2b05      	cmp	r3, #5
 801251a:	dd0f      	ble.n	801253c <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 801251c:	683b      	ldr	r3, [r7, #0]
 801251e:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8012522:	4293      	cmp	r3, r2
 8012524:	d201      	bcs.n	801252a <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 8012526:	009b      	lsls	r3, r3, #2
 8012528:	e001      	b.n	801252e <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 801252a:	f04f 33ff 	mov.w	r3, #4294967295
 801252e:	4618      	mov	r0, r3
 8012530:	f007 f84d 	bl	80195ce <_Znaj>
 8012534:	4603      	mov	r3, r0
 8012536:	461a      	mov	r2, r3
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 801253c:	bf00      	nop
 801253e:	3708      	adds	r7, #8
 8012540:	46bd      	mov	sp, r7
 8012542:	bd80      	pop	{r7, pc}

08012544 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 8012544:	b580      	push	{r7, lr}
 8012546:	b086      	sub	sp, #24
 8012548:	af00      	add	r7, sp, #0
 801254a:	60f8      	str	r0, [r7, #12]
 801254c:	60b9      	str	r1, [r7, #8]
 801254e:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 8012550:	68b9      	ldr	r1, [r7, #8]
 8012552:	68f8      	ldr	r0, [r7, #12]
 8012554:	f7ff ffca 	bl	80124ec <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 8012558:	68f8      	ldr	r0, [r7, #12]
 801255a:	f7ff ffb4 	bl	80124c6 <_ZN6tflite12RuntimeShape8DimsDataEv>
 801255e:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8012560:	68bb      	ldr	r3, [r7, #8]
 8012562:	009b      	lsls	r3, r3, #2
 8012564:	461a      	mov	r2, r3
 8012566:	6879      	ldr	r1, [r7, #4]
 8012568:	6978      	ldr	r0, [r7, #20]
 801256a:	f008 fbd1 	bl	801ad10 <memcpy>
  }
 801256e:	bf00      	nop
 8012570:	3718      	adds	r7, #24
 8012572:	46bd      	mov	sp, r7
 8012574:	bd80      	pop	{r7, pc}

08012576 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 8012576:	b580      	push	{r7, lr}
 8012578:	b086      	sub	sp, #24
 801257a:	af00      	add	r7, sp, #0
 801257c:	6078      	str	r0, [r7, #4]
 801257e:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 8012580:	683b      	ldr	r3, [r7, #0]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d103      	bne.n	801258e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 8012586:	6878      	ldr	r0, [r7, #4]
 8012588:	f7ff ff5a 	bl	8012440 <_ZN6tflite12RuntimeShapeC1Ev>
 801258c:	e00d      	b.n	80125aa <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	689b      	ldr	r3, [r3, #8]
 8012592:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8012594:	697b      	ldr	r3, [r7, #20]
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 801259a:	697b      	ldr	r3, [r7, #20]
 801259c:	3304      	adds	r3, #4
 801259e:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 80125a0:	68fa      	ldr	r2, [r7, #12]
 80125a2:	6939      	ldr	r1, [r7, #16]
 80125a4:	6878      	ldr	r0, [r7, #4]
 80125a6:	f7ff ff59 	bl	801245c <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 80125aa:	6878      	ldr	r0, [r7, #4]
 80125ac:	3718      	adds	r7, #24
 80125ae:	46bd      	mov	sp, r7
 80125b0:	bd80      	pop	{r7, pc}

080125b2 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 80125b2:	b480      	push	{r7}
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80125ba:	4618      	mov	r0, r3
 80125bc:	46bd      	mov	sp, r7
 80125be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c2:	4770      	bx	lr

080125c4 <_ZNSt14numeric_limitsIfE8infinityEv>:
	= bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;
      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss
       = __glibcxx_float_has_denorm_loss;

      static _GLIBCXX_CONSTEXPR float
      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf(); }
 80125c4:	b480      	push	{r7}
 80125c6:	af00      	add	r7, sp, #0
 80125c8:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80125cc:	ee07 3a90 	vmov	s15, r3
 80125d0:	eeb0 0a67 	vmov.f32	s0, s15
 80125d4:	46bd      	mov	sp, r7
 80125d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125da:	4770      	bx	lr

080125dc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 80125dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80125e0:	b092      	sub	sp, #72	; 0x48
 80125e2:	af00      	add	r7, sp, #0
 80125e4:	61f8      	str	r0, [r7, #28]
 80125e6:	61b9      	str	r1, [r7, #24]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 80125e8:	69fa      	ldr	r2, [r7, #28]
 80125ea:	69bb      	ldr	r3, [r7, #24]
 80125ec:	429a      	cmp	r2, r3
 80125ee:	d107      	bne.n	8012600 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 80125f0:	f7ff ffdf 	bl	80125b2 <_ZNSt14numeric_limitsIlE3minEv>
 80125f4:	4602      	mov	r2, r0
 80125f6:	69fb      	ldr	r3, [r7, #28]
 80125f8:	4293      	cmp	r3, r2
 80125fa:	d101      	bne.n	8012600 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 80125fc:	2301      	movs	r3, #1
 80125fe:	e000      	b.n	8012602 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 8012600:	2300      	movs	r3, #0
 8012602:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  std::int64_t a_64(a);
 8012606:	69fb      	ldr	r3, [r7, #28]
 8012608:	17da      	asrs	r2, r3, #31
 801260a:	60bb      	str	r3, [r7, #8]
 801260c:	60fa      	str	r2, [r7, #12]
 801260e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012612:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b_64(b);
 8012616:	69bb      	ldr	r3, [r7, #24]
 8012618:	17da      	asrs	r2, r3, #31
 801261a:	603b      	str	r3, [r7, #0]
 801261c:	607a      	str	r2, [r7, #4]
 801261e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012622:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t ab_64 = a_64 * b_64;
 8012626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801262a:	fb03 f202 	mul.w	r2, r3, r2
 801262e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012630:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012632:	fb01 f303 	mul.w	r3, r1, r3
 8012636:	4413      	add	r3, r2
 8012638:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801263a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801263c:	fba1 4502 	umull	r4, r5, r1, r2
 8012640:	442b      	add	r3, r5
 8012642:	461d      	mov	r5, r3
 8012644:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 8012648:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 801264c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8012650:	2b00      	cmp	r3, #0
 8012652:	db02      	blt.n	801265a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7e>
 8012654:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012658:	e000      	b.n	801265c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x80>
 801265a:	4b1a      	ldr	r3, [pc, #104]	; (80126c4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xe8>)
 801265c:	627b      	str	r3, [r7, #36]	; 0x24
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 801265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012660:	17da      	asrs	r2, r3, #31
 8012662:	4698      	mov	r8, r3
 8012664:	4691      	mov	r9, r2
 8012666:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801266a:	eb18 0102 	adds.w	r1, r8, r2
 801266e:	6139      	str	r1, [r7, #16]
 8012670:	eb49 0303 	adc.w	r3, r9, r3
 8012674:	617b      	str	r3, [r7, #20]
 8012676:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801267a:	2b00      	cmp	r3, #0
 801267c:	da07      	bge.n	801268e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xb2>
 801267e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012682:	eb12 0a01 	adds.w	sl, r2, r1
 8012686:	f143 0b00 	adc.w	fp, r3, #0
 801268a:	4652      	mov	r2, sl
 801268c:	465b      	mov	r3, fp
 801268e:	f04f 0000 	mov.w	r0, #0
 8012692:	f04f 0100 	mov.w	r1, #0
 8012696:	0fd0      	lsrs	r0, r2, #31
 8012698:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801269c:	17d9      	asrs	r1, r3, #31
 801269e:	4602      	mov	r2, r0
 80126a0:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 80126a2:	4613      	mov	r3, r2
 80126a4:	623b      	str	r3, [r7, #32]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 80126a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d003      	beq.n	80126b6 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xda>
 80126ae:	f7ff f9f1 	bl	8011a94 <_ZNSt14numeric_limitsIlE3maxEv>
 80126b2:	4603      	mov	r3, r0
 80126b4:	e000      	b.n	80126b8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>
 80126b6:	6a3b      	ldr	r3, [r7, #32]
}
 80126b8:	4618      	mov	r0, r3
 80126ba:	3748      	adds	r7, #72	; 0x48
 80126bc:	46bd      	mov	sp, r7
 80126be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80126c2:	bf00      	nop
 80126c4:	c0000001 	.word	0xc0000001

080126c8 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b082      	sub	sp, #8
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
 80126d0:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 80126d2:	683b      	ldr	r3, [r7, #0]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	da01      	bge.n	80126dc <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 80126d8:	f008 fa9c 	bl	801ac14 <abort>
    TFLITE_DCHECK_LT(i, size_);
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	683a      	ldr	r2, [r7, #0]
 80126e2:	429a      	cmp	r2, r3
 80126e4:	db01      	blt.n	80126ea <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 80126e6:	f008 fa95 	bl	801ac14 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	2b05      	cmp	r3, #5
 80126f0:	dd06      	ble.n	8012700 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	685a      	ldr	r2, [r3, #4]
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	009b      	lsls	r3, r3, #2
 80126fa:	4413      	add	r3, r2
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	e004      	b.n	801270a <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 8012700:	687a      	ldr	r2, [r7, #4]
 8012702:	683b      	ldr	r3, [r7, #0]
 8012704:	009b      	lsls	r3, r3, #2
 8012706:	4413      	add	r3, r2
 8012708:	685b      	ldr	r3, [r3, #4]
  }
 801270a:	4618      	mov	r0, r3
 801270c:	3708      	adds	r7, #8
 801270e:	46bd      	mov	sp, r7
 8012710:	bd80      	pop	{r7, pc}

08012712 <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32_t* DimsData() const {
 8012712:	b480      	push	{r7}
 8012714:	b083      	sub	sp, #12
 8012716:	af00      	add	r7, sp, #0
 8012718:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	2b05      	cmp	r3, #5
 8012720:	dd02      	ble.n	8012728 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	685b      	ldr	r3, [r3, #4]
 8012726:	e001      	b.n	801272c <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	3304      	adds	r3, #4
  }
 801272c:	4618      	mov	r0, r3
 801272e:	370c      	adds	r7, #12
 8012730:	46bd      	mov	sp, r7
 8012732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012736:	4770      	bx	lr

08012738 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 8012738:	b580      	push	{r7, lr}
 801273a:	b086      	sub	sp, #24
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 8012740:	2301      	movs	r3, #1
 8012742:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 8012744:	6878      	ldr	r0, [r7, #4]
 8012746:	f7ff ffe4 	bl	8012712 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 801274a:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 801274c:	2300      	movs	r3, #0
 801274e:	613b      	str	r3, [r7, #16]
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	693a      	ldr	r2, [r7, #16]
 8012756:	429a      	cmp	r2, r3
 8012758:	da0c      	bge.n	8012774 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 801275a:	693b      	ldr	r3, [r7, #16]
 801275c:	009b      	lsls	r3, r3, #2
 801275e:	68fa      	ldr	r2, [r7, #12]
 8012760:	4413      	add	r3, r2
 8012762:	681a      	ldr	r2, [r3, #0]
 8012764:	697b      	ldr	r3, [r7, #20]
 8012766:	fb02 f303 	mul.w	r3, r2, r3
 801276a:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 801276c:	693b      	ldr	r3, [r7, #16]
 801276e:	3301      	adds	r3, #1
 8012770:	613b      	str	r3, [r7, #16]
 8012772:	e7ed      	b.n	8012750 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 8012774:	697b      	ldr	r3, [r7, #20]
  }
 8012776:	4618      	mov	r0, r3
 8012778:	3718      	adds	r7, #24
 801277a:	46bd      	mov	sp, r7
 801277c:	bd80      	pop	{r7, pc}

0801277e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
}

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
 801277e:	b590      	push	{r4, r7, lr}
 8012780:	b085      	sub	sp, #20
 8012782:	af00      	add	r7, sp, #0
 8012784:	6078      	str	r0, [r7, #4]
 8012786:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 8012788:	6878      	ldr	r0, [r7, #4]
 801278a:	f7ff fe90 	bl	80124ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801278e:	4604      	mov	r4, r0
 8012790:	6838      	ldr	r0, [r7, #0]
 8012792:	f7ff fe8c 	bl	80124ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012796:	4603      	mov	r3, r0
 8012798:	429c      	cmp	r4, r3
 801279a:	d001      	beq.n	80127a0 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x22>
 801279c:	f008 fa3a 	bl	801ac14 <abort>
  const int dims_count = shape.DimensionsCount();
 80127a0:	6878      	ldr	r0, [r7, #4]
 80127a2:	f7ff fe84 	bl	80124ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80127a6:	60b8      	str	r0, [r7, #8]
  for (int i = 0; i < dims_count; ++i) {
 80127a8:	2300      	movs	r3, #0
 80127aa:	60fb      	str	r3, [r7, #12]
 80127ac:	68fa      	ldr	r2, [r7, #12]
 80127ae:	68bb      	ldr	r3, [r7, #8]
 80127b0:	429a      	cmp	r2, r3
 80127b2:	da11      	bge.n	80127d8 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x5a>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 80127b4:	68f9      	ldr	r1, [r7, #12]
 80127b6:	6878      	ldr	r0, [r7, #4]
 80127b8:	f7ff ff86 	bl	80126c8 <_ZNK6tflite12RuntimeShape4DimsEi>
 80127bc:	4604      	mov	r4, r0
 80127be:	68f9      	ldr	r1, [r7, #12]
 80127c0:	6838      	ldr	r0, [r7, #0]
 80127c2:	f7ff ff81 	bl	80126c8 <_ZNK6tflite12RuntimeShape4DimsEi>
 80127c6:	4603      	mov	r3, r0
 80127c8:	429c      	cmp	r4, r3
 80127ca:	d001      	beq.n	80127d0 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x52>
 80127cc:	f008 fa22 	bl	801ac14 <abort>
  for (int i = 0; i < dims_count; ++i) {
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	3301      	adds	r3, #1
 80127d4:	60fb      	str	r3, [r7, #12]
 80127d6:	e7e9      	b.n	80127ac <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x2e>
  }
  return shape.FlatSize();
 80127d8:	6878      	ldr	r0, [r7, #4]
 80127da:	f7ff ffad 	bl	8012738 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 80127de:	4603      	mov	r3, r0
}
 80127e0:	4618      	mov	r0, r3
 80127e2:	3714      	adds	r7, #20
 80127e4:	46bd      	mov	sp, r7
 80127e6:	bd90      	pop	{r4, r7, pc}

080127e8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b086      	sub	sp, #24
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	60f8      	str	r0, [r7, #12]
 80127f0:	60b9      	str	r1, [r7, #8]
 80127f2:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80127fa:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	dc02      	bgt.n	8012808 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	425b      	negs	r3, r3
 8012806:	e000      	b.n	801280a <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 8012808:	2300      	movs	r3, #0
 801280a:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 801280c:	68fa      	ldr	r2, [r7, #12]
 801280e:	697b      	ldr	r3, [r7, #20]
 8012810:	fa02 f303 	lsl.w	r3, r2, r3
 8012814:	68b9      	ldr	r1, [r7, #8]
 8012816:	4618      	mov	r0, r3
 8012818:	f7ff fee0 	bl	80125dc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801281c:	4603      	mov	r3, r0
 801281e:	6939      	ldr	r1, [r7, #16]
 8012820:	4618      	mov	r0, r3
 8012822:	f000 fb4b 	bl	8012ebc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8012826:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 8012828:	4618      	mov	r0, r3
 801282a:	3718      	adds	r7, #24
 801282c:	46bd      	mov	sp, r7
 801282e:	bd80      	pop	{r7, pc}

08012830 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 8012830:	b580      	push	{r7, lr}
 8012832:	b084      	sub	sp, #16
 8012834:	af00      	add	r7, sp, #0
 8012836:	60f8      	str	r0, [r7, #12]
 8012838:	60b9      	str	r1, [r7, #8]
 801283a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d101      	bne.n	8012846 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8012842:	f008 f9e7 	bl	801ac14 <abort>
  TFLITE_DCHECK(node != nullptr);
 8012846:	68bb      	ldr	r3, [r7, #8]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d101      	bne.n	8012850 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 801284c:	f008 f9e2 	bl	801ac14 <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012854:	68bb      	ldr	r3, [r7, #8]
 8012856:	6819      	ldr	r1, [r3, #0]
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	009b      	lsls	r3, r3, #2
 801285c:	440b      	add	r3, r1
 801285e:	685b      	ldr	r3, [r3, #4]
 8012860:	4619      	mov	r1, r3
 8012862:	68f8      	ldr	r0, [r7, #12]
 8012864:	4790      	blx	r2
 8012866:	4603      	mov	r3, r0
}
 8012868:	4618      	mov	r0, r3
 801286a:	3710      	adds	r7, #16
 801286c:	46bd      	mov	sp, r7
 801286e:	bd80      	pop	{r7, pc}

08012870 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 8012870:	b580      	push	{r7, lr}
 8012872:	b084      	sub	sp, #16
 8012874:	af00      	add	r7, sp, #0
 8012876:	60f8      	str	r0, [r7, #12]
 8012878:	60b9      	str	r1, [r7, #8]
 801287a:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 801287c:	687a      	ldr	r2, [r7, #4]
 801287e:	68b9      	ldr	r1, [r7, #8]
 8012880:	68f8      	ldr	r0, [r7, #12]
 8012882:	f7ff ffd5 	bl	8012830 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8012886:	4603      	mov	r3, r0
}
 8012888:	4618      	mov	r0, r3
 801288a:	3710      	adds	r7, #16
 801288c:	46bd      	mov	sp, r7
 801288e:	bd80      	pop	{r7, pc}

08012890 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 8012890:	b580      	push	{r7, lr}
 8012892:	b084      	sub	sp, #16
 8012894:	af00      	add	r7, sp, #0
 8012896:	60f8      	str	r0, [r7, #12]
 8012898:	60b9      	str	r1, [r7, #8]
 801289a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d101      	bne.n	80128a6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 80128a2:	f008 f9b7 	bl	801ac14 <abort>
  TFLITE_DCHECK(node != nullptr);
 80128a6:	68bb      	ldr	r3, [r7, #8]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d101      	bne.n	80128b0 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 80128ac:	f008 f9b2 	bl	801ac14 <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80128b4:	68bb      	ldr	r3, [r7, #8]
 80128b6:	6859      	ldr	r1, [r3, #4]
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	009b      	lsls	r3, r3, #2
 80128bc:	440b      	add	r3, r1
 80128be:	685b      	ldr	r3, [r3, #4]
 80128c0:	4619      	mov	r1, r3
 80128c2:	68f8      	ldr	r0, [r7, #12]
 80128c4:	4790      	blx	r2
 80128c6:	4603      	mov	r3, r0
}
 80128c8:	4618      	mov	r0, r3
 80128ca:	3710      	adds	r7, #16
 80128cc:	46bd      	mov	sp, r7
 80128ce:	bd80      	pop	{r7, pc}

080128d0 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>:
  data->params.input_offset = input->params.zero_point;
  data->params.output_offset = output->params.zero_point;
}

inline void ReluFloat(const RuntimeShape& input_shape, const float* input_data,
                      const RuntimeShape& output_shape, float* output_data) {
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b08a      	sub	sp, #40	; 0x28
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	60f8      	str	r0, [r7, #12]
 80128d8:	60b9      	str	r1, [r7, #8]
 80128da:	607a      	str	r2, [r7, #4]
 80128dc:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 80128de:	6879      	ldr	r1, [r7, #4]
 80128e0:	68f8      	ldr	r0, [r7, #12]
 80128e2:	f7ff ff4c 	bl	801277e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 80128e6:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 80128e8:	2300      	movs	r3, #0
 80128ea:	627b      	str	r3, [r7, #36]	; 0x24
 80128ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128ee:	6a3b      	ldr	r3, [r7, #32]
 80128f0:	429a      	cmp	r2, r3
 80128f2:	da1d      	bge.n	8012930 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x60>
    const float val = input_data[i];
 80128f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128f6:	009b      	lsls	r3, r3, #2
 80128f8:	68ba      	ldr	r2, [r7, #8]
 80128fa:	4413      	add	r3, r2
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	61fb      	str	r3, [r7, #28]
    const float lower = 0.0f;
 8012900:	f04f 0300 	mov.w	r3, #0
 8012904:	61bb      	str	r3, [r7, #24]
    const float clamped = val < lower ? lower : val;
 8012906:	edd7 7a07 	vldr	s15, [r7, #28]
 801290a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801290e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012912:	d501      	bpl.n	8012918 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x48>
 8012914:	69bb      	ldr	r3, [r7, #24]
 8012916:	e000      	b.n	801291a <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x4a>
 8012918:	69fb      	ldr	r3, [r7, #28]
 801291a:	617b      	str	r3, [r7, #20]
    output_data[i] = clamped;
 801291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801291e:	009b      	lsls	r3, r3, #2
 8012920:	683a      	ldr	r2, [r7, #0]
 8012922:	4413      	add	r3, r2
 8012924:	697a      	ldr	r2, [r7, #20]
 8012926:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8012928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801292a:	3301      	adds	r3, #1
 801292c:	627b      	str	r3, [r7, #36]	; 0x24
 801292e:	e7dd      	b.n	80128ec <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 8012930:	bf00      	nop
 8012932:	3728      	adds	r7, #40	; 0x28
 8012934:	46bd      	mov	sp, r7
 8012936:	bd80      	pop	{r7, pc}

08012938 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>:

inline void Relu6Float(const RuntimeShape& input_shape, const float* input_data,
                       const RuntimeShape& output_shape, float* output_data) {
 8012938:	b580      	push	{r7, lr}
 801293a:	b08a      	sub	sp, #40	; 0x28
 801293c:	af00      	add	r7, sp, #0
 801293e:	60f8      	str	r0, [r7, #12]
 8012940:	60b9      	str	r1, [r7, #8]
 8012942:	607a      	str	r2, [r7, #4]
 8012944:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8012946:	6879      	ldr	r1, [r7, #4]
 8012948:	68f8      	ldr	r0, [r7, #12]
 801294a:	f7ff ff18 	bl	801277e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801294e:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 8012950:	2300      	movs	r3, #0
 8012952:	627b      	str	r3, [r7, #36]	; 0x24
 8012954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012956:	6a3b      	ldr	r3, [r7, #32]
 8012958:	429a      	cmp	r2, r3
 801295a:	da2a      	bge.n	80129b2 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x7a>
    const float val = input_data[i];
 801295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801295e:	009b      	lsls	r3, r3, #2
 8012960:	68ba      	ldr	r2, [r7, #8]
 8012962:	4413      	add	r3, r2
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	61fb      	str	r3, [r7, #28]
    const float upper = 6.0f;
 8012968:	4b14      	ldr	r3, [pc, #80]	; (80129bc <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x84>)
 801296a:	61bb      	str	r3, [r7, #24]
    const float lower = 0.0f;
 801296c:	f04f 0300 	mov.w	r3, #0
 8012970:	617b      	str	r3, [r7, #20]
    const float clamped = val > upper ? upper : val < lower ? lower : val;
 8012972:	edd7 7a07 	vldr	s15, [r7, #28]
 8012976:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 801297a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801297e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012982:	dd01      	ble.n	8012988 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x50>
 8012984:	69bb      	ldr	r3, [r7, #24]
 8012986:	e009      	b.n	801299c <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 8012988:	edd7 7a07 	vldr	s15, [r7, #28]
 801298c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012994:	d501      	bpl.n	801299a <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x62>
 8012996:	697b      	ldr	r3, [r7, #20]
 8012998:	e000      	b.n	801299c <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 801299a:	69fb      	ldr	r3, [r7, #28]
 801299c:	613b      	str	r3, [r7, #16]
    output_data[i] = clamped;
 801299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129a0:	009b      	lsls	r3, r3, #2
 80129a2:	683a      	ldr	r2, [r7, #0]
 80129a4:	4413      	add	r3, r2
 80129a6:	693a      	ldr	r2, [r7, #16]
 80129a8:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 80129aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ac:	3301      	adds	r3, #1
 80129ae:	627b      	str	r3, [r7, #36]	; 0x24
 80129b0:	e7d0      	b.n	8012954 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 80129b2:	bf00      	nop
 80129b4:	3728      	adds	r7, #40	; 0x28
 80129b6:	46bd      	mov	sp, r7
 80129b8:	bd80      	pop	{r7, pc}
 80129ba:	bf00      	nop
 80129bc:	40c00000 	.word	0x40c00000

080129c0 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj>:
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    output_data[i] = clamped;
  }
}

void* ReluInit(TfLiteContext* context, const char* buffer, size_t length) {
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b084      	sub	sp, #16
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	60f8      	str	r0, [r7, #12]
 80129c8:	60b9      	str	r1, [r7, #8]
 80129ca:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d101      	bne.n	80129d8 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj+0x18>
 80129d4:	f008 f91e 	bl	801ac14 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(ReluOpData));
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129dc:	211c      	movs	r1, #28
 80129de:	68f8      	ldr	r0, [r7, #12]
 80129e0:	4798      	blx	r3
 80129e2:	4603      	mov	r3, r0
}
 80129e4:	4618      	mov	r0, r3
 80129e6:	3710      	adds	r7, #16
 80129e8:	46bd      	mov	sp, r7
 80129ea:	bd80      	pop	{r7, pc}

080129ec <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {
 80129ec:	b590      	push	{r4, r7, lr}
 80129ee:	b089      	sub	sp, #36	; 0x24
 80129f0:	af02      	add	r7, sp, #8
 80129f2:	6078      	str	r0, [r7, #4]
 80129f4:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 80129f6:	683b      	ldr	r3, [r7, #0]
 80129f8:	691b      	ldr	r3, [r3, #16]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d101      	bne.n	8012a02 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 80129fe:	f008 f909 	bl	801ac14 <abort>
  ReluOpData* data = static_cast<ReluOpData*>(node->user_data);
 8012a02:	683b      	ldr	r3, [r7, #0]
 8012a04:	691b      	ldr	r3, [r3, #16]
 8012a06:	617b      	str	r3, [r7, #20]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8012a08:	2200      	movs	r2, #0
 8012a0a:	6839      	ldr	r1, [r7, #0]
 8012a0c:	6878      	ldr	r0, [r7, #4]
 8012a0e:	f7ff facd 	bl	8011fac <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8012a12:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, input != nullptr);
 8012a14:	693b      	ldr	r3, [r7, #16]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d10a      	bne.n	8012a30 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x44>
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	695c      	ldr	r4, [r3, #20]
 8012a1e:	4b1a      	ldr	r3, [pc, #104]	; (8012a88 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
 8012a20:	9300      	str	r3, [sp, #0]
 8012a22:	238e      	movs	r3, #142	; 0x8e
 8012a24:	4a19      	ldr	r2, [pc, #100]	; (8012a8c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 8012a26:	491a      	ldr	r1, [pc, #104]	; (8012a90 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 8012a28:	6878      	ldr	r0, [r7, #4]
 8012a2a:	47a0      	blx	r4
 8012a2c:	2301      	movs	r3, #1
 8012a2e:	e027      	b.n	8012a80 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8012a30:	2200      	movs	r2, #0
 8012a32:	6839      	ldr	r1, [r7, #0]
 8012a34:	6878      	ldr	r0, [r7, #4]
 8012a36:	f7ff fac9 	bl	8011fcc <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8012a3a:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, output != nullptr);
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d10a      	bne.n	8012a58 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	695c      	ldr	r4, [r3, #20]
 8012a46:	4b13      	ldr	r3, [pc, #76]	; (8012a94 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
 8012a48:	9300      	str	r3, [sp, #0]
 8012a4a:	2390      	movs	r3, #144	; 0x90
 8012a4c:	4a0f      	ldr	r2, [pc, #60]	; (8012a8c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 8012a4e:	4910      	ldr	r1, [pc, #64]	; (8012a90 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 8012a50:	6878      	ldr	r0, [r7, #4]
 8012a52:	47a0      	blx	r4
 8012a54:	2301      	movs	r3, #1
 8012a56:	e013      	b.n	8012a80 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>

  if (input->type == kTfLiteInt8) {
 8012a58:	693b      	ldr	r3, [r7, #16]
 8012a5a:	781b      	ldrb	r3, [r3, #0]
 8012a5c:	2b09      	cmp	r3, #9
 8012a5e:	d105      	bne.n	8012a6c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x80>
    CalculateReluOpData<int8_t>(input, output, data);
 8012a60:	697a      	ldr	r2, [r7, #20]
 8012a62:	68f9      	ldr	r1, [r7, #12]
 8012a64:	6938      	ldr	r0, [r7, #16]
 8012a66:	f000 fa9d 	bl	8012fa4 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
 8012a6a:	e008      	b.n	8012a7e <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
  } else if (input->type == kTfLiteUInt8) {
 8012a6c:	693b      	ldr	r3, [r7, #16]
 8012a6e:	781b      	ldrb	r3, [r3, #0]
 8012a70:	2b03      	cmp	r3, #3
 8012a72:	d104      	bne.n	8012a7e <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
    CalculateReluOpData<uint8_t>(input, output, data);
 8012a74:	697a      	ldr	r2, [r7, #20]
 8012a76:	68f9      	ldr	r1, [r7, #12]
 8012a78:	6938      	ldr	r0, [r7, #16]
 8012a7a:	f000 fb35 	bl	80130e8 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
  }

  return kTfLiteOk;
 8012a7e:	2300      	movs	r3, #0
}
 8012a80:	4618      	mov	r0, r3
 8012a82:	371c      	adds	r7, #28
 8012a84:	46bd      	mov	sp, r7
 8012a86:	bd90      	pop	{r4, r7, pc}
 8012a88:	0801cf38 	.word	0x0801cf38
 8012a8c:	0801ce8c 	.word	0x0801ce8c
 8012a90:	0801cf20 	.word	0x0801cf20
 8012a94:	0801cf4c 	.word	0x0801cf4c

08012a98 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
 8012a98:	b590      	push	{r4, r7, lr}
 8012a9a:	b0ad      	sub	sp, #180	; 0xb4
 8012a9c:	af02      	add	r7, sp, #8
 8012a9e:	6078      	str	r0, [r7, #4]
 8012aa0:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8012aa2:	683b      	ldr	r3, [r7, #0]
 8012aa4:	691b      	ldr	r3, [r3, #16]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d101      	bne.n	8012aae <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x16>
 8012aaa:	f008 f8b3 	bl	801ac14 <abort>
  const ReluOpData& data = *(static_cast<const ReluOpData*>(node->user_data));
 8012aae:	683b      	ldr	r3, [r7, #0]
 8012ab0:	691b      	ldr	r3, [r3, #16]
 8012ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	6839      	ldr	r1, [r7, #0]
 8012aba:	6878      	ldr	r0, [r7, #4]
 8012abc:	f7ff fed8 	bl	8012870 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8012ac0:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	6839      	ldr	r1, [r7, #0]
 8012ac8:	6878      	ldr	r0, [r7, #4]
 8012aca:	f7ff fee1 	bl	8012890 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8012ace:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 8012ad2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012ad6:	7a1b      	ldrb	r3, [r3, #8]
 8012ad8:	2b09      	cmp	r3, #9
 8012ada:	d032      	beq.n	8012b42 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xaa>
 8012adc:	2b09      	cmp	r3, #9
 8012ade:	f300 808c 	bgt.w	8012bfa <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
 8012ae2:	2b01      	cmp	r3, #1
 8012ae4:	d002      	beq.n	8012aec <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x54>
 8012ae6:	2b03      	cmp	r3, #3
 8012ae8:	d059      	beq.n	8012b9e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x106>
 8012aea:	e086      	b.n	8012bfa <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
    case kTfLiteFloat32: {
      ReluFloat(tflite::micro::GetTensorShape(input),
 8012aec:	f107 030c 	add.w	r3, r7, #12
 8012af0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8012af4:	4618      	mov	r0, r3
 8012af6:	f002 f916 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8012afa:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8012afe:	f000 fb95 	bl	801322c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8012b02:	4604      	mov	r4, r0
                tflite::micro::GetTensorData<float>(input),
                tflite::micro::GetTensorShape(output),
 8012b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012b08:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	f002 f90a 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluFloat(tflite::micro::GetTensorShape(input),
 8012b12:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8012b16:	f000 fb98 	bl	801324a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012b20:	f107 000c 	add.w	r0, r7, #12
 8012b24:	4621      	mov	r1, r4
 8012b26:	f7ff fed3 	bl	80128d0 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>
                tflite::micro::GetTensorShape(output),
 8012b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012b2e:	4618      	mov	r0, r3
 8012b30:	f7ff fca7 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluFloat(tflite::micro::GetTensorShape(input),
 8012b34:	f107 030c 	add.w	r3, r7, #12
 8012b38:	4618      	mov	r0, r3
 8012b3a:	f7ff fca2 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
                tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 8012b3e:	2300      	movs	r3, #0
 8012b40:	e069      	b.n	8012c16 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteInt8: {
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 8012b42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012b46:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	f002 f8eb 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                            tflite::micro::GetTensorShape(output),
 8012b50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012b54:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f002 f8e4 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 8012b5e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8012b62:	f000 fb83 	bl	801326c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8012b66:	4604      	mov	r4, r0
 8012b68:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8012b6c:	f000 fb8d 	bl	801328a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8012b70:	4603      	mov	r3, r0
 8012b72:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8012b76:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8012b7a:	9300      	str	r3, [sp, #0]
 8012b7c:	4623      	mov	r3, r4
 8012b7e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8012b82:	f000 fb93 	bl	80132ac <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                            tflite::micro::GetTensorShape(output),
 8012b86:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	f7ff fc79 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 8012b90:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012b94:	4618      	mov	r0, r3
 8012b96:	f7ff fc74 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
                            tflite::micro::GetTensorData<int8_t>(input),
                            tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	e03b      	b.n	8012c16 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteUInt8: {
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 8012b9e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012ba2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	f002 f8bd 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output),
 8012bac:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012bb0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	f002 f8b6 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 8012bba:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8012bbe:	f000 fbc1 	bl	8013344 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8012bc2:	4604      	mov	r4, r0
 8012bc4:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8012bc8:	f000 fbcb 	bl	8013362 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8012bcc:	4603      	mov	r3, r0
 8012bce:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8012bd2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8012bd6:	9300      	str	r3, [sp, #0]
 8012bd8:	4623      	mov	r3, r4
 8012bda:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8012bde:	f000 fbd1 	bl	8013384 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                             tflite::micro::GetTensorShape(output),
 8012be2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012be6:	4618      	mov	r0, r3
 8012be8:	f7ff fc4b 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 8012bec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	f7ff fc46 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<uint8_t>(input),
                             tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	e00d      	b.n	8012c16 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	695c      	ldr	r4, [r3, #20]
 8012bfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012c02:	7a1b      	ldrb	r3, [r3, #8]
 8012c04:	4618      	mov	r0, r3
 8012c06:	f7fe fec9 	bl	801199c <TfLiteTypeGetName>
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	461a      	mov	r2, r3
 8012c0e:	4904      	ldr	r1, [pc, #16]	; (8012c20 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x188>)
 8012c10:	6878      	ldr	r0, [r7, #4]
 8012c12:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 8012c14:	2301      	movs	r3, #1
    }
  }
}
 8012c16:	4618      	mov	r0, r3
 8012c18:	37ac      	adds	r7, #172	; 0xac
 8012c1a:	46bd      	mov	sp, r7
 8012c1c:	bd90      	pop	{r4, r7, pc}
 8012c1e:	bf00      	nop
 8012c20:	0801cf60 	.word	0x0801cf60

08012c24 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj>:

void* Relu6Init(TfLiteContext* context, const char* buffer, size_t length) {
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b084      	sub	sp, #16
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	60f8      	str	r0, [r7, #12]
 8012c2c:	60b9      	str	r1, [r7, #8]
 8012c2e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d101      	bne.n	8012c3c <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj+0x18>
 8012c38:	f007 ffec 	bl	801ac14 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(Relu6OpData));
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c40:	2104      	movs	r1, #4
 8012c42:	68f8      	ldr	r0, [r7, #12]
 8012c44:	4798      	blx	r3
 8012c46:	4603      	mov	r3, r0
}
 8012c48:	4618      	mov	r0, r3
 8012c4a:	3710      	adds	r7, #16
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	bd80      	pop	{r7, pc}

08012c50 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {
 8012c50:	b590      	push	{r4, r7, lr}
 8012c52:	b087      	sub	sp, #28
 8012c54:	af02      	add	r7, sp, #8
 8012c56:	6078      	str	r0, [r7, #4]
 8012c58:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	691b      	ldr	r3, [r3, #16]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d101      	bne.n	8012c66 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8012c62:	f007 ffd7 	bl	801ac14 <abort>
  Relu6OpData* data = static_cast<Relu6OpData*>(node->user_data);
 8012c66:	683b      	ldr	r3, [r7, #0]
 8012c68:	691b      	ldr	r3, [r3, #16]
 8012c6a:	60fb      	str	r3, [r7, #12]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	6839      	ldr	r1, [r7, #0]
 8012c70:	6878      	ldr	r0, [r7, #4]
 8012c72:	f7ff f99b 	bl	8011fac <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8012c76:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, input != nullptr);
 8012c78:	68bb      	ldr	r3, [r7, #8]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d10a      	bne.n	8012c94 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x44>
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	695c      	ldr	r4, [r3, #20]
 8012c82:	4b20      	ldr	r3, [pc, #128]	; (8012d04 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 8012c84:	9300      	str	r3, [sp, #0]
 8012c86:	23cd      	movs	r3, #205	; 0xcd
 8012c88:	4a1f      	ldr	r2, [pc, #124]	; (8012d08 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
 8012c8a:	4920      	ldr	r1, [pc, #128]	; (8012d0c <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
 8012c8c:	6878      	ldr	r0, [r7, #4]
 8012c8e:	47a0      	blx	r4
 8012c90:	2301      	movs	r3, #1
 8012c92:	e033      	b.n	8012cfc <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xac>

  if (input->type == kTfLiteInt8) {
 8012c94:	68bb      	ldr	r3, [r7, #8]
 8012c96:	781b      	ldrb	r3, [r3, #0]
 8012c98:	2b09      	cmp	r3, #9
 8012c9a:	d115      	bne.n	8012cc8 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 8012c9c:	68bb      	ldr	r3, [r7, #8]
 8012c9e:	edd3 7a03 	vldr	s15, [r3, #12]
                                                  input->params.zero_point);
 8012ca2:	68bb      	ldr	r3, [r7, #8]
 8012ca4:	691b      	ldr	r3, [r3, #16]
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	eef0 0a67 	vmov.f32	s1, s15
 8012cac:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8012cb0:	f000 fbb3 	bl	801341a <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>
 8012cb4:	4603      	mov	r3, r0
 8012cb6:	461a      	mov	r2, r3
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	701a      	strb	r2, [r3, #0]
    data->zero_int8 = input->params.zero_point;
 8012cbc:	68bb      	ldr	r3, [r7, #8]
 8012cbe:	691b      	ldr	r3, [r3, #16]
 8012cc0:	b25a      	sxtb	r2, r3
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	705a      	strb	r2, [r3, #1]
 8012cc6:	e018      	b.n	8012cfa <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
  } else if (input->type == kTfLiteUInt8) {
 8012cc8:	68bb      	ldr	r3, [r7, #8]
 8012cca:	781b      	ldrb	r3, [r3, #0]
 8012ccc:	2b03      	cmp	r3, #3
 8012cce:	d114      	bne.n	8012cfa <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 8012cd0:	68bb      	ldr	r3, [r7, #8]
 8012cd2:	edd3 7a03 	vldr	s15, [r3, #12]
                                                    input->params.zero_point);
 8012cd6:	68bb      	ldr	r3, [r7, #8]
 8012cd8:	691b      	ldr	r3, [r3, #16]
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 8012cda:	4618      	mov	r0, r3
 8012cdc:	eef0 0a67 	vmov.f32	s1, s15
 8012ce0:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8012ce4:	f000 fbe8 	bl	80134b8 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>
 8012ce8:	4603      	mov	r3, r0
 8012cea:	461a      	mov	r2, r3
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	709a      	strb	r2, [r3, #2]
    data->zero_uint8 = input->params.zero_point;
 8012cf0:	68bb      	ldr	r3, [r7, #8]
 8012cf2:	691b      	ldr	r3, [r3, #16]
 8012cf4:	b2da      	uxtb	r2, r3
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	70da      	strb	r2, [r3, #3]
  }

  return kTfLiteOk;
 8012cfa:	2300      	movs	r3, #0
}
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	3714      	adds	r7, #20
 8012d00:	46bd      	mov	sp, r7
 8012d02:	bd90      	pop	{r4, r7, pc}
 8012d04:	0801cf38 	.word	0x0801cf38
 8012d08:	0801ce8c 	.word	0x0801ce8c
 8012d0c:	0801cf20 	.word	0x0801cf20

08012d10 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
 8012d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d12:	b0ad      	sub	sp, #180	; 0xb4
 8012d14:	af02      	add	r7, sp, #8
 8012d16:	6078      	str	r0, [r7, #4]
 8012d18:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8012d1a:	683b      	ldr	r3, [r7, #0]
 8012d1c:	691b      	ldr	r3, [r3, #16]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d101      	bne.n	8012d26 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x16>
 8012d22:	f007 ff77 	bl	801ac14 <abort>
  const Relu6OpData& data = *(static_cast<const Relu6OpData*>(node->user_data));
 8012d26:	683b      	ldr	r3, [r7, #0]
 8012d28:	691b      	ldr	r3, [r3, #16]
 8012d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8012d2e:	2200      	movs	r2, #0
 8012d30:	6839      	ldr	r1, [r7, #0]
 8012d32:	6878      	ldr	r0, [r7, #4]
 8012d34:	f7ff fd9c 	bl	8012870 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8012d38:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	6839      	ldr	r1, [r7, #0]
 8012d40:	6878      	ldr	r0, [r7, #4]
 8012d42:	f7ff fda5 	bl	8012890 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8012d46:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 8012d4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012d4e:	7a1b      	ldrb	r3, [r3, #8]
 8012d50:	2b09      	cmp	r3, #9
 8012d52:	d032      	beq.n	8012dba <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 8012d54:	2b09      	cmp	r3, #9
 8012d56:	f300 809c 	bgt.w	8012e92 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
 8012d5a:	2b01      	cmp	r3, #1
 8012d5c:	d002      	beq.n	8012d64 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x54>
 8012d5e:	2b03      	cmp	r3, #3
 8012d60:	d062      	beq.n	8012e28 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x118>
 8012d62:	e096      	b.n	8012e92 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
    case kTfLiteFloat32: {
      Relu6Float(tflite::micro::GetTensorShape(input),
 8012d64:	f107 030c 	add.w	r3, r7, #12
 8012d68:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	f001 ffda 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8012d72:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8012d76:	f000 fa59 	bl	801322c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8012d7a:	4604      	mov	r4, r0
                 tflite::micro::GetTensorData<float>(input),
                 tflite::micro::GetTensorShape(output),
 8012d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d80:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8012d84:	4618      	mov	r0, r3
 8012d86:	f001 ffce 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Float(tflite::micro::GetTensorShape(input),
 8012d8a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8012d8e:	f000 fa5c 	bl	801324a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8012d92:	4603      	mov	r3, r0
 8012d94:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012d98:	f107 000c 	add.w	r0, r7, #12
 8012d9c:	4621      	mov	r1, r4
 8012d9e:	f7ff fdcb 	bl	8012938 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>
                 tflite::micro::GetTensorShape(output),
 8012da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012da6:	4618      	mov	r0, r3
 8012da8:	f7ff fb6b 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
      Relu6Float(tflite::micro::GetTensorShape(input),
 8012dac:	f107 030c 	add.w	r3, r7, #12
 8012db0:	4618      	mov	r0, r3
 8012db2:	f7ff fb66 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
                 tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 8012db6:	2300      	movs	r3, #0
 8012db8:	e079      	b.n	8012eae <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteInt8: {
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 8012dba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012dbe:	f993 4001 	ldrsb.w	r4, [r3, #1]
 8012dc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012dc6:	f993 5000 	ldrsb.w	r5, [r3]
                             tflite::micro::GetTensorShape(input),
 8012dca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012dce:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f001 ffa7 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 8012dd8:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8012ddc:	f000 fa46 	bl	801326c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8012de0:	4606      	mov	r6, r0
                             tflite::micro::GetTensorData<int8_t>(input),
                             tflite::micro::GetTensorShape(output),
 8012de2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012de6:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8012dea:	4618      	mov	r0, r3
 8012dec:	f001 ff9b 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 8012df0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8012df4:	f000 fa49 	bl	801328a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8012dfe:	9301      	str	r3, [sp, #4]
 8012e00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012e04:	9300      	str	r3, [sp, #0]
 8012e06:	4633      	mov	r3, r6
 8012e08:	4629      	mov	r1, r5
 8012e0a:	4620      	mov	r0, r4
 8012e0c:	f000 fba3 	bl	8013556 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                             tflite::micro::GetTensorShape(output),
 8012e10:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012e14:	4618      	mov	r0, r3
 8012e16:	f7ff fb34 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorShape(input),
 8012e1a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f7ff fb2f 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 8012e24:	2300      	movs	r3, #0
 8012e26:	e042      	b.n	8012eae <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteUInt8: {
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 8012e28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012e2c:	78dc      	ldrb	r4, [r3, #3]
 8012e2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012e32:	789d      	ldrb	r5, [r3, #2]
                              tflite::micro::GetTensorShape(input),
 8012e34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012e38:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	f001 ff72 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 8012e42:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8012e46:	f000 fa7d 	bl	8013344 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8012e4a:	4606      	mov	r6, r0
                              tflite::micro::GetTensorData<uint8_t>(input),
                              tflite::micro::GetTensorShape(output),
 8012e4c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012e50:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8012e54:	4618      	mov	r0, r3
 8012e56:	f001 ff66 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 8012e5a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8012e5e:	f000 fa80 	bl	8013362 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8012e62:	4603      	mov	r3, r0
 8012e64:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8012e68:	9301      	str	r3, [sp, #4]
 8012e6a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012e6e:	9300      	str	r3, [sp, #0]
 8012e70:	4633      	mov	r3, r6
 8012e72:	4629      	mov	r1, r5
 8012e74:	4620      	mov	r0, r4
 8012e76:	f000 fbad 	bl	80135d4 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                              tflite::micro::GetTensorShape(output),
 8012e7a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012e7e:	4618      	mov	r0, r3
 8012e80:	f7ff faff 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorShape(input),
 8012e84:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f7ff fafa 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 8012e8e:	2300      	movs	r3, #0
 8012e90:	e00d      	b.n	8012eae <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	695c      	ldr	r4, [r3, #20]
 8012e96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012e9a:	7a1b      	ldrb	r3, [r3, #8]
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	f7fe fd7d 	bl	801199c <TfLiteTypeGetName>
 8012ea2:	4603      	mov	r3, r0
 8012ea4:	461a      	mov	r2, r3
 8012ea6:	4904      	ldr	r1, [pc, #16]	; (8012eb8 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x1a8>)
 8012ea8:	6878      	ldr	r0, [r7, #4]
 8012eaa:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 8012eac:	2301      	movs	r3, #1
    }
  }
}
 8012eae:	4618      	mov	r0, r3
 8012eb0:	37ac      	adds	r7, #172	; 0xac
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012eb6:	bf00      	nop
 8012eb8:	0801cf60 	.word	0x0801cf60

08012ebc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 8012ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ebe:	b089      	sub	sp, #36	; 0x24
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
 8012ec4:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 8012ec6:	6839      	ldr	r1, [r7, #0]
 8012ec8:	2900      	cmp	r1, #0
 8012eca:	da06      	bge.n	8012eda <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 8012ecc:	4b31      	ldr	r3, [pc, #196]	; (8012f94 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 8012ece:	4a32      	ldr	r2, [pc, #200]	; (8012f98 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8012ed0:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8012ed4:	4831      	ldr	r0, [pc, #196]	; (8012f9c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8012ed6:	f007 fea5 	bl	801ac24 <__assert_func>
  assert(exponent <= 31);
 8012eda:	6839      	ldr	r1, [r7, #0]
 8012edc:	291f      	cmp	r1, #31
 8012ede:	dd06      	ble.n	8012eee <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 8012ee0:	4b2f      	ldr	r3, [pc, #188]	; (8012fa0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 8012ee2:	4a2d      	ldr	r2, [pc, #180]	; (8012f98 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8012ee4:	f240 1167 	movw	r1, #359	; 0x167
 8012ee8:	482c      	ldr	r0, [pc, #176]	; (8012f9c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8012eea:	f007 fe9b 	bl	801ac24 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 8012eee:	f04f 0001 	mov.w	r0, #1
 8012ef2:	f04f 0100 	mov.w	r1, #0
 8012ef6:	683c      	ldr	r4, [r7, #0]
 8012ef8:	f1a4 0620 	sub.w	r6, r4, #32
 8012efc:	f1c4 0520 	rsb	r5, r4, #32
 8012f00:	fa01 f304 	lsl.w	r3, r1, r4
 8012f04:	fa00 f606 	lsl.w	r6, r0, r6
 8012f08:	4333      	orrs	r3, r6
 8012f0a:	fa20 f505 	lsr.w	r5, r0, r5
 8012f0e:	432b      	orrs	r3, r5
 8012f10:	fa00 f204 	lsl.w	r2, r0, r4
 8012f14:	4613      	mov	r3, r2
 8012f16:	3b01      	subs	r3, #1
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f000 fb93 	bl	8013644 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012f1e:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 8012f20:	2000      	movs	r0, #0
 8012f22:	f000 fb8f 	bl	8013644 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012f26:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 8012f28:	2001      	movs	r0, #1
 8012f2a:	f000 fb8b 	bl	8013644 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012f2e:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 8012f30:	69f9      	ldr	r1, [r7, #28]
 8012f32:	6878      	ldr	r0, [r7, #4]
 8012f34:	f000 fb91 	bl	801365a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012f38:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 8012f3a:	2101      	movs	r1, #1
 8012f3c:	69f8      	ldr	r0, [r7, #28]
 8012f3e:	f000 fb9a 	bl	8013676 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8012f42:	4604      	mov	r4, r0
 8012f44:	69b9      	ldr	r1, [r7, #24]
 8012f46:	6878      	ldr	r0, [r7, #4]
 8012f48:	f000 fba4 	bl	8013694 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	6979      	ldr	r1, [r7, #20]
 8012f50:	4618      	mov	r0, r3
 8012f52:	f000 fb82 	bl	801365a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012f56:	4603      	mov	r3, r0
 8012f58:	4619      	mov	r1, r3
 8012f5a:	4620      	mov	r0, r4
 8012f5c:	f000 fbae 	bl	80136bc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8012f60:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 8012f62:	6839      	ldr	r1, [r7, #0]
 8012f64:	6878      	ldr	r0, [r7, #4]
 8012f66:	f000 fb86 	bl	8013676 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8012f6a:	4604      	mov	r4, r0
 8012f6c:	68f9      	ldr	r1, [r7, #12]
 8012f6e:	6938      	ldr	r0, [r7, #16]
 8012f70:	f000 fbb2 	bl	80136d8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8012f74:	4603      	mov	r3, r0
 8012f76:	6979      	ldr	r1, [r7, #20]
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f000 fb6e 	bl	801365a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	4619      	mov	r1, r3
 8012f82:	4620      	mov	r0, r4
 8012f84:	f000 fb9a 	bl	80136bc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8012f88:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	3724      	adds	r7, #36	; 0x24
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f92:	bf00      	nop
 8012f94:	0801cfcc 	.word	0x0801cfcc
 8012f98:	0801cfdc 	.word	0x0801cfdc
 8012f9c:	0801d038 	.word	0x0801d038
 8012fa0:	0801d0cc 	.word	0x0801d0cc

08012fa4 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 8012fa4:	b590      	push	{r4, r7, lr}
 8012fa6:	b099      	sub	sp, #100	; 0x64
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	60f8      	str	r0, [r7, #12]
 8012fac:	60b9      	str	r1, [r7, #8]
 8012fae:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 8012fb0:	f04f 0300 	mov.w	r3, #0
 8012fb4:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 8012fb6:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8012fba:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	ed93 7a03 	vldr	s14, [r3, #12]
 8012fc2:	68bb      	ldr	r3, [r7, #8]
 8012fc4:	edd3 7a03 	vldr	s15, [r3, #12]
 8012fc8:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 8012fcc:	ee16 0a90 	vmov	r0, s13
 8012fd0:	f7ed fac4 	bl	800055c <__aeabi_f2d>
 8012fd4:	4602      	mov	r2, r0
 8012fd6:	460b      	mov	r3, r1
 8012fd8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 8012fdc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012fe0:	68f9      	ldr	r1, [r7, #12]
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	f7ff fac7 	bl	8012576 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 8012fe8:	f107 0310 	add.w	r3, r7, #16
 8012fec:	68b9      	ldr	r1, [r7, #8]
 8012fee:	4618      	mov	r0, r3
 8012ff0:	f7ff fac1 	bl	8012576 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	f103 0214 	add.w	r2, r3, #20
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	3318      	adds	r3, #24
 8012ffe:	4619      	mov	r1, r3
 8013000:	4610      	mov	r0, r2
 8013002:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8013006:	f7fe fd4f 	bl	8011aa8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 801300a:	f7fe ff1e 	bl	8011e4a <_ZNSt14numeric_limitsIaE3minEv>
 801300e:	4603      	mov	r3, r0
 8013010:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 8013012:	68bb      	ldr	r3, [r7, #8]
 8013014:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 8013016:	68bb      	ldr	r3, [r7, #8]
 8013018:	edd3 7a03 	vldr	s15, [r3, #12]
 801301c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8013020:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8013024:	eeb0 0a66 	vmov.f32	s0, s13
 8013028:	f006 fbe4 	bl	80197f4 <roundf>
 801302c:	eef0 7a40 	vmov.f32	s15, s0
 8013030:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013034:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 8013038:	4423      	add	r3, r4
 801303a:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801303c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8013040:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013044:	4611      	mov	r1, r2
 8013046:	4618      	mov	r0, r3
 8013048:	f7ff f9e6 	bl	8012418 <_ZSt3maxIlERKT_S2_S2_>
 801304c:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 801304e:	681a      	ldr	r2, [r3, #0]
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 8013054:	f7ff fab6 	bl	80125c4 <_ZNSt14numeric_limitsIfE8infinityEv>
 8013058:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801305c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8013060:	eef4 7a47 	vcmp.f32	s15, s14
 8013064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013068:	d103      	bne.n	8013072 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 801306a:	f7fe fef7 	bl	8011e5c <_ZNSt14numeric_limitsIaE3maxEv>
 801306e:	4603      	mov	r3, r0
 8013070:	e022      	b.n	80130b8 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 8013072:	f7fe fef3 	bl	8011e5c <_ZNSt14numeric_limitsIaE3maxEv>
 8013076:	4603      	mov	r3, r0
 8013078:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 801307a:	68bb      	ldr	r3, [r7, #8]
 801307c:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 801307e:	68bb      	ldr	r3, [r7, #8]
 8013080:	edd3 7a03 	vldr	s15, [r3, #12]
 8013084:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8013088:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801308c:	eeb0 0a66 	vmov.f32	s0, s13
 8013090:	f006 fbb0 	bl	80197f4 <roundf>
 8013094:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 8013098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801309c:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 80130a0:	4423      	add	r3, r4
 80130a2:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 80130a4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80130a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80130ac:	4611      	mov	r1, r2
 80130ae:	4618      	mov	r0, r3
 80130b0:	f7ff f99e 	bl	80123f0 <_ZSt3minIlERKT_S2_S2_>
 80130b4:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 80130b6:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 80130b8:	687a      	ldr	r2, [r7, #4]
 80130ba:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	691a      	ldr	r2, [r3, #16]
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 80130c4:	68bb      	ldr	r3, [r7, #8]
 80130c6:	691a      	ldr	r2, [r3, #16]
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 80130cc:	f107 0310 	add.w	r3, r7, #16
 80130d0:	4618      	mov	r0, r3
 80130d2:	f7ff f9d6 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 80130d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80130da:	4618      	mov	r0, r3
 80130dc:	f7ff f9d1 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
}
 80130e0:	bf00      	nop
 80130e2:	3764      	adds	r7, #100	; 0x64
 80130e4:	46bd      	mov	sp, r7
 80130e6:	bd90      	pop	{r4, r7, pc}

080130e8 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 80130e8:	b590      	push	{r4, r7, lr}
 80130ea:	b099      	sub	sp, #100	; 0x64
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	60f8      	str	r0, [r7, #12]
 80130f0:	60b9      	str	r1, [r7, #8]
 80130f2:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 80130f4:	f04f 0300 	mov.w	r3, #0
 80130f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 80130fa:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80130fe:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	ed93 7a03 	vldr	s14, [r3, #12]
 8013106:	68bb      	ldr	r3, [r7, #8]
 8013108:	edd3 7a03 	vldr	s15, [r3, #12]
 801310c:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 8013110:	ee16 0a90 	vmov	r0, s13
 8013114:	f7ed fa22 	bl	800055c <__aeabi_f2d>
 8013118:	4602      	mov	r2, r0
 801311a:	460b      	mov	r3, r1
 801311c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 8013120:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013124:	68f9      	ldr	r1, [r7, #12]
 8013126:	4618      	mov	r0, r3
 8013128:	f7ff fa25 	bl	8012576 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 801312c:	f107 0310 	add.w	r3, r7, #16
 8013130:	68b9      	ldr	r1, [r7, #8]
 8013132:	4618      	mov	r0, r3
 8013134:	f7ff fa1f 	bl	8012576 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	f103 0214 	add.w	r2, r3, #20
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	3318      	adds	r3, #24
 8013142:	4619      	mov	r1, r3
 8013144:	4610      	mov	r0, r2
 8013146:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 801314a:	f7fe fcad 	bl	8011aa8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 801314e:	f7fe fe8d 	bl	8011e6c <_ZNSt14numeric_limitsIhE3minEv>
 8013152:	4603      	mov	r3, r0
 8013154:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 8013156:	68bb      	ldr	r3, [r7, #8]
 8013158:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 801315a:	68bb      	ldr	r3, [r7, #8]
 801315c:	edd3 7a03 	vldr	s15, [r3, #12]
 8013160:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8013164:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8013168:	eeb0 0a66 	vmov.f32	s0, s13
 801316c:	f006 fb42 	bl	80197f4 <roundf>
 8013170:	eef0 7a40 	vmov.f32	s15, s0
 8013174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013178:	ee17 3a90 	vmov	r3, s15
      output->params.zero_point +
 801317c:	4423      	add	r3, r4
 801317e:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 8013180:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8013184:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013188:	4611      	mov	r1, r2
 801318a:	4618      	mov	r0, r3
 801318c:	f7ff f944 	bl	8012418 <_ZSt3maxIlERKT_S2_S2_>
 8013190:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 8013192:	681a      	ldr	r2, [r3, #0]
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 8013198:	f7ff fa14 	bl	80125c4 <_ZNSt14numeric_limitsIfE8infinityEv>
 801319c:	eeb0 7a40 	vmov.f32	s14, s0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 80131a0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80131a4:	eef4 7a47 	vcmp.f32	s15, s14
 80131a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131ac:	d103      	bne.n	80131b6 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
 80131ae:	f7fe fe65 	bl	8011e7c <_ZNSt14numeric_limitsIhE3maxEv>
 80131b2:	4603      	mov	r3, r0
 80131b4:	e022      	b.n	80131fc <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 80131b6:	f7fe fe61 	bl	8011e7c <_ZNSt14numeric_limitsIhE3maxEv>
 80131ba:	4603      	mov	r3, r0
 80131bc:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 80131be:	68bb      	ldr	r3, [r7, #8]
 80131c0:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 80131c2:	68bb      	ldr	r3, [r7, #8]
 80131c4:	edd3 7a03 	vldr	s15, [r3, #12]
 80131c8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80131cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80131d0:	eeb0 0a66 	vmov.f32	s0, s13
 80131d4:	f006 fb0e 	bl	80197f4 <roundf>
 80131d8:	eef0 7a40 	vmov.f32	s15, s0
                         static_cast<int32_t>(
 80131dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80131e0:	ee17 3a90 	vmov	r3, s15
                     output->params.zero_point +
 80131e4:	4423      	add	r3, r4
 80131e6:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 80131e8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80131ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80131f0:	4611      	mov	r1, r2
 80131f2:	4618      	mov	r0, r3
 80131f4:	f7ff f8fc 	bl	80123f0 <_ZSt3minIlERKT_S2_S2_>
 80131f8:	4603      	mov	r3, r0
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 80131fa:	681b      	ldr	r3, [r3, #0]
  data->params.quantized_activation_max =
 80131fc:	687a      	ldr	r2, [r7, #4]
 80131fe:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	691a      	ldr	r2, [r3, #16]
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 8013208:	68bb      	ldr	r3, [r7, #8]
 801320a:	691a      	ldr	r2, [r3, #16]
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 8013210:	f107 0310 	add.w	r3, r7, #16
 8013214:	4618      	mov	r0, r3
 8013216:	f7ff f934 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 801321a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801321e:	4618      	mov	r0, r3
 8013220:	f7ff f92f 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8013224:	bf00      	nop
 8013226:	3764      	adds	r7, #100	; 0x64
 8013228:	46bd      	mov	sp, r7
 801322a:	bd90      	pop	{r4, r7, pc}

0801322c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801322c:	b580      	push	{r7, lr}
 801322e:	b082      	sub	sp, #8
 8013230:	af00      	add	r7, sp, #0
 8013232:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d101      	bne.n	801323e <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 801323a:	f007 fceb 	bl	801ac14 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	681b      	ldr	r3, [r3, #0]
}
 8013242:	4618      	mov	r0, r3
 8013244:	3708      	adds	r7, #8
 8013246:	46bd      	mov	sp, r7
 8013248:	bd80      	pop	{r7, pc}

0801324a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801324a:	b480      	push	{r7}
 801324c:	b083      	sub	sp, #12
 801324e:	af00      	add	r7, sp, #0
 8013250:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d002      	beq.n	801325e <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	e000      	b.n	8013260 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 801325e:	2300      	movs	r3, #0
}
 8013260:	4618      	mov	r0, r3
 8013262:	370c      	adds	r7, #12
 8013264:	46bd      	mov	sp, r7
 8013266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801326a:	4770      	bx	lr

0801326c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801326c:	b580      	push	{r7, lr}
 801326e:	b082      	sub	sp, #8
 8013270:	af00      	add	r7, sp, #0
 8013272:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d101      	bne.n	801327e <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 801327a:	f007 fccb 	bl	801ac14 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	681b      	ldr	r3, [r3, #0]
}
 8013282:	4618      	mov	r0, r3
 8013284:	3708      	adds	r7, #8
 8013286:	46bd      	mov	sp, r7
 8013288:	bd80      	pop	{r7, pc}

0801328a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 801328a:	b480      	push	{r7}
 801328c:	b083      	sub	sp, #12
 801328e:	af00      	add	r7, sp, #0
 8013290:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d002      	beq.n	801329e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	e000      	b.n	80132a0 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 801329e:	2300      	movs	r3, #0
}
 80132a0:	4618      	mov	r0, r3
 80132a2:	370c      	adds	r7, #12
 80132a4:	46bd      	mov	sp, r7
 80132a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132aa:	4770      	bx	lr

080132ac <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 80132ac:	b590      	push	{r4, r7, lr}
 80132ae:	b089      	sub	sp, #36	; 0x24
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	60f8      	str	r0, [r7, #12]
 80132b4:	60b9      	str	r1, [r7, #8]
 80132b6:	607a      	str	r2, [r7, #4]
 80132b8:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 80132ba:	6879      	ldr	r1, [r7, #4]
 80132bc:	68b8      	ldr	r0, [r7, #8]
 80132be:	f7ff fa5e 	bl	801277e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 80132c2:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 80132c4:	2300      	movs	r3, #0
 80132c6:	61fb      	str	r3, [r7, #28]
 80132c8:	69fa      	ldr	r2, [r7, #28]
 80132ca:	69bb      	ldr	r3, [r7, #24]
 80132cc:	429a      	cmp	r2, r3
 80132ce:	da35      	bge.n	801333c <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x90>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 80132d0:	69fb      	ldr	r3, [r7, #28]
 80132d2:	683a      	ldr	r2, [r7, #0]
 80132d4:	4413      	add	r3, r2
 80132d6:	f993 3000 	ldrsb.w	r3, [r3]
 80132da:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	68db      	ldr	r3, [r3, #12]
 80132e4:	697a      	ldr	r2, [r7, #20]
 80132e6:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 80132f0:	461a      	mov	r2, r3
 80132f2:	f7ff fa79 	bl	80127e8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 80132f6:	4603      	mov	r3, r0
        data.params.output_offset +
 80132f8:	4423      	add	r3, r4
    int32_t clamped =
 80132fa:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	3304      	adds	r3, #4
 8013300:	f107 0210 	add.w	r2, r7, #16
 8013304:	4611      	mov	r1, r2
 8013306:	4618      	mov	r0, r3
 8013308:	f7ff f886 	bl	8012418 <_ZSt3maxIlERKT_S2_S2_>
 801330c:	4603      	mov	r3, r0
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	3308      	adds	r3, #8
 8013316:	f107 0210 	add.w	r2, r7, #16
 801331a:	4611      	mov	r1, r2
 801331c:	4618      	mov	r0, r3
 801331e:	f7ff f867 	bl	80123f0 <_ZSt3minIlERKT_S2_S2_>
 8013322:	4603      	mov	r3, r0
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 8013328:	6939      	ldr	r1, [r7, #16]
 801332a:	69fb      	ldr	r3, [r7, #28]
 801332c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801332e:	4413      	add	r3, r2
 8013330:	b24a      	sxtb	r2, r1
 8013332:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8013334:	69fb      	ldr	r3, [r7, #28]
 8013336:	3301      	adds	r3, #1
 8013338:	61fb      	str	r3, [r7, #28]
 801333a:	e7c5      	b.n	80132c8 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 801333c:	bf00      	nop
 801333e:	3724      	adds	r7, #36	; 0x24
 8013340:	46bd      	mov	sp, r7
 8013342:	bd90      	pop	{r4, r7, pc}

08013344 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8013344:	b580      	push	{r7, lr}
 8013346:	b082      	sub	sp, #8
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d101      	bne.n	8013356 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor+0x12>
 8013352:	f007 fc5f 	bl	801ac14 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	681b      	ldr	r3, [r3, #0]
}
 801335a:	4618      	mov	r0, r3
 801335c:	3708      	adds	r7, #8
 801335e:	46bd      	mov	sp, r7
 8013360:	bd80      	pop	{r7, pc}

08013362 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8013362:	b480      	push	{r7}
 8013364:	b083      	sub	sp, #12
 8013366:	af00      	add	r7, sp, #0
 8013368:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d002      	beq.n	8013376 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x14>
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	e000      	b.n	8013378 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x16>
 8013376:	2300      	movs	r3, #0
}
 8013378:	4618      	mov	r0, r3
 801337a:	370c      	adds	r7, #12
 801337c:	46bd      	mov	sp, r7
 801337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013382:	4770      	bx	lr

08013384 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 8013384:	b590      	push	{r4, r7, lr}
 8013386:	b089      	sub	sp, #36	; 0x24
 8013388:	af00      	add	r7, sp, #0
 801338a:	60f8      	str	r0, [r7, #12]
 801338c:	60b9      	str	r1, [r7, #8]
 801338e:	607a      	str	r2, [r7, #4]
 8013390:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8013392:	6879      	ldr	r1, [r7, #4]
 8013394:	68b8      	ldr	r0, [r7, #8]
 8013396:	f7ff f9f2 	bl	801277e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801339a:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 801339c:	2300      	movs	r3, #0
 801339e:	61fb      	str	r3, [r7, #28]
 80133a0:	69fa      	ldr	r2, [r7, #28]
 80133a2:	69bb      	ldr	r3, [r7, #24]
 80133a4:	429a      	cmp	r2, r3
 80133a6:	da34      	bge.n	8013412 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x8e>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 80133a8:	69fb      	ldr	r3, [r7, #28]
 80133aa:	683a      	ldr	r2, [r7, #0]
 80133ac:	4413      	add	r3, r2
 80133ae:	781b      	ldrb	r3, [r3, #0]
 80133b0:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	68db      	ldr	r3, [r3, #12]
 80133ba:	697a      	ldr	r2, [r7, #20]
 80133bc:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 80133c6:	461a      	mov	r2, r3
 80133c8:	f7ff fa0e 	bl	80127e8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 80133cc:	4603      	mov	r3, r0
        data.params.output_offset +
 80133ce:	4423      	add	r3, r4
    int32_t clamped =
 80133d0:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	3304      	adds	r3, #4
 80133d6:	f107 0210 	add.w	r2, r7, #16
 80133da:	4611      	mov	r1, r2
 80133dc:	4618      	mov	r0, r3
 80133de:	f7ff f81b 	bl	8012418 <_ZSt3maxIlERKT_S2_S2_>
 80133e2:	4603      	mov	r3, r0
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	3308      	adds	r3, #8
 80133ec:	f107 0210 	add.w	r2, r7, #16
 80133f0:	4611      	mov	r1, r2
 80133f2:	4618      	mov	r0, r3
 80133f4:	f7fe fffc 	bl	80123f0 <_ZSt3minIlERKT_S2_S2_>
 80133f8:	4603      	mov	r3, r0
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 80133fe:	6939      	ldr	r1, [r7, #16]
 8013400:	69fb      	ldr	r3, [r7, #28]
 8013402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013404:	4413      	add	r3, r2
 8013406:	b2ca      	uxtb	r2, r1
 8013408:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801340a:	69fb      	ldr	r3, [r7, #28]
 801340c:	3301      	adds	r3, #1
 801340e:	61fb      	str	r3, [r7, #28]
 8013410:	e7c6      	b.n	80133a0 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 8013412:	bf00      	nop
 8013414:	3724      	adds	r7, #36	; 0x24
 8013416:	46bd      	mov	sp, r7
 8013418:	bd90      	pop	{r4, r7, pc}

0801341a <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>:

// Converts a float value into a quantized value.  Note that large values (close
// to max int and min int) may see significant error due to a lack of floating
// point granularity for large values.
template <typename T>
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 801341a:	b5b0      	push	{r4, r5, r7, lr}
 801341c:	b088      	sub	sp, #32
 801341e:	af00      	add	r7, sp, #0
 8013420:	ed87 0a03 	vstr	s0, [r7, #12]
 8013424:	edc7 0a02 	vstr	s1, [r7, #8]
 8013428:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 801342a:	ed97 7a03 	vldr	s14, [r7, #12]
 801342e:	edd7 7a02 	vldr	s15, [r7, #8]
 8013432:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8013436:	ee16 0a90 	vmov	r0, s13
 801343a:	f7ed f88f 	bl	800055c <__aeabi_f2d>
 801343e:	4602      	mov	r2, r0
 8013440:	460b      	mov	r3, r1
 8013442:	ec43 2b10 	vmov	d0, r2, r3
 8013446:	f006 f98f 	bl	8019768 <round>
 801344a:	ec55 4b10 	vmov	r4, r5, d0
 801344e:	6878      	ldr	r0, [r7, #4]
 8013450:	f7ed f872 	bl	8000538 <__aeabi_i2d>
 8013454:	4602      	mov	r2, r0
 8013456:	460b      	mov	r3, r1
 8013458:	4620      	mov	r0, r4
 801345a:	4629      	mov	r1, r5
 801345c:	f7ec ff20 	bl	80002a0 <__adddf3>
 8013460:	4602      	mov	r2, r0
 8013462:	460b      	mov	r3, r1
 8013464:	4610      	mov	r0, r2
 8013466:	4619      	mov	r1, r3
 8013468:	f7ed fb80 	bl	8000b6c <__aeabi_d2iz>
 801346c:	4603      	mov	r3, r0
 801346e:	617b      	str	r3, [r7, #20]
  result =
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 8013470:	f7fe fceb 	bl	8011e4a <_ZNSt14numeric_limitsIaE3minEv>
 8013474:	4603      	mov	r3, r0
 8013476:	61bb      	str	r3, [r7, #24]
 8013478:	f107 0214 	add.w	r2, r7, #20
 801347c:	f107 0318 	add.w	r3, r7, #24
 8013480:	4611      	mov	r1, r2
 8013482:	4618      	mov	r0, r3
 8013484:	f7fe ffc8 	bl	8012418 <_ZSt3maxIlERKT_S2_S2_>
 8013488:	4603      	mov	r3, r0
  result =
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	617b      	str	r3, [r7, #20]
  result =
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 801348e:	f7fe fce5 	bl	8011e5c <_ZNSt14numeric_limitsIaE3maxEv>
 8013492:	4603      	mov	r3, r0
 8013494:	61fb      	str	r3, [r7, #28]
 8013496:	f107 0214 	add.w	r2, r7, #20
 801349a:	f107 031c 	add.w	r3, r7, #28
 801349e:	4611      	mov	r1, r2
 80134a0:	4618      	mov	r0, r3
 80134a2:	f7fe ffa5 	bl	80123f0 <_ZSt3minIlERKT_S2_S2_>
 80134a6:	4603      	mov	r3, r0
  result =
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	617b      	str	r3, [r7, #20]
  return result;
 80134ac:	697b      	ldr	r3, [r7, #20]
 80134ae:	b25b      	sxtb	r3, r3
}
 80134b0:	4618      	mov	r0, r3
 80134b2:	3720      	adds	r7, #32
 80134b4:	46bd      	mov	sp, r7
 80134b6:	bdb0      	pop	{r4, r5, r7, pc}

080134b8 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>:
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 80134b8:	b5b0      	push	{r4, r5, r7, lr}
 80134ba:	b088      	sub	sp, #32
 80134bc:	af00      	add	r7, sp, #0
 80134be:	ed87 0a03 	vstr	s0, [r7, #12]
 80134c2:	edc7 0a02 	vstr	s1, [r7, #8]
 80134c6:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 80134c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80134cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80134d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80134d4:	ee16 0a90 	vmov	r0, s13
 80134d8:	f7ed f840 	bl	800055c <__aeabi_f2d>
 80134dc:	4602      	mov	r2, r0
 80134de:	460b      	mov	r3, r1
 80134e0:	ec43 2b10 	vmov	d0, r2, r3
 80134e4:	f006 f940 	bl	8019768 <round>
 80134e8:	ec55 4b10 	vmov	r4, r5, d0
 80134ec:	6878      	ldr	r0, [r7, #4]
 80134ee:	f7ed f823 	bl	8000538 <__aeabi_i2d>
 80134f2:	4602      	mov	r2, r0
 80134f4:	460b      	mov	r3, r1
 80134f6:	4620      	mov	r0, r4
 80134f8:	4629      	mov	r1, r5
 80134fa:	f7ec fed1 	bl	80002a0 <__adddf3>
 80134fe:	4602      	mov	r2, r0
 8013500:	460b      	mov	r3, r1
 8013502:	4610      	mov	r0, r2
 8013504:	4619      	mov	r1, r3
 8013506:	f7ed fb31 	bl	8000b6c <__aeabi_d2iz>
 801350a:	4603      	mov	r3, r0
 801350c:	617b      	str	r3, [r7, #20]
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 801350e:	f7fe fcad 	bl	8011e6c <_ZNSt14numeric_limitsIhE3minEv>
 8013512:	4603      	mov	r3, r0
 8013514:	61bb      	str	r3, [r7, #24]
 8013516:	f107 0214 	add.w	r2, r7, #20
 801351a:	f107 0318 	add.w	r3, r7, #24
 801351e:	4611      	mov	r1, r2
 8013520:	4618      	mov	r0, r3
 8013522:	f7fe ff79 	bl	8012418 <_ZSt3maxIlERKT_S2_S2_>
 8013526:	4603      	mov	r3, r0
  result =
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	617b      	str	r3, [r7, #20]
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 801352c:	f7fe fca6 	bl	8011e7c <_ZNSt14numeric_limitsIhE3maxEv>
 8013530:	4603      	mov	r3, r0
 8013532:	61fb      	str	r3, [r7, #28]
 8013534:	f107 0214 	add.w	r2, r7, #20
 8013538:	f107 031c 	add.w	r3, r7, #28
 801353c:	4611      	mov	r1, r2
 801353e:	4618      	mov	r0, r3
 8013540:	f7fe ff56 	bl	80123f0 <_ZSt3minIlERKT_S2_S2_>
 8013544:	4603      	mov	r3, r0
  result =
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	617b      	str	r3, [r7, #20]
  return result;
 801354a:	697b      	ldr	r3, [r7, #20]
 801354c:	b2db      	uxtb	r3, r3
}
 801354e:	4618      	mov	r0, r3
 8013550:	3720      	adds	r7, #32
 8013552:	46bd      	mov	sp, r7
 8013554:	bdb0      	pop	{r4, r5, r7, pc}

08013556 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 8013556:	b580      	push	{r7, lr}
 8013558:	b088      	sub	sp, #32
 801355a:	af00      	add	r7, sp, #0
 801355c:	60ba      	str	r2, [r7, #8]
 801355e:	607b      	str	r3, [r7, #4]
 8013560:	4603      	mov	r3, r0
 8013562:	73fb      	strb	r3, [r7, #15]
 8013564:	460b      	mov	r3, r1
 8013566:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8013568:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801356a:	68b8      	ldr	r0, [r7, #8]
 801356c:	f7ff f907 	bl	801277e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8013570:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8013572:	2300      	movs	r3, #0
 8013574:	61fb      	str	r3, [r7, #28]
 8013576:	69fa      	ldr	r2, [r7, #28]
 8013578:	69bb      	ldr	r3, [r7, #24]
 801357a:	429a      	cmp	r2, r3
 801357c:	da26      	bge.n	80135cc <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x76>
    const Q val = input_data[i];
 801357e:	69fb      	ldr	r3, [r7, #28]
 8013580:	687a      	ldr	r2, [r7, #4]
 8013582:	4413      	add	r3, r2
 8013584:	781b      	ldrb	r3, [r3, #0]
 8013586:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 8013588:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801358c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8013590:	429a      	cmp	r2, r3
 8013592:	dd04      	ble.n	801359e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x48>
 8013594:	f107 030e 	add.w	r3, r7, #14
 8013598:	f993 3000 	ldrsb.w	r3, [r3]
 801359c:	e00c      	b.n	80135b8 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 801359e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80135a2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80135a6:	429a      	cmp	r2, r3
 80135a8:	da04      	bge.n	80135b4 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x5e>
 80135aa:	f107 030f 	add.w	r3, r7, #15
 80135ae:	f993 3000 	ldrsb.w	r3, [r3]
 80135b2:	e001      	b.n	80135b8 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 80135b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80135b8:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 80135ba:	69fb      	ldr	r3, [r7, #28]
 80135bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135be:	4413      	add	r3, r2
 80135c0:	7dba      	ldrb	r2, [r7, #22]
 80135c2:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 80135c4:	69fb      	ldr	r3, [r7, #28]
 80135c6:	3301      	adds	r3, #1
 80135c8:	61fb      	str	r3, [r7, #28]
 80135ca:	e7d4      	b.n	8013576 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 80135cc:	bf00      	nop
 80135ce:	3720      	adds	r7, #32
 80135d0:	46bd      	mov	sp, r7
 80135d2:	bd80      	pop	{r7, pc}

080135d4 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b088      	sub	sp, #32
 80135d8:	af00      	add	r7, sp, #0
 80135da:	60ba      	str	r2, [r7, #8]
 80135dc:	607b      	str	r3, [r7, #4]
 80135de:	4603      	mov	r3, r0
 80135e0:	73fb      	strb	r3, [r7, #15]
 80135e2:	460b      	mov	r3, r1
 80135e4:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 80135e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80135e8:	68b8      	ldr	r0, [r7, #8]
 80135ea:	f7ff f8c8 	bl	801277e <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 80135ee:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 80135f0:	2300      	movs	r3, #0
 80135f2:	61fb      	str	r3, [r7, #28]
 80135f4:	69fa      	ldr	r2, [r7, #28]
 80135f6:	69bb      	ldr	r3, [r7, #24]
 80135f8:	429a      	cmp	r2, r3
 80135fa:	da1f      	bge.n	801363c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x68>
    const Q val = input_data[i];
 80135fc:	69fb      	ldr	r3, [r7, #28]
 80135fe:	687a      	ldr	r2, [r7, #4]
 8013600:	4413      	add	r3, r2
 8013602:	781b      	ldrb	r3, [r3, #0]
 8013604:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 8013606:	7bbb      	ldrb	r3, [r7, #14]
 8013608:	7dfa      	ldrb	r2, [r7, #23]
 801360a:	429a      	cmp	r2, r3
 801360c:	d903      	bls.n	8013616 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x42>
 801360e:	f107 030e 	add.w	r3, r7, #14
 8013612:	781b      	ldrb	r3, [r3, #0]
 8013614:	e008      	b.n	8013628 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 8013616:	7bfb      	ldrb	r3, [r7, #15]
 8013618:	7dfa      	ldrb	r2, [r7, #23]
 801361a:	429a      	cmp	r2, r3
 801361c:	d203      	bcs.n	8013626 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x52>
 801361e:	f107 030f 	add.w	r3, r7, #15
 8013622:	781b      	ldrb	r3, [r3, #0]
 8013624:	e000      	b.n	8013628 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 8013626:	7dfb      	ldrb	r3, [r7, #23]
 8013628:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 801362a:	69fb      	ldr	r3, [r7, #28]
 801362c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801362e:	4413      	add	r3, r2
 8013630:	7dba      	ldrb	r2, [r7, #22]
 8013632:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8013634:	69fb      	ldr	r3, [r7, #28]
 8013636:	3301      	adds	r3, #1
 8013638:	61fb      	str	r3, [r7, #28]
 801363a:	e7db      	b.n	80135f4 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 801363c:	bf00      	nop
 801363e:	3720      	adds	r7, #32
 8013640:	46bd      	mov	sp, r7
 8013642:	bd80      	pop	{r7, pc}

08013644 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 8013644:	b480      	push	{r7}
 8013646:	b083      	sub	sp, #12
 8013648:	af00      	add	r7, sp, #0
 801364a:	6078      	str	r0, [r7, #4]
  return x;
 801364c:	687b      	ldr	r3, [r7, #4]
}
 801364e:	4618      	mov	r0, r3
 8013650:	370c      	adds	r7, #12
 8013652:	46bd      	mov	sp, r7
 8013654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013658:	4770      	bx	lr

0801365a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 801365a:	b480      	push	{r7}
 801365c:	b083      	sub	sp, #12
 801365e:	af00      	add	r7, sp, #0
 8013660:	6078      	str	r0, [r7, #4]
 8013662:	6039      	str	r1, [r7, #0]
  return a & b;
 8013664:	687a      	ldr	r2, [r7, #4]
 8013666:	683b      	ldr	r3, [r7, #0]
 8013668:	4013      	ands	r3, r2
}
 801366a:	4618      	mov	r0, r3
 801366c:	370c      	adds	r7, #12
 801366e:	46bd      	mov	sp, r7
 8013670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013674:	4770      	bx	lr

08013676 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 8013676:	b480      	push	{r7}
 8013678:	b083      	sub	sp, #12
 801367a:	af00      	add	r7, sp, #0
 801367c:	6078      	str	r0, [r7, #4]
 801367e:	6039      	str	r1, [r7, #0]
  return a >> offset;
 8013680:	687a      	ldr	r2, [r7, #4]
 8013682:	683b      	ldr	r3, [r7, #0]
 8013684:	fa42 f303 	asr.w	r3, r2, r3
}
 8013688:	4618      	mov	r0, r3
 801368a:	370c      	adds	r7, #12
 801368c:	46bd      	mov	sp, r7
 801368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013692:	4770      	bx	lr

08013694 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 8013694:	b580      	push	{r7, lr}
 8013696:	b082      	sub	sp, #8
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
 801369c:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 801369e:	687a      	ldr	r2, [r7, #4]
 80136a0:	683b      	ldr	r3, [r7, #0]
 80136a2:	429a      	cmp	r2, r3
 80136a4:	bfb4      	ite	lt
 80136a6:	2301      	movlt	r3, #1
 80136a8:	2300      	movge	r3, #0
 80136aa:	b2db      	uxtb	r3, r3
 80136ac:	4618      	mov	r0, r3
 80136ae:	f000 f827 	bl	8013700 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 80136b2:	4603      	mov	r3, r0
}
 80136b4:	4618      	mov	r0, r3
 80136b6:	3708      	adds	r7, #8
 80136b8:	46bd      	mov	sp, r7
 80136ba:	bd80      	pop	{r7, pc}

080136bc <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 80136bc:	b480      	push	{r7}
 80136be:	b083      	sub	sp, #12
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
 80136c4:	6039      	str	r1, [r7, #0]
  return a + b;
 80136c6:	687a      	ldr	r2, [r7, #4]
 80136c8:	683b      	ldr	r3, [r7, #0]
 80136ca:	4413      	add	r3, r2
}
 80136cc:	4618      	mov	r0, r3
 80136ce:	370c      	adds	r7, #12
 80136d0:	46bd      	mov	sp, r7
 80136d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d6:	4770      	bx	lr

080136d8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 80136d8:	b580      	push	{r7, lr}
 80136da:	b082      	sub	sp, #8
 80136dc:	af00      	add	r7, sp, #0
 80136de:	6078      	str	r0, [r7, #4]
 80136e0:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 80136e2:	687a      	ldr	r2, [r7, #4]
 80136e4:	683b      	ldr	r3, [r7, #0]
 80136e6:	429a      	cmp	r2, r3
 80136e8:	bfcc      	ite	gt
 80136ea:	2301      	movgt	r3, #1
 80136ec:	2300      	movle	r3, #0
 80136ee:	b2db      	uxtb	r3, r3
 80136f0:	4618      	mov	r0, r3
 80136f2:	f000 f805 	bl	8013700 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 80136f6:	4603      	mov	r3, r0
}
 80136f8:	4618      	mov	r0, r3
 80136fa:	3708      	adds	r7, #8
 80136fc:	46bd      	mov	sp, r7
 80136fe:	bd80      	pop	{r7, pc}

08013700 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 8013700:	b580      	push	{r7, lr}
 8013702:	b082      	sub	sp, #8
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d004      	beq.n	8013718 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 801370e:	2000      	movs	r0, #0
 8013710:	f000 f807 	bl	8013722 <_ZN8gemmlowp6BitNotIlEET_S1_>
 8013714:	4603      	mov	r3, r0
 8013716:	e000      	b.n	801371a <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 8013718:	2300      	movs	r3, #0
}
 801371a:	4618      	mov	r0, r3
 801371c:	3708      	adds	r7, #8
 801371e:	46bd      	mov	sp, r7
 8013720:	bd80      	pop	{r7, pc}

08013722 <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 8013722:	b480      	push	{r7}
 8013724:	b083      	sub	sp, #12
 8013726:	af00      	add	r7, sp, #0
 8013728:	6078      	str	r0, [r7, #4]
  return ~a;
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	43db      	mvns	r3, r3
}
 801372e:	4618      	mov	r0, r3
 8013730:	370c      	adds	r7, #12
 8013732:	46bd      	mov	sp, r7
 8013734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013738:	4770      	bx	lr
	...

0801373c <_ZNSt14numeric_limitsIfE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 801373c:	b480      	push	{r7}
 801373e:	af00      	add	r7, sp, #0
 8013740:	4b04      	ldr	r3, [pc, #16]	; (8013754 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 8013742:	ee07 3a90 	vmov	s15, r3
 8013746:	eeb0 0a67 	vmov.f32	s0, s15
 801374a:	46bd      	mov	sp, r7
 801374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013750:	4770      	bx	lr
 8013752:	bf00      	nop
 8013754:	7f7fffff 	.word	0x7f7fffff

08013758 <_ZNSt14numeric_limitsIfE6lowestEv>:
      lowest() noexcept { return -__FLT_MAX__; }
 8013758:	b480      	push	{r7}
 801375a:	af00      	add	r7, sp, #0
 801375c:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8013760:	ee07 3a90 	vmov	s15, r3
 8013764:	eeb0 0a67 	vmov.f32	s0, s15
 8013768:	46bd      	mov	sp, r7
 801376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376e:	4770      	bx	lr

08013770 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 8013770:	b580      	push	{r7, lr}
 8013772:	b084      	sub	sp, #16
 8013774:	af00      	add	r7, sp, #0
 8013776:	ed87 0a03 	vstr	s0, [r7, #12]
 801377a:	edc7 0a02 	vstr	s1, [r7, #8]
 801377e:	ed87 1a01 	vstr	s2, [r7, #4]
  return min(max(x, output_activation_min), output_activation_max);
 8013782:	f107 0208 	add.w	r2, r7, #8
 8013786:	f107 030c 	add.w	r3, r7, #12
 801378a:	4611      	mov	r1, r2
 801378c:	4618      	mov	r0, r3
 801378e:	f7fe fb1f 	bl	8011dd0 <_ZSt3maxIfERKT_S2_S2_>
 8013792:	4602      	mov	r2, r0
 8013794:	1d3b      	adds	r3, r7, #4
 8013796:	4619      	mov	r1, r3
 8013798:	4610      	mov	r0, r2
 801379a:	f7fe fb00 	bl	8011d9e <_ZSt3minIfERKT_S2_S2_>
 801379e:	4603      	mov	r3, r0
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	ee07 3a90 	vmov	s15, r3
}
 80137a6:	eeb0 0a67 	vmov.f32	s0, s15
 80137aa:	3710      	adds	r7, #16
 80137ac:	46bd      	mov	sp, r7
 80137ae:	bd80      	pop	{r7, pc}

080137b0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 80137b0:	b580      	push	{r7, lr}
 80137b2:	b084      	sub	sp, #16
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	4603      	mov	r3, r0
 80137b8:	60b9      	str	r1, [r7, #8]
 80137ba:	607a      	str	r2, [r7, #4]
 80137bc:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 80137be:	7bfb      	ldrb	r3, [r7, #15]
 80137c0:	2b01      	cmp	r3, #1
 80137c2:	d10b      	bne.n	80137dc <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 80137c4:	68bb      	ldr	r3, [r7, #8]
 80137c6:	f04f 0200 	mov.w	r2, #0
 80137ca:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 80137cc:	f7ff ffb6 	bl	801373c <_ZNSt14numeric_limitsIfE3maxEv>
 80137d0:	eef0 7a40 	vmov.f32	s15, s0
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 80137da:	e023      	b.n	8013824 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 80137dc:	7bfb      	ldrb	r3, [r7, #15]
 80137de:	2b03      	cmp	r3, #3
 80137e0:	d107      	bne.n	80137f2 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 80137e2:	68bb      	ldr	r3, [r7, #8]
 80137e4:	f04f 0200 	mov.w	r2, #0
 80137e8:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	4a0f      	ldr	r2, [pc, #60]	; (801382c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 80137ee:	601a      	str	r2, [r3, #0]
}
 80137f0:	e018      	b.n	8013824 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 80137f2:	7bfb      	ldrb	r3, [r7, #15]
 80137f4:	2b02      	cmp	r3, #2
 80137f6:	d107      	bne.n	8013808 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 80137f8:	68bb      	ldr	r3, [r7, #8]
 80137fa:	4a0d      	ldr	r2, [pc, #52]	; (8013830 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 80137fc:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8013804:	601a      	str	r2, [r3, #0]
}
 8013806:	e00d      	b.n	8013824 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 8013808:	f7ff ffa6 	bl	8013758 <_ZNSt14numeric_limitsIfE6lowestEv>
 801380c:	eef0 7a40 	vmov.f32	s15, s0
 8013810:	68bb      	ldr	r3, [r7, #8]
 8013812:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 8013816:	f7ff ff91 	bl	801373c <_ZNSt14numeric_limitsIfE3maxEv>
 801381a:	eef0 7a40 	vmov.f32	s15, s0
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	edc3 7a00 	vstr	s15, [r3]
}
 8013824:	bf00      	nop
 8013826:	3710      	adds	r7, #16
 8013828:	46bd      	mov	sp, r7
 801382a:	bd80      	pop	{r7, pc}
 801382c:	40c00000 	.word	0x40c00000
 8013830:	bf800000 	.word	0xbf800000

08013834 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 8013834:	b480      	push	{r7}
 8013836:	b083      	sub	sp, #12
 8013838:	af00      	add	r7, sp, #0
 801383a:	6078      	str	r0, [r7, #4]
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	4618      	mov	r0, r3
 8013844:	370c      	adds	r7, #12
 8013846:	46bd      	mov	sp, r7
 8013848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801384c:	4770      	bx	lr

0801384e <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 801384e:	b480      	push	{r7}
 8013850:	b083      	sub	sp, #12
 8013852:	af00      	add	r7, sp, #0
 8013854:	6078      	str	r0, [r7, #4]
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	685b      	ldr	r3, [r3, #4]
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	4618      	mov	r0, r3
 801385e:	370c      	adds	r7, #12
 8013860:	46bd      	mov	sp, r7
 8013862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013866:	4770      	bx	lr

08013868 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8013868:	b580      	push	{r7, lr}
 801386a:	b082      	sub	sp, #8
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d101      	bne.n	801387a <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 8013876:	f007 f9cd 	bl	801ac14 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	681b      	ldr	r3, [r3, #0]
}
 801387e:	4618      	mov	r0, r3
 8013880:	3708      	adds	r7, #8
 8013882:	46bd      	mov	sp, r7
 8013884:	bd80      	pop	{r7, pc}

08013886 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
 8013886:	b590      	push	{r4, r7, lr}
 8013888:	b087      	sub	sp, #28
 801388a:	af00      	add	r7, sp, #0
 801388c:	60f8      	str	r0, [r7, #12]
 801388e:	60b9      	str	r1, [r7, #8]
 8013890:	607a      	str	r2, [r7, #4]
 8013892:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8013894:	68b9      	ldr	r1, [r7, #8]
 8013896:	68f8      	ldr	r0, [r7, #12]
 8013898:	f7fe ff16 	bl	80126c8 <_ZNK6tflite12RuntimeShape4DimsEi>
 801389c:	4604      	mov	r4, r0
 801389e:	6839      	ldr	r1, [r7, #0]
 80138a0:	6878      	ldr	r0, [r7, #4]
 80138a2:	f7fe ff11 	bl	80126c8 <_ZNK6tflite12RuntimeShape4DimsEi>
 80138a6:	4603      	mov	r3, r0
 80138a8:	429c      	cmp	r4, r3
 80138aa:	d001      	beq.n	80138b0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 80138ac:	f007 f9b2 	bl	801ac14 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 80138b0:	68b9      	ldr	r1, [r7, #8]
 80138b2:	68f8      	ldr	r0, [r7, #12]
 80138b4:	f7fe ff08 	bl	80126c8 <_ZNK6tflite12RuntimeShape4DimsEi>
 80138b8:	4603      	mov	r3, r0
 80138ba:	613b      	str	r3, [r7, #16]
 80138bc:	6839      	ldr	r1, [r7, #0]
 80138be:	6878      	ldr	r0, [r7, #4]
 80138c0:	f7fe ff02 	bl	80126c8 <_ZNK6tflite12RuntimeShape4DimsEi>
 80138c4:	4603      	mov	r3, r0
 80138c6:	617b      	str	r3, [r7, #20]
 80138c8:	f107 0214 	add.w	r2, r7, #20
 80138cc:	f107 0310 	add.w	r3, r7, #16
 80138d0:	4611      	mov	r1, r2
 80138d2:	4618      	mov	r0, r3
 80138d4:	f7fe fd8c 	bl	80123f0 <_ZSt3minIlERKT_S2_S2_>
 80138d8:	4603      	mov	r3, r0
 80138da:	681b      	ldr	r3, [r3, #0]
}
 80138dc:	4618      	mov	r0, r3
 80138de:	371c      	adds	r7, #28
 80138e0:	46bd      	mov	sp, r7
 80138e2:	bd90      	pop	{r4, r7, pc}

080138e4 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80138e4:	b580      	push	{r7, lr}
 80138e6:	b082      	sub	sp, #8
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d101      	bne.n	80138f6 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 80138f2:	f007 f98f 	bl	801ac14 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	681b      	ldr	r3, [r3, #0]
}
 80138fa:	4618      	mov	r0, r3
 80138fc:	3708      	adds	r7, #8
 80138fe:	46bd      	mov	sp, r7
 8013900:	bd80      	pop	{r7, pc}

08013902 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 8013902:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013906:	b090      	sub	sp, #64	; 0x40
 8013908:	af00      	add	r7, sp, #0
 801390a:	61f8      	str	r0, [r7, #28]
 801390c:	61b9      	str	r1, [r7, #24]
  std::int64_t a64 = a;
 801390e:	69fb      	ldr	r3, [r7, #28]
 8013910:	17da      	asrs	r2, r3, #31
 8013912:	613b      	str	r3, [r7, #16]
 8013914:	617a      	str	r2, [r7, #20]
 8013916:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801391a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  std::int64_t b64 = b;
 801391e:	69bb      	ldr	r3, [r7, #24]
 8013920:	17da      	asrs	r2, r3, #31
 8013922:	60bb      	str	r3, [r7, #8]
 8013924:	60fa      	str	r2, [r7, #12]
 8013926:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801392a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  std::int64_t sum = a64 + b64;
 801392e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8013932:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8013936:	1886      	adds	r6, r0, r2
 8013938:	603e      	str	r6, [r7, #0]
 801393a:	eb41 0303 	adc.w	r3, r1, r3
 801393e:	607b      	str	r3, [r7, #4]
 8013940:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013944:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  std::int64_t sign = sum >= 0 ? 1 : -1;
 8013948:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801394c:	2b00      	cmp	r3, #0
 801394e:	db04      	blt.n	801395a <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x58>
 8013950:	f04f 0201 	mov.w	r2, #1
 8013954:	f04f 0300 	mov.w	r3, #0
 8013958:	e003      	b.n	8013962 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x60>
 801395a:	f04f 32ff 	mov.w	r2, #4294967295
 801395e:	f04f 33ff 	mov.w	r3, #4294967295
 8013962:	e9c7 2308 	strd	r2, r3, [r7, #32]
  return static_cast<std::int32_t>((sum + sign) / 2);
 8013966:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801396a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801396e:	eb10 0802 	adds.w	r8, r0, r2
 8013972:	eb41 0903 	adc.w	r9, r1, r3
 8013976:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 801397a:	2200      	movs	r2, #0
 801397c:	469a      	mov	sl, r3
 801397e:	4693      	mov	fp, r2
 8013980:	eb1a 0408 	adds.w	r4, sl, r8
 8013984:	eb4b 0509 	adc.w	r5, fp, r9
 8013988:	f04f 0200 	mov.w	r2, #0
 801398c:	f04f 0300 	mov.w	r3, #0
 8013990:	0862      	lsrs	r2, r4, #1
 8013992:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8013996:	106b      	asrs	r3, r5, #1
 8013998:	4613      	mov	r3, r2
}
 801399a:	4618      	mov	r0, r3
 801399c:	3740      	adds	r7, #64	; 0x40
 801399e:	46bd      	mov	sp, r7
 80139a0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80139a4:	4770      	bx	lr

080139a6 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 80139a6:	b580      	push	{r7, lr}
 80139a8:	b084      	sub	sp, #16
 80139aa:	af00      	add	r7, sp, #0
 80139ac:	60f8      	str	r0, [r7, #12]
 80139ae:	60b9      	str	r1, [r7, #8]
 80139b0:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 80139b2:	68fa      	ldr	r2, [r7, #12]
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	fa02 f303 	lsl.w	r3, r2, r3
 80139ba:	68b9      	ldr	r1, [r7, #8]
 80139bc:	4618      	mov	r0, r3
 80139be:	f7fe fe0d 	bl	80125dc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80139c2:	4603      	mov	r3, r0
}
 80139c4:	4618      	mov	r0, r3
 80139c6:	3710      	adds	r7, #16
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bd80      	pop	{r7, pc}

080139cc <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b088      	sub	sp, #32
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	60f8      	str	r0, [r7, #12]
 80139d4:	60b9      	str	r1, [r7, #8]
 80139d6:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	4618      	mov	r0, r3
 80139dc:	f000 f821 	bl	8013a22 <_ZN6tflite17CountLeadingZerosImEEiT_>
 80139e0:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 80139e2:	68ba      	ldr	r2, [r7, #8]
 80139e4:	69fb      	ldr	r3, [r7, #28]
 80139e6:	1ad2      	subs	r2, r2, r3
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 80139ec:	68fa      	ldr	r2, [r7, #12]
 80139ee:	69fb      	ldr	r3, [r7, #28]
 80139f0:	fa02 f303 	lsl.w	r3, r2, r3
 80139f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 80139f8:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 80139fa:	69b8      	ldr	r0, [r7, #24]
 80139fc:	f000 f823 	bl	8013a46 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8013a00:	4603      	mov	r3, r0
 8013a02:	4618      	mov	r0, r3
 8013a04:	f000 f830 	bl	8013a68 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 8013a08:	4603      	mov	r3, r0
 8013a0a:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 8013a0c:	f107 0314 	add.w	r3, r7, #20
 8013a10:	4618      	mov	r0, r3
 8013a12:	f000 f889 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013a16:	4603      	mov	r3, r0
 8013a18:	681b      	ldr	r3, [r3, #0]
}
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	3720      	adds	r7, #32
 8013a1e:	46bd      	mov	sp, r7
 8013a20:	bd80      	pop	{r7, pc}

08013a22 <_ZN6tflite17CountLeadingZerosImEEiT_>:
int CountLeadingZeros(T integer_input) {
 8013a22:	b480      	push	{r7}
 8013a24:	b083      	sub	sp, #12
 8013a26:	af00      	add	r7, sp, #0
 8013a28:	6078      	str	r0, [r7, #4]
  return integer_input ? __builtin_clz(integer_input)
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d003      	beq.n	8013a38 <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 8013a36:	e000      	b.n	8013a3a <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 8013a38:	2320      	movs	r3, #32
}
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	370c      	adds	r7, #12
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a44:	4770      	bx	lr

08013a46 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:

  static const ScalarRawType RawMax() {
    return VectorFromScalar(ScalarRawMax());
  }

  static FixedPoint FromRaw(RawType x) {
 8013a46:	b580      	push	{r7, lr}
 8013a48:	b084      	sub	sp, #16
 8013a4a:	af00      	add	r7, sp, #0
 8013a4c:	6078      	str	r0, [r7, #4]
    FixedPoint retval;
    retval.raw() = x;
 8013a4e:	f107 030c 	add.w	r3, r7, #12
 8013a52:	4618      	mov	r0, r3
 8013a54:	f000 f868 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013a58:	4602      	mov	r2, r0
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	6013      	str	r3, [r2, #0]
    return retval;
 8013a5e:	68fb      	ldr	r3, [r7, #12]
  }
 8013a60:	4618      	mov	r0, r3
 8013a62:	3710      	adds	r7, #16
 8013a64:	46bd      	mov	sp, r7
 8013a66:	bd80      	pop	{r7, pc}

08013a68 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b08a      	sub	sp, #40	; 0x28
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 8013a70:	f000 f879 	bl	8013b66 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8013a74:	4603      	mov	r3, r0
 8013a76:	4619      	mov	r1, r3
 8013a78:	6878      	ldr	r0, [r7, #4]
 8013a7a:	f000 f87f 	bl	8013b7c <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013a7e:	4603      	mov	r3, r0
 8013a80:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 8013a82:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 8013a86:	f000 f8ab 	bl	8013be0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 8013a8a:	4603      	mov	r3, r0
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	f000 f893 	bl	8013bb8 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8013a92:	4603      	mov	r3, r0
 8013a94:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 8013a96:	4823      	ldr	r0, [pc, #140]	; (8013b24 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 8013a98:	f000 f8a2 	bl	8013be0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 8013a9c:	4603      	mov	r3, r0
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	f000 f88a 	bl	8013bb8 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8013aa4:	4603      	mov	r3, r0
 8013aa6:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 8013aa8:	69b9      	ldr	r1, [r7, #24]
 8013aaa:	6a38      	ldr	r0, [r7, #32]
 8013aac:	f000 f8a5 	bl	8013bfa <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8013ab0:	4603      	mov	r3, r0
 8013ab2:	4619      	mov	r1, r3
 8013ab4:	69f8      	ldr	r0, [r7, #28]
 8013ab6:	f000 f8c2 	bl	8013c3e <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013aba:	4603      	mov	r3, r0
 8013abc:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 8013abe:	2300      	movs	r3, #0
 8013ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8013ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ac4:	2b02      	cmp	r3, #2
 8013ac6:	dc21      	bgt.n	8013b0c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 8013ac8:	6979      	ldr	r1, [r7, #20]
 8013aca:	6a38      	ldr	r0, [r7, #32]
 8013acc:	f000 f895 	bl	8013bfa <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 8013ad4:	f000 f8d1 	bl	8013c7a <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	6939      	ldr	r1, [r7, #16]
 8013adc:	4618      	mov	r0, r3
 8013ade:	f000 f8d5 	bl	8013c8c <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013ae2:	4603      	mov	r3, r0
 8013ae4:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 8013ae6:	68f9      	ldr	r1, [r7, #12]
 8013ae8:	6978      	ldr	r0, [r7, #20]
 8013aea:	f000 f8ed 	bl	8013cc8 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8013aee:	4603      	mov	r3, r0
 8013af0:	4618      	mov	r0, r3
 8013af2:	f000 f90b 	bl	8013d0c <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8013af6:	4603      	mov	r3, r0
 8013af8:	4619      	mov	r1, r3
 8013afa:	6978      	ldr	r0, [r7, #20]
 8013afc:	f000 f89f 	bl	8013c3e <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013b00:	4603      	mov	r3, r0
 8013b02:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 8013b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b06:	3301      	adds	r3, #1
 8013b08:	627b      	str	r3, [r7, #36]	; 0x24
 8013b0a:	e7da      	b.n	8013ac2 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 8013b0c:	6978      	ldr	r0, [r7, #20]
 8013b0e:	f000 f917 	bl	8013d40 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 8013b12:	4603      	mov	r3, r0
 8013b14:	4618      	mov	r0, r3
 8013b16:	f000 f929 	bl	8013d6c <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8013b1a:	4603      	mov	r3, r0
}
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	3728      	adds	r7, #40	; 0x28
 8013b20:	46bd      	mov	sp, r7
 8013b22:	bd80      	pop	{r7, pc}
 8013b24:	c3c3c3c4 	.word	0xc3c3c3c4

08013b28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
  RawType& raw() { return i_; }
 8013b28:	b480      	push	{r7}
 8013b2a:	b083      	sub	sp, #12
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	4618      	mov	r0, r3
 8013b34:	370c      	adds	r7, #12
 8013b36:	46bd      	mov	sp, r7
 8013b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b3c:	4770      	bx	lr

08013b3e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8013b3e:	b590      	push	{r4, r7, lr}
 8013b40:	b085      	sub	sp, #20
 8013b42:	af00      	add	r7, sp, #0
 8013b44:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8013b46:	f107 030c 	add.w	r3, r7, #12
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	f7ff ffec 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013b50:	4604      	mov	r4, r0
 8013b52:	6878      	ldr	r0, [r7, #4]
 8013b54:	f7ff fd76 	bl	8013644 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013b58:	4603      	mov	r3, r0
 8013b5a:	6023      	str	r3, [r4, #0]
    return retval;
 8013b5c:	68fb      	ldr	r3, [r7, #12]
  }
 8013b5e:	4618      	mov	r0, r3
 8013b60:	3714      	adds	r7, #20
 8013b62:	46bd      	mov	sp, r7
 8013b64:	bd90      	pop	{r4, r7, pc}

08013b66 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 8013b66:	b580      	push	{r7, lr}
 8013b68:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 8013b6a:	f000 f927 	bl	8013dbc <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 8013b6e:	4603      	mov	r3, r0
 8013b70:	4618      	mov	r0, r3
 8013b72:	f7ff ffe4 	bl	8013b3e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8013b76:	4603      	mov	r3, r0
  }
 8013b78:	4618      	mov	r0, r3
 8013b7a:	bd80      	pop	{r7, pc}

08013b7c <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 8013b7c:	b590      	push	{r4, r7, lr}
 8013b7e:	b083      	sub	sp, #12
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	6078      	str	r0, [r7, #4]
 8013b84:	6039      	str	r1, [r7, #0]
 8013b86:	1d3b      	adds	r3, r7, #4
 8013b88:	4618      	mov	r0, r3
 8013b8a:	f7ff ffcd 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013b8e:	4603      	mov	r3, r0
 8013b90:	681c      	ldr	r4, [r3, #0]
 8013b92:	463b      	mov	r3, r7
 8013b94:	4618      	mov	r0, r3
 8013b96:	f7ff ffc7 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	4619      	mov	r1, r3
 8013ba0:	4620      	mov	r0, r4
 8013ba2:	f7ff feae 	bl	8013902 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 8013ba6:	4603      	mov	r3, r0
 8013ba8:	4618      	mov	r0, r3
 8013baa:	f7ff ff4c 	bl	8013a46 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8013bae:	4603      	mov	r3, r0
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	370c      	adds	r7, #12
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	bd90      	pop	{r4, r7, pc}

08013bb8 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8013bb8:	b590      	push	{r4, r7, lr}
 8013bba:	b085      	sub	sp, #20
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8013bc0:	f107 030c 	add.w	r3, r7, #12
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	f000 f900 	bl	8013dca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013bca:	4604      	mov	r4, r0
 8013bcc:	6878      	ldr	r0, [r7, #4]
 8013bce:	f7ff fd39 	bl	8013644 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013bd2:	4603      	mov	r3, r0
 8013bd4:	6023      	str	r3, [r4, #0]
    return retval;
 8013bd6:	68fb      	ldr	r3, [r7, #12]
  }
 8013bd8:	4618      	mov	r0, r3
 8013bda:	3714      	adds	r7, #20
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	bd90      	pop	{r4, r7, pc}

08013be0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 8013be0:	b580      	push	{r7, lr}
 8013be2:	b082      	sub	sp, #8
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 8013be8:	2100      	movs	r1, #0
 8013bea:	6878      	ldr	r0, [r7, #4]
 8013bec:	f7ff f966 	bl	8012ebc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8013bf0:	4603      	mov	r3, r0
}
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	3708      	adds	r7, #8
 8013bf6:	46bd      	mov	sp, r7
 8013bf8:	bd80      	pop	{r7, pc}

08013bfa <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8013bfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013bfc:	b085      	sub	sp, #20
 8013bfe:	af00      	add	r7, sp, #0
 8013c00:	6078      	str	r0, [r7, #4]
 8013c02:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8013c04:	1d3b      	adds	r3, r7, #4
 8013c06:	4618      	mov	r0, r3
 8013c08:	f7ff ff8e 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013c0c:	4603      	mov	r3, r0
 8013c0e:	681d      	ldr	r5, [r3, #0]
 8013c10:	463b      	mov	r3, r7
 8013c12:	4618      	mov	r0, r3
 8013c14:	f000 f8d9 	bl	8013dca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013c18:	4603      	mov	r3, r0
 8013c1a:	681e      	ldr	r6, [r3, #0]
 8013c1c:	f107 030c 	add.w	r3, r7, #12
 8013c20:	4618      	mov	r0, r3
 8013c22:	f000 f8d2 	bl	8013dca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013c26:	4604      	mov	r4, r0
 8013c28:	4631      	mov	r1, r6
 8013c2a:	4628      	mov	r0, r5
 8013c2c:	f7fe fcd6 	bl	80125dc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8013c30:	4603      	mov	r3, r0
 8013c32:	6023      	str	r3, [r4, #0]
  return c;
 8013c34:	68fb      	ldr	r3, [r7, #12]
}
 8013c36:	4618      	mov	r0, r3
 8013c38:	3714      	adds	r7, #20
 8013c3a:	46bd      	mov	sp, r7
 8013c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013c3e <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8013c3e:	b590      	push	{r4, r7, lr}
 8013c40:	b083      	sub	sp, #12
 8013c42:	af00      	add	r7, sp, #0
 8013c44:	6078      	str	r0, [r7, #4]
 8013c46:	6039      	str	r1, [r7, #0]
 8013c48:	1d3b      	adds	r3, r7, #4
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	f000 f8bd 	bl	8013dca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013c50:	4603      	mov	r3, r0
 8013c52:	681c      	ldr	r4, [r3, #0]
 8013c54:	463b      	mov	r3, r7
 8013c56:	4618      	mov	r0, r3
 8013c58:	f000 f8b7 	bl	8013dca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	4619      	mov	r1, r3
 8013c62:	4620      	mov	r0, r4
 8013c64:	f7ff fd2a 	bl	80136bc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8013c68:	4603      	mov	r3, r0
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f000 f8b8 	bl	8013de0 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 8013c70:	4603      	mov	r3, r0
 8013c72:	4618      	mov	r0, r3
 8013c74:	370c      	adds	r7, #12
 8013c76:	46bd      	mov	sp, r7
 8013c78:	bd90      	pop	{r4, r7, pc}

08013c7a <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 8013c7a:	b580      	push	{r7, lr}
 8013c7c:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 8013c7e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8013c82:	f7ff ff99 	bl	8013bb8 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8013c86:	4603      	mov	r3, r0
  }
 8013c88:	4618      	mov	r0, r3
 8013c8a:	bd80      	pop	{r7, pc}

08013c8c <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 8013c8c:	b590      	push	{r4, r7, lr}
 8013c8e:	b083      	sub	sp, #12
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	6078      	str	r0, [r7, #4]
 8013c94:	6039      	str	r1, [r7, #0]
 8013c96:	1d3b      	adds	r3, r7, #4
 8013c98:	4618      	mov	r0, r3
 8013c9a:	f000 f896 	bl	8013dca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013c9e:	4603      	mov	r3, r0
 8013ca0:	681c      	ldr	r4, [r3, #0]
 8013ca2:	463b      	mov	r3, r7
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	f000 f890 	bl	8013dca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013caa:	4603      	mov	r3, r0
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	4619      	mov	r1, r3
 8013cb0:	4620      	mov	r0, r4
 8013cb2:	f000 f875 	bl	8013da0 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 8013cb6:	4603      	mov	r3, r0
 8013cb8:	4618      	mov	r0, r3
 8013cba:	f000 f891 	bl	8013de0 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 8013cbe:	4603      	mov	r3, r0
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	370c      	adds	r7, #12
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	bd90      	pop	{r4, r7, pc}

08013cc8 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8013cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cca:	b085      	sub	sp, #20
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
 8013cd0:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8013cd2:	1d3b      	adds	r3, r7, #4
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	f000 f878 	bl	8013dca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013cda:	4603      	mov	r3, r0
 8013cdc:	681d      	ldr	r5, [r3, #0]
 8013cde:	463b      	mov	r3, r7
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	f000 f872 	bl	8013dca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	681e      	ldr	r6, [r3, #0]
 8013cea:	f107 030c 	add.w	r3, r7, #12
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f000 f887 	bl	8013e02 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 8013cf4:	4604      	mov	r4, r0
 8013cf6:	4631      	mov	r1, r6
 8013cf8:	4628      	mov	r0, r5
 8013cfa:	f7fe fc6f 	bl	80125dc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8013cfe:	4603      	mov	r3, r0
 8013d00:	6023      	str	r3, [r4, #0]
  return c;
 8013d02:	68fb      	ldr	r3, [r7, #12]
}
 8013d04:	4618      	mov	r0, r3
 8013d06:	3714      	adds	r7, #20
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013d0c <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8013d0c:	b5b0      	push	{r4, r5, r7, lr}
 8013d0e:	b084      	sub	sp, #16
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8013d14:	1d3b      	adds	r3, r7, #4
 8013d16:	4618      	mov	r0, r3
 8013d18:	f000 f873 	bl	8013e02 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	681d      	ldr	r5, [r3, #0]
 8013d20:	f107 030c 	add.w	r3, r7, #12
 8013d24:	4618      	mov	r0, r3
 8013d26:	f000 f850 	bl	8013dca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013d2a:	4604      	mov	r4, r0
 8013d2c:	4628      	mov	r0, r5
 8013d2e:	f000 f873 	bl	8013e18 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 8013d32:	4603      	mov	r3, r0
 8013d34:	6023      	str	r3, [r4, #0]
  return result;
 8013d36:	68fb      	ldr	r3, [r7, #12]
}
 8013d38:	4618      	mov	r0, r3
 8013d3a:	3710      	adds	r7, #16
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	bdb0      	pop	{r4, r5, r7, pc}

08013d40 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 8013d40:	b590      	push	{r4, r7, lr}
 8013d42:	b085      	sub	sp, #20
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 8013d48:	1d3b      	adds	r3, r7, #4
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	f000 f83d 	bl	8013dca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013d50:	4604      	mov	r4, r0
 8013d52:	f107 030c 	add.w	r3, r7, #12
 8013d56:	4618      	mov	r0, r3
 8013d58:	f000 f86a 	bl	8013e30 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 8013d5c:	4602      	mov	r2, r0
 8013d5e:	6823      	ldr	r3, [r4, #0]
 8013d60:	6013      	str	r3, [r2, #0]
  return c;
 8013d62:	68fb      	ldr	r3, [r7, #12]
}
 8013d64:	4618      	mov	r0, r3
 8013d66:	3714      	adds	r7, #20
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd90      	pop	{r4, r7, pc}

08013d6c <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8013d6c:	b5b0      	push	{r4, r5, r7, lr}
 8013d6e:	b084      	sub	sp, #16
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8013d74:	1d3b      	adds	r3, r7, #4
 8013d76:	4618      	mov	r0, r3
 8013d78:	f000 f85a 	bl	8013e30 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 8013d7c:	4603      	mov	r3, r0
 8013d7e:	681d      	ldr	r5, [r3, #0]
 8013d80:	f107 030c 	add.w	r3, r7, #12
 8013d84:	4618      	mov	r0, r3
 8013d86:	f7ff fecf 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013d8a:	4604      	mov	r4, r0
 8013d8c:	4628      	mov	r0, r5
 8013d8e:	f000 f85a 	bl	8013e46 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 8013d92:	4603      	mov	r3, r0
 8013d94:	6023      	str	r3, [r4, #0]
  return result;
 8013d96:	68fb      	ldr	r3, [r7, #12]
}
 8013d98:	4618      	mov	r0, r3
 8013d9a:	3710      	adds	r7, #16
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	bdb0      	pop	{r4, r5, r7, pc}

08013da0 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 8013da0:	b480      	push	{r7}
 8013da2:	b083      	sub	sp, #12
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	6078      	str	r0, [r7, #4]
 8013da8:	6039      	str	r1, [r7, #0]
  return a - b;
 8013daa:	687a      	ldr	r2, [r7, #4]
 8013dac:	683b      	ldr	r3, [r7, #0]
 8013dae:	1ad3      	subs	r3, r2, r3
}
 8013db0:	4618      	mov	r0, r3
 8013db2:	370c      	adds	r7, #12
 8013db4:	46bd      	mov	sp, r7
 8013db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dba:	4770      	bx	lr

08013dbc <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 8013dc0:	f7fd fe68 	bl	8011a94 <_ZNSt14numeric_limitsIlE3maxEv>
 8013dc4:	4603      	mov	r3, r0
  }
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	bd80      	pop	{r7, pc}

08013dca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 8013dca:	b480      	push	{r7}
 8013dcc:	b083      	sub	sp, #12
 8013dce:	af00      	add	r7, sp, #0
 8013dd0:	6078      	str	r0, [r7, #4]
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	370c      	adds	r7, #12
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dde:	4770      	bx	lr

08013de0 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b084      	sub	sp, #16
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8013de8:	f107 030c 	add.w	r3, r7, #12
 8013dec:	4618      	mov	r0, r3
 8013dee:	f7ff ffec 	bl	8013dca <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013df2:	4602      	mov	r2, r0
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	6013      	str	r3, [r2, #0]
    return retval;
 8013df8:	68fb      	ldr	r3, [r7, #12]
  }
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	3710      	adds	r7, #16
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	bd80      	pop	{r7, pc}

08013e02 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 8013e02:	b480      	push	{r7}
 8013e04:	b083      	sub	sp, #12
 8013e06:	af00      	add	r7, sp, #0
 8013e08:	6078      	str	r0, [r7, #4]
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	370c      	adds	r7, #12
 8013e10:	46bd      	mov	sp, r7
 8013e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e16:	4770      	bx	lr

08013e18 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8013e18:	b580      	push	{r7, lr}
 8013e1a:	b082      	sub	sp, #8
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8013e20:	6878      	ldr	r0, [r7, #4]
 8013e22:	f000 f81d 	bl	8013e60 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 8013e26:	4603      	mov	r3, r0
}
 8013e28:	4618      	mov	r0, r3
 8013e2a:	3708      	adds	r7, #8
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bd80      	pop	{r7, pc}

08013e30 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 8013e30:	b480      	push	{r7}
 8013e32:	b083      	sub	sp, #12
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	370c      	adds	r7, #12
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e44:	4770      	bx	lr

08013e46 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8013e46:	b580      	push	{r7, lr}
 8013e48:	b082      	sub	sp, #8
 8013e4a:	af00      	add	r7, sp, #0
 8013e4c:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8013e4e:	6878      	ldr	r0, [r7, #4]
 8013e50:	f000 f848 	bl	8013ee4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 8013e54:	4603      	mov	r3, r0
}
 8013e56:	4618      	mov	r0, r3
 8013e58:	3708      	adds	r7, #8
 8013e5a:	46bd      	mov	sp, r7
 8013e5c:	bd80      	pop	{r7, pc}
	...

08013e60 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8013e60:	b580      	push	{r7, lr}
 8013e62:	b08a      	sub	sp, #40	; 0x28
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8013e68:	f7fe fba3 	bl	80125b2 <_ZNSt14numeric_limitsIlE3minEv>
 8013e6c:	4603      	mov	r3, r0
 8013e6e:	4618      	mov	r0, r3
 8013e70:	f7ff fbe8 	bl	8013644 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013e74:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8013e76:	f7fd fe0d 	bl	8011a94 <_ZNSt14numeric_limitsIlE3maxEv>
 8013e7a:	4603      	mov	r3, r0
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	f7ff fbe1 	bl	8013644 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013e82:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8013e84:	2320      	movs	r3, #32
 8013e86:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8013e88:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8013e8c:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 8013e8e:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 8013e92:	f7ff fbd7 	bl	8013644 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013e96:	4603      	mov	r3, r0
 8013e98:	4619      	mov	r1, r3
 8013e9a:	6878      	ldr	r0, [r7, #4]
 8013e9c:	f7ff fc1c 	bl	80136d8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8013ea0:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 8013ea2:	480f      	ldr	r0, [pc, #60]	; (8013ee0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 8013ea4:	f7ff fbce 	bl	8013644 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013ea8:	4603      	mov	r3, r0
 8013eaa:	4619      	mov	r1, r3
 8013eac:	6878      	ldr	r0, [r7, #4]
 8013eae:	f7ff fbf1 	bl	8013694 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8013eb2:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8013eb4:	2102      	movs	r1, #2
 8013eb6:	6878      	ldr	r0, [r7, #4]
 8013eb8:	f000 f856 	bl	8013f68 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8013ebc:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8013ebe:	68fa      	ldr	r2, [r7, #12]
 8013ec0:	6a39      	ldr	r1, [r7, #32]
 8013ec2:	6978      	ldr	r0, [r7, #20]
 8013ec4:	f000 f894 	bl	8013ff0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8013ec8:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8013eca:	68fa      	ldr	r2, [r7, #12]
 8013ecc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013ece:	6938      	ldr	r0, [r7, #16]
 8013ed0:	f000 f88e 	bl	8013ff0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8013ed4:	60f8      	str	r0, [r7, #12]
    return result;
 8013ed6:	68fb      	ldr	r3, [r7, #12]
  }
 8013ed8:	4618      	mov	r0, r3
 8013eda:	3728      	adds	r7, #40	; 0x28
 8013edc:	46bd      	mov	sp, r7
 8013ede:	bd80      	pop	{r7, pc}
 8013ee0:	e0000001 	.word	0xe0000001

08013ee4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b08a      	sub	sp, #40	; 0x28
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8013eec:	f7fe fb61 	bl	80125b2 <_ZNSt14numeric_limitsIlE3minEv>
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	f7ff fba6 	bl	8013644 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013ef8:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8013efa:	f7fd fdcb 	bl	8011a94 <_ZNSt14numeric_limitsIlE3maxEv>
 8013efe:	4603      	mov	r3, r0
 8013f00:	4618      	mov	r0, r3
 8013f02:	f7ff fb9f 	bl	8013644 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013f06:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8013f08:	2320      	movs	r3, #32
 8013f0a:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8013f0c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8013f10:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 8013f12:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 8013f16:	f7ff fb95 	bl	8013644 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	4619      	mov	r1, r3
 8013f1e:	6878      	ldr	r0, [r7, #4]
 8013f20:	f7ff fbda 	bl	80136d8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8013f24:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 8013f26:	480f      	ldr	r0, [pc, #60]	; (8013f64 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 8013f28:	f7ff fb8c 	bl	8013644 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013f2c:	4603      	mov	r3, r0
 8013f2e:	4619      	mov	r1, r3
 8013f30:	6878      	ldr	r0, [r7, #4]
 8013f32:	f7ff fbaf 	bl	8013694 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8013f36:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8013f38:	2101      	movs	r1, #1
 8013f3a:	6878      	ldr	r0, [r7, #4]
 8013f3c:	f000 f814 	bl	8013f68 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8013f40:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8013f42:	68fa      	ldr	r2, [r7, #12]
 8013f44:	6a39      	ldr	r1, [r7, #32]
 8013f46:	6978      	ldr	r0, [r7, #20]
 8013f48:	f000 f852 	bl	8013ff0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8013f4c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8013f4e:	68fa      	ldr	r2, [r7, #12]
 8013f50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013f52:	6938      	ldr	r0, [r7, #16]
 8013f54:	f000 f84c 	bl	8013ff0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8013f58:	60f8      	str	r0, [r7, #12]
    return result;
 8013f5a:	68fb      	ldr	r3, [r7, #12]
  }
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	3728      	adds	r7, #40	; 0x28
 8013f60:	46bd      	mov	sp, r7
 8013f62:	bd80      	pop	{r7, pc}
 8013f64:	c0000001 	.word	0xc0000001

08013f68 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 8013f68:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8013f6c:	b089      	sub	sp, #36	; 0x24
 8013f6e:	af00      	add	r7, sp, #0
 8013f70:	6078      	str	r0, [r7, #4]
 8013f72:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 8013f74:	6879      	ldr	r1, [r7, #4]
 8013f76:	17c8      	asrs	r0, r1, #31
 8013f78:	4688      	mov	r8, r1
 8013f7a:	4681      	mov	r9, r0
 8013f7c:	e9c7 8906 	strd	r8, r9, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 8013f80:	2001      	movs	r0, #1
 8013f82:	6839      	ldr	r1, [r7, #0]
 8013f84:	fa00 f101 	lsl.w	r1, r0, r1
 8013f88:	17c8      	asrs	r0, r1, #31
 8013f8a:	460c      	mov	r4, r1
 8013f8c:	4605      	mov	r5, r0
 8013f8e:	69f9      	ldr	r1, [r7, #28]
 8013f90:	fb04 f001 	mul.w	r0, r4, r1
 8013f94:	69b9      	ldr	r1, [r7, #24]
 8013f96:	fb05 f101 	mul.w	r1, r5, r1
 8013f9a:	4401      	add	r1, r0
 8013f9c:	69b8      	ldr	r0, [r7, #24]
 8013f9e:	fba0 2304 	umull	r2, r3, r0, r4
 8013fa2:	4419      	add	r1, r3
 8013fa4:	460b      	mov	r3, r1
 8013fa6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8013faa:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 8013fae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013fb2:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 8013fb4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013fb8:	60bb      	str	r3, [r7, #8]
             ? min
 8013fba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013fbe:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8013fc2:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8013fc6:	db0b      	blt.n	8013fe0 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x78>
             : wide_shifted > max ? max
 8013fc8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013fcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8013fd0:	f173 0300 	sbcs.w	r3, r3, #0
 8013fd4:	da01      	bge.n	8013fda <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x72>
 8013fd6:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 8013fd8:	e004      	b.n	8013fe4 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 8013fda:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 8013fde:	e001      	b.n	8013fe4 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             ? min
 8013fe0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	3724      	adds	r7, #36	; 0x24
 8013fe8:	46bd      	mov	sp, r7
 8013fea:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8013fee:	4770      	bx	lr

08013ff0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 8013ff0:	b590      	push	{r4, r7, lr}
 8013ff2:	b085      	sub	sp, #20
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	60f8      	str	r0, [r7, #12]
 8013ff8:	60b9      	str	r1, [r7, #8]
 8013ffa:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 8013ffc:	68b9      	ldr	r1, [r7, #8]
 8013ffe:	68f8      	ldr	r0, [r7, #12]
 8014000:	f7ff fb2b 	bl	801365a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8014004:	4604      	mov	r4, r0
 8014006:	68f8      	ldr	r0, [r7, #12]
 8014008:	f7ff fb8b 	bl	8013722 <_ZN8gemmlowp6BitNotIlEET_S1_>
 801400c:	4603      	mov	r3, r0
 801400e:	6879      	ldr	r1, [r7, #4]
 8014010:	4618      	mov	r0, r3
 8014012:	f7ff fb22 	bl	801365a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8014016:	4603      	mov	r3, r0
 8014018:	4619      	mov	r1, r3
 801401a:	4620      	mov	r0, r4
 801401c:	f000 f805 	bl	801402a <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 8014020:	4603      	mov	r3, r0
}
 8014022:	4618      	mov	r0, r3
 8014024:	3714      	adds	r7, #20
 8014026:	46bd      	mov	sp, r7
 8014028:	bd90      	pop	{r4, r7, pc}

0801402a <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 801402a:	b480      	push	{r7}
 801402c:	b083      	sub	sp, #12
 801402e:	af00      	add	r7, sp, #0
 8014030:	6078      	str	r0, [r7, #4]
 8014032:	6039      	str	r1, [r7, #0]
  return a ^ b;
 8014034:	687a      	ldr	r2, [r7, #4]
 8014036:	683b      	ldr	r3, [r7, #0]
 8014038:	4053      	eors	r3, r2
}
 801403a:	4618      	mov	r0, r3
 801403c:	370c      	adds	r7, #12
 801403e:	46bd      	mov	sp, r7
 8014040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014044:	4770      	bx	lr

08014046 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 8014046:	b580      	push	{r7, lr}
 8014048:	b086      	sub	sp, #24
 801404a:	af00      	add	r7, sp, #0
 801404c:	6078      	str	r0, [r7, #4]
 801404e:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 8014050:	6878      	ldr	r0, [r7, #4]
 8014052:	f7fe fa2c 	bl	80124ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014056:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 8014058:	683b      	ldr	r3, [r7, #0]
 801405a:	2b00      	cmp	r3, #0
 801405c:	db03      	blt.n	8014066 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 801405e:	683a      	ldr	r2, [r7, #0]
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	429a      	cmp	r2, r3
 8014064:	db01      	blt.n	801406a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 8014066:	f006 fdd5 	bl	801ac14 <abort>
  const auto* dims_data = shape.DimsData();
 801406a:	6878      	ldr	r0, [r7, #4]
 801406c:	f7fe fb51 	bl	8012712 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8014070:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 8014072:	2301      	movs	r3, #1
 8014074:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8014076:	2300      	movs	r3, #0
 8014078:	613b      	str	r3, [r7, #16]
 801407a:	693a      	ldr	r2, [r7, #16]
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	429a      	cmp	r2, r3
 8014080:	da12      	bge.n	80140a8 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 8014082:	693a      	ldr	r2, [r7, #16]
 8014084:	683b      	ldr	r3, [r7, #0]
 8014086:	429a      	cmp	r2, r3
 8014088:	d005      	beq.n	8014096 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 801408a:	693b      	ldr	r3, [r7, #16]
 801408c:	009b      	lsls	r3, r3, #2
 801408e:	68ba      	ldr	r2, [r7, #8]
 8014090:	4413      	add	r3, r2
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	e000      	b.n	8014098 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 8014096:	2301      	movs	r3, #1
 8014098:	697a      	ldr	r2, [r7, #20]
 801409a:	fb02 f303 	mul.w	r3, r2, r3
 801409e:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 80140a0:	693b      	ldr	r3, [r7, #16]
 80140a2:	3301      	adds	r3, #1
 80140a4:	613b      	str	r3, [r7, #16]
 80140a6:	e7e8      	b.n	801407a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 80140a8:	697b      	ldr	r3, [r7, #20]
}
 80140aa:	4618      	mov	r0, r3
 80140ac:	3718      	adds	r7, #24
 80140ae:	46bd      	mov	sp, r7
 80140b0:	bd80      	pop	{r7, pc}

080140b2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 80140b2:	b590      	push	{r4, r7, lr}
 80140b4:	b091      	sub	sp, #68	; 0x44
 80140b6:	af00      	add	r7, sp, #0
 80140b8:	60f8      	str	r0, [r7, #12]
 80140ba:	60b9      	str	r1, [r7, #8]
 80140bc:	607a      	str	r2, [r7, #4]
 80140be:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	69db      	ldr	r3, [r3, #28]
 80140c4:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	6a1b      	ldr	r3, [r3, #32]
 80140ca:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 80140cc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80140ce:	f7fe f9ee 	bl	80124ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80140d2:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 80140d4:	6838      	ldr	r0, [r7, #0]
 80140d6:	f7fe f9ea 	bl	80124ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80140da:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 80140dc:	6a3b      	ldr	r3, [r7, #32]
 80140de:	3b01      	subs	r3, #1
 80140e0:	4619      	mov	r1, r3
 80140e2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80140e4:	f7ff ffaf 	bl	8014046 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 80140e8:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 80140ea:	69fb      	ldr	r3, [r7, #28]
 80140ec:	1e99      	subs	r1, r3, #2
 80140ee:	6a3b      	ldr	r3, [r7, #32]
 80140f0:	3b01      	subs	r3, #1
 80140f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80140f4:	6838      	ldr	r0, [r7, #0]
 80140f6:	f7ff fbc6 	bl	8013886 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80140fa:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 80140fc:	69fb      	ldr	r3, [r7, #28]
 80140fe:	3b01      	subs	r3, #1
 8014100:	4619      	mov	r1, r3
 8014102:	6838      	ldr	r0, [r7, #0]
 8014104:	f7fe fae0 	bl	80126c8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014108:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 801410a:	2300      	movs	r3, #0
 801410c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801410e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014110:	69bb      	ldr	r3, [r7, #24]
 8014112:	429a      	cmp	r2, r3
 8014114:	da5f      	bge.n	80141d6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x124>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8014116:	2300      	movs	r3, #0
 8014118:	63bb      	str	r3, [r7, #56]	; 0x38
 801411a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801411c:	697b      	ldr	r3, [r7, #20]
 801411e:	429a      	cmp	r2, r3
 8014120:	da55      	bge.n	80141ce <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
      float total = 0.f;
 8014122:	f04f 0300 	mov.w	r3, #0
 8014126:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8014128:	2300      	movs	r3, #0
 801412a:	633b      	str	r3, [r7, #48]	; 0x30
 801412c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801412e:	693b      	ldr	r3, [r7, #16]
 8014130:	429a      	cmp	r2, r3
 8014132:	da21      	bge.n	8014178 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc6>
        total += input_data[b * accum_depth + d] *
 8014134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014136:	693a      	ldr	r2, [r7, #16]
 8014138:	fb03 f202 	mul.w	r2, r3, r2
 801413c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801413e:	4413      	add	r3, r2
 8014140:	009b      	lsls	r3, r3, #2
 8014142:	687a      	ldr	r2, [r7, #4]
 8014144:	4413      	add	r3, r2
 8014146:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 801414a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801414c:	693a      	ldr	r2, [r7, #16]
 801414e:	fb03 f202 	mul.w	r2, r3, r2
 8014152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014154:	4413      	add	r3, r2
 8014156:	009b      	lsls	r3, r3, #2
 8014158:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801415a:	4413      	add	r3, r2
 801415c:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 8014160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014164:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8014168:	ee77 7a27 	vadd.f32	s15, s14, s15
 801416c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8014170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014172:	3301      	adds	r3, #1
 8014174:	633b      	str	r3, [r7, #48]	; 0x30
 8014176:	e7d9      	b.n	801412c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x7a>
      }
      float bias_value = 0.0f;
 8014178:	f04f 0300 	mov.w	r3, #0
 801417c:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 801417e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014180:	2b00      	cmp	r3, #0
 8014182:	d005      	beq.n	8014190 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xde>
        bias_value = bias_data[out_c];
 8014184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014186:	009b      	lsls	r3, r3, #2
 8014188:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801418a:	4413      	add	r3, r2
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 8014190:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8014194:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8014198:	ee77 7a27 	vadd.f32	s15, s14, s15
 801419c:	697b      	ldr	r3, [r7, #20]
 801419e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80141a0:	fb03 f202 	mul.w	r2, r3, r2
 80141a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141a6:	4413      	add	r3, r2
 80141a8:	009b      	lsls	r3, r3, #2
 80141aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80141ac:	18d4      	adds	r4, r2, r3
 80141ae:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 80141b2:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 80141b6:	eeb0 0a67 	vmov.f32	s0, s15
 80141ba:	f7ff fad9 	bl	8013770 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 80141be:	eef0 7a40 	vmov.f32	s15, s0
 80141c2:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 80141c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141c8:	3301      	adds	r3, #1
 80141ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80141cc:	e7a5      	b.n	801411a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x68>
  for (int b = 0; b < batches; ++b) {
 80141ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141d0:	3301      	adds	r3, #1
 80141d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80141d4:	e79b      	b.n	801410e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5c>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 80141d6:	bf00      	nop
 80141d8:	3744      	adds	r7, #68	; 0x44
 80141da:	46bd      	mov	sp, r7
 80141dc:	bd90      	pop	{r4, r7, pc}

080141de <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8_t* input_data, const RuntimeShape& filter_shape,
    const uint8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    uint8_t* output_data) {
 80141de:	b580      	push	{r7, lr}
 80141e0:	b096      	sub	sp, #88	; 0x58
 80141e2:	af00      	add	r7, sp, #0
 80141e4:	60f8      	str	r0, [r7, #12]
 80141e6:	60b9      	str	r1, [r7, #8]
 80141e8:	607a      	str	r2, [r7, #4]
 80141ea:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t filter_offset = params.weights_offset;
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	685b      	ldr	r3, [r3, #4]
 80141f6:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t output_offset = params.output_offset;
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	689b      	ldr	r3, [r3, #8]
 80141fc:	643b      	str	r3, [r7, #64]	; 0x40
  const int32_t output_multiplier = params.output_multiplier;
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	68db      	ldr	r3, [r3, #12]
 8014202:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	691b      	ldr	r3, [r3, #16]
 8014208:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t output_activation_min = params.quantized_activation_min;
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	695b      	ldr	r3, [r3, #20]
 801420e:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	699b      	ldr	r3, [r3, #24]
 8014214:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 8014216:	6838      	ldr	r0, [r7, #0]
 8014218:	f7fe f949 	bl	80124ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801421c:	4603      	mov	r3, r0
 801421e:	2b01      	cmp	r3, #1
 8014220:	dc01      	bgt.n	8014226 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x48>
 8014222:	f006 fcf7 	bl	801ac14 <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 8014226:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8014228:	f7fe f941 	bl	80124ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801422c:	4603      	mov	r3, r0
 801422e:	2b00      	cmp	r3, #0
 8014230:	dc01      	bgt.n	8014236 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x58>
 8014232:	f006 fcef 	bl	801ac14 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8014236:	69ba      	ldr	r2, [r7, #24]
 8014238:	697b      	ldr	r3, [r7, #20]
 801423a:	429a      	cmp	r2, r3
 801423c:	dd01      	ble.n	8014242 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x64>
 801423e:	f006 fce9 	bl	801ac14 <abort>
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 8014242:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8014244:	f7fe f933 	bl	80124ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014248:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 801424a:	6838      	ldr	r0, [r7, #0]
 801424c:	f7fe f92f 	bl	80124ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014250:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 8014252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014254:	3b01      	subs	r3, #1
 8014256:	4619      	mov	r1, r3
 8014258:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801425a:	f7ff fef4 	bl	8014046 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 801425e:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 8014260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014262:	1e99      	subs	r1, r3, #2
 8014264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014266:	3b01      	subs	r3, #1
 8014268:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801426a:	6838      	ldr	r0, [r7, #0]
 801426c:	f7ff fb0b 	bl	8013886 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014270:	62b8      	str	r0, [r7, #40]	; 0x28
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8014272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014274:	3b01      	subs	r3, #1
 8014276:	4619      	mov	r1, r3
 8014278:	6838      	ldr	r0, [r7, #0]
 801427a:	f7fe fa25 	bl	80126c8 <_ZNK6tflite12RuntimeShape4DimsEi>
 801427e:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 8014280:	2300      	movs	r3, #0
 8014282:	657b      	str	r3, [r7, #84]	; 0x54
 8014284:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014288:	429a      	cmp	r2, r3
 801428a:	da73      	bge.n	8014374 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x196>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 801428c:	2300      	movs	r3, #0
 801428e:	653b      	str	r3, [r7, #80]	; 0x50
 8014290:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014294:	429a      	cmp	r2, r3
 8014296:	da69      	bge.n	801436c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x18e>
      int32_t acc = 0;
 8014298:	2300      	movs	r3, #0
 801429a:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 801429c:	2300      	movs	r3, #0
 801429e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80142a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80142a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142a4:	429a      	cmp	r2, r3
 80142a6:	da24      	bge.n	80142f2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x114>
        int32_t input_val = input_data[b * accum_depth + d];
 80142a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80142aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142ac:	fb03 f202 	mul.w	r2, r3, r2
 80142b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142b2:	4413      	add	r3, r2
 80142b4:	461a      	mov	r2, r3
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	4413      	add	r3, r2
 80142ba:	781b      	ldrb	r3, [r3, #0]
 80142bc:	623b      	str	r3, [r7, #32]
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 80142be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80142c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142c2:	fb03 f202 	mul.w	r2, r3, r2
 80142c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142c8:	4413      	add	r3, r2
 80142ca:	461a      	mov	r2, r3
 80142cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80142ce:	4413      	add	r3, r2
 80142d0:	781b      	ldrb	r3, [r3, #0]
 80142d2:	61fb      	str	r3, [r7, #28]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 80142d4:	69fa      	ldr	r2, [r7, #28]
 80142d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80142d8:	4413      	add	r3, r2
 80142da:	6a39      	ldr	r1, [r7, #32]
 80142dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80142de:	440a      	add	r2, r1
 80142e0:	fb03 f202 	mul.w	r2, r3, r2
 80142e4:	693b      	ldr	r3, [r7, #16]
 80142e6:	4413      	add	r3, r2
 80142e8:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 80142ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142ec:	3301      	adds	r3, #1
 80142ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80142f0:	e7d6      	b.n	80142a0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xc2>
      }
      if (bias_data) {
 80142f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d007      	beq.n	8014308 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x12a>
        acc += bias_data[out_c];
 80142f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80142fa:	009b      	lsls	r3, r3, #2
 80142fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80142fe:	4413      	add	r3, r2
 8014300:	681a      	ldr	r2, [r3, #0]
 8014302:	693b      	ldr	r3, [r7, #16]
 8014304:	4413      	add	r3, r2
 8014306:	613b      	str	r3, [r7, #16]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 8014308:	693b      	ldr	r3, [r7, #16]
 801430a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801430c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801430e:	4618      	mov	r0, r3
 8014310:	f7fe fa6a 	bl	80127e8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8014314:	4603      	mov	r3, r0
 8014316:	613b      	str	r3, [r7, #16]
      acc += output_offset;
 8014318:	693a      	ldr	r2, [r7, #16]
 801431a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801431c:	4413      	add	r3, r2
 801431e:	613b      	str	r3, [r7, #16]
      acc = std::max(acc, output_activation_min);
 8014320:	f107 0218 	add.w	r2, r7, #24
 8014324:	f107 0310 	add.w	r3, r7, #16
 8014328:	4611      	mov	r1, r2
 801432a:	4618      	mov	r0, r3
 801432c:	f7fe f874 	bl	8012418 <_ZSt3maxIlERKT_S2_S2_>
 8014330:	4603      	mov	r3, r0
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	613b      	str	r3, [r7, #16]
      acc = std::min(acc, output_activation_max);
 8014336:	f107 0214 	add.w	r2, r7, #20
 801433a:	f107 0310 	add.w	r3, r7, #16
 801433e:	4611      	mov	r1, r2
 8014340:	4618      	mov	r0, r3
 8014342:	f7fe f855 	bl	80123f0 <_ZSt3minIlERKT_S2_S2_>
 8014346:	4603      	mov	r3, r0
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	613b      	str	r3, [r7, #16]
      output_data[out_c + output_depth * b] = static_cast<uint8_t>(acc);
 801434c:	6939      	ldr	r1, [r7, #16]
 801434e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014350:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014352:	fb03 f202 	mul.w	r2, r3, r2
 8014356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014358:	4413      	add	r3, r2
 801435a:	461a      	mov	r2, r3
 801435c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801435e:	4413      	add	r3, r2
 8014360:	b2ca      	uxtb	r2, r1
 8014362:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8014364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014366:	3301      	adds	r3, #1
 8014368:	653b      	str	r3, [r7, #80]	; 0x50
 801436a:	e791      	b.n	8014290 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xb2>
  for (int b = 0; b < batches; ++b) {
 801436c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801436e:	3301      	adds	r3, #1
 8014370:	657b      	str	r3, [r7, #84]	; 0x54
 8014372:	e787      	b.n	8014284 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xa6>
    }
  }
}
 8014374:	bf00      	nop
 8014376:	3758      	adds	r7, #88	; 0x58
 8014378:	46bd      	mov	sp, r7
 801437a:	bd80      	pop	{r7, pc}

0801437c <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
// TODO(b/169801227): This global struct is needed for the linker to drop unused
// code (for example, by using Register_FULLY_CONNECTED_INT8 instead of
// Register_FULLY_CONNECTED).
TfLiteRegistration fully_connected_registration;

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 801437c:	b580      	push	{r7, lr}
 801437e:	b084      	sub	sp, #16
 8014380:	af00      	add	r7, sp, #0
 8014382:	60f8      	str	r0, [r7, #12]
 8014384:	60b9      	str	r1, [r7, #8]
 8014386:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801438c:	2b00      	cmp	r3, #0
 801438e:	d101      	bne.n	8014394 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8014390:	f006 fc40 	bl	801ac14 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014398:	2124      	movs	r1, #36	; 0x24
 801439a:	68f8      	ldr	r0, [r7, #12]
 801439c:	4798      	blx	r3
 801439e:	4603      	mov	r3, r0
}
 80143a0:	4618      	mov	r0, r3
 80143a2:	3710      	adds	r7, #16
 80143a4:	46bd      	mov	sp, r7
 80143a6:	bd80      	pop	{r7, pc}

080143a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 80143a8:	b5b0      	push	{r4, r5, r7, lr}
 80143aa:	b0a0      	sub	sp, #128	; 0x80
 80143ac:	af04      	add	r7, sp, #16
 80143ae:	6078      	str	r0, [r7, #4]
 80143b0:	6039      	str	r1, [r7, #0]
 80143b2:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 80143b4:	683b      	ldr	r3, [r7, #0]
 80143b6:	691b      	ldr	r3, [r3, #16]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d101      	bne.n	80143c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 80143bc:	f006 fc2a 	bl	801ac14 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 80143c0:	683b      	ldr	r3, [r7, #0]
 80143c2:	695b      	ldr	r3, [r3, #20]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d101      	bne.n	80143cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
 80143c8:	f006 fc24 	bl	801ac14 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 80143cc:	683b      	ldr	r3, [r7, #0]
 80143ce:	691b      	ldr	r3, [r3, #16]
 80143d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  const auto params =
 80143d2:	683b      	ldr	r3, [r7, #0]
 80143d4:	695b      	ldr	r3, [r3, #20]
 80143d6:	66bb      	str	r3, [r7, #104]	; 0x68
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
 80143d8:	4b81      	ldr	r3, [pc, #516]	; (80145e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	461a      	mov	r2, r3
 80143de:	6839      	ldr	r1, [r7, #0]
 80143e0:	6878      	ldr	r0, [r7, #4]
 80143e2:	f7fd fde3 	bl	8011fac <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80143e6:	6678      	str	r0, [r7, #100]	; 0x64
  TF_LITE_ENSURE(context, input != nullptr);
 80143e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d10a      	bne.n	8014404 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	695c      	ldr	r4, [r3, #20]
 80143f2:	4b7c      	ldr	r3, [pc, #496]	; (80145e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80143f4:	9300      	str	r3, [sp, #0]
 80143f6:	2340      	movs	r3, #64	; 0x40
 80143f8:	4a7b      	ldr	r2, [pc, #492]	; (80145e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 80143fa:	497c      	ldr	r1, [pc, #496]	; (80145ec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 80143fc:	6878      	ldr	r0, [r7, #4]
 80143fe:	47a0      	blx	r4
 8014400:	2401      	movs	r4, #1
 8014402:	e0e7      	b.n	80145d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
 8014404:	4b7a      	ldr	r3, [pc, #488]	; (80145f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	461a      	mov	r2, r3
 801440a:	6839      	ldr	r1, [r7, #0]
 801440c:	6878      	ldr	r0, [r7, #4]
 801440e:	f7fd fdcd 	bl	8011fac <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8014412:	6638      	str	r0, [r7, #96]	; 0x60
  TF_LITE_ENSURE(context, filter != nullptr);
 8014414:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014416:	2b00      	cmp	r3, #0
 8014418:	d10a      	bne.n	8014430 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x88>
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	695c      	ldr	r4, [r3, #20]
 801441e:	4b75      	ldr	r3, [pc, #468]	; (80145f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 8014420:	9300      	str	r3, [sp, #0]
 8014422:	2343      	movs	r3, #67	; 0x43
 8014424:	4a70      	ldr	r2, [pc, #448]	; (80145e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8014426:	4971      	ldr	r1, [pc, #452]	; (80145ec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 8014428:	6878      	ldr	r0, [r7, #4]
 801442a:	47a0      	blx	r4
 801442c:	2401      	movs	r4, #1
 801442e:	e0d1      	b.n	80145d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 8014430:	4b71      	ldr	r3, [pc, #452]	; (80145f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	461a      	mov	r2, r3
 8014436:	6839      	ldr	r1, [r7, #0]
 8014438:	6878      	ldr	r0, [r7, #4]
 801443a:	f7fd fde7 	bl	801200c <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 801443e:	65f8      	str	r0, [r7, #92]	; 0x5c
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 8014440:	4b6e      	ldr	r3, [pc, #440]	; (80145fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	461a      	mov	r2, r3
 8014446:	6839      	ldr	r1, [r7, #0]
 8014448:	6878      	ldr	r0, [r7, #4]
 801444a:	f7fd fdbf 	bl	8011fcc <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801444e:	65b8      	str	r0, [r7, #88]	; 0x58
  TF_LITE_ENSURE(context, output != nullptr);
 8014450:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014452:	2b00      	cmp	r3, #0
 8014454:	d10a      	bne.n	801446c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	695c      	ldr	r4, [r3, #20]
 801445a:	4b69      	ldr	r3, [pc, #420]	; (8014600 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 801445c:	9300      	str	r3, [sp, #0]
 801445e:	2347      	movs	r3, #71	; 0x47
 8014460:	4a61      	ldr	r2, [pc, #388]	; (80145e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8014462:	4962      	ldr	r1, [pc, #392]	; (80145ec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 8014464:	6878      	ldr	r0, [r7, #4]
 8014466:	47a0      	blx	r4
 8014468:	2401      	movs	r4, #1
 801446a:	e0b3      	b.n	80145d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 801446c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801446e:	781a      	ldrb	r2, [r3, #0]
 8014470:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014472:	781b      	ldrb	r3, [r3, #0]
 8014474:	429a      	cmp	r2, r3
 8014476:	d01a      	beq.n	80144ae <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x106>
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	695c      	ldr	r4, [r3, #20]
 801447c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801447e:	781b      	ldrb	r3, [r3, #0]
 8014480:	4618      	mov	r0, r3
 8014482:	f7fd fa8b 	bl	801199c <TfLiteTypeGetName>
 8014486:	4605      	mov	r5, r0
 8014488:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801448a:	781b      	ldrb	r3, [r3, #0]
 801448c:	4618      	mov	r0, r3
 801448e:	f7fd fa85 	bl	801199c <TfLiteTypeGetName>
 8014492:	4603      	mov	r3, r0
 8014494:	9303      	str	r3, [sp, #12]
 8014496:	9502      	str	r5, [sp, #8]
 8014498:	4b5a      	ldr	r3, [pc, #360]	; (8014604 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 801449a:	9301      	str	r3, [sp, #4]
 801449c:	4b5a      	ldr	r3, [pc, #360]	; (8014608 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 801449e:	9300      	str	r3, [sp, #0]
 80144a0:	2349      	movs	r3, #73	; 0x49
 80144a2:	4a51      	ldr	r2, [pc, #324]	; (80145e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 80144a4:	4959      	ldr	r1, [pc, #356]	; (801460c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 80144a6:	6878      	ldr	r0, [r7, #4]
 80144a8:	47a0      	blx	r4
 80144aa:	2401      	movs	r4, #1
 80144ac:	e092      	b.n	80145d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 80144ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80144b0:	781a      	ldrb	r2, [r3, #0]
 80144b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80144b4:	781b      	ldrb	r3, [r3, #0]
 80144b6:	429a      	cmp	r2, r3
 80144b8:	d006      	beq.n	80144c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x120>
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	695b      	ldr	r3, [r3, #20]
 80144be:	4954      	ldr	r1, [pc, #336]	; (8014610 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 80144c0:	6878      	ldr	r0, [r7, #4]
 80144c2:	4798      	blx	r3
 80144c4:	2401      	movs	r4, #1
 80144c6:	e085      	b.n	80145d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
                     "Hybrid models are not supported on TFLite Micro.");

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 80144c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80144ca:	f04f 32ff 	mov.w	r2, #4294967295
 80144ce:	621a      	str	r2, [r3, #32]
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 80144d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80144d2:	7819      	ldrb	r1, [r3, #0]
 80144d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80144d6:	781a      	ldrb	r2, [r3, #0]
 80144d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80144da:	9303      	str	r3, [sp, #12]
 80144dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80144de:	9302      	str	r3, [sp, #8]
 80144e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80144e2:	9301      	str	r3, [sp, #4]
 80144e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80144e6:	9300      	str	r3, [sp, #0]
 80144e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80144ea:	6878      	ldr	r0, [r7, #4]
 80144ec:	f000 fbb5 	bl	8014c5a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 80144f0:	4603      	mov	r3, r0
 80144f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80144f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d002      	beq.n	8014504 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15c>
 80144fe:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 8014502:	e067      	b.n	80145d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
      context, params->activation, input->type, input, filter, bias, output,
      &(data->reference_op_data)));

  if (input->type == kTfLiteInt8) {
 8014504:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014506:	781b      	ldrb	r3, [r3, #0]
 8014508:	2b09      	cmp	r3, #9
 801450a:	d162      	bne.n	80145d2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22a>
    RuntimeShape filter_shape = GetTensorShape(filter);
 801450c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014510:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014512:	4618      	mov	r0, r3
 8014514:	f7fe f82f 	bl	8012576 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
 8014518:	f107 0318 	add.w	r3, r7, #24
 801451c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801451e:	4618      	mov	r0, r3
 8014520:	f7fe f829 	bl	8012576 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 8014524:	f107 0318 	add.w	r3, r7, #24
 8014528:	4618      	mov	r0, r3
 801452a:	f7fd ffc0 	bl	80124ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801452e:	4603      	mov	r3, r0
 8014530:	2b02      	cmp	r3, #2
 8014532:	d001      	beq.n	8014538 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>
 8014534:	f006 fb6e 	bl	801ac14 <abort>
    const int filter_dim_count = filter_shape.DimensionsCount();
 8014538:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801453c:	4618      	mov	r0, r3
 801453e:	f7fd ffb6 	bl	80124ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014542:	6538      	str	r0, [r7, #80]	; 0x50
    cmsis_nn_dims filter_dims;
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 8014544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014546:	1e5a      	subs	r2, r3, #1
 8014548:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801454c:	4611      	mov	r1, r2
 801454e:	4618      	mov	r0, r3
 8014550:	f7fe f8ba 	bl	80126c8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014554:	4603      	mov	r3, r0
 8014556:	60bb      	str	r3, [r7, #8]
    filter_dims.h = 1;
 8014558:	2301      	movs	r3, #1
 801455a:	60fb      	str	r3, [r7, #12]
    filter_dims.w = 1;
 801455c:	2301      	movs	r3, #1
 801455e:	613b      	str	r3, [r7, #16]
    filter_dims.c = output_shape.Dims(1);
 8014560:	f107 0318 	add.w	r3, r7, #24
 8014564:	2101      	movs	r1, #1
 8014566:	4618      	mov	r0, r3
 8014568:	f7fe f8ae 	bl	80126c8 <_ZNK6tflite12RuntimeShape4DimsEi>
 801456c:	4603      	mov	r3, r0
 801456e:	617b      	str	r3, [r7, #20]

    const int32_t buf_size =
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
 8014570:	f107 0308 	add.w	r3, r7, #8
 8014574:	4618      	mov	r0, r3
 8014576:	f7f6 f9dc 	bl	800a932 <arm_fully_connected_s8_get_buffer_size>
 801457a:	64f8      	str	r0, [r7, #76]	; 0x4c

    if (buf_size > 0) {
 801457c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801457e:	2b00      	cmp	r3, #0
 8014580:	dd11      	ble.n	80145a6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fe>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014586:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8014588:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801458a:	3220      	adds	r2, #32
 801458c:	6878      	ldr	r0, [r7, #4]
 801458e:	4798      	blx	r3
 8014590:	4603      	mov	r3, r0
 8014592:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8014596:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801459a:	2b00      	cmp	r3, #0
 801459c:	d007      	beq.n	80145ae <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x206>
 801459e:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
 80145a2:	2500      	movs	r5, #0
 80145a4:	e004      	b.n	80145b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x208>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 80145a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80145a8:	f04f 32ff 	mov.w	r2, #4294967295
 80145ac:	621a      	str	r2, [r3, #32]
 80145ae:	2501      	movs	r5, #1
 80145b0:	f107 0318 	add.w	r3, r7, #24
 80145b4:	4618      	mov	r0, r3
 80145b6:	f7fd ff64 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
 80145ba:	2d01      	cmp	r5, #1
 80145bc:	d001      	beq.n	80145c2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21a>
 80145be:	2500      	movs	r5, #0
 80145c0:	e000      	b.n	80145c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21c>
 80145c2:	2501      	movs	r5, #1
 80145c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80145c8:	4618      	mov	r0, r3
 80145ca:	f7fd ff5a 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
 80145ce:	2d01      	cmp	r5, #1
 80145d0:	d100      	bne.n	80145d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
    }
  }
  return kTfLiteOk;
 80145d2:	2400      	movs	r4, #0
}
 80145d4:	4623      	mov	r3, r4
 80145d6:	4618      	mov	r0, r3
 80145d8:	3770      	adds	r7, #112	; 0x70
 80145da:	46bd      	mov	sp, r7
 80145dc:	bdb0      	pop	{r4, r5, r7, pc}
 80145de:	bf00      	nop
 80145e0:	0801e5cc 	.word	0x0801e5cc
 80145e4:	0801d18c 	.word	0x0801d18c
 80145e8:	0801d0dc 	.word	0x0801d0dc
 80145ec:	0801d174 	.word	0x0801d174
 80145f0:	0801e5d0 	.word	0x0801e5d0
 80145f4:	0801d1a0 	.word	0x0801d1a0
 80145f8:	0801e5d4 	.word	0x0801e5d4
 80145fc:	0801e5d8 	.word	0x0801e5d8
 8014600:	0801d1b4 	.word	0x0801d1b4
 8014604:	0801d1e4 	.word	0x0801d1e4
 8014608:	0801d1f4 	.word	0x0801d1f4
 801460c:	0801d1c8 	.word	0x0801d1c8
 8014610:	0801d200 	.word	0x0801d200

08014614 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>:
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
 8014614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014616:	b0bf      	sub	sp, #252	; 0xfc
 8014618:	af08      	add	r7, sp, #32
 801461a:	6178      	str	r0, [r7, #20]
 801461c:	6139      	str	r1, [r7, #16]
 801461e:	60fa      	str	r2, [r7, #12]
 8014620:	60bb      	str	r3, [r7, #8]
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8014622:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8014626:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 801462a:	4618      	mov	r0, r3
 801462c:	f000 fb7b 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 8014630:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8014634:	4618      	mov	r0, r3
 8014636:	f7fd ff3a 	bl	80124ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801463a:	4603      	mov	r3, r0
 801463c:	2b02      	cmp	r3, #2
 801463e:	d001      	beq.n	8014644 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x30>
 8014640:	f006 fae8 	bl	801ac14 <abort>
  const int batches = output_shape.Dims(0);
 8014644:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8014648:	2100      	movs	r1, #0
 801464a:	4618      	mov	r0, r3
 801464c:	f7fe f83c 	bl	80126c8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014650:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  const int output_depth = output_shape.Dims(1);
 8014654:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8014658:	2101      	movs	r1, #1
 801465a:	4618      	mov	r0, r3
 801465c:	f7fe f834 	bl	80126c8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014660:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8014664:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8014668:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 801466c:	4618      	mov	r0, r3
 801466e:	f000 fb5a 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
 8014672:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8014676:	4618      	mov	r0, r3
 8014678:	f7fd ff19 	bl	80124ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801467c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8014680:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014684:	1e5a      	subs	r2, r3, #1
 8014686:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801468a:	4611      	mov	r1, r2
 801468c:	4618      	mov	r0, r3
 801468e:	f7fe f81b 	bl	80126c8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014692:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8014696:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801469a:	68b9      	ldr	r1, [r7, #8]
 801469c:	4618      	mov	r0, r3
 801469e:	f000 fb42 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

  cmsis_nn_fc_params fc_params;
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	695b      	ldr	r3, [r3, #20]
 80146a6:	425b      	negs	r3, r3
 80146a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  fc_params.output_offset = data.reference_op_data.output_zero_point;
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	69db      	ldr	r3, [r3, #28]
 80146ae:	677b      	str	r3, [r7, #116]	; 0x74
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	699b      	ldr	r3, [r3, #24]
 80146b4:	425b      	negs	r3, r3
 80146b6:	673b      	str	r3, [r7, #112]	; 0x70
  fc_params.activation.min = data.reference_op_data.output_activation_min;
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	689b      	ldr	r3, [r3, #8]
 80146bc:	67bb      	str	r3, [r7, #120]	; 0x78
  fc_params.activation.max = data.reference_op_data.output_activation_max;
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	68db      	ldr	r3, [r3, #12]
 80146c2:	67fb      	str	r3, [r7, #124]	; 0x7c

  cmsis_nn_per_tensor_quant_params quant_params;
  quant_params.multiplier = data.reference_op_data.output_multiplier;
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	667b      	str	r3, [r7, #100]	; 0x64
  quant_params.shift = data.reference_op_data.output_shift;
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	685b      	ldr	r3, [r3, #4]
 80146ce:	66bb      	str	r3, [r7, #104]	; 0x68

  cmsis_nn_dims input_dims;
  input_dims.n = batches;
 80146d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80146d4:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = 1;
 80146d6:	2301      	movs	r3, #1
 80146d8:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = 1;
 80146da:	2301      	movs	r3, #1
 80146dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = accum_depth;
 80146de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80146e2:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims filter_dims;
  filter_dims.n = accum_depth;
 80146e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80146e8:	647b      	str	r3, [r7, #68]	; 0x44
  filter_dims.h = 1;
 80146ea:	2301      	movs	r3, #1
 80146ec:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.w = 1;
 80146ee:	2301      	movs	r3, #1
 80146f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.c = output_depth;
 80146f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80146f6:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_dims bias_dims;
  bias_dims.n = 1;
 80146f8:	2301      	movs	r3, #1
 80146fa:	637b      	str	r3, [r7, #52]	; 0x34
  bias_dims.h = 1;
 80146fc:	2301      	movs	r3, #1
 80146fe:	63bb      	str	r3, [r7, #56]	; 0x38
  bias_dims.w = 1;
 8014700:	2301      	movs	r3, #1
 8014702:	63fb      	str	r3, [r7, #60]	; 0x3c
  bias_dims.c = output_depth;
 8014704:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014708:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims output_dims;
  output_dims.n = batches;
 801470a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801470e:	627b      	str	r3, [r7, #36]	; 0x24
  output_dims.h = 1;
 8014710:	2301      	movs	r3, #1
 8014712:	62bb      	str	r3, [r7, #40]	; 0x28
  output_dims.w = 1;
 8014714:	2301      	movs	r3, #1
 8014716:	62fb      	str	r3, [r7, #44]	; 0x2c
  output_dims.c = output_depth;
 8014718:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801471c:	633b      	str	r3, [r7, #48]	; 0x30

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 801471e:	2300      	movs	r3, #0
 8014720:	61fb      	str	r3, [r7, #28]
  ctx.size = 0;
 8014722:	2300      	movs	r3, #0
 8014724:	623b      	str	r3, [r7, #32]

  if (data.buffer_idx > -1) {
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	6a1b      	ldr	r3, [r3, #32]
 801472a:	2b00      	cmp	r3, #0
 801472c:	db08      	blt.n	8014740 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x12c>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 801472e:	697b      	ldr	r3, [r7, #20]
 8014730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014732:	68fa      	ldr	r2, [r7, #12]
 8014734:	6a12      	ldr	r2, [r2, #32]
 8014736:	4611      	mov	r1, r2
 8014738:	6978      	ldr	r0, [r7, #20]
 801473a:	4798      	blx	r3
 801473c:	4603      	mov	r3, r0
 801473e:	61fb      	str	r3, [r7, #28]
  }

  TF_LITE_ENSURE_EQ(
 8014740:	68b8      	ldr	r0, [r7, #8]
 8014742:	f7fe fd93 	bl	801326c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8014746:	4605      	mov	r5, r0
 8014748:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801474c:	f7fe fd8e 	bl	801326c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8014750:	4606      	mov	r6, r0
 8014752:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8014756:	f7ff f887 	bl	8013868 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 801475a:	6078      	str	r0, [r7, #4]
 801475c:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8014760:	f7fe fd93 	bl	801328a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8014764:	4603      	mov	r3, r0
 8014766:	f107 0454 	add.w	r4, r7, #84	; 0x54
 801476a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801476e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8014772:	f107 001c 	add.w	r0, r7, #28
 8014776:	9306      	str	r3, [sp, #24]
 8014778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801477c:	9305      	str	r3, [sp, #20]
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	9304      	str	r3, [sp, #16]
 8014782:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8014786:	9303      	str	r3, [sp, #12]
 8014788:	9602      	str	r6, [sp, #8]
 801478a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801478e:	9301      	str	r3, [sp, #4]
 8014790:	9500      	str	r5, [sp, #0]
 8014792:	4623      	mov	r3, r4
 8014794:	f7f6 f886 	bl	800a8a4 <arm_fully_connected_s8>
 8014798:	4603      	mov	r3, r0
 801479a:	2b00      	cmp	r3, #0
 801479c:	bf14      	ite	ne
 801479e:	2301      	movne	r3, #1
 80147a0:	2300      	moveq	r3, #0
 80147a2:	b2db      	uxtb	r3, r3
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d03e      	beq.n	8014826 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x212>
 80147a8:	697b      	ldr	r3, [r7, #20]
 80147aa:	695c      	ldr	r4, [r3, #20]
 80147ac:	68b8      	ldr	r0, [r7, #8]
 80147ae:	f7fe fd5d 	bl	801326c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80147b2:	4606      	mov	r6, r0
 80147b4:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80147b8:	f7fe fd58 	bl	801326c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80147bc:	6078      	str	r0, [r7, #4]
 80147be:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80147c2:	f7ff f851 	bl	8013868 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 80147c6:	6038      	str	r0, [r7, #0]
 80147c8:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 80147cc:	f7fe fd5d 	bl	801328a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80147d0:	4603      	mov	r3, r0
 80147d2:	f107 0554 	add.w	r5, r7, #84	; 0x54
 80147d6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80147da:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80147de:	f107 001c 	add.w	r0, r7, #28
 80147e2:	9306      	str	r3, [sp, #24]
 80147e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80147e8:	9305      	str	r3, [sp, #20]
 80147ea:	683b      	ldr	r3, [r7, #0]
 80147ec:	9304      	str	r3, [sp, #16]
 80147ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80147f2:	9303      	str	r3, [sp, #12]
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	9302      	str	r3, [sp, #8]
 80147f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80147fc:	9301      	str	r3, [sp, #4]
 80147fe:	9600      	str	r6, [sp, #0]
 8014800:	462b      	mov	r3, r5
 8014802:	f7f6 f84f 	bl	800a8a4 <arm_fully_connected_s8>
 8014806:	4603      	mov	r3, r0
 8014808:	461a      	mov	r2, r3
 801480a:	2300      	movs	r3, #0
 801480c:	9303      	str	r3, [sp, #12]
 801480e:	9202      	str	r2, [sp, #8]
 8014810:	4b0f      	ldr	r3, [pc, #60]	; (8014850 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x23c>)
 8014812:	9301      	str	r3, [sp, #4]
 8014814:	4b0f      	ldr	r3, [pc, #60]	; (8014854 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x240>)
 8014816:	9300      	str	r3, [sp, #0]
 8014818:	23a6      	movs	r3, #166	; 0xa6
 801481a:	4a0f      	ldr	r2, [pc, #60]	; (8014858 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x244>)
 801481c:	490f      	ldr	r1, [pc, #60]	; (801485c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x248>)
 801481e:	6978      	ldr	r0, [r7, #20]
 8014820:	47a0      	blx	r4
 8014822:	2401      	movs	r4, #1
 8014824:	e000      	b.n	8014828 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x214>
          tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
          tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
 8014826:	2400      	movs	r4, #0
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8014828:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801482c:	4618      	mov	r0, r3
 801482e:	f7fd fe28 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8014832:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8014836:	4618      	mov	r0, r3
 8014838:	f7fd fe23 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 801483c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8014840:	4618      	mov	r0, r3
 8014842:	f7fd fe1e 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8014846:	4623      	mov	r3, r4
 8014848:	4618      	mov	r0, r3
 801484a:	37dc      	adds	r7, #220	; 0xdc
 801484c:	46bd      	mov	sp, r7
 801484e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014850:	0801d2e8 	.word	0x0801d2e8
 8014854:	0801d2fc 	.word	0x0801d2fc
 8014858:	0801d0dc 	.word	0x0801d0dc
 801485c:	0801d2cc 	.word	0x0801d2cc

08014860 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8014860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014862:	b0d3      	sub	sp, #332	; 0x14c
 8014864:	af06      	add	r7, sp, #24
 8014866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801486a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801486e:	6018      	str	r0, [r3, #0]
 8014870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014874:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014878:	6019      	str	r1, [r3, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801487a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801487e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	695b      	ldr	r3, [r3, #20]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d101      	bne.n	801488e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e>
 801488a:	f006 f9c3 	bl	801ac14 <abort>
  const auto* params =
 801488e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014892:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	695b      	ldr	r3, [r3, #20]
 801489a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 801489e:	4bb0      	ldr	r3, [pc, #704]	; (8014b60 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x300>)
 80148a0:	681a      	ldr	r2, [r3, #0]
 80148a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80148a6:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 80148aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80148ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80148b2:	6809      	ldr	r1, [r1, #0]
 80148b4:	6818      	ldr	r0, [r3, #0]
 80148b6:	f7fd ffdb 	bl	8012870 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80148ba:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 80148be:	4ba9      	ldr	r3, [pc, #676]	; (8014b64 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x304>)
 80148c0:	681a      	ldr	r2, [r3, #0]
 80148c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80148c6:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 80148ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80148ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80148d2:	6809      	ldr	r1, [r1, #0]
 80148d4:	6818      	ldr	r0, [r3, #0]
 80148d6:	f7fd ffcb 	bl	8012870 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80148da:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 80148de:	4ba2      	ldr	r3, [pc, #648]	; (8014b68 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x308>)
 80148e0:	681a      	ldr	r2, [r3, #0]
 80148e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80148e6:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 80148ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80148ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80148f2:	6809      	ldr	r1, [r1, #0]
 80148f4:	6818      	ldr	r0, [r3, #0]
 80148f6:	f7fd ffbb 	bl	8012870 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80148fa:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 80148fe:	4b9b      	ldr	r3, [pc, #620]	; (8014b6c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x30c>)
 8014900:	681a      	ldr	r2, [r3, #0]
 8014902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014906:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 801490a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801490e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014912:	6809      	ldr	r1, [r1, #0]
 8014914:	6818      	ldr	r0, [r3, #0]
 8014916:	f7fd ffbb 	bl	8012890 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 801491a:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

  TFLITE_DCHECK(node->user_data != nullptr);
 801491e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014922:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	691b      	ldr	r3, [r3, #16]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d101      	bne.n	8014932 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2>
 801492e:	f006 f971 	bl	801ac14 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8014932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014936:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	691b      	ldr	r3, [r3, #16]
 801493e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 8014942:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014946:	7a1b      	ldrb	r3, [r3, #8]
 8014948:	2b09      	cmp	r3, #9
 801494a:	d06d      	beq.n	8014a28 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c8>
 801494c:	2b09      	cmp	r3, #9
 801494e:	f300 80e6 	bgt.w	8014b1e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2be>
 8014952:	2b01      	cmp	r3, #1
 8014954:	d003      	beq.n	801495e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfe>
 8014956:	2b03      	cmp	r3, #3
 8014958:	f000 8081 	beq.w	8014a5e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fe>
 801495c:	e0df      	b.n	8014b1e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2be>
    case kTfLiteFloat32: {
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsFloat(params->activation),
 801495e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014962:	781a      	ldrb	r2, [r3, #0]
 8014964:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014968:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801496c:	4611      	mov	r1, r2
 801496e:	4618      	mov	r0, r3
 8014970:	f000 f95e 	bl	8014c30 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
 8014974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014978:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801497c:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8014980:	4618      	mov	r0, r3
 8014982:	f000 f9d0 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8014986:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 801498a:	f7fe fc4f 	bl	801322c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801498e:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 8014990:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014994:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8014998:	4618      	mov	r0, r3
 801499a:	f000 f9c4 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 801499e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80149a2:	f7fe fc43 	bl	801322c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80149a6:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 80149a8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80149ac:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80149b0:	4618      	mov	r0, r3
 80149b2:	f000 f9b8 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 80149b6:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80149ba:	f7fe fc37 	bl	801322c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80149be:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 80149c0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80149c4:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80149c8:	4618      	mov	r0, r3
 80149ca:	f000 f9ac 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 80149ce:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80149d2:	f7fe fc3a 	bl	801324a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 80149d6:	4603      	mov	r3, r0
 80149d8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80149dc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80149e0:	f107 0008 	add.w	r0, r7, #8
 80149e4:	9304      	str	r3, [sp, #16]
 80149e6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80149ea:	9303      	str	r3, [sp, #12]
 80149ec:	9502      	str	r5, [sp, #8]
 80149ee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80149f2:	9301      	str	r3, [sp, #4]
 80149f4:	9400      	str	r4, [sp, #0]
 80149f6:	4613      	mov	r3, r2
 80149f8:	4632      	mov	r2, r6
 80149fa:	f7ff fb5a 	bl	80140b2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
 80149fe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8014a02:	4618      	mov	r0, r3
 8014a04:	f7fd fd3d 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 8014a08:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	f7fd fd38 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 8014a12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014a16:	4618      	mov	r0, r3
 8014a18:	f7fd fd33 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 8014a1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014a20:	4618      	mov	r0, r3
 8014a22:	f7fd fd2e 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      break;
 8014a26:	e095      	b.n	8014b54 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f4>
    }
    case kTfLiteInt8: {
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 8014a28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014a2c:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8014a30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014a34:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 8014a38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8014a3c:	9302      	str	r3, [sp, #8]
 8014a3e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8014a42:	9301      	str	r3, [sp, #4]
 8014a44:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8014a48:	9300      	str	r3, [sp, #0]
 8014a4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014a4e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8014a52:	6809      	ldr	r1, [r1, #0]
 8014a54:	6800      	ldr	r0, [r0, #0]
 8014a56:	f7ff fddd 	bl	8014614 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>
 8014a5a:	4603      	mov	r3, r0
                               output);
 8014a5c:	e07b      	b.n	8014b56 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f6>
    }
    case kTfLiteUInt8: {
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsQuantized(data.reference_op_data),
 8014a5e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8014a62:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8014a66:	4611      	mov	r1, r2
 8014a68:	4618      	mov	r0, r3
 8014a6a:	f000 f8b7 	bl	8014bdc <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
          tflite::micro::GetTensorShape(input),
 8014a6e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8014a72:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8014a76:	4618      	mov	r0, r3
 8014a78:	f000 f955 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8014a7c:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8014a80:	f7fe fc60 	bl	8013344 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8014a84:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<uint8_t>(input),
          tflite::micro::GetTensorShape(filter),
 8014a86:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8014a8a:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8014a8e:	4618      	mov	r0, r3
 8014a90:	f000 f949 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8014a94:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8014a98:	f7fe fc54 	bl	8013344 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8014a9c:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<uint8_t>(filter),
          tflite::micro::GetTensorShape(bias),
 8014a9e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8014aa2:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	f000 f93d 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8014aac:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8014ab0:	f7fe feda 	bl	8013868 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8014ab4:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<int32_t>(bias),
          tflite::micro::GetTensorShape(output),
 8014ab6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8014aba:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8014abe:	4618      	mov	r0, r3
 8014ac0:	f000 f931 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8014ac4:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8014ac8:	f7fe fc4b 	bl	8013362 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8014acc:	4603      	mov	r3, r0
 8014ace:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8014ad2:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8014ad6:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8014ada:	9304      	str	r3, [sp, #16]
 8014adc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8014ae0:	9303      	str	r3, [sp, #12]
 8014ae2:	9502      	str	r5, [sp, #8]
 8014ae4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8014ae8:	9301      	str	r3, [sp, #4]
 8014aea:	9400      	str	r4, [sp, #0]
 8014aec:	4613      	mov	r3, r2
 8014aee:	4632      	mov	r2, r6
 8014af0:	f7ff fb75 	bl	80141de <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>
          tflite::micro::GetTensorShape(output),
 8014af4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8014af8:	4618      	mov	r0, r3
 8014afa:	f7fd fcc2 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 8014afe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8014b02:	4618      	mov	r0, r3
 8014b04:	f7fd fcbd 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 8014b08:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	f7fd fcb8 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 8014b12:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8014b16:	4618      	mov	r0, r3
 8014b18:	f7fd fcb3 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<uint8_t>(output));
      break;
 8014b1c:	e01a      	b.n	8014b54 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f4>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8014b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014b22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	695c      	ldr	r4, [r3, #20]
 8014b2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014b2e:	7a1b      	ldrb	r3, [r3, #8]
 8014b30:	4618      	mov	r0, r3
 8014b32:	f7fc ff33 	bl	801199c <TfLiteTypeGetName>
 8014b36:	4602      	mov	r2, r0
 8014b38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014b3c:	7a1b      	ldrb	r3, [r3, #8]
 8014b3e:	4619      	mov	r1, r3
 8014b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014b44:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 8014b48:	460b      	mov	r3, r1
 8014b4a:	4909      	ldr	r1, [pc, #36]	; (8014b70 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x310>)
 8014b4c:	6800      	ldr	r0, [r0, #0]
 8014b4e:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8014b50:	2301      	movs	r3, #1
 8014b52:	e000      	b.n	8014b56 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f6>
    }
  }
  return kTfLiteOk;
 8014b54:	2300      	movs	r3, #0
}
 8014b56:	4618      	mov	r0, r3
 8014b58:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8014b5c:	46bd      	mov	sp, r7
 8014b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b60:	0801e5cc 	.word	0x0801e5cc
 8014b64:	0801e5d0 	.word	0x0801e5d0
 8014b68:	0801e5d4 	.word	0x0801e5d4
 8014b6c:	0801e5d8 	.word	0x0801e5d8
 8014b70:	0801d420 	.word	0x0801d420

08014b74 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 8014b74:	b4b0      	push	{r4, r5, r7}
 8014b76:	b083      	sub	sp, #12
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	6078      	str	r0, [r7, #4]
  fully_connected_registration.init = Init;
 8014b7c:	4b13      	ldr	r3, [pc, #76]	; (8014bcc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8014b7e:	4a14      	ldr	r2, [pc, #80]	; (8014bd0 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x5c>)
 8014b80:	601a      	str	r2, [r3, #0]
  fully_connected_registration.free = nullptr;
 8014b82:	4b12      	ldr	r3, [pc, #72]	; (8014bcc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8014b84:	2200      	movs	r2, #0
 8014b86:	605a      	str	r2, [r3, #4]
  fully_connected_registration.prepare = Prepare;
 8014b88:	4b10      	ldr	r3, [pc, #64]	; (8014bcc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8014b8a:	4a12      	ldr	r2, [pc, #72]	; (8014bd4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x60>)
 8014b8c:	609a      	str	r2, [r3, #8]
  fully_connected_registration.invoke = Eval;
 8014b8e:	4b0f      	ldr	r3, [pc, #60]	; (8014bcc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8014b90:	4a11      	ldr	r2, [pc, #68]	; (8014bd8 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x64>)
 8014b92:	60da      	str	r2, [r3, #12]
  fully_connected_registration.profiling_string = nullptr;
 8014b94:	4b0d      	ldr	r3, [pc, #52]	; (8014bcc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8014b96:	2200      	movs	r2, #0
 8014b98:	611a      	str	r2, [r3, #16]
  fully_connected_registration.builtin_code = 0;
 8014b9a:	4b0c      	ldr	r3, [pc, #48]	; (8014bcc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8014b9c:	2200      	movs	r2, #0
 8014b9e:	615a      	str	r2, [r3, #20]
  fully_connected_registration.custom_name = nullptr;
 8014ba0:	4b0a      	ldr	r3, [pc, #40]	; (8014bcc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8014ba2:	2200      	movs	r2, #0
 8014ba4:	619a      	str	r2, [r3, #24]
  fully_connected_registration.version = 0;
 8014ba6:	4b09      	ldr	r3, [pc, #36]	; (8014bcc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8014ba8:	2200      	movs	r2, #0
 8014baa:	61da      	str	r2, [r3, #28]
  return fully_connected_registration;
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	4a07      	ldr	r2, [pc, #28]	; (8014bcc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 8014bb0:	461c      	mov	r4, r3
 8014bb2:	4615      	mov	r5, r2
 8014bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014bb8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014bbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8014bc0:	6878      	ldr	r0, [r7, #4]
 8014bc2:	370c      	adds	r7, #12
 8014bc4:	46bd      	mov	sp, r7
 8014bc6:	bcb0      	pop	{r4, r5, r7}
 8014bc8:	4770      	bx	lr
 8014bca:	bf00      	nop
 8014bcc:	20000904 	.word	0x20000904
 8014bd0:	0801437d 	.word	0x0801437d
 8014bd4:	080143a9 	.word	0x080143a9
 8014bd8:	08014861 	.word	0x08014861

08014bdc <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>:
const int kFullyConnectedWeightsTensor = 1;
const int kFullyConnectedBiasTensor = 2;
const int kFullyConnectedOutputTensor = 0;

FullyConnectedParams FullyConnectedParamsQuantized(
    const OpDataFullyConnected& op_data) {
 8014bdc:	b480      	push	{r7}
 8014bde:	b083      	sub	sp, #12
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	6078      	str	r0, [r7, #4]
 8014be4:	6039      	str	r1, [r7, #0]
  FullyConnectedParams op_params;
  op_params.input_offset = -op_data.input_zero_point;
 8014be6:	683b      	ldr	r3, [r7, #0]
 8014be8:	695b      	ldr	r3, [r3, #20]
 8014bea:	425a      	negs	r2, r3
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	601a      	str	r2, [r3, #0]
  op_params.weights_offset = -op_data.filter_zero_point;
 8014bf0:	683b      	ldr	r3, [r7, #0]
 8014bf2:	699b      	ldr	r3, [r3, #24]
 8014bf4:	425a      	negs	r2, r3
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	605a      	str	r2, [r3, #4]
  op_params.output_offset = op_data.output_zero_point;
 8014bfa:	683b      	ldr	r3, [r7, #0]
 8014bfc:	69da      	ldr	r2, [r3, #28]
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	609a      	str	r2, [r3, #8]
  op_params.output_multiplier = op_data.output_multiplier;
 8014c02:	683b      	ldr	r3, [r7, #0]
 8014c04:	681a      	ldr	r2, [r3, #0]
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	60da      	str	r2, [r3, #12]
  op_params.output_shift = op_data.output_shift;
 8014c0a:	683b      	ldr	r3, [r7, #0]
 8014c0c:	685a      	ldr	r2, [r3, #4]
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	611a      	str	r2, [r3, #16]
  op_params.quantized_activation_min = op_data.output_activation_min;
 8014c12:	683b      	ldr	r3, [r7, #0]
 8014c14:	689a      	ldr	r2, [r3, #8]
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	615a      	str	r2, [r3, #20]
  op_params.quantized_activation_max = op_data.output_activation_max;
 8014c1a:	683b      	ldr	r3, [r7, #0]
 8014c1c:	68da      	ldr	r2, [r3, #12]
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	619a      	str	r2, [r3, #24]
  return op_params;
 8014c22:	bf00      	nop
}
 8014c24:	6878      	ldr	r0, [r7, #4]
 8014c26:	370c      	adds	r7, #12
 8014c28:	46bd      	mov	sp, r7
 8014c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c2e:	4770      	bx	lr

08014c30 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:

FullyConnectedParams FullyConnectedParamsFloat(
    TfLiteFusedActivation activation) {
 8014c30:	b580      	push	{r7, lr}
 8014c32:	b082      	sub	sp, #8
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	6078      	str	r0, [r7, #4]
 8014c38:	460b      	mov	r3, r1
 8014c3a:	70fb      	strb	r3, [r7, #3]
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	f103 0220 	add.w	r2, r3, #32
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	f103 011c 	add.w	r1, r3, #28
 8014c48:	78fb      	ldrb	r3, [r7, #3]
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	f7fe fdb0 	bl	80137b0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  return op_params;
 8014c50:	bf00      	nop
}
 8014c52:	6878      	ldr	r0, [r7, #4]
 8014c54:	3708      	adds	r7, #8
 8014c56:	46bd      	mov	sp, r7
 8014c58:	bd80      	pop	{r7, pc}

08014c5a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 8014c5a:	b580      	push	{r7, lr}
 8014c5c:	b08a      	sub	sp, #40	; 0x28
 8014c5e:	af02      	add	r7, sp, #8
 8014c60:	60f8      	str	r0, [r7, #12]
 8014c62:	607b      	str	r3, [r7, #4]
 8014c64:	460b      	mov	r3, r1
 8014c66:	72fb      	strb	r3, [r7, #11]
 8014c68:	4613      	mov	r3, r2
 8014c6a:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 8014c6c:	7abb      	ldrb	r3, [r7, #10]
 8014c6e:	2b01      	cmp	r3, #1
 8014c70:	d03e      	beq.n	8014cf0 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x96>
    double real_multiplier = 0.0;
 8014c72:	f04f 0200 	mov.w	r2, #0
 8014c76:	f04f 0300 	mov.w	r3, #0
 8014c7a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 8014c7e:	f107 0310 	add.w	r3, r7, #16
 8014c82:	9301      	str	r3, [sp, #4]
 8014c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c86:	9300      	str	r3, [sp, #0]
 8014c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c8c:	6879      	ldr	r1, [r7, #4]
 8014c8e:	68f8      	ldr	r0, [r7, #12]
 8014c90:	f7fd f9ce 	bl	8012030 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8014c94:	4603      	mov	r3, r0
 8014c96:	77fb      	strb	r3, [r7, #31]
 8014c98:	7ffb      	ldrb	r3, [r7, #31]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d001      	beq.n	8014ca2 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 8014c9e:	7ffb      	ldrb	r3, [r7, #31]
 8014ca0:	e027      	b.n	8014cf2 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 8014ca2:	ed97 7b04 	vldr	d7, [r7, #16]
 8014ca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014caa:	3304      	adds	r3, #4
 8014cac:	4619      	mov	r1, r3
 8014cae:	4610      	mov	r0, r2
 8014cb0:	eeb0 0a47 	vmov.f32	s0, s14
 8014cb4:	eef0 0a67 	vmov.f32	s1, s15
 8014cb8:	f7fc fef6 	bl	8011aa8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	691a      	ldr	r2, [r3, #16]
 8014cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cc2:	615a      	str	r2, [r3, #20]
    data->filter_zero_point = filter->params.zero_point;
 8014cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cc6:	691a      	ldr	r2, [r3, #16]
 8014cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cca:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 8014ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cce:	691a      	ldr	r2, [r3, #16]
 8014cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cd2:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 8014cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cd6:	f103 0208 	add.w	r2, r3, #8
 8014cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cdc:	330c      	adds	r3, #12
 8014cde:	7af9      	ldrb	r1, [r7, #11]
 8014ce0:	9300      	str	r3, [sp, #0]
 8014ce2:	4613      	mov	r3, r2
 8014ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014ce6:	68f8      	ldr	r0, [r7, #12]
 8014ce8:	f7fd fb2e 	bl	8012348 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8014cec:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 8014cee:	e000      	b.n	8014cf2 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
  }
  return kTfLiteOk;
 8014cf0:	2300      	movs	r3, #0
}
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	3720      	adds	r7, #32
 8014cf6:	46bd      	mov	sp, r7
 8014cf8:	bd80      	pop	{r7, pc}

08014cfa <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8014cfa:	b480      	push	{r7}
 8014cfc:	b083      	sub	sp, #12
 8014cfe:	af00      	add	r7, sp, #0
 8014d00:	6078      	str	r0, [r7, #4]
 8014d02:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014d0a:	683b      	ldr	r3, [r7, #0]
 8014d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014d10:	429a      	cmp	r2, r3
 8014d12:	da01      	bge.n	8014d18 <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 8014d14:	683b      	ldr	r3, [r7, #0]
 8014d16:	e000      	b.n	8014d1a <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 8014d18:	687b      	ldr	r3, [r7, #4]
    }
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	370c      	adds	r7, #12
 8014d1e:	46bd      	mov	sp, r7
 8014d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d24:	4770      	bx	lr

08014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 8014d26:	b580      	push	{r7, lr}
 8014d28:	b086      	sub	sp, #24
 8014d2a:	af00      	add	r7, sp, #0
 8014d2c:	6078      	str	r0, [r7, #4]
 8014d2e:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 8014d30:	683b      	ldr	r3, [r7, #0]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d003      	beq.n	8014d3e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 8014d36:	683b      	ldr	r3, [r7, #0]
 8014d38:	685b      	ldr	r3, [r3, #4]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d103      	bne.n	8014d46 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 8014d3e:	6878      	ldr	r0, [r7, #4]
 8014d40:	f7fd fb7e 	bl	8012440 <_ZN6tflite12RuntimeShapeC1Ev>
 8014d44:	e00d      	b.n	8014d62 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 8014d46:	683b      	ldr	r3, [r7, #0]
 8014d48:	685b      	ldr	r3, [r3, #4]
 8014d4a:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8014d4c:	697b      	ldr	r3, [r7, #20]
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8014d52:	697b      	ldr	r3, [r7, #20]
 8014d54:	3304      	adds	r3, #4
 8014d56:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8014d58:	68fa      	ldr	r2, [r7, #12]
 8014d5a:	6939      	ldr	r1, [r7, #16]
 8014d5c:	6878      	ldr	r0, [r7, #4]
 8014d5e:	f7fd fb7d 	bl	801245c <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8014d62:	6878      	ldr	r0, [r7, #4]
 8014d64:	3718      	adds	r7, #24
 8014d66:	46bd      	mov	sp, r7
 8014d68:	bd80      	pop	{r7, pc}

08014d6a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 8014d6a:	b590      	push	{r4, r7, lr}
 8014d6c:	b087      	sub	sp, #28
 8014d6e:	af00      	add	r7, sp, #0
 8014d70:	60f8      	str	r0, [r7, #12]
 8014d72:	60b9      	str	r1, [r7, #8]
 8014d74:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 8014d76:	68f8      	ldr	r0, [r7, #12]
 8014d78:	f7fd fb99 	bl	80124ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014d7c:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 8014d7e:	2300      	movs	r3, #0
 8014d80:	617b      	str	r3, [r7, #20]
 8014d82:	697a      	ldr	r2, [r7, #20]
 8014d84:	693b      	ldr	r3, [r7, #16]
 8014d86:	429a      	cmp	r2, r3
 8014d88:	da15      	bge.n	8014db6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 8014d8a:	697a      	ldr	r2, [r7, #20]
 8014d8c:	68bb      	ldr	r3, [r7, #8]
 8014d8e:	429a      	cmp	r2, r3
 8014d90:	d00d      	beq.n	8014dae <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8014d92:	6979      	ldr	r1, [r7, #20]
 8014d94:	68f8      	ldr	r0, [r7, #12]
 8014d96:	f7fd fc97 	bl	80126c8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014d9a:	4604      	mov	r4, r0
 8014d9c:	6979      	ldr	r1, [r7, #20]
 8014d9e:	6878      	ldr	r0, [r7, #4]
 8014da0:	f7fd fc92 	bl	80126c8 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014da4:	4603      	mov	r3, r0
 8014da6:	429c      	cmp	r4, r3
 8014da8:	d001      	beq.n	8014dae <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 8014daa:	f005 ff33 	bl	801ac14 <abort>
  for (int i = 0; i < dims_count; ++i) {
 8014dae:	697b      	ldr	r3, [r7, #20]
 8014db0:	3301      	adds	r3, #1
 8014db2:	617b      	str	r3, [r7, #20]
 8014db4:	e7e5      	b.n	8014d82 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 8014db6:	68b9      	ldr	r1, [r7, #8]
 8014db8:	68f8      	ldr	r0, [r7, #12]
 8014dba:	f7ff f944 	bl	8014046 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8014dbe:	4603      	mov	r3, r0
}
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	371c      	adds	r7, #28
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	bd90      	pop	{r4, r7, pc}

08014dc8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 8014dc8:	b580      	push	{r7, lr}
 8014dca:	b082      	sub	sp, #8
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 8014dd0:	2100      	movs	r1, #0
 8014dd2:	6878      	ldr	r0, [r7, #4]
 8014dd4:	f7fe f872 	bl	8012ebc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8014dd8:	4603      	mov	r3, r0
}
 8014dda:	4618      	mov	r0, r3
 8014ddc:	3708      	adds	r7, #8
 8014dde:	46bd      	mov	sp, r7
 8014de0:	bd80      	pop	{r7, pc}

08014de2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8014de2:	b580      	push	{r7, lr}
 8014de4:	b082      	sub	sp, #8
 8014de6:	af00      	add	r7, sp, #0
 8014de8:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8014dea:	6878      	ldr	r0, [r7, #4]
 8014dec:	f000 f805 	bl	8014dfa <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 8014df0:	4603      	mov	r3, r0
}
 8014df2:	4618      	mov	r0, r3
 8014df4:	3708      	adds	r7, #8
 8014df6:	46bd      	mov	sp, r7
 8014df8:	bd80      	pop	{r7, pc}

08014dfa <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8014dfa:	b580      	push	{r7, lr}
 8014dfc:	b082      	sub	sp, #8
 8014dfe:	af00      	add	r7, sp, #0
 8014e00:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8014e02:	2101      	movs	r1, #1
 8014e04:	6878      	ldr	r0, [r7, #4]
 8014e06:	f7fe f859 	bl	8012ebc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8014e0a:	4603      	mov	r3, r0
  }
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	3708      	adds	r7, #8
 8014e10:	46bd      	mov	sp, r7
 8014e12:	bd80      	pop	{r7, pc}

08014e14 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 8014e14:	b590      	push	{r4, r7, lr}
 8014e16:	b085      	sub	sp, #20
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	60f8      	str	r0, [r7, #12]
 8014e1c:	60b9      	str	r1, [r7, #8]
 8014e1e:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8014e20:	f107 0308 	add.w	r3, r7, #8
 8014e24:	4618      	mov	r0, r3
 8014e26:	f7fe fe7f 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014e2a:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8014e2c:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8014e2e:	1d3b      	adds	r3, r7, #4
 8014e30:	4618      	mov	r0, r3
 8014e32:	f7fe fe79 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014e36:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	461a      	mov	r2, r3
 8014e3c:	4621      	mov	r1, r4
 8014e3e:	68f8      	ldr	r0, [r7, #12]
 8014e40:	f7ff f8d6 	bl	8013ff0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8014e44:	4603      	mov	r3, r0
 8014e46:	4618      	mov	r0, r3
 8014e48:	f7fe fdfd 	bl	8013a46 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8014e4c:	4603      	mov	r3, r0
}
 8014e4e:	4618      	mov	r0, r3
 8014e50:	3714      	adds	r7, #20
 8014e52:	46bd      	mov	sp, r7
 8014e54:	bd90      	pop	{r4, r7, pc}

08014e56 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 8014e56:	b580      	push	{r7, lr}
 8014e58:	b082      	sub	sp, #8
 8014e5a:	af00      	add	r7, sp, #0
 8014e5c:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	bf0c      	ite	eq
 8014e64:	2301      	moveq	r3, #1
 8014e66:	2300      	movne	r3, #0
 8014e68:	b2db      	uxtb	r3, r3
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	f7fe fc48 	bl	8013700 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8014e70:	4603      	mov	r3, r0
}
 8014e72:	4618      	mov	r0, r3
 8014e74:	3708      	adds	r7, #8
 8014e76:	46bd      	mov	sp, r7
 8014e78:	bd80      	pop	{r7, pc}
	...

08014e7c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b08a      	sub	sp, #40	; 0x28
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 8014e84:	482c      	ldr	r0, [pc, #176]	; (8014f38 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 8014e86:	f7ff ff9f 	bl	8014dc8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8014e8a:	4603      	mov	r3, r0
 8014e8c:	4618      	mov	r0, r3
 8014e8e:	f7fe fe56 	bl	8013b3e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8014e92:	4603      	mov	r3, r0
 8014e94:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 8014e96:	4829      	ldr	r0, [pc, #164]	; (8014f3c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 8014e98:	f7ff ff96 	bl	8014dc8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8014e9c:	4603      	mov	r3, r0
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	f7fe fe4d 	bl	8013b3e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8014ea4:	4603      	mov	r3, r0
 8014ea6:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 8014ea8:	f000 f86c 	bl	8014f84 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 8014eac:	4603      	mov	r3, r0
 8014eae:	4619      	mov	r1, r3
 8014eb0:	6878      	ldr	r0, [r7, #4]
 8014eb2:	f000 f870 	bl	8014f96 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 8014eba:	69f9      	ldr	r1, [r7, #28]
 8014ebc:	69f8      	ldr	r0, [r7, #28]
 8014ebe:	f000 f83f 	bl	8014f40 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8014ec2:	4603      	mov	r3, r0
 8014ec4:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 8014ec6:	69f9      	ldr	r1, [r7, #28]
 8014ec8:	69b8      	ldr	r0, [r7, #24]
 8014eca:	f000 f839 	bl	8014f40 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8014ece:	4603      	mov	r3, r0
 8014ed0:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 8014ed2:	69b9      	ldr	r1, [r7, #24]
 8014ed4:	69b8      	ldr	r0, [r7, #24]
 8014ed6:	f000 f833 	bl	8014f40 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8014eda:	4603      	mov	r3, r0
 8014edc:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 8014ede:	6938      	ldr	r0, [r7, #16]
 8014ee0:	f000 f877 	bl	8014fd2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8014ee4:	4603      	mov	r3, r0
 8014ee6:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 8014ee8:	6979      	ldr	r1, [r7, #20]
 8014eea:	68f8      	ldr	r0, [r7, #12]
 8014eec:	f000 f853 	bl	8014f96 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014ef0:	4603      	mov	r3, r0
 8014ef2:	6a39      	ldr	r1, [r7, #32]
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	f000 f823 	bl	8014f40 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8014efa:	4603      	mov	r3, r0
 8014efc:	69b9      	ldr	r1, [r7, #24]
 8014efe:	4618      	mov	r0, r3
 8014f00:	f000 f849 	bl	8014f96 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014f04:	4603      	mov	r3, r0
 8014f06:	4618      	mov	r0, r3
 8014f08:	f000 f879 	bl	8014ffe <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8014f0c:	4603      	mov	r3, r0
 8014f0e:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 8014f10:	68b9      	ldr	r1, [r7, #8]
 8014f12:	69f8      	ldr	r0, [r7, #28]
 8014f14:	f000 f83f 	bl	8014f96 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014f18:	4603      	mov	r3, r0
 8014f1a:	4619      	mov	r1, r3
 8014f1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014f1e:	f000 f80f 	bl	8014f40 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8014f22:	4603      	mov	r3, r0
 8014f24:	4619      	mov	r1, r3
 8014f26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014f28:	f000 f87f 	bl	801502a <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014f2c:	4603      	mov	r3, r0
}
 8014f2e:	4618      	mov	r0, r3
 8014f30:	3728      	adds	r7, #40	; 0x28
 8014f32:	46bd      	mov	sp, r7
 8014f34:	bd80      	pop	{r7, pc}
 8014f36:	bf00      	nop
 8014f38:	70f5a894 	.word	0x70f5a894
 8014f3c:	2aaaaaab 	.word	0x2aaaaaab

08014f40 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8014f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f42:	b085      	sub	sp, #20
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	6078      	str	r0, [r7, #4]
 8014f48:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8014f4a:	1d3b      	adds	r3, r7, #4
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	f7fe fdeb 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014f52:	4603      	mov	r3, r0
 8014f54:	681d      	ldr	r5, [r3, #0]
 8014f56:	463b      	mov	r3, r7
 8014f58:	4618      	mov	r0, r3
 8014f5a:	f7fe fde5 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014f5e:	4603      	mov	r3, r0
 8014f60:	681e      	ldr	r6, [r3, #0]
 8014f62:	f107 030c 	add.w	r3, r7, #12
 8014f66:	4618      	mov	r0, r3
 8014f68:	f7fe fdde 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014f6c:	4604      	mov	r4, r0
 8014f6e:	4631      	mov	r1, r6
 8014f70:	4628      	mov	r0, r5
 8014f72:	f7fd fb33 	bl	80125dc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8014f76:	4603      	mov	r3, r0
 8014f78:	6023      	str	r3, [r4, #0]
  return c;
 8014f7a:	68fb      	ldr	r3, [r7, #12]
}
 8014f7c:	4618      	mov	r0, r3
 8014f7e:	3714      	adds	r7, #20
 8014f80:	46bd      	mov	sp, r7
 8014f82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014f84 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 8014f84:	b580      	push	{r7, lr}
 8014f86:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 8014f88:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8014f8c:	f7fe fdd7 	bl	8013b3e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8014f90:	4603      	mov	r3, r0
  }
 8014f92:	4618      	mov	r0, r3
 8014f94:	bd80      	pop	{r7, pc}

08014f96 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8014f96:	b590      	push	{r4, r7, lr}
 8014f98:	b083      	sub	sp, #12
 8014f9a:	af00      	add	r7, sp, #0
 8014f9c:	6078      	str	r0, [r7, #4]
 8014f9e:	6039      	str	r1, [r7, #0]
 8014fa0:	1d3b      	adds	r3, r7, #4
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	f7fe fdc0 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014fa8:	4603      	mov	r3, r0
 8014faa:	681c      	ldr	r4, [r3, #0]
 8014fac:	463b      	mov	r3, r7
 8014fae:	4618      	mov	r0, r3
 8014fb0:	f7fe fdba 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014fb4:	4603      	mov	r3, r0
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	4619      	mov	r1, r3
 8014fba:	4620      	mov	r0, r4
 8014fbc:	f7fe fb7e 	bl	80136bc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8014fc0:	4603      	mov	r3, r0
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	f7fe fd3f 	bl	8013a46 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8014fc8:	4603      	mov	r3, r0
 8014fca:	4618      	mov	r0, r3
 8014fcc:	370c      	adds	r7, #12
 8014fce:	46bd      	mov	sp, r7
 8014fd0:	bd90      	pop	{r4, r7, pc}

08014fd2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 8014fd2:	b580      	push	{r7, lr}
 8014fd4:	b082      	sub	sp, #8
 8014fd6:	af00      	add	r7, sp, #0
 8014fd8:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 8014fda:	1d3b      	adds	r3, r7, #4
 8014fdc:	4618      	mov	r0, r3
 8014fde:	f7fe fda3 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014fe2:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	f000 f83d 	bl	8015066 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 8014fec:	4603      	mov	r3, r0
 8014fee:	4618      	mov	r0, r3
 8014ff0:	f7fe fd29 	bl	8013a46 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8014ff4:	4603      	mov	r3, r0
}
 8014ff6:	4618      	mov	r0, r3
 8014ff8:	3708      	adds	r7, #8
 8014ffa:	46bd      	mov	sp, r7
 8014ffc:	bd80      	pop	{r7, pc}

08014ffe <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 8014ffe:	b580      	push	{r7, lr}
 8015000:	b082      	sub	sp, #8
 8015002:	af00      	add	r7, sp, #0
 8015004:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 8015006:	1d3b      	adds	r3, r7, #4
 8015008:	4618      	mov	r0, r3
 801500a:	f7fe fd8d 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801500e:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	4618      	mov	r0, r3
 8015014:	f7ff fee5 	bl	8014de2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 8015018:	4603      	mov	r3, r0
 801501a:	4618      	mov	r0, r3
 801501c:	f7fe fd13 	bl	8013a46 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8015020:	4603      	mov	r3, r0
}
 8015022:	4618      	mov	r0, r3
 8015024:	3708      	adds	r7, #8
 8015026:	46bd      	mov	sp, r7
 8015028:	bd80      	pop	{r7, pc}

0801502a <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 801502a:	b590      	push	{r4, r7, lr}
 801502c:	b083      	sub	sp, #12
 801502e:	af00      	add	r7, sp, #0
 8015030:	6078      	str	r0, [r7, #4]
 8015032:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 8015034:	1d3b      	adds	r3, r7, #4
 8015036:	4618      	mov	r0, r3
 8015038:	f7fe fd76 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801503c:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801503e:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 8015040:	463b      	mov	r3, r7
 8015042:	4618      	mov	r0, r3
 8015044:	f7fe fd70 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015048:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	4619      	mov	r1, r3
 801504e:	4620      	mov	r0, r4
 8015050:	f000 f815 	bl	801507e <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 8015054:	4603      	mov	r3, r0
 8015056:	4618      	mov	r0, r3
 8015058:	f7fe fcf5 	bl	8013a46 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801505c:	4603      	mov	r3, r0
}
 801505e:	4618      	mov	r0, r3
 8015060:	370c      	adds	r7, #12
 8015062:	46bd      	mov	sp, r7
 8015064:	bd90      	pop	{r4, r7, pc}

08015066 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8015066:	b580      	push	{r7, lr}
 8015068:	b082      	sub	sp, #8
 801506a:	af00      	add	r7, sp, #0
 801506c:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801506e:	6878      	ldr	r0, [r7, #4]
 8015070:	f000 f813 	bl	801509a <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 8015074:	4603      	mov	r3, r0
}
 8015076:	4618      	mov	r0, r3
 8015078:	3708      	adds	r7, #8
 801507a:	46bd      	mov	sp, r7
 801507c:	bd80      	pop	{r7, pc}

0801507e <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 801507e:	b580      	push	{r7, lr}
 8015080:	b082      	sub	sp, #8
 8015082:	af00      	add	r7, sp, #0
 8015084:	6078      	str	r0, [r7, #4]
 8015086:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 8015088:	6839      	ldr	r1, [r7, #0]
 801508a:	6878      	ldr	r0, [r7, #4]
 801508c:	f000 f812 	bl	80150b4 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 8015090:	4603      	mov	r3, r0
}
 8015092:	4618      	mov	r0, r3
 8015094:	3708      	adds	r7, #8
 8015096:	46bd      	mov	sp, r7
 8015098:	bd80      	pop	{r7, pc}

0801509a <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801509a:	b580      	push	{r7, lr}
 801509c:	b082      	sub	sp, #8
 801509e:	af00      	add	r7, sp, #0
 80150a0:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 80150a2:	2102      	movs	r1, #2
 80150a4:	6878      	ldr	r0, [r7, #4]
 80150a6:	f7fd ff09 	bl	8012ebc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80150aa:	4603      	mov	r3, r0
  }
 80150ac:	4618      	mov	r0, r3
 80150ae:	3708      	adds	r7, #8
 80150b0:	46bd      	mov	sp, r7
 80150b2:	bd80      	pop	{r7, pc}

080150b4 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 80150b4:	b580      	push	{r7, lr}
 80150b6:	b082      	sub	sp, #8
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	6078      	str	r0, [r7, #4]
 80150bc:	6039      	str	r1, [r7, #0]
 80150be:	6839      	ldr	r1, [r7, #0]
 80150c0:	6878      	ldr	r0, [r7, #4]
 80150c2:	f7fe fafb 	bl	80136bc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80150c6:	4603      	mov	r3, r0
 80150c8:	4618      	mov	r0, r3
 80150ca:	3708      	adds	r7, #8
 80150cc:	46bd      	mov	sp, r7
 80150ce:	bd80      	pop	{r7, pc}

080150d0 <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80150d0:	b480      	push	{r7}
 80150d2:	b083      	sub	sp, #12
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	6078      	str	r0, [r7, #4]
 80150d8:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	781a      	ldrb	r2, [r3, #0]
 80150de:	683b      	ldr	r3, [r7, #0]
 80150e0:	781b      	ldrb	r3, [r3, #0]
 80150e2:	429a      	cmp	r2, r3
 80150e4:	d201      	bcs.n	80150ea <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 80150e6:	683b      	ldr	r3, [r7, #0]
 80150e8:	e000      	b.n	80150ec <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 80150ea:	687b      	ldr	r3, [r7, #4]
    }
 80150ec:	4618      	mov	r0, r3
 80150ee:	370c      	adds	r7, #12
 80150f0:	46bd      	mov	sp, r7
 80150f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f6:	4770      	bx	lr

080150f8 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 80150f8:	b480      	push	{r7}
 80150fa:	b083      	sub	sp, #12
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	2b00      	cmp	r3, #0
 8015104:	d002      	beq.n	801510c <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	e000      	b.n	801510e <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 801510c:	2300      	movs	r3, #0
}
 801510e:	4618      	mov	r0, r3
 8015110:	370c      	adds	r7, #12
 8015112:	46bd      	mov	sp, r7
 8015114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015118:	4770      	bx	lr
	...

0801511c <_ZN6tflite26generic_int16_table_lookupEsPKs>:
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
 801511c:	b580      	push	{r7, lr}
 801511e:	b086      	sub	sp, #24
 8015120:	af00      	add	r7, sp, #0
 8015122:	4603      	mov	r3, r0
 8015124:	6039      	str	r1, [r7, #0]
 8015126:	80fb      	strh	r3, [r7, #6]
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 8015128:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801512c:	11db      	asrs	r3, r3, #7
 801512e:	b21b      	sxth	r3, r3
 8015130:	b29b      	uxth	r3, r3
 8015132:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8015136:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 8015138:	8afb      	ldrh	r3, [r7, #22]
 801513a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801513e:	d306      	bcc.n	801514e <_ZN6tflite26generic_int16_table_lookupEsPKs+0x32>
 8015140:	4b1a      	ldr	r3, [pc, #104]	; (80151ac <_ZN6tflite26generic_int16_table_lookupEsPKs+0x90>)
 8015142:	4a1b      	ldr	r2, [pc, #108]	; (80151b0 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x94>)
 8015144:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015148:	481a      	ldr	r0, [pc, #104]	; (80151b4 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x98>)
 801514a:	f005 fd6b 	bl	801ac24 <__assert_func>
  int16_t offset = value & 0x7f;
 801514e:	88fb      	ldrh	r3, [r7, #6]
 8015150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015154:	82bb      	strh	r3, [r7, #20]
  int16_t base = lut[index];
 8015156:	8afb      	ldrh	r3, [r7, #22]
 8015158:	005b      	lsls	r3, r3, #1
 801515a:	683a      	ldr	r2, [r7, #0]
 801515c:	4413      	add	r3, r2
 801515e:	881b      	ldrh	r3, [r3, #0]
 8015160:	827b      	strh	r3, [r7, #18]
  int16_t slope = lut[index + 1] - lut[index];
 8015162:	8afb      	ldrh	r3, [r7, #22]
 8015164:	3301      	adds	r3, #1
 8015166:	005b      	lsls	r3, r3, #1
 8015168:	683a      	ldr	r2, [r7, #0]
 801516a:	4413      	add	r3, r2
 801516c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015170:	b29a      	uxth	r2, r3
 8015172:	8afb      	ldrh	r3, [r7, #22]
 8015174:	005b      	lsls	r3, r3, #1
 8015176:	6839      	ldr	r1, [r7, #0]
 8015178:	440b      	add	r3, r1
 801517a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801517e:	b29b      	uxth	r3, r3
 8015180:	1ad3      	subs	r3, r2, r3
 8015182:	b29b      	uxth	r3, r3
 8015184:	823b      	strh	r3, [r7, #16]
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
 8015186:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801518a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801518e:	fb02 f303 	mul.w	r3, r2, r3
 8015192:	3340      	adds	r3, #64	; 0x40
 8015194:	11db      	asrs	r3, r3, #7
 8015196:	60fb      	str	r3, [r7, #12]
  return base + delta;
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	b29a      	uxth	r2, r3
 801519c:	8a7b      	ldrh	r3, [r7, #18]
 801519e:	4413      	add	r3, r2
 80151a0:	b29b      	uxth	r3, r3
 80151a2:	b21b      	sxth	r3, r3
}
 80151a4:	4618      	mov	r0, r3
 80151a6:	3718      	adds	r7, #24
 80151a8:	46bd      	mov	sp, r7
 80151aa:	bd80      	pop	{r7, pc}
 80151ac:	0801d54c 	.word	0x0801d54c
 80151b0:	0801d578 	.word	0x0801d578
 80151b4:	0801d5bc 	.word	0x0801d5bc

080151b8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 80151b8:	b580      	push	{r7, lr}
 80151ba:	ed2d 8b02 	vpush	{d8}
 80151be:	b08e      	sub	sp, #56	; 0x38
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	60f8      	str	r0, [r7, #12]
 80151c4:	60b9      	str	r1, [r7, #8]
 80151c6:	607a      	str	r2, [r7, #4]
 80151c8:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80151ca:	68b8      	ldr	r0, [r7, #8]
 80151cc:	f7fd f96f 	bl	80124ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80151d0:	4603      	mov	r3, r0
 80151d2:	3b01      	subs	r3, #1
 80151d4:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80151d6:	683a      	ldr	r2, [r7, #0]
 80151d8:	6a39      	ldr	r1, [r7, #32]
 80151da:	68b8      	ldr	r0, [r7, #8]
 80151dc:	f7ff fdc5 	bl	8014d6a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80151e0:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80151e2:	6a3b      	ldr	r3, [r7, #32]
 80151e4:	683a      	ldr	r2, [r7, #0]
 80151e6:	6a39      	ldr	r1, [r7, #32]
 80151e8:	68b8      	ldr	r0, [r7, #8]
 80151ea:	f7fe fb4c 	bl	8013886 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80151ee:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 80151f0:	2300      	movs	r3, #0
 80151f2:	637b      	str	r3, [r7, #52]	; 0x34
 80151f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80151f6:	69fb      	ldr	r3, [r7, #28]
 80151f8:	429a      	cmp	r2, r3
 80151fa:	f280 8087 	bge.w	801530c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x154>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 80151fe:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8015202:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 8015204:	2300      	movs	r3, #0
 8015206:	633b      	str	r3, [r7, #48]	; 0x30
 8015208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801520a:	69bb      	ldr	r3, [r7, #24]
 801520c:	429a      	cmp	r2, r3
 801520e:	da15      	bge.n	801523c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
      max = std::max(max, input_data[i * depth + c]);
 8015210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015212:	69ba      	ldr	r2, [r7, #24]
 8015214:	fb03 f202 	mul.w	r2, r3, r2
 8015218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801521a:	4413      	add	r3, r2
 801521c:	009b      	lsls	r3, r3, #2
 801521e:	687a      	ldr	r2, [r7, #4]
 8015220:	441a      	add	r2, r3
 8015222:	f107 0310 	add.w	r3, r7, #16
 8015226:	4611      	mov	r1, r2
 8015228:	4618      	mov	r0, r3
 801522a:	f7fc fdd1 	bl	8011dd0 <_ZSt3maxIfERKT_S2_S2_>
 801522e:	4603      	mov	r3, r0
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 8015234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015236:	3301      	adds	r3, #1
 8015238:	633b      	str	r3, [r7, #48]	; 0x30
 801523a:	e7e5      	b.n	8015208 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x50>
    }

    // Compute sum.
    float sum = 0.f;
 801523c:	f04f 0300 	mov.w	r3, #0
 8015240:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 8015242:	2300      	movs	r3, #0
 8015244:	62bb      	str	r3, [r7, #40]	; 0x28
 8015246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015248:	69bb      	ldr	r3, [r7, #24]
 801524a:	429a      	cmp	r2, r3
 801524c:	da36      	bge.n	80152bc <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x104>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 801524e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015250:	69ba      	ldr	r2, [r7, #24]
 8015252:	fb03 f202 	mul.w	r2, r3, r2
 8015256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015258:	4413      	add	r3, r2
 801525a:	009b      	lsls	r3, r3, #2
 801525c:	687a      	ldr	r2, [r7, #4]
 801525e:	4413      	add	r3, r2
 8015260:	ed93 7a00 	vldr	s14, [r3]
 8015264:	edd7 7a04 	vldr	s15, [r7, #16]
 8015268:	ee37 8a67 	vsub.f32	s16, s14, s15
                                   static_cast<float>(params.beta));
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015272:	4610      	mov	r0, r2
 8015274:	4619      	mov	r1, r3
 8015276:	f7eb fcc1 	bl	8000bfc <__aeabi_d2f>
 801527a:	ee07 0a90 	vmov	s15, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 801527e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8015282:	eeb0 0a67 	vmov.f32	s0, s15
 8015286:	f7ec f938 	bl	80014fa <_ZSt3expf>
 801528a:	ed87 0a05 	vstr	s0, [r7, #20]
      output_data[i * depth + c] = exp_c;
 801528e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015290:	69ba      	ldr	r2, [r7, #24]
 8015292:	fb03 f202 	mul.w	r2, r3, r2
 8015296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015298:	4413      	add	r3, r2
 801529a:	009b      	lsls	r3, r3, #2
 801529c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801529e:	4413      	add	r3, r2
 80152a0:	697a      	ldr	r2, [r7, #20]
 80152a2:	601a      	str	r2, [r3, #0]
      sum += exp_c;
 80152a4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80152a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80152ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80152b0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 80152b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152b6:	3301      	adds	r3, #1
 80152b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80152ba:	e7c4      	b.n	8015246 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 80152bc:	2300      	movs	r3, #0
 80152be:	627b      	str	r3, [r7, #36]	; 0x24
 80152c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80152c2:	69bb      	ldr	r3, [r7, #24]
 80152c4:	429a      	cmp	r2, r3
 80152c6:	da1d      	bge.n	8015304 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x14c>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 80152c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80152ca:	69ba      	ldr	r2, [r7, #24]
 80152cc:	fb03 f202 	mul.w	r2, r3, r2
 80152d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152d2:	4413      	add	r3, r2
 80152d4:	009b      	lsls	r3, r3, #2
 80152d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80152d8:	4413      	add	r3, r2
 80152da:	edd3 6a00 	vldr	s13, [r3]
 80152de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80152e0:	69ba      	ldr	r2, [r7, #24]
 80152e2:	fb03 f202 	mul.w	r2, r3, r2
 80152e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152e8:	4413      	add	r3, r2
 80152ea:	009b      	lsls	r3, r3, #2
 80152ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80152ee:	4413      	add	r3, r2
 80152f0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80152f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80152f8:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 80152fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152fe:	3301      	adds	r3, #1
 8015300:	627b      	str	r3, [r7, #36]	; 0x24
 8015302:	e7dd      	b.n	80152c0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x108>
  for (int i = 0; i < outer_size; ++i) {
 8015304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015306:	3301      	adds	r3, #1
 8015308:	637b      	str	r3, [r7, #52]	; 0x34
 801530a:	e773      	b.n	80151f4 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
    }
  }
}
 801530c:	bf00      	nop
 801530e:	3738      	adds	r7, #56	; 0x38
 8015310:	46bd      	mov	sp, r7
 8015312:	ecbd 8b02 	vpop	{d8}
 8015316:	bd80      	pop	{r7, pc}

08015318 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 8015318:	b580      	push	{r7, lr}
 801531a:	b08a      	sub	sp, #40	; 0x28
 801531c:	af00      	add	r7, sp, #0
 801531e:	60f8      	str	r0, [r7, #12]
 8015320:	60b9      	str	r1, [r7, #8]
 8015322:	607a      	str	r2, [r7, #4]
 8015324:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 8015326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015328:	687a      	ldr	r2, [r7, #4]
 801532a:	fb03 f202 	mul.w	r2, r3, r2
 801532e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015330:	4413      	add	r3, r2
 8015332:	005b      	lsls	r3, r3, #1
 8015334:	68ba      	ldr	r2, [r7, #8]
 8015336:	4413      	add	r3, r2
 8015338:	f9b3 3000 	ldrsh.w	r3, [r3]
 801533c:	461a      	mov	r2, r3
 801533e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015342:	1ad3      	subs	r3, r2, r3
 8015344:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	6899      	ldr	r1, [r3, #8]
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	68db      	ldr	r3, [r3, #12]
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
 801534e:	461a      	mov	r2, r3
 8015350:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015352:	f7fd fa49 	bl	80127e8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8015356:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 8015358:	6a3b      	ldr	r3, [r7, #32]
 801535a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 801535e:	337f      	adds	r3, #127	; 0x7f
 8015360:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 8015362:	4b12      	ldr	r3, [pc, #72]	; (80153ac <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 8015364:	617b      	str	r3, [r7, #20]
               static_cast<int32_t>(32767));
 8015366:	f107 0214 	add.w	r2, r7, #20
 801536a:	f107 0310 	add.w	r3, r7, #16
 801536e:	4611      	mov	r1, r2
 8015370:	4618      	mov	r0, r3
 8015372:	f7fd f851 	bl	8012418 <_ZSt3maxIlERKT_S2_S2_>
 8015376:	4602      	mov	r2, r0
 8015378:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801537c:	61bb      	str	r3, [r7, #24]
 801537e:	f107 0318 	add.w	r3, r7, #24
 8015382:	4619      	mov	r1, r3
 8015384:	4610      	mov	r0, r2
 8015386:	f7fd f833 	bl	80123f0 <_ZSt3minIlERKT_S2_S2_>
 801538a:	4603      	mov	r3, r0
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 801538c:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 801538e:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015394:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015398:	4611      	mov	r1, r2
 801539a:	4618      	mov	r0, r3
 801539c:	f7ff febe 	bl	801511c <_ZN6tflite26generic_int16_table_lookupEsPKs>
 80153a0:	4603      	mov	r3, r0
}
 80153a2:	4618      	mov	r0, r3
 80153a4:	3728      	adds	r7, #40	; 0x28
 80153a6:	46bd      	mov	sp, r7
 80153a8:	bd80      	pop	{r7, pc}
 80153aa:	bf00      	nop
 80153ac:	ffff8000 	.word	0xffff8000

080153b0 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 80153b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153b4:	b0ab      	sub	sp, #172	; 0xac
 80153b6:	af02      	add	r7, sp, #8
 80153b8:	63f8      	str	r0, [r7, #60]	; 0x3c
 80153ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80153bc:	637a      	str	r2, [r7, #52]	; 0x34
 80153be:	633b      	str	r3, [r7, #48]	; 0x30
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80153c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80153c2:	f7fd f874 	bl	80124ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80153c6:	4603      	mov	r3, r0
 80153c8:	3b01      	subs	r3, #1
 80153ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80153ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80153d0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80153d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80153d6:	f7ff fcc8 	bl	8014d6a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80153da:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80153de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80153e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80153e4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80153e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80153ea:	f7fe fa4c 	bl	8013886 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80153ee:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

  for (int i = 0; i < outer_size; ++i) {
 80153f2:	2300      	movs	r3, #0
 80153f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80153f8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80153fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015400:	429a      	cmp	r2, r3
 8015402:	f280 8157 	bge.w	80156b4 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x304>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 8015406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801540a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 801540e:	2300      	movs	r3, #0
 8015410:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015414:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8015418:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801541c:	429a      	cmp	r2, r3
 801541e:	da1c      	bge.n	801545a <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xaa>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8015420:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015424:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015428:	fb03 f202 	mul.w	r2, r3, r2
 801542c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015430:	4413      	add	r3, r2
 8015432:	005a      	lsls	r2, r3, #1
 8015434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015436:	441a      	add	r2, r3
 8015438:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 801543c:	4611      	mov	r1, r2
 801543e:	4618      	mov	r0, r3
 8015440:	f7ff fc5b 	bl	8014cfa <_ZSt3maxIsERKT_S2_S2_>
 8015444:	4603      	mov	r3, r0
 8015446:	f9b3 3000 	ldrsh.w	r3, [r3]
 801544a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    for (int c = 0; c < depth; ++c) {
 801544e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015452:	3301      	adds	r3, #1
 8015454:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015458:	e7dc      	b.n	8015414 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x64>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 801545a:	2300      	movs	r3, #0
 801545c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int16_t* exp_results_Q015 = output_data + i * depth;
 8015460:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015464:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015468:	fb02 f303 	mul.w	r3, r2, r3
 801546c:	005a      	lsls	r2, r3, #1
 801546e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015472:	4413      	add	r3, r2
 8015474:	67fb      	str	r3, [r7, #124]	; 0x7c
    for (int c = 0; c < depth; ++c) {
 8015476:	2300      	movs	r3, #0
 8015478:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801547c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8015480:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015484:	429a      	cmp	r2, r3
 8015486:	da28      	bge.n	80154da <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x12a>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 8015488:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
      exp_results_Q015[c] =
 801548c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015490:	005a      	lsls	r2, r3, #1
 8015492:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015494:	189c      	adds	r4, r3, r2
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 8015496:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801549a:	9301      	str	r3, [sp, #4]
 801549c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80154a0:	9300      	str	r3, [sp, #0]
 80154a2:	460b      	mov	r3, r1
 80154a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80154a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80154aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80154ac:	f7ff ff34 	bl	8015318 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 80154b0:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 80154b2:	8023      	strh	r3, [r4, #0]
      sum_of_exps += exp_results_Q015[c];
 80154b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80154b8:	005a      	lsls	r2, r3, #1
 80154ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80154bc:	4413      	add	r3, r2
 80154be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80154c2:	461a      	mov	r2, r3
 80154c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80154c8:	4413      	add	r3, r2
 80154ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (int c = 0; c < depth; ++c) {
 80154ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80154d2:	3301      	adds	r3, #1
 80154d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80154d8:	e7d0      	b.n	801547c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xcc>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 80154da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80154de:	4618      	mov	r0, r3
 80154e0:	f7fe fa9f 	bl	8013a22 <_ZN6tflite17CountLeadingZerosImEEiT_>
 80154e4:	4603      	mov	r3, r0
 80154e6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 80154ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80154ee:	17da      	asrs	r2, r3, #31
 80154f0:	623b      	str	r3, [r7, #32]
 80154f2:	627a      	str	r2, [r7, #36]	; 0x24
 80154f4:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80154f8:	1e59      	subs	r1, r3, #1
 80154fa:	f1a1 0320 	sub.w	r3, r1, #32
 80154fe:	f1c1 0220 	rsb	r2, r1, #32
 8015502:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015504:	fa00 f901 	lsl.w	r9, r0, r1
 8015508:	6a38      	ldr	r0, [r7, #32]
 801550a:	fa00 f303 	lsl.w	r3, r0, r3
 801550e:	ea49 0903 	orr.w	r9, r9, r3
 8015512:	6a3b      	ldr	r3, [r7, #32]
 8015514:	fa23 f202 	lsr.w	r2, r3, r2
 8015518:	ea49 0902 	orr.w	r9, r9, r2
 801551c:	6a3b      	ldr	r3, [r7, #32]
 801551e:	fa03 f801 	lsl.w	r8, r3, r1
 8015522:	f518 5300 	adds.w	r3, r8, #8192	; 0x2000
 8015526:	61bb      	str	r3, [r7, #24]
 8015528:	f149 0300 	adc.w	r3, r9, #0
 801552c:	61fb      	str	r3, [r7, #28]
         (1 << 13)) >>
 801552e:	f04f 0200 	mov.w	r2, #0
 8015532:	f04f 0300 	mov.w	r3, #0
 8015536:	69b9      	ldr	r1, [r7, #24]
 8015538:	0b8a      	lsrs	r2, r1, #14
 801553a:	69f9      	ldr	r1, [r7, #28]
 801553c:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8015540:	69f9      	ldr	r1, [r7, #28]
 8015542:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 8015544:	4613      	mov	r3, r2
 8015546:	677b      	str	r3, [r7, #116]	; 0x74
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 8015548:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801554a:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 801554e:	64bb      	str	r3, [r7, #72]	; 0x48
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 8015550:	4b5b      	ldr	r3, [pc, #364]	; (80156c0 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x310>)
 8015552:	653b      	str	r3, [r7, #80]	; 0x50
                 static_cast<int32_t>(32767)));
 8015554:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8015558:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801555c:	4611      	mov	r1, r2
 801555e:	4618      	mov	r0, r3
 8015560:	f7fc ff5a 	bl	8012418 <_ZSt3maxIlERKT_S2_S2_>
 8015564:	4602      	mov	r2, r0
 8015566:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801556a:	657b      	str	r3, [r7, #84]	; 0x54
 801556c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015570:	4619      	mov	r1, r3
 8015572:	4610      	mov	r0, r2
 8015574:	f7fc ff3c 	bl	80123f0 <_ZSt3minIlERKT_S2_S2_>
 8015578:	4603      	mov	r3, r0
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 801557a:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 801557c:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 8015580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
 8015584:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8015588:	4611      	mov	r1, r2
 801558a:	4618      	mov	r0, r3
 801558c:	f7ff fdc6 	bl	801511c <_ZN6tflite26generic_int16_table_lookupEsPKs>
 8015590:	4603      	mov	r3, r0
 8015592:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 8015596:	2300      	movs	r3, #0
 8015598:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801559c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80155a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80155a4:	429a      	cmp	r2, r3
 80155a6:	da7f      	bge.n	80156a8 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x2f8>
      uint8_t right_shift = 31 - headroom_plus_one;
 80155a8:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80155ac:	f1c3 031f 	rsb	r3, r3, #31
 80155b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      int64_t round = 1 << (right_shift - 1);
 80155b4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80155b8:	1e5a      	subs	r2, r3, #1
 80155ba:	2301      	movs	r3, #1
 80155bc:	4093      	lsls	r3, r2
 80155be:	17da      	asrs	r2, r3, #31
 80155c0:	603b      	str	r3, [r7, #0]
 80155c2:	607a      	str	r2, [r7, #4]
 80155c4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80155c8:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 80155cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80155d0:	005a      	lsls	r2, r3, #1
 80155d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80155d4:	4413      	add	r3, r2
 80155d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80155da:	b21b      	sxth	r3, r3
 80155dc:	17da      	asrs	r2, r3, #31
 80155de:	613b      	str	r3, [r7, #16]
 80155e0:	617a      	str	r2, [r7, #20]
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 80155e2:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 80155e6:	17da      	asrs	r2, r3, #31
 80155e8:	60bb      	str	r3, [r7, #8]
 80155ea:	60fa      	str	r2, [r7, #12]
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 80155ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80155f0:	460b      	mov	r3, r1
 80155f2:	68ba      	ldr	r2, [r7, #8]
 80155f4:	fb02 f203 	mul.w	r2, r2, r3
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80155fe:	4601      	mov	r1, r0
 8015600:	fb01 f303 	mul.w	r3, r1, r3
 8015604:	4413      	add	r3, r2
 8015606:	693a      	ldr	r2, [r7, #16]
 8015608:	68b9      	ldr	r1, [r7, #8]
 801560a:	fba2 ab01 	umull	sl, fp, r2, r1
 801560e:	445b      	add	r3, fp
 8015610:	469b      	mov	fp, r3
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 8015612:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8015616:	eb1a 0502 	adds.w	r5, sl, r2
 801561a:	eb4b 0603 	adc.w	r6, fp, r3
                        round) >>
                       right_shift;
 801561e:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
                        round) >>
 8015622:	f1c1 0320 	rsb	r3, r1, #32
 8015626:	f1b1 0220 	subs.w	r2, r1, #32
 801562a:	fa25 f001 	lsr.w	r0, r5, r1
 801562e:	62b8      	str	r0, [r7, #40]	; 0x28
 8015630:	fa06 f303 	lsl.w	r3, r6, r3
 8015634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015636:	ea40 0003 	orr.w	r0, r0, r3
 801563a:	62b8      	str	r0, [r7, #40]	; 0x28
 801563c:	d404      	bmi.n	8015648 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x298>
 801563e:	fa46 f202 	asr.w	r2, r6, r2
 8015642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015644:	4313      	orrs	r3, r2
 8015646:	62bb      	str	r3, [r7, #40]	; 0x28
 8015648:	fa46 f301 	asr.w	r3, r6, r1
 801564c:	62fb      	str	r3, [r7, #44]	; 0x2c
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 801564e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015650:	647b      	str	r3, [r7, #68]	; 0x44
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
 8015652:	2300      	movs	r3, #0
 8015654:	65bb      	str	r3, [r7, #88]	; 0x58
                   static_cast<int32_t>(32767)));
 8015656:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801565a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801565e:	4611      	mov	r1, r2
 8015660:	4618      	mov	r0, r3
 8015662:	f7fc fed9 	bl	8012418 <_ZSt3maxIlERKT_S2_S2_>
 8015666:	4602      	mov	r2, r0
 8015668:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801566c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801566e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015672:	4619      	mov	r1, r3
 8015674:	4610      	mov	r0, r2
 8015676:	f7fc febb 	bl	80123f0 <_ZSt3minIlERKT_S2_S2_>
 801567a:	4603      	mov	r3, r0
          std::min(std::max(result, static_cast<int32_t>(0)),
 801567c:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 801567e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015682:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015686:	fb03 f202 	mul.w	r2, r3, r2
 801568a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801568e:	4413      	add	r3, r2
 8015690:	005a      	lsls	r2, r3, #1
 8015692:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8015696:	441a      	add	r2, r3
 8015698:	b20b      	sxth	r3, r1
 801569a:	8013      	strh	r3, [r2, #0]
    for (int c = 0; c < depth; ++c) {
 801569c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80156a0:	3301      	adds	r3, #1
 80156a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80156a6:	e779      	b.n	801559c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1ec>
  for (int i = 0; i < outer_size; ++i) {
 80156a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80156ac:	3301      	adds	r3, #1
 80156ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80156b2:	e6a1      	b.n	80153f8 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x48>
    }
  }
}
 80156b4:	bf00      	nop
 80156b6:	37a4      	adds	r7, #164	; 0xa4
 80156b8:	46bd      	mov	sp, r7
 80156ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156be:	bf00      	nop
 80156c0:	ffff8000 	.word	0xffff8000

080156c4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

namespace tflite {
namespace {

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 80156c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156c8:	b0bc      	sub	sp, #240	; 0xf0
 80156ca:	af04      	add	r7, sp, #16
 80156cc:	60f8      	str	r0, [r7, #12]
 80156ce:	60b9      	str	r1, [r7, #8]
 80156d0:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteUInt8) {
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	7a1b      	ldrb	r3, [r3, #8]
 80156d6:	2b03      	cmp	r3, #3
 80156d8:	d127      	bne.n	801572a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x66>
    tflite::reference_ops::Softmax(
        op_data, tflite::micro::GetTensorShape(input),
 80156da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80156de:	68f9      	ldr	r1, [r7, #12]
 80156e0:	4618      	mov	r0, r3
 80156e2:	f7ff fb20 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 80156e6:	68f8      	ldr	r0, [r7, #12]
 80156e8:	f7fd fe2c 	bl	8013344 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 80156ec:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<uint8_t>(input),
        tflite::micro::GetTensorShape(output),
 80156ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80156f2:	68b9      	ldr	r1, [r7, #8]
 80156f4:	4618      	mov	r0, r3
 80156f6:	f7ff fb16 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 80156fa:	68b8      	ldr	r0, [r7, #8]
 80156fc:	f7fd fe31 	bl	8013362 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8015700:	4602      	mov	r2, r0
 8015702:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015706:	f107 0144 	add.w	r1, r7, #68	; 0x44
 801570a:	9200      	str	r2, [sp, #0]
 801570c:	4622      	mov	r2, r4
 801570e:	6878      	ldr	r0, [r7, #4]
 8015710:	f000 f956 	bl	80159c0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        tflite::micro::GetTensorShape(output),
 8015714:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015718:	4618      	mov	r0, r3
 801571a:	f7fc feb2 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 801571e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015722:	4618      	mov	r0, r3
 8015724:	f7fc fead 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 8015728:	e0a6      	b.n	8015878 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1b4>
  } else if (input->type == kTfLiteInt8) {
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	7a1b      	ldrb	r3, [r3, #8]
 801572e:	2b09      	cmp	r3, #9
 8015730:	d17b      	bne.n	801582a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x166>
    if (output->type == kTfLiteInt16) {
 8015732:	68bb      	ldr	r3, [r7, #8]
 8015734:	7a1b      	ldrb	r3, [r3, #8]
 8015736:	2b07      	cmp	r3, #7
 8015738:	d127      	bne.n	801578a <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xc6>
          op_data, tflite::micro::GetTensorShape(input),
 801573a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801573e:	68f9      	ldr	r1, [r7, #12]
 8015740:	4618      	mov	r0, r3
 8015742:	f7ff faf0 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8015746:	68f8      	ldr	r0, [r7, #12]
 8015748:	f7fd fd90 	bl	801326c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801574c:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(output),
 801574e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8015752:	68b9      	ldr	r1, [r7, #8]
 8015754:	4618      	mov	r0, r3
 8015756:	f7ff fae6 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 801575a:	68b8      	ldr	r0, [r7, #8]
 801575c:	f7ff fccc 	bl	80150f8 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 8015760:	4602      	mov	r2, r0
 8015762:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8015766:	f107 0174 	add.w	r1, r7, #116	; 0x74
 801576a:	9200      	str	r2, [sp, #0]
 801576c:	4622      	mov	r2, r4
 801576e:	6878      	ldr	r0, [r7, #4]
 8015770:	f000 fa41 	bl	8015bf6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          tflite::micro::GetTensorShape(output),
 8015774:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8015778:	4618      	mov	r0, r3
 801577a:	f7fc fe82 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 801577e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8015782:	4618      	mov	r0, r3
 8015784:	f7fc fe7d 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8015788:	e076      	b.n	8015878 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1b4>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 801578a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801578e:	68f9      	ldr	r1, [r7, #12]
 8015790:	4618      	mov	r0, r3
 8015792:	f7ff fac8 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 8015796:	f107 0314 	add.w	r3, r7, #20
 801579a:	68b9      	ldr	r1, [r7, #8]
 801579c:	4618      	mov	r0, r3
 801579e:	f7ff fac2 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const int trailing_dim = input_shape.DimensionsCount() - 1;
 80157a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80157a6:	4618      	mov	r0, r3
 80157a8:	f7fc fe81 	bl	80124ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80157ac:	4603      	mov	r3, r0
 80157ae:	3b01      	subs	r3, #1
 80157b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80157b4:	f107 0214 	add.w	r2, r7, #20
 80157b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80157bc:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80157c0:	4618      	mov	r0, r3
 80157c2:	f7ff fad2 	bl	8014d6a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80157c6:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80157ca:	f107 0214 	add.w	r2, r7, #20
 80157ce:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80157d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80157d6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80157da:	f7fe f854 	bl	8013886 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80157de:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 80157e2:	68f8      	ldr	r0, [r7, #12]
 80157e4:	f7fd fd42 	bl	801326c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80157e8:	4680      	mov	r8, r0
                     depth, op_data.input_multiplier, op_data.input_left_shift,
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	689e      	ldr	r6, [r3, #8]
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	68dc      	ldr	r4, [r3, #12]
                     op_data.diff_min,
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	699d      	ldr	r5, [r3, #24]
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 80157f6:	68b8      	ldr	r0, [r7, #8]
 80157f8:	f7fd fd47 	bl	801328a <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80157fc:	4603      	mov	r3, r0
 80157fe:	9302      	str	r3, [sp, #8]
 8015800:	9501      	str	r5, [sp, #4]
 8015802:	9400      	str	r4, [sp, #0]
 8015804:	4633      	mov	r3, r6
 8015806:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801580a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 801580e:	4640      	mov	r0, r8
 8015810:	f7f7 fe86 	bl	800d520 <arm_softmax_s8>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 8015814:	f107 0314 	add.w	r3, r7, #20
 8015818:	4618      	mov	r0, r3
 801581a:	f7fc fe32 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 801581e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015822:	4618      	mov	r0, r3
 8015824:	f7fc fe2d 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8015828:	e026      	b.n	8015878 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1b4>
        op_data, tflite::micro::GetTensorShape(input),
 801582a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801582e:	68f9      	ldr	r1, [r7, #12]
 8015830:	4618      	mov	r0, r3
 8015832:	f7ff fa78 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 8015836:	68f8      	ldr	r0, [r7, #12]
 8015838:	f7fe f854 	bl	80138e4 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 801583c:	4604      	mov	r4, r0
        tflite::micro::GetTensorShape(output),
 801583e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8015842:	68b9      	ldr	r1, [r7, #8]
 8015844:	4618      	mov	r0, r3
 8015846:	f7ff fa6e 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 801584a:	68b8      	ldr	r0, [r7, #8]
 801584c:	f7ff fc54 	bl	80150f8 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 8015850:	4602      	mov	r2, r0
 8015852:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8015856:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 801585a:	9200      	str	r2, [sp, #0]
 801585c:	4622      	mov	r2, r4
 801585e:	6878      	ldr	r0, [r7, #4]
 8015860:	f7ff fda6 	bl	80153b0 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 8015864:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8015868:	4618      	mov	r0, r3
 801586a:	f7fc fe0a 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 801586e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8015872:	4618      	mov	r0, r3
 8015874:	f7fc fe05 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8015878:	bf00      	nop
 801587a:	37e0      	adds	r7, #224	; 0xe0
 801587c:	46bd      	mov	sp, r7
 801587e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08015884 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 8015884:	b5b0      	push	{r4, r5, r7, lr}
 8015886:	b0a0      	sub	sp, #128	; 0x80
 8015888:	af02      	add	r7, sp, #8
 801588a:	6078      	str	r0, [r7, #4]
 801588c:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 801588e:	2200      	movs	r2, #0
 8015890:	6839      	ldr	r1, [r7, #0]
 8015892:	6878      	ldr	r0, [r7, #4]
 8015894:	f7fc ffec 	bl	8012870 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8015898:	6778      	str	r0, [r7, #116]	; 0x74
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 801589a:	2200      	movs	r2, #0
 801589c:	6839      	ldr	r1, [r7, #0]
 801589e:	6878      	ldr	r0, [r7, #4]
 80158a0:	f7fc fff6 	bl	8012890 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 80158a4:	6738      	str	r0, [r7, #112]	; 0x70

  TFLITE_DCHECK(node->user_data != nullptr);
 80158a6:	683b      	ldr	r3, [r7, #0]
 80158a8:	691b      	ldr	r3, [r3, #16]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d101      	bne.n	80158b2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e>
 80158ae:	f005 f9b1 	bl	801ac14 <abort>
  const SoftmaxParams data =
      *static_cast<const SoftmaxParams*>(node->user_data);
 80158b2:	683b      	ldr	r3, [r7, #0]
 80158b4:	691b      	ldr	r3, [r3, #16]
  const SoftmaxParams data =
 80158b6:	f107 0408 	add.w	r4, r7, #8
 80158ba:	461d      	mov	r5, r3
 80158bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80158be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80158c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80158c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80158c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80158c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80158c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80158cc:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 80158d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80158d2:	7a1b      	ldrb	r3, [r3, #8]
 80158d4:	3b01      	subs	r3, #1
 80158d6:	2b08      	cmp	r3, #8
 80158d8:	d847      	bhi.n	801596a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe6>
 80158da:	a201      	add	r2, pc, #4	; (adr r2, 80158e0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>)
 80158dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158e0:	08015905 	.word	0x08015905
 80158e4:	0801596b 	.word	0x0801596b
 80158e8:	08015959 	.word	0x08015959
 80158ec:	0801596b 	.word	0x0801596b
 80158f0:	0801596b 	.word	0x0801596b
 80158f4:	0801596b 	.word	0x0801596b
 80158f8:	08015959 	.word	0x08015959
 80158fc:	0801596b 	.word	0x0801596b
 8015900:	08015959 	.word	0x08015959
    case kTfLiteFloat32: {
      tflite::reference_ops::Softmax(
          data, tflite::micro::GetTensorShape(input),
 8015904:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015908:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801590a:	4618      	mov	r0, r3
 801590c:	f7ff fa0b 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8015910:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8015912:	f7fd fc8b 	bl	801322c <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8015916:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(output),
 8015918:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801591c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801591e:	4618      	mov	r0, r3
 8015920:	f7ff fa01 	bl	8014d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8015924:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8015926:	f7fd fc90 	bl	801324a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 801592a:	4602      	mov	r2, r0
 801592c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015930:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8015934:	f107 0008 	add.w	r0, r7, #8
 8015938:	9200      	str	r2, [sp, #0]
 801593a:	4622      	mov	r2, r4
 801593c:	f7ff fc3c 	bl	80151b8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
          tflite::micro::GetTensorShape(output),
 8015940:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015944:	4618      	mov	r0, r3
 8015946:	f7fc fd9c 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
          data, tflite::micro::GetTensorShape(input),
 801594a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801594e:	4618      	mov	r0, r3
 8015950:	f7fc fd97 	bl	8012482 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      return kTfLiteOk;
 8015954:	2300      	movs	r3, #0
 8015956:	e016      	b.n	8015986 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x102>
    }
    case kTfLiteInt8:
    case kTfLiteUInt8:
    case kTfLiteInt16: {
      SoftmaxQuantized(input, output, data);
 8015958:	f107 0308 	add.w	r3, r7, #8
 801595c:	461a      	mov	r2, r3
 801595e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8015960:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8015962:	f7ff feaf 	bl	80156c4 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 8015966:	2300      	movs	r3, #0
 8015968:	e00d      	b.n	8015986 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x102>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	695c      	ldr	r4, [r3, #20]
 801596e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015970:	7a1b      	ldrb	r3, [r3, #8]
 8015972:	4618      	mov	r0, r3
 8015974:	f7fc f812 	bl	801199c <TfLiteTypeGetName>
 8015978:	4602      	mov	r2, r0
 801597a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801597c:	7a1b      	ldrb	r3, [r3, #8]
 801597e:	4904      	ldr	r1, [pc, #16]	; (8015990 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10c>)
 8015980:	6878      	ldr	r0, [r7, #4]
 8015982:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8015984:	2301      	movs	r3, #1
  }
}
 8015986:	4618      	mov	r0, r3
 8015988:	3778      	adds	r7, #120	; 0x78
 801598a:	46bd      	mov	sp, r7
 801598c:	bdb0      	pop	{r4, r5, r7, pc}
 801598e:	bf00      	nop
 8015990:	0801d64c 	.word	0x0801d64c

08015994 <_ZN6tflite16Register_SOFTMAXEv>:

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 8015994:	b4b0      	push	{r4, r5, r7}
 8015996:	b083      	sub	sp, #12
 8015998:	af00      	add	r7, sp, #0
 801599a:	6078      	str	r0, [r7, #4]
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	4a07      	ldr	r2, [pc, #28]	; (80159bc <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 80159a0:	461c      	mov	r4, r3
 80159a2:	4615      	mov	r5, r2
 80159a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80159a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80159a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80159ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80159b0:	6878      	ldr	r0, [r7, #4]
 80159b2:	370c      	adds	r7, #12
 80159b4:	46bd      	mov	sp, r7
 80159b6:	bcb0      	pop	{r4, r5, r7}
 80159b8:	4770      	bx	lr
 80159ba:	bf00      	nop
 80159bc:	0801d668 	.word	0x0801d668

080159c0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 80159c0:	b590      	push	{r4, r7, lr}
 80159c2:	b09f      	sub	sp, #124	; 0x7c
 80159c4:	af00      	add	r7, sp, #0
 80159c6:	60f8      	str	r0, [r7, #12]
 80159c8:	60b9      	str	r1, [r7, #8]
 80159ca:	607a      	str	r2, [r7, #4]
 80159cc:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	689b      	ldr	r3, [r3, #8]
 80159d2:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	68db      	ldr	r3, [r3, #12]
 80159d8:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	699b      	ldr	r3, [r3, #24]
 80159de:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80159e0:	68b8      	ldr	r0, [r7, #8]
 80159e2:	f7fc fd64 	bl	80124ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80159e6:	4603      	mov	r3, r0
 80159e8:	3b01      	subs	r3, #1
 80159ea:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80159ec:	683a      	ldr	r2, [r7, #0]
 80159ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80159f0:	68b8      	ldr	r0, [r7, #8]
 80159f2:	f7ff f9ba 	bl	8014d6a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80159f6:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80159f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80159fa:	683a      	ldr	r2, [r7, #0]
 80159fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80159fe:	68b8      	ldr	r0, [r7, #8]
 8015a00:	f7fd ff41 	bl	8013886 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8015a04:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 8015a06:	2300      	movs	r3, #0
 8015a08:	677b      	str	r3, [r7, #116]	; 0x74
 8015a0a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a0e:	429a      	cmp	r2, r3
 8015a10:	f280 80ed 	bge.w	8015bee <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 8015a14:	2300      	movs	r3, #0
 8015a16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	673b      	str	r3, [r7, #112]	; 0x70
 8015a1e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015a20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a22:	429a      	cmp	r2, r3
 8015a24:	da16      	bge.n	8015a54 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8015a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015a28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015a2a:	fb03 f202 	mul.w	r2, r3, r2
 8015a2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015a30:	4413      	add	r3, r2
 8015a32:	461a      	mov	r2, r3
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	441a      	add	r2, r3
 8015a38:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8015a3c:	4611      	mov	r1, r2
 8015a3e:	4618      	mov	r0, r3
 8015a40:	f7ff fb46 	bl	80150d0 <_ZSt3maxIhERKT_S2_S2_>
 8015a44:	4603      	mov	r3, r0
 8015a46:	781b      	ldrb	r3, [r3, #0]
 8015a48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8015a4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015a4e:	3301      	adds	r3, #1
 8015a50:	673b      	str	r3, [r7, #112]	; 0x70
 8015a52:	e7e4      	b.n	8015a1e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 8015a54:	f000 f9ed 	bl	8015e32 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 8015a58:	4603      	mov	r3, r0
 8015a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015a60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a64:	429a      	cmp	r2, r3
 8015a66:	da2f      	bge.n	8015ac8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x108>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8015a68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015a6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015a6c:	fb03 f202 	mul.w	r2, r3, r2
 8015a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015a72:	4413      	add	r3, r2
 8015a74:	461a      	mov	r2, r3
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	4413      	add	r3, r2
 8015a7a:	781b      	ldrb	r3, [r3, #0]
 8015a7c:	461a      	mov	r2, r3
 8015a7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 8015a82:	1ad3      	subs	r3, r2, r3
 8015a84:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 8015a86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015a88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015a8a:	429a      	cmp	r2, r3
 8015a8c:	db18      	blt.n	8015ac0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x100>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8015a8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015a90:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015a92:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8015a94:	f7fd ff87 	bl	80139a6 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8015a98:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8015a9a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8015a9c:	f000 f9d1 	bl	8015e42 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8015aa0:	4603      	mov	r3, r0
 8015aa2:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 8015aa4:	69f8      	ldr	r0, [r7, #28]
 8015aa6:	f000 f9fb 	bl	8015ea0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8015aaa:	4603      	mov	r3, r0
 8015aac:	4618      	mov	r0, r3
 8015aae:	f000 fb3f 	bl	8016130 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8015ab2:	4603      	mov	r3, r0
 8015ab4:	4619      	mov	r1, r3
 8015ab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ab8:	f000 f9d4 	bl	8015e64 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015abc:	4603      	mov	r3, r0
 8015abe:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8015ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015ac2:	3301      	adds	r3, #1
 8015ac4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015ac6:	e7cb      	b.n	8015a60 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 8015ac8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015acc:	4618      	mov	r0, r3
 8015ace:	f000 fb49 	bl	8016164 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8015ad2:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015ada:	210c      	movs	r1, #12
 8015adc:	4618      	mov	r0, r3
 8015ade:	f7fd ff75 	bl	80139cc <_ZN6tflite13GetReciprocalEliPi>
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	4618      	mov	r0, r3
 8015ae6:	f7fd ffae 	bl	8013a46 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8015aea:	4603      	mov	r3, r0
 8015aec:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 8015aee:	2300      	movs	r3, #0
 8015af0:	66bb      	str	r3, [r7, #104]	; 0x68
 8015af2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015af4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015af6:	429a      	cmp	r2, r3
 8015af8:	da75      	bge.n	8015be6 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8015afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015afc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015afe:	fb03 f202 	mul.w	r2, r3, r2
 8015b02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015b04:	4413      	add	r3, r2
 8015b06:	461a      	mov	r2, r3
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	4413      	add	r3, r2
 8015b0c:	781b      	ldrb	r3, [r3, #0]
 8015b0e:	461a      	mov	r2, r3
 8015b10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 8015b14:	1ad3      	subs	r3, r2, r3
 8015b16:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 8015b18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015b1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015b1c:	429a      	cmp	r2, r3
 8015b1e:	db50      	blt.n	8015bc2 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8015b20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015b22:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015b24:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015b26:	f7fd ff3e 	bl	80139a6 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8015b2a:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8015b2c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8015b2e:	f000 f988 	bl	8015e42 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8015b32:	4603      	mov	r3, r0
 8015b34:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 8015b36:	69b8      	ldr	r0, [r7, #24]
 8015b38:	f000 f9b2 	bl	8015ea0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8015b3c:	4603      	mov	r3, r0
 8015b3e:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 8015b40:	6979      	ldr	r1, [r7, #20]
 8015b42:	6a38      	ldr	r0, [r7, #32]
 8015b44:	f7ff f9fc 	bl	8014f40 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015b48:	4603      	mov	r3, r0
 8015b4a:	633b      	str	r3, [r7, #48]	; 0x30
 8015b4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015b50:	4618      	mov	r0, r3
 8015b52:	f7fd ffe9 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015b56:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8015b58:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 8015b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b5c:	3217      	adds	r2, #23
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8015b5e:	4611      	mov	r1, r2
 8015b60:	4618      	mov	r0, r3
 8015b62:	f7fd f9ab 	bl	8012ebc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8015b66:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 8015b68:	f7fc f980 	bl	8011e6c <_ZNSt14numeric_limitsIhE3minEv>
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	461a      	mov	r2, r3
            unsat_output +
 8015b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b72:	4413      	add	r3, r2
        const int32_t shifted_output =
 8015b74:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 8015b76:	f7fc f981 	bl	8011e7c <_ZNSt14numeric_limitsIhE3maxEv>
 8015b7a:	4603      	mov	r3, r0
 8015b7c:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 8015b7e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8015b82:	f107 0310 	add.w	r3, r7, #16
 8015b86:	4611      	mov	r1, r2
 8015b88:	4618      	mov	r0, r3
 8015b8a:	f7fc fc31 	bl	80123f0 <_ZSt3minIlERKT_S2_S2_>
 8015b8e:	4604      	mov	r4, r0
 8015b90:	f7fc f96c 	bl	8011e6c <_ZNSt14numeric_limitsIhE3minEv>
 8015b94:	4603      	mov	r3, r0
 8015b96:	63bb      	str	r3, [r7, #56]	; 0x38
 8015b98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015b9c:	4619      	mov	r1, r3
 8015b9e:	4620      	mov	r0, r4
 8015ba0:	f7fc fc3a 	bl	8012418 <_ZSt3maxIlERKT_S2_S2_>
 8015ba4:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8015ba6:	6819      	ldr	r1, [r3, #0]
 8015ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015baa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015bac:	fb03 f202 	mul.w	r2, r3, r2
 8015bb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015bb2:	4413      	add	r3, r2
 8015bb4:	461a      	mov	r2, r3
 8015bb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015bba:	4413      	add	r3, r2
 8015bbc:	b2ca      	uxtb	r2, r1
 8015bbe:	701a      	strb	r2, [r3, #0]
 8015bc0:	e00d      	b.n	8015bde <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21e>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 8015bc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015bc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015bc6:	fb03 f202 	mul.w	r2, r3, r2
 8015bca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015bcc:	4413      	add	r3, r2
 8015bce:	461a      	mov	r2, r3
 8015bd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015bd4:	189c      	adds	r4, r3, r2
 8015bd6:	f7fc f949 	bl	8011e6c <_ZNSt14numeric_limitsIhE3minEv>
 8015bda:	4603      	mov	r3, r0
 8015bdc:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 8015bde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015be0:	3301      	adds	r3, #1
 8015be2:	66bb      	str	r3, [r7, #104]	; 0x68
 8015be4:	e785      	b.n	8015af2 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
  for (int i = 0; i < outer_size; ++i) {
 8015be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015be8:	3301      	adds	r3, #1
 8015bea:	677b      	str	r3, [r7, #116]	; 0x74
 8015bec:	e70d      	b.n	8015a0a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 8015bee:	bf00      	nop
 8015bf0:	377c      	adds	r7, #124	; 0x7c
 8015bf2:	46bd      	mov	sp, r7
 8015bf4:	bd90      	pop	{r4, r7, pc}

08015bf6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 8015bf6:	b590      	push	{r4, r7, lr}
 8015bf8:	b09f      	sub	sp, #124	; 0x7c
 8015bfa:	af00      	add	r7, sp, #0
 8015bfc:	60f8      	str	r0, [r7, #12]
 8015bfe:	60b9      	str	r1, [r7, #8]
 8015c00:	607a      	str	r2, [r7, #4]
 8015c02:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	689b      	ldr	r3, [r3, #8]
 8015c08:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	68db      	ldr	r3, [r3, #12]
 8015c0e:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	699b      	ldr	r3, [r3, #24]
 8015c14:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8015c16:	68b8      	ldr	r0, [r7, #8]
 8015c18:	f7fc fc49 	bl	80124ae <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015c1c:	4603      	mov	r3, r0
 8015c1e:	3b01      	subs	r3, #1
 8015c20:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8015c22:	683a      	ldr	r2, [r7, #0]
 8015c24:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015c26:	68b8      	ldr	r0, [r7, #8]
 8015c28:	f7ff f89f 	bl	8014d6a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8015c2c:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8015c2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015c30:	683a      	ldr	r2, [r7, #0]
 8015c32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015c34:	68b8      	ldr	r0, [r7, #8]
 8015c36:	f7fd fe26 	bl	8013886 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8015c3a:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 8015c3c:	2300      	movs	r3, #0
 8015c3e:	677b      	str	r3, [r7, #116]	; 0x74
 8015c40:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015c44:	429a      	cmp	r2, r3
 8015c46:	f280 80f0 	bge.w	8015e2a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 8015c4a:	2380      	movs	r3, #128	; 0x80
 8015c4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8015c50:	2300      	movs	r3, #0
 8015c52:	673b      	str	r3, [r7, #112]	; 0x70
 8015c54:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c58:	429a      	cmp	r2, r3
 8015c5a:	da17      	bge.n	8015c8c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8015c5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015c5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015c60:	fb03 f202 	mul.w	r2, r3, r2
 8015c64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015c66:	4413      	add	r3, r2
 8015c68:	461a      	mov	r2, r3
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	441a      	add	r2, r3
 8015c6e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8015c72:	4611      	mov	r1, r2
 8015c74:	4618      	mov	r0, r3
 8015c76:	f000 fa80 	bl	801617a <_ZSt3maxIaERKT_S2_S2_>
 8015c7a:	4603      	mov	r3, r0
 8015c7c:	f993 3000 	ldrsb.w	r3, [r3]
 8015c80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8015c84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015c86:	3301      	adds	r3, #1
 8015c88:	673b      	str	r3, [r7, #112]	; 0x70
 8015c8a:	e7e3      	b.n	8015c54 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 8015c8c:	f000 f8d1 	bl	8015e32 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 8015c90:	4603      	mov	r3, r0
 8015c92:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8015c94:	2300      	movs	r3, #0
 8015c96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015c98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c9c:	429a      	cmp	r2, r3
 8015c9e:	da30      	bge.n	8015d02 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8015ca0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015ca2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015ca4:	fb03 f202 	mul.w	r2, r3, r2
 8015ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015caa:	4413      	add	r3, r2
 8015cac:	461a      	mov	r2, r3
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	4413      	add	r3, r2
 8015cb2:	f993 3000 	ldrsb.w	r3, [r3]
 8015cb6:	461a      	mov	r2, r3
 8015cb8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 8015cbc:	1ad3      	subs	r3, r2, r3
 8015cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 8015cc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015cc4:	429a      	cmp	r2, r3
 8015cc6:	db18      	blt.n	8015cfa <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8015cc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015cca:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015ccc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8015cce:	f7fd fe6a 	bl	80139a6 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8015cd2:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8015cd4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8015cd6:	f000 f8b4 	bl	8015e42 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8015cda:	4603      	mov	r3, r0
 8015cdc:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 8015cde:	69f8      	ldr	r0, [r7, #28]
 8015ce0:	f000 f8de 	bl	8015ea0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8015ce4:	4603      	mov	r3, r0
 8015ce6:	4618      	mov	r0, r3
 8015ce8:	f000 fa22 	bl	8016130 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8015cec:	4603      	mov	r3, r0
 8015cee:	4619      	mov	r1, r3
 8015cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015cf2:	f000 f8b7 	bl	8015e64 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015cf6:	4603      	mov	r3, r0
 8015cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8015cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015cfc:	3301      	adds	r3, #1
 8015cfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015d00:	e7ca      	b.n	8015c98 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 8015d02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015d06:	4618      	mov	r0, r3
 8015d08:	f000 fa2c 	bl	8016164 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8015d0c:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 8015d0e:	681b      	ldr	r3, [r3, #0]
 8015d10:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015d14:	210c      	movs	r1, #12
 8015d16:	4618      	mov	r0, r3
 8015d18:	f7fd fe58 	bl	80139cc <_ZN6tflite13GetReciprocalEliPi>
 8015d1c:	4603      	mov	r3, r0
 8015d1e:	4618      	mov	r0, r3
 8015d20:	f7fd fe91 	bl	8013a46 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8015d24:	4603      	mov	r3, r0
 8015d26:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 8015d28:	2300      	movs	r3, #0
 8015d2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8015d2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d30:	429a      	cmp	r2, r3
 8015d32:	da76      	bge.n	8015e22 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8015d34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015d36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015d38:	fb03 f202 	mul.w	r2, r3, r2
 8015d3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015d3e:	4413      	add	r3, r2
 8015d40:	461a      	mov	r2, r3
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	4413      	add	r3, r2
 8015d46:	f993 3000 	ldrsb.w	r3, [r3]
 8015d4a:	461a      	mov	r2, r3
 8015d4c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 8015d50:	1ad3      	subs	r3, r2, r3
 8015d52:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 8015d54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015d56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015d58:	429a      	cmp	r2, r3
 8015d5a:	db50      	blt.n	8015dfe <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8015d5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015d5e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015d60:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015d62:	f7fd fe20 	bl	80139a6 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8015d66:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8015d68:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8015d6a:	f000 f86a 	bl	8015e42 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8015d6e:	4603      	mov	r3, r0
 8015d70:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 8015d72:	69b8      	ldr	r0, [r7, #24]
 8015d74:	f000 f894 	bl	8015ea0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8015d78:	4603      	mov	r3, r0
 8015d7a:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 8015d7c:	6979      	ldr	r1, [r7, #20]
 8015d7e:	6a38      	ldr	r0, [r7, #32]
 8015d80:	f7ff f8de 	bl	8014f40 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015d84:	4603      	mov	r3, r0
 8015d86:	633b      	str	r3, [r7, #48]	; 0x30
 8015d88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	f7fd fecb 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015d92:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8015d94:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 8015d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d98:	320f      	adds	r2, #15
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8015d9a:	4611      	mov	r1, r2
 8015d9c:	4618      	mov	r0, r3
 8015d9e:	f7fd f88d 	bl	8012ebc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8015da2:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 8015da4:	f7fc f872 	bl	8011e8c <_ZNSt14numeric_limitsIsE3minEv>
 8015da8:	4603      	mov	r3, r0
 8015daa:	461a      	mov	r2, r3
            unsat_output +
 8015dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015dae:	4413      	add	r3, r2
        const int32_t shifted_output =
 8015db0:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 8015db2:	f7fc f875 	bl	8011ea0 <_ZNSt14numeric_limitsIsE3maxEv>
 8015db6:	4603      	mov	r3, r0
 8015db8:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 8015dba:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8015dbe:	f107 0310 	add.w	r3, r7, #16
 8015dc2:	4611      	mov	r1, r2
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	f7fc fb13 	bl	80123f0 <_ZSt3minIlERKT_S2_S2_>
 8015dca:	4604      	mov	r4, r0
 8015dcc:	f7fc f85e 	bl	8011e8c <_ZNSt14numeric_limitsIsE3minEv>
 8015dd0:	4603      	mov	r3, r0
 8015dd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8015dd4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015dd8:	4619      	mov	r1, r3
 8015dda:	4620      	mov	r0, r4
 8015ddc:	f7fc fb1c 	bl	8012418 <_ZSt3maxIlERKT_S2_S2_>
 8015de0:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8015de2:	6819      	ldr	r1, [r3, #0]
 8015de4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015de6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015de8:	fb03 f202 	mul.w	r2, r3, r2
 8015dec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015dee:	4413      	add	r3, r2
 8015df0:	005b      	lsls	r3, r3, #1
 8015df2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015df6:	4413      	add	r3, r2
 8015df8:	b20a      	sxth	r2, r1
 8015dfa:	801a      	strh	r2, [r3, #0]
 8015dfc:	e00d      	b.n	8015e1a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 8015dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015e00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015e02:	fb03 f202 	mul.w	r2, r3, r2
 8015e06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015e08:	4413      	add	r3, r2
 8015e0a:	005b      	lsls	r3, r3, #1
 8015e0c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015e10:	18d4      	adds	r4, r2, r3
 8015e12:	f7fc f83b 	bl	8011e8c <_ZNSt14numeric_limitsIsE3minEv>
 8015e16:	4603      	mov	r3, r0
 8015e18:	8023      	strh	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 8015e1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015e1c:	3301      	adds	r3, #1
 8015e1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8015e20:	e784      	b.n	8015d2c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 8015e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015e24:	3301      	adds	r3, #1
 8015e26:	677b      	str	r3, [r7, #116]	; 0x74
 8015e28:	e70a      	b.n	8015c40 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 8015e2a:	bf00      	nop
 8015e2c:	377c      	adds	r7, #124	; 0x7c
 8015e2e:	46bd      	mov	sp, r7
 8015e30:	bd90      	pop	{r4, r7, pc}

08015e32 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 8015e32:	b580      	push	{r7, lr}
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	2000      	movs	r0, #0
 8015e38:	f000 f9b5 	bl	80161a6 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 8015e3c:	4603      	mov	r3, r0
 8015e3e:	4618      	mov	r0, r3
 8015e40:	bd80      	pop	{r7, pc}

08015e42 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8015e42:	b580      	push	{r7, lr}
 8015e44:	b084      	sub	sp, #16
 8015e46:	af00      	add	r7, sp, #0
 8015e48:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8015e4a:	f107 030c 	add.w	r3, r7, #12
 8015e4e:	4618      	mov	r0, r3
 8015e50:	f000 f9bd 	bl	80161ce <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015e54:	4602      	mov	r2, r0
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	6013      	str	r3, [r2, #0]
    return retval;
 8015e5a:	68fb      	ldr	r3, [r7, #12]
  }
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	3710      	adds	r7, #16
 8015e60:	46bd      	mov	sp, r7
 8015e62:	bd80      	pop	{r7, pc}

08015e64 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8015e64:	b590      	push	{r4, r7, lr}
 8015e66:	b083      	sub	sp, #12
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	6078      	str	r0, [r7, #4]
 8015e6c:	6039      	str	r1, [r7, #0]
 8015e6e:	1d3b      	adds	r3, r7, #4
 8015e70:	4618      	mov	r0, r3
 8015e72:	f000 f977 	bl	8016164 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8015e76:	4603      	mov	r3, r0
 8015e78:	681c      	ldr	r4, [r3, #0]
 8015e7a:	463b      	mov	r3, r7
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	f000 f971 	bl	8016164 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8015e82:	4603      	mov	r3, r0
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	4619      	mov	r1, r3
 8015e88:	4620      	mov	r0, r4
 8015e8a:	f7fd fc17 	bl	80136bc <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8015e8e:	4603      	mov	r3, r0
 8015e90:	4618      	mov	r0, r3
 8015e92:	f000 f9a7 	bl	80161e4 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 8015e96:	4603      	mov	r3, r0
 8015e98:	4618      	mov	r0, r3
 8015e9a:	370c      	adds	r7, #12
 8015e9c:	46bd      	mov	sp, r7
 8015e9e:	bd90      	pop	{r4, r7, pc}

08015ea0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 8015ea0:	b590      	push	{r4, r7, lr}
 8015ea2:	b091      	sub	sp, #68	; 0x44
 8015ea4:	af00      	add	r7, sp, #0
 8015ea6:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 8015ea8:	f000 f9ad 	bl	8016206 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 8015eac:	4603      	mov	r3, r0
 8015eae:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 8015eb0:	2001      	movs	r0, #1
 8015eb2:	f000 f9b1 	bl	8016218 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8015eb6:	4603      	mov	r3, r0
 8015eb8:	4619      	mov	r1, r3
 8015eba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015ebc:	f000 f9c0 	bl	8016240 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015ec0:	4603      	mov	r3, r0
 8015ec2:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 8015ec4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015ec6:	6878      	ldr	r0, [r7, #4]
 8015ec8:	f000 f9d8 	bl	801627c <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015ecc:	4603      	mov	r3, r0
 8015ece:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	f000 f9b5 	bl	8016240 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015ed6:	4603      	mov	r3, r0
 8015ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 8015eda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015edc:	f000 f9ec 	bl	80162b8 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8015ee0:	4603      	mov	r3, r0
 8015ee2:	4618      	mov	r0, r3
 8015ee4:	f7fe ffca 	bl	8014e7c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 8015ee8:	4603      	mov	r3, r0
 8015eea:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 8015eec:	6879      	ldr	r1, [r7, #4]
 8015eee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015ef0:	f000 f9a6 	bl	8016240 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015ef4:	4603      	mov	r3, r0
 8015ef6:	63bb      	str	r3, [r7, #56]	; 0x38
 8015ef8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015efc:	4618      	mov	r0, r3
 8015efe:	f000 f966 	bl	80161ce <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015f02:	4603      	mov	r3, r0
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 8015f08:	4883      	ldr	r0, [pc, #524]	; (8016118 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 8015f0a:	f7fe ff5d 	bl	8014dc8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015f0e:	4603      	mov	r3, r0
 8015f10:	4618      	mov	r0, r3
 8015f12:	f7fd fe14 	bl	8013b3e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015f16:	4603      	mov	r3, r0
 8015f18:	627b      	str	r3, [r7, #36]	; 0x24
 8015f1a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8015f1e:	f7fd fb91 	bl	8013644 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015f22:	4603      	mov	r3, r0
 8015f24:	4619      	mov	r1, r3
 8015f26:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015f28:	f7fd fb97 	bl	801365a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015f2c:	4603      	mov	r3, r0
 8015f2e:	4618      	mov	r0, r3
 8015f30:	f7fd fbe6 	bl	8013700 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015f34:	4604      	mov	r4, r0
 8015f36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f3a:	f7ff f801 	bl	8014f40 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015f3e:	4603      	mov	r3, r0
 8015f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015f42:	4619      	mov	r1, r3
 8015f44:	4620      	mov	r0, r4
 8015f46:	f7fe ff65 	bl	8014e14 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015f4a:	4603      	mov	r3, r0
 8015f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 8015f4e:	4873      	ldr	r0, [pc, #460]	; (801611c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 8015f50:	f7fe ff3a 	bl	8014dc8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015f54:	4603      	mov	r3, r0
 8015f56:	4618      	mov	r0, r3
 8015f58:	f7fd fdf1 	bl	8013b3e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015f5c:	4603      	mov	r3, r0
 8015f5e:	623b      	str	r3, [r7, #32]
 8015f60:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8015f64:	f7fd fb6e 	bl	8013644 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015f68:	4603      	mov	r3, r0
 8015f6a:	4619      	mov	r1, r3
 8015f6c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015f6e:	f7fd fb74 	bl	801365a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015f72:	4603      	mov	r3, r0
 8015f74:	4618      	mov	r0, r3
 8015f76:	f7fd fbc3 	bl	8013700 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015f7a:	4604      	mov	r4, r0
 8015f7c:	6a39      	ldr	r1, [r7, #32]
 8015f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f80:	f7fe ffde 	bl	8014f40 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015f84:	4603      	mov	r3, r0
 8015f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015f88:	4619      	mov	r1, r3
 8015f8a:	4620      	mov	r0, r4
 8015f8c:	f7fe ff42 	bl	8014e14 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015f90:	4603      	mov	r3, r0
 8015f92:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 8015f94:	4862      	ldr	r0, [pc, #392]	; (8016120 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 8015f96:	f7fe ff17 	bl	8014dc8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015f9a:	4603      	mov	r3, r0
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	f7fd fdce 	bl	8013b3e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015fa2:	4603      	mov	r3, r0
 8015fa4:	61fb      	str	r3, [r7, #28]
 8015fa6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8015faa:	f7fd fb4b 	bl	8013644 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015fae:	4603      	mov	r3, r0
 8015fb0:	4619      	mov	r1, r3
 8015fb2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015fb4:	f7fd fb51 	bl	801365a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015fb8:	4603      	mov	r3, r0
 8015fba:	4618      	mov	r0, r3
 8015fbc:	f7fd fba0 	bl	8013700 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015fc0:	4604      	mov	r4, r0
 8015fc2:	69f9      	ldr	r1, [r7, #28]
 8015fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015fc6:	f7fe ffbb 	bl	8014f40 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015fca:	4603      	mov	r3, r0
 8015fcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015fce:	4619      	mov	r1, r3
 8015fd0:	4620      	mov	r0, r4
 8015fd2:	f7fe ff1f 	bl	8014e14 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 8015fda:	4852      	ldr	r0, [pc, #328]	; (8016124 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 8015fdc:	f7fe fef4 	bl	8014dc8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015fe0:	4603      	mov	r3, r0
 8015fe2:	4618      	mov	r0, r3
 8015fe4:	f7fd fdab 	bl	8013b3e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015fe8:	4603      	mov	r3, r0
 8015fea:	61bb      	str	r3, [r7, #24]
 8015fec:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8015ff0:	f7fd fb28 	bl	8013644 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015ff4:	4603      	mov	r3, r0
 8015ff6:	4619      	mov	r1, r3
 8015ff8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015ffa:	f7fd fb2e 	bl	801365a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015ffe:	4603      	mov	r3, r0
 8016000:	4618      	mov	r0, r3
 8016002:	f7fd fb7d 	bl	8013700 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8016006:	4604      	mov	r4, r0
 8016008:	69b9      	ldr	r1, [r7, #24]
 801600a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801600c:	f7fe ff98 	bl	8014f40 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016010:	4603      	mov	r3, r0
 8016012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016014:	4619      	mov	r1, r3
 8016016:	4620      	mov	r0, r4
 8016018:	f7fe fefc 	bl	8014e14 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801601c:	4603      	mov	r3, r0
 801601e:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 8016020:	4841      	ldr	r0, [pc, #260]	; (8016128 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 8016022:	f7fe fed1 	bl	8014dc8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8016026:	4603      	mov	r3, r0
 8016028:	4618      	mov	r0, r3
 801602a:	f7fd fd88 	bl	8013b3e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801602e:	4603      	mov	r3, r0
 8016030:	617b      	str	r3, [r7, #20]
 8016032:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8016036:	f7fd fb05 	bl	8013644 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801603a:	4603      	mov	r3, r0
 801603c:	4619      	mov	r1, r3
 801603e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016040:	f7fd fb0b 	bl	801365a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8016044:	4603      	mov	r3, r0
 8016046:	4618      	mov	r0, r3
 8016048:	f7fd fb5a 	bl	8013700 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801604c:	4604      	mov	r4, r0
 801604e:	6979      	ldr	r1, [r7, #20]
 8016050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016052:	f7fe ff75 	bl	8014f40 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8016056:	4603      	mov	r3, r0
 8016058:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801605a:	4619      	mov	r1, r3
 801605c:	4620      	mov	r0, r4
 801605e:	f7fe fed9 	bl	8014e14 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8016062:	4603      	mov	r3, r0
 8016064:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 8016066:	4831      	ldr	r0, [pc, #196]	; (801612c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 8016068:	f7fe feae 	bl	8014dc8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801606c:	4603      	mov	r3, r0
 801606e:	4618      	mov	r0, r3
 8016070:	f7fd fd65 	bl	8013b3e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8016074:	4603      	mov	r3, r0
 8016076:	613b      	str	r3, [r7, #16]
 8016078:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 801607c:	f7fd fae2 	bl	8013644 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016080:	4603      	mov	r3, r0
 8016082:	4619      	mov	r1, r3
 8016084:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016086:	f7fd fae8 	bl	801365a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801608a:	4603      	mov	r3, r0
 801608c:	4618      	mov	r0, r3
 801608e:	f7fd fb37 	bl	8013700 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8016092:	4604      	mov	r4, r0
 8016094:	6939      	ldr	r1, [r7, #16]
 8016096:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016098:	f7fe ff52 	bl	8014f40 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801609c:	4603      	mov	r3, r0
 801609e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80160a0:	4619      	mov	r1, r3
 80160a2:	4620      	mov	r0, r4
 80160a4:	f7fe feb6 	bl	8014e14 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 80160a8:	4603      	mov	r3, r0
 80160aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 80160ac:	20f2      	movs	r0, #242	; 0xf2
 80160ae:	f7fe fe8b 	bl	8014dc8 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80160b2:	4603      	mov	r3, r0
 80160b4:	4618      	mov	r0, r3
 80160b6:	f7fd fd42 	bl	8013b3e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80160ba:	4603      	mov	r3, r0
 80160bc:	60fb      	str	r3, [r7, #12]
 80160be:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80160c2:	f7fd fabf 	bl	8013644 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80160c6:	4603      	mov	r3, r0
 80160c8:	4619      	mov	r1, r3
 80160ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80160cc:	f7fd fac5 	bl	801365a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80160d0:	4603      	mov	r3, r0
 80160d2:	4618      	mov	r0, r3
 80160d4:	f7fd fb14 	bl	8013700 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 80160d8:	4604      	mov	r4, r0
 80160da:	68f9      	ldr	r1, [r7, #12]
 80160dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80160de:	f7fe ff2f 	bl	8014f40 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80160e2:	4603      	mov	r3, r0
 80160e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80160e6:	4619      	mov	r1, r3
 80160e8:	4620      	mov	r0, r4
 80160ea:	f7fe fe93 	bl	8014e14 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 80160ee:	4603      	mov	r3, r0
 80160f0:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 80160f2:	6878      	ldr	r0, [r7, #4]
 80160f4:	f000 f8fa 	bl	80162ec <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 80160f8:	4604      	mov	r4, r0
 80160fa:	f7fd fd34 	bl	8013b66 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 80160fe:	4603      	mov	r3, r0
 8016100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016102:	4619      	mov	r1, r3
 8016104:	4620      	mov	r0, r4
 8016106:	f7fe fe85 	bl	8014e14 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801610a:	4603      	mov	r3, r0
 801610c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 801610e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8016110:	4618      	mov	r0, r3
 8016112:	3744      	adds	r7, #68	; 0x44
 8016114:	46bd      	mov	sp, r7
 8016116:	bd90      	pop	{r4, r7, pc}
 8016118:	63afbe7b 	.word	0x63afbe7b
 801611c:	4da2cbf2 	.word	0x4da2cbf2
 8016120:	2f16ac6c 	.word	0x2f16ac6c
 8016124:	1152aaa4 	.word	0x1152aaa4
 8016128:	02582ab7 	.word	0x02582ab7
 801612c:	000afe11 	.word	0x000afe11

08016130 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8016130:	b5b0      	push	{r4, r5, r7, lr}
 8016132:	b084      	sub	sp, #16
 8016134:	af00      	add	r7, sp, #0
 8016136:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8016138:	1d3b      	adds	r3, r7, #4
 801613a:	4618      	mov	r0, r3
 801613c:	f7fd fcf4 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8016140:	4603      	mov	r3, r0
 8016142:	681d      	ldr	r5, [r3, #0]
 8016144:	f107 030c 	add.w	r3, r7, #12
 8016148:	4618      	mov	r0, r3
 801614a:	f000 f80b 	bl	8016164 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801614e:	4604      	mov	r4, r0
 8016150:	4628      	mov	r0, r5
 8016152:	f000 f8dd 	bl	8016310 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 8016156:	4603      	mov	r3, r0
 8016158:	6023      	str	r3, [r4, #0]
  return result;
 801615a:	68fb      	ldr	r3, [r7, #12]
}
 801615c:	4618      	mov	r0, r3
 801615e:	3710      	adds	r7, #16
 8016160:	46bd      	mov	sp, r7
 8016162:	bdb0      	pop	{r4, r5, r7, pc}

08016164 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 8016164:	b480      	push	{r7}
 8016166:	b083      	sub	sp, #12
 8016168:	af00      	add	r7, sp, #0
 801616a:	6078      	str	r0, [r7, #4]
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	4618      	mov	r0, r3
 8016170:	370c      	adds	r7, #12
 8016172:	46bd      	mov	sp, r7
 8016174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016178:	4770      	bx	lr

0801617a <_ZSt3maxIaERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 801617a:	b480      	push	{r7}
 801617c:	b083      	sub	sp, #12
 801617e:	af00      	add	r7, sp, #0
 8016180:	6078      	str	r0, [r7, #4]
 8016182:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	f993 2000 	ldrsb.w	r2, [r3]
 801618a:	683b      	ldr	r3, [r7, #0]
 801618c:	f993 3000 	ldrsb.w	r3, [r3]
 8016190:	429a      	cmp	r2, r3
 8016192:	da01      	bge.n	8016198 <_ZSt3maxIaERKT_S2_S2_+0x1e>
	return __b;
 8016194:	683b      	ldr	r3, [r7, #0]
 8016196:	e000      	b.n	801619a <_ZSt3maxIaERKT_S2_S2_+0x20>
      return __a;
 8016198:	687b      	ldr	r3, [r7, #4]
    }
 801619a:	4618      	mov	r0, r3
 801619c:	370c      	adds	r7, #12
 801619e:	46bd      	mov	sp, r7
 80161a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161a4:	4770      	bx	lr

080161a6 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 80161a6:	b590      	push	{r4, r7, lr}
 80161a8:	b085      	sub	sp, #20
 80161aa:	af00      	add	r7, sp, #0
 80161ac:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 80161ae:	f107 030c 	add.w	r3, r7, #12
 80161b2:	4618      	mov	r0, r3
 80161b4:	f7ff ffd6 	bl	8016164 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 80161b8:	4604      	mov	r4, r0
 80161ba:	6878      	ldr	r0, [r7, #4]
 80161bc:	f7fd fa42 	bl	8013644 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80161c0:	4603      	mov	r3, r0
 80161c2:	6023      	str	r3, [r4, #0]
    return retval;
 80161c4:	68fb      	ldr	r3, [r7, #12]
  }
 80161c6:	4618      	mov	r0, r3
 80161c8:	3714      	adds	r7, #20
 80161ca:	46bd      	mov	sp, r7
 80161cc:	bd90      	pop	{r4, r7, pc}

080161ce <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 80161ce:	b480      	push	{r7}
 80161d0:	b083      	sub	sp, #12
 80161d2:	af00      	add	r7, sp, #0
 80161d4:	6078      	str	r0, [r7, #4]
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	4618      	mov	r0, r3
 80161da:	370c      	adds	r7, #12
 80161dc:	46bd      	mov	sp, r7
 80161de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e2:	4770      	bx	lr

080161e4 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 80161e4:	b580      	push	{r7, lr}
 80161e6:	b084      	sub	sp, #16
 80161e8:	af00      	add	r7, sp, #0
 80161ea:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 80161ec:	f107 030c 	add.w	r3, r7, #12
 80161f0:	4618      	mov	r0, r3
 80161f2:	f7ff ffb7 	bl	8016164 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 80161f6:	4602      	mov	r2, r0
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	6013      	str	r3, [r2, #0]
    return retval;
 80161fc:	68fb      	ldr	r3, [r7, #12]
  }
 80161fe:	4618      	mov	r0, r3
 8016200:	3710      	adds	r7, #16
 8016202:	46bd      	mov	sp, r7
 8016204:	bd80      	pop	{r7, pc}

08016206 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 8016206:	b580      	push	{r7, lr}
 8016208:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 801620a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 801620e:	f000 f803 	bl	8016218 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8016212:	4603      	mov	r3, r0
  }
 8016214:	4618      	mov	r0, r3
 8016216:	bd80      	pop	{r7, pc}

08016218 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8016218:	b590      	push	{r4, r7, lr}
 801621a:	b085      	sub	sp, #20
 801621c:	af00      	add	r7, sp, #0
 801621e:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8016220:	f107 030c 	add.w	r3, r7, #12
 8016224:	4618      	mov	r0, r3
 8016226:	f7ff ffd2 	bl	80161ce <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801622a:	4604      	mov	r4, r0
 801622c:	6878      	ldr	r0, [r7, #4]
 801622e:	f7fd fa09 	bl	8013644 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016232:	4603      	mov	r3, r0
 8016234:	6023      	str	r3, [r4, #0]
    return retval;
 8016236:	68fb      	ldr	r3, [r7, #12]
  }
 8016238:	4618      	mov	r0, r3
 801623a:	3714      	adds	r7, #20
 801623c:	46bd      	mov	sp, r7
 801623e:	bd90      	pop	{r4, r7, pc}

08016240 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 8016240:	b590      	push	{r4, r7, lr}
 8016242:	b083      	sub	sp, #12
 8016244:	af00      	add	r7, sp, #0
 8016246:	6078      	str	r0, [r7, #4]
 8016248:	6039      	str	r1, [r7, #0]
 801624a:	1d3b      	adds	r3, r7, #4
 801624c:	4618      	mov	r0, r3
 801624e:	f7ff ffbe 	bl	80161ce <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8016252:	4603      	mov	r3, r0
 8016254:	681c      	ldr	r4, [r3, #0]
 8016256:	463b      	mov	r3, r7
 8016258:	4618      	mov	r0, r3
 801625a:	f7ff ffb8 	bl	80161ce <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801625e:	4603      	mov	r3, r0
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	4619      	mov	r1, r3
 8016264:	4620      	mov	r0, r4
 8016266:	f7fd fd9b 	bl	8013da0 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 801626a:	4603      	mov	r3, r0
 801626c:	4618      	mov	r0, r3
 801626e:	f7ff fde8 	bl	8015e42 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8016272:	4603      	mov	r3, r0
 8016274:	4618      	mov	r0, r3
 8016276:	370c      	adds	r7, #12
 8016278:	46bd      	mov	sp, r7
 801627a:	bd90      	pop	{r4, r7, pc}

0801627c <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 801627c:	b590      	push	{r4, r7, lr}
 801627e:	b083      	sub	sp, #12
 8016280:	af00      	add	r7, sp, #0
 8016282:	6078      	str	r0, [r7, #4]
 8016284:	6039      	str	r1, [r7, #0]
 8016286:	1d3b      	adds	r3, r7, #4
 8016288:	4618      	mov	r0, r3
 801628a:	f7ff ffa0 	bl	80161ce <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801628e:	4603      	mov	r3, r0
 8016290:	681c      	ldr	r4, [r3, #0]
 8016292:	463b      	mov	r3, r7
 8016294:	4618      	mov	r0, r3
 8016296:	f7ff ff9a 	bl	80161ce <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801629a:	4603      	mov	r3, r0
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	4619      	mov	r1, r3
 80162a0:	4620      	mov	r0, r4
 80162a2:	f7fd f9da 	bl	801365a <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80162a6:	4603      	mov	r3, r0
 80162a8:	4618      	mov	r0, r3
 80162aa:	f7ff fdca 	bl	8015e42 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 80162ae:	4603      	mov	r3, r0
 80162b0:	4618      	mov	r0, r3
 80162b2:	370c      	adds	r7, #12
 80162b4:	46bd      	mov	sp, r7
 80162b6:	bd90      	pop	{r4, r7, pc}

080162b8 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 80162b8:	b5b0      	push	{r4, r5, r7, lr}
 80162ba:	b084      	sub	sp, #16
 80162bc:	af00      	add	r7, sp, #0
 80162be:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 80162c0:	1d3b      	adds	r3, r7, #4
 80162c2:	4618      	mov	r0, r3
 80162c4:	f7ff ff83 	bl	80161ce <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80162c8:	4603      	mov	r3, r0
 80162ca:	681d      	ldr	r5, [r3, #0]
 80162cc:	f107 030c 	add.w	r3, r7, #12
 80162d0:	4618      	mov	r0, r3
 80162d2:	f7fd fc29 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80162d6:	4604      	mov	r4, r0
 80162d8:	4628      	mov	r0, r5
 80162da:	f000 f825 	bl	8016328 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 80162de:	4603      	mov	r3, r0
 80162e0:	6023      	str	r3, [r4, #0]
  return result;
 80162e2:	68fb      	ldr	r3, [r7, #12]
}
 80162e4:	4618      	mov	r0, r3
 80162e6:	3710      	adds	r7, #16
 80162e8:	46bd      	mov	sp, r7
 80162ea:	bdb0      	pop	{r4, r5, r7, pc}

080162ec <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 80162ec:	b580      	push	{r7, lr}
 80162ee:	b082      	sub	sp, #8
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	6078      	str	r0, [r7, #4]
 80162f4:	1d3b      	adds	r3, r7, #4
 80162f6:	4618      	mov	r0, r3
 80162f8:	f7ff ff69 	bl	80161ce <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80162fc:	4603      	mov	r3, r0
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	4618      	mov	r0, r3
 8016302:	f7fe fda8 	bl	8014e56 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 8016306:	4603      	mov	r3, r0
 8016308:	4618      	mov	r0, r3
 801630a:	3708      	adds	r7, #8
 801630c:	46bd      	mov	sp, r7
 801630e:	bd80      	pop	{r7, pc}

08016310 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8016310:	b580      	push	{r7, lr}
 8016312:	b082      	sub	sp, #8
 8016314:	af00      	add	r7, sp, #0
 8016316:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8016318:	6878      	ldr	r0, [r7, #4]
 801631a:	f000 f811 	bl	8016340 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 801631e:	4603      	mov	r3, r0
}
 8016320:	4618      	mov	r0, r3
 8016322:	3708      	adds	r7, #8
 8016324:	46bd      	mov	sp, r7
 8016326:	bd80      	pop	{r7, pc}

08016328 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8016328:	b580      	push	{r7, lr}
 801632a:	b082      	sub	sp, #8
 801632c:	af00      	add	r7, sp, #0
 801632e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8016330:	6878      	ldr	r0, [r7, #4]
 8016332:	f000 f813 	bl	801635c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 8016336:	4603      	mov	r3, r0
}
 8016338:	4618      	mov	r0, r3
 801633a:	3708      	adds	r7, #8
 801633c:	46bd      	mov	sp, r7
 801633e:	bd80      	pop	{r7, pc}

08016340 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8016340:	b580      	push	{r7, lr}
 8016342:	b082      	sub	sp, #8
 8016344:	af00      	add	r7, sp, #0
 8016346:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8016348:	210c      	movs	r1, #12
 801634a:	6878      	ldr	r0, [r7, #4]
 801634c:	f7fc fdb6 	bl	8012ebc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8016350:	4603      	mov	r3, r0
  }
 8016352:	4618      	mov	r0, r3
 8016354:	3708      	adds	r7, #8
 8016356:	46bd      	mov	sp, r7
 8016358:	bd80      	pop	{r7, pc}
	...

0801635c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 801635c:	b580      	push	{r7, lr}
 801635e:	b08a      	sub	sp, #40	; 0x28
 8016360:	af00      	add	r7, sp, #0
 8016362:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8016364:	f7fc f925 	bl	80125b2 <_ZNSt14numeric_limitsIlE3minEv>
 8016368:	4603      	mov	r3, r0
 801636a:	4618      	mov	r0, r3
 801636c:	f7fd f96a 	bl	8013644 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016370:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8016372:	f7fb fb8f 	bl	8011a94 <_ZNSt14numeric_limitsIlE3maxEv>
 8016376:	4603      	mov	r3, r0
 8016378:	4618      	mov	r0, r3
 801637a:	f7fd f963 	bl	8013644 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801637e:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8016380:	2320      	movs	r3, #32
 8016382:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8016384:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 8016388:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801638a:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 801638e:	f7fd f959 	bl	8013644 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016392:	4603      	mov	r3, r0
 8016394:	4619      	mov	r1, r3
 8016396:	6878      	ldr	r0, [r7, #4]
 8016398:	f7fd f99e 	bl	80136d8 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801639c:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801639e:	480f      	ldr	r0, [pc, #60]	; (80163dc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 80163a0:	f7fd f950 	bl	8013644 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80163a4:	4603      	mov	r3, r0
 80163a6:	4619      	mov	r1, r3
 80163a8:	6878      	ldr	r0, [r7, #4]
 80163aa:	f7fd f973 	bl	8013694 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80163ae:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 80163b0:	2105      	movs	r1, #5
 80163b2:	6878      	ldr	r0, [r7, #4]
 80163b4:	f7fd fdd8 	bl	8013f68 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 80163b8:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 80163ba:	68fa      	ldr	r2, [r7, #12]
 80163bc:	6a39      	ldr	r1, [r7, #32]
 80163be:	6978      	ldr	r0, [r7, #20]
 80163c0:	f7fd fe16 	bl	8013ff0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80163c4:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 80163c6:	68fa      	ldr	r2, [r7, #12]
 80163c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80163ca:	6938      	ldr	r0, [r7, #16]
 80163cc:	f7fd fe10 	bl	8013ff0 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80163d0:	60f8      	str	r0, [r7, #12]
    return result;
 80163d2:	68fb      	ldr	r3, [r7, #12]
  }
 80163d4:	4618      	mov	r0, r3
 80163d6:	3728      	adds	r7, #40	; 0x28
 80163d8:	46bd      	mov	sp, r7
 80163da:	bd80      	pop	{r7, pc}
 80163dc:	fc000001 	.word	0xfc000001

080163e0 <_ZN6tflite7gen_lutEPFffEffPsi>:
                    const int num) {
 80163e0:	b580      	push	{r7, lr}
 80163e2:	ed2d 8b02 	vpush	{d8}
 80163e6:	b094      	sub	sp, #80	; 0x50
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	6178      	str	r0, [r7, #20]
 80163ec:	ed87 0a04 	vstr	s0, [r7, #16]
 80163f0:	edc7 0a03 	vstr	s1, [r7, #12]
 80163f4:	60b9      	str	r1, [r7, #8]
 80163f6:	607a      	str	r2, [r7, #4]
  float step = (max - min) / (num - 1);
 80163f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80163fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8016400:	ee77 6a67 	vsub.f32	s13, s14, s15
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	3b01      	subs	r3, #1
 8016408:	ee07 3a90 	vmov	s15, r3
 801640c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016414:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float half_step = step / 2.0f;
 8016418:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801641c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016420:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016424:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (int i = 0; i < num - 1; i++) {
 8016428:	2300      	movs	r3, #0
 801642a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	3b01      	subs	r3, #1
 8016430:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016432:	429a      	cmp	r2, r3
 8016434:	f280 80c0 	bge.w	80165b8 <_ZN6tflite7gen_lutEPFffEffPsi+0x1d8>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
 8016438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801643a:	ee07 3a90 	vmov	s15, r3
 801643e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016442:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8016446:	ee27 7a27 	vmul.f32	s14, s14, s15
 801644a:	edd7 7a04 	vldr	s15, [r7, #16]
 801644e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016452:	697b      	ldr	r3, [r7, #20]
 8016454:	eeb0 0a67 	vmov.f32	s0, s15
 8016458:	4798      	blx	r3
 801645a:	eef0 7a40 	vmov.f32	s15, s0
 801645e:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8016630 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8016462:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016466:	eeb0 0a67 	vmov.f32	s0, s15
 801646a:	f7fb fcde 	bl	8011e2a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801646e:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 8016472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016474:	3301      	adds	r3, #1
 8016476:	ee07 3a90 	vmov	s15, r3
 801647a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801647e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8016482:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016486:	edd7 7a04 	vldr	s15, [r7, #16]
 801648a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801648e:	697b      	ldr	r3, [r7, #20]
 8016490:	eeb0 0a67 	vmov.f32	s0, s15
 8016494:	4798      	blx	r3
 8016496:	eef0 7a40 	vmov.f32	s15, s0
 801649a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8016630 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 801649e:	ee27 8a87 	vmul.f32	s16, s15, s14
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
 80164a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80164a4:	ee07 3a90 	vmov	s15, r3
 80164a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80164ac:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80164b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80164b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80164b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80164bc:	697b      	ldr	r3, [r7, #20]
 80164be:	eeb0 0a67 	vmov.f32	s0, s15
 80164c2:	4798      	blx	r3
 80164c4:	eef0 7a40 	vmov.f32	s15, s0
 80164c8:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8016630 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 80164cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80164d0:	eeb0 0a67 	vmov.f32	s0, s15
 80164d4:	f7fb fca9 	bl	8011e2a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 80164d8:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 80164dc:	ee78 7a27 	vadd.f32	s15, s16, s15
 80164e0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80164e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80164e8:	eeb0 0a47 	vmov.f32	s0, s14
 80164ec:	f7fb fc9d 	bl	8011e2a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 80164f0:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
 80164f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80164f6:	ee07 3a90 	vmov	s15, r3
 80164fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80164fe:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8016502:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016506:	edd7 7a04 	vldr	s15, [r7, #16]
 801650a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801650e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8016512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016516:	697b      	ldr	r3, [r7, #20]
 8016518:	eeb0 0a67 	vmov.f32	s0, s15
 801651c:	4798      	blx	r3
 801651e:	eef0 7a40 	vmov.f32	s15, s0
 8016522:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8016630 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8016526:	ee67 7a87 	vmul.f32	s15, s15, s14
 801652a:	eeb0 0a67 	vmov.f32	s0, s15
 801652e:	f7fb fc7c 	bl	8011e2a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8016532:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    float midpoint_err = midpoint_interp_val - midpoint_val;
 8016536:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801653a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801653e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016542:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float bias = TfLiteRound(midpoint_err / 2.0f);
 8016546:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801654a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801654e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8016552:	eeb0 0a47 	vmov.f32	s0, s14
 8016556:	f7fb fc68 	bl	8011e2a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801655a:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 801655e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8016562:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8016566:	ee77 7a67 	vsub.f32	s15, s14, s15
 801656a:	edc7 7a06 	vstr	s15, [r7, #24]
 801656e:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 8016572:	61fb      	str	r3, [r7, #28]
                               32767.0f);
 8016574:	f107 021c 	add.w	r2, r7, #28
 8016578:	f107 0318 	add.w	r3, r7, #24
 801657c:	4611      	mov	r1, r2
 801657e:	4618      	mov	r0, r3
 8016580:	f7fb fc26 	bl	8011dd0 <_ZSt3maxIfERKT_S2_S2_>
 8016584:	4602      	mov	r2, r0
 8016586:	4b2b      	ldr	r3, [pc, #172]	; (8016634 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 8016588:	623b      	str	r3, [r7, #32]
 801658a:	f107 0320 	add.w	r3, r7, #32
 801658e:	4619      	mov	r1, r3
 8016590:	4610      	mov	r0, r2
 8016592:	f7fb fc04 	bl	8011d9e <_ZSt3minIfERKT_S2_S2_>
 8016596:	4603      	mov	r3, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 8016598:	edd3 7a00 	vldr	s15, [r3]
 801659c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801659e:	005b      	lsls	r3, r3, #1
 80165a0:	68ba      	ldr	r2, [r7, #8]
 80165a2:	4413      	add	r3, r2
 80165a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80165a8:	ee17 2a90 	vmov	r2, s15
 80165ac:	b212      	sxth	r2, r2
 80165ae:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < num - 1; i++) {
 80165b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80165b2:	3301      	adds	r3, #1
 80165b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80165b6:	e739      	b.n	801642c <_ZN6tflite7gen_lutEPFffEffPsi+0x4c>
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
 80165b8:	697b      	ldr	r3, [r7, #20]
 80165ba:	ed97 0a03 	vldr	s0, [r7, #12]
 80165be:	4798      	blx	r3
 80165c0:	eef0 7a40 	vmov.f32	s15, s0
 80165c4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8016630 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 80165c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80165cc:	eeb0 0a67 	vmov.f32	s0, s15
 80165d0:	f7fb fc2b 	bl	8011e2a <_ZN6tflite11TfLiteRoundIfEET_S1_>
 80165d4:	eef0 7a40 	vmov.f32	s15, s0
 80165d8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80165dc:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 80165e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80165e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80165e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80165ea:	4611      	mov	r1, r2
 80165ec:	4618      	mov	r0, r3
 80165ee:	f7fb fbef 	bl	8011dd0 <_ZSt3maxIfERKT_S2_S2_>
 80165f2:	4602      	mov	r2, r0
 80165f4:	4b0f      	ldr	r3, [pc, #60]	; (8016634 <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 80165f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80165f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80165fc:	4619      	mov	r1, r3
 80165fe:	4610      	mov	r0, r2
 8016600:	f7fb fbcd 	bl	8011d9e <_ZSt3minIfERKT_S2_S2_>
 8016604:	4603      	mov	r3, r0
  table[num - 1] = std::min<float>(
 8016606:	edd3 7a00 	vldr	s15, [r3]
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016610:	3b01      	subs	r3, #1
 8016612:	005b      	lsls	r3, r3, #1
 8016614:	68ba      	ldr	r2, [r7, #8]
 8016616:	4413      	add	r3, r2
 8016618:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801661c:	ee17 2a90 	vmov	r2, s15
 8016620:	b212      	sxth	r2, r2
 8016622:	801a      	strh	r2, [r3, #0]
}
 8016624:	bf00      	nop
 8016626:	3750      	adds	r7, #80	; 0x50
 8016628:	46bd      	mov	sp, r7
 801662a:	ecbd 8b02 	vpop	{d8}
 801662e:	bd80      	pop	{r7, pc}
 8016630:	47000000 	.word	0x47000000
 8016634:	46fffe00 	.word	0x46fffe00

08016638 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 8016638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801663c:	b090      	sub	sp, #64	; 0x40
 801663e:	af06      	add	r7, sp, #24
 8016640:	60f8      	str	r0, [r7, #12]
 8016642:	60b9      	str	r1, [r7, #8]
 8016644:	607a      	str	r2, [r7, #4]
 8016646:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 8016648:	68bb      	ldr	r3, [r7, #8]
 801664a:	781b      	ldrb	r3, [r3, #0]
 801664c:	2b09      	cmp	r3, #9
 801664e:	d004      	beq.n	801665a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 8016650:	68bb      	ldr	r3, [r7, #8]
 8016652:	781b      	ldrb	r3, [r3, #0]
 8016654:	2b07      	cmp	r3, #7
 8016656:	f040 81b6 	bne.w	80169c6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x38e>
    if (input->type == kTfLiteInt16) {
 801665a:	68bb      	ldr	r3, [r7, #8]
 801665c:	781b      	ldrb	r3, [r3, #0]
 801665e:	2b07      	cmp	r3, #7
 8016660:	d156      	bne.n	8016710 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	691b      	ldr	r3, [r3, #16]
 8016666:	2b00      	cmp	r3, #0
 8016668:	d011      	beq.n	801668e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x56>
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	695c      	ldr	r4, [r3, #20]
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	691b      	ldr	r3, [r3, #16]
 8016672:	2200      	movs	r2, #0
 8016674:	9203      	str	r2, [sp, #12]
 8016676:	9302      	str	r3, [sp, #8]
 8016678:	4ba1      	ldr	r3, [pc, #644]	; (8016900 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 801667a:	9301      	str	r3, [sp, #4]
 801667c:	4ba1      	ldr	r3, [pc, #644]	; (8016904 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 801667e:	9300      	str	r3, [sp, #0]
 8016680:	2325      	movs	r3, #37	; 0x25
 8016682:	4aa1      	ldr	r2, [pc, #644]	; (8016908 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8016684:	49a1      	ldr	r1, [pc, #644]	; (801690c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8016686:	68f8      	ldr	r0, [r7, #12]
 8016688:	47a0      	blx	r4
 801668a:	2301      	movs	r3, #1
 801668c:	e1e0      	b.n	8016a50 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	edd3 7a03 	vldr	s15, [r3, #12]
 8016694:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8016910 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 8016698:	eef4 7ac7 	vcmpe.f32	s15, s14
 801669c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166a0:	dd07      	ble.n	80166b2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7a>
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80166a8:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8016910 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 80166ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80166b0:	e006      	b.n	80166c0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x88>
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80166b8:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8016910 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 80166bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80166c0:	edc7 7a08 	vstr	s15, [r7, #32]
 80166c4:	edd7 7a08 	vldr	s15, [r7, #32]
 80166c8:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8016914 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>
 80166cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80166d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166d4:	f340 80dd 	ble.w	8016892 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	695c      	ldr	r4, [r3, #20]
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	68db      	ldr	r3, [r3, #12]
 80166e0:	4618      	mov	r0, r3
 80166e2:	f7e9 ff3b 	bl	800055c <__aeabi_f2d>
 80166e6:	4602      	mov	r2, r0
 80166e8:	460b      	mov	r3, r1
 80166ea:	f04f 0000 	mov.w	r0, #0
 80166ee:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80166f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80166f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80166fa:	4b87      	ldr	r3, [pc, #540]	; (8016918 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 80166fc:	9301      	str	r3, [sp, #4]
 80166fe:	4b87      	ldr	r3, [pc, #540]	; (801691c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 8016700:	9300      	str	r3, [sp, #0]
 8016702:	2326      	movs	r3, #38	; 0x26
 8016704:	4a80      	ldr	r2, [pc, #512]	; (8016908 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8016706:	4986      	ldr	r1, [pc, #536]	; (8016920 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 8016708:	68f8      	ldr	r0, [r7, #12]
 801670a:	47a0      	blx	r4
 801670c:	2301      	movs	r3, #1
 801670e:	e19f      	b.n	8016a50 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 8016710:	68bb      	ldr	r3, [r7, #8]
 8016712:	781b      	ldrb	r3, [r3, #0]
 8016714:	2b09      	cmp	r3, #9
 8016716:	d018      	beq.n	801674a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x112>
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	695c      	ldr	r4, [r3, #20]
 801671c:	68bb      	ldr	r3, [r7, #8]
 801671e:	781b      	ldrb	r3, [r3, #0]
 8016720:	4618      	mov	r0, r3
 8016722:	f7fb f93b 	bl	801199c <TfLiteTypeGetName>
 8016726:	4605      	mov	r5, r0
 8016728:	2009      	movs	r0, #9
 801672a:	f7fb f937 	bl	801199c <TfLiteTypeGetName>
 801672e:	4603      	mov	r3, r0
 8016730:	9303      	str	r3, [sp, #12]
 8016732:	9502      	str	r5, [sp, #8]
 8016734:	4b7b      	ldr	r3, [pc, #492]	; (8016924 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 8016736:	9301      	str	r3, [sp, #4]
 8016738:	4b7b      	ldr	r3, [pc, #492]	; (8016928 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 801673a:	9300      	str	r3, [sp, #0]
 801673c:	2329      	movs	r3, #41	; 0x29
 801673e:	4a72      	ldr	r2, [pc, #456]	; (8016908 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8016740:	497a      	ldr	r1, [pc, #488]	; (801692c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 8016742:	68f8      	ldr	r0, [r7, #12]
 8016744:	47a0      	blx	r4
 8016746:	2301      	movs	r3, #1
 8016748:	e182      	b.n	8016a50 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      if (output->type == kTfLiteInt16) {
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	781b      	ldrb	r3, [r3, #0]
 801674e:	2b07      	cmp	r3, #7
 8016750:	d155      	bne.n	80167fe <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	691b      	ldr	r3, [r3, #16]
 8016756:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801675a:	d011      	beq.n	8016780 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x148>
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	695c      	ldr	r4, [r3, #20]
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	691b      	ldr	r3, [r3, #16]
 8016764:	4a72      	ldr	r2, [pc, #456]	; (8016930 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 8016766:	9203      	str	r2, [sp, #12]
 8016768:	9302      	str	r3, [sp, #8]
 801676a:	4b72      	ldr	r3, [pc, #456]	; (8016934 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 801676c:	9301      	str	r3, [sp, #4]
 801676e:	4b65      	ldr	r3, [pc, #404]	; (8016904 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8016770:	9300      	str	r3, [sp, #0]
 8016772:	232b      	movs	r3, #43	; 0x2b
 8016774:	4a64      	ldr	r2, [pc, #400]	; (8016908 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8016776:	4965      	ldr	r1, [pc, #404]	; (801690c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8016778:	68f8      	ldr	r0, [r7, #12]
 801677a:	47a0      	blx	r4
 801677c:	2301      	movs	r3, #1
 801677e:	e167      	b.n	8016a50 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	edd3 7a03 	vldr	s15, [r3, #12]
 8016786:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8016938 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 801678a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801678e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016792:	dd07      	ble.n	80167a4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	edd3 7a03 	vldr	s15, [r3, #12]
 801679a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8016938 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 801679e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80167a2:	e006      	b.n	80167b2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80167aa:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8016938 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 80167ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80167b2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80167b6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80167ba:	ed9f 7a60 	vldr	s14, [pc, #384]	; 801693c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 80167be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80167c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167c6:	dd64      	ble.n	8016892 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	695c      	ldr	r4, [r3, #20]
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	68db      	ldr	r3, [r3, #12]
 80167d0:	4618      	mov	r0, r3
 80167d2:	f7e9 fec3 	bl	800055c <__aeabi_f2d>
 80167d6:	4602      	mov	r2, r0
 80167d8:	460b      	mov	r3, r1
 80167da:	f04f 0000 	mov.w	r0, #0
 80167de:	4958      	ldr	r1, [pc, #352]	; (8016940 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 80167e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80167e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80167e8:	4b56      	ldr	r3, [pc, #344]	; (8016944 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 80167ea:	9301      	str	r3, [sp, #4]
 80167ec:	4b4b      	ldr	r3, [pc, #300]	; (801691c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 80167ee:	9300      	str	r3, [sp, #0]
 80167f0:	232c      	movs	r3, #44	; 0x2c
 80167f2:	4a45      	ldr	r2, [pc, #276]	; (8016908 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 80167f4:	494a      	ldr	r1, [pc, #296]	; (8016920 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 80167f6:	68f8      	ldr	r0, [r7, #12]
 80167f8:	47a0      	blx	r4
 80167fa:	2301      	movs	r3, #1
 80167fc:	e128      	b.n	8016a50 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	781b      	ldrb	r3, [r3, #0]
 8016802:	2b09      	cmp	r3, #9
 8016804:	d018      	beq.n	8016838 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	695c      	ldr	r4, [r3, #20]
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	781b      	ldrb	r3, [r3, #0]
 801680e:	4618      	mov	r0, r3
 8016810:	f7fb f8c4 	bl	801199c <TfLiteTypeGetName>
 8016814:	4605      	mov	r5, r0
 8016816:	2009      	movs	r0, #9
 8016818:	f7fb f8c0 	bl	801199c <TfLiteTypeGetName>
 801681c:	4603      	mov	r3, r0
 801681e:	9303      	str	r3, [sp, #12]
 8016820:	9502      	str	r5, [sp, #8]
 8016822:	4b40      	ldr	r3, [pc, #256]	; (8016924 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 8016824:	9301      	str	r3, [sp, #4]
 8016826:	4b48      	ldr	r3, [pc, #288]	; (8016948 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 8016828:	9300      	str	r3, [sp, #0]
 801682a:	232f      	movs	r3, #47	; 0x2f
 801682c:	4a36      	ldr	r2, [pc, #216]	; (8016908 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801682e:	493f      	ldr	r1, [pc, #252]	; (801692c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 8016830:	68f8      	ldr	r0, [r7, #12]
 8016832:	47a0      	blx	r4
 8016834:	2301      	movs	r3, #1
 8016836:	e10b      	b.n	8016a50 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	691b      	ldr	r3, [r3, #16]
 801683c:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8016840:	d012      	beq.n	8016868 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x230>
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	695c      	ldr	r4, [r3, #20]
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	691b      	ldr	r3, [r3, #16]
 801684a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 801684e:	9203      	str	r2, [sp, #12]
 8016850:	9302      	str	r3, [sp, #8]
 8016852:	4b3e      	ldr	r3, [pc, #248]	; (801694c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 8016854:	9301      	str	r3, [sp, #4]
 8016856:	4b2b      	ldr	r3, [pc, #172]	; (8016904 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8016858:	9300      	str	r3, [sp, #0]
 801685a:	2330      	movs	r3, #48	; 0x30
 801685c:	4a2a      	ldr	r2, [pc, #168]	; (8016908 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801685e:	492b      	ldr	r1, [pc, #172]	; (801690c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8016860:	68f8      	ldr	r0, [r7, #12]
 8016862:	47a0      	blx	r4
 8016864:	2301      	movs	r3, #1
 8016866:	e0f3      	b.n	8016a50 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	edd3 7a03 	vldr	s15, [r3, #12]
 801686e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8016950 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>
 8016872:	eef4 7a47 	vcmp.f32	s15, s14
 8016876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801687a:	d00a      	beq.n	8016892 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	695c      	ldr	r4, [r3, #20]
 8016880:	4b34      	ldr	r3, [pc, #208]	; (8016954 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 8016882:	9300      	str	r3, [sp, #0]
 8016884:	2331      	movs	r3, #49	; 0x31
 8016886:	4a20      	ldr	r2, [pc, #128]	; (8016908 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8016888:	4933      	ldr	r1, [pc, #204]	; (8016958 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
 801688a:	68f8      	ldr	r0, [r7, #12]
 801688c:	47a0      	blx	r4
 801688e:	2301      	movs	r3, #1
 8016890:	e0de      	b.n	8016a50 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 8016892:	68bb      	ldr	r3, [r7, #8]
 8016894:	781b      	ldrb	r3, [r3, #0]
 8016896:	2b07      	cmp	r3, #7
 8016898:	d160      	bne.n	801695c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 801689a:	68bb      	ldr	r3, [r7, #8]
 801689c:	68db      	ldr	r3, [r3, #12]
 801689e:	4618      	mov	r0, r3
 80168a0:	f7e9 fe5c 	bl	800055c <__aeabi_f2d>
 80168a4:	4604      	mov	r4, r0
 80168a6:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 80168a8:	683b      	ldr	r3, [r7, #0]
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	4618      	mov	r0, r3
 80168ae:	f7e9 fe55 	bl	800055c <__aeabi_f2d>
 80168b2:	4602      	mov	r2, r0
 80168b4:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 80168b6:	4620      	mov	r0, r4
 80168b8:	4629      	mov	r1, r5
 80168ba:	f7e9 fea7 	bl	800060c <__aeabi_dmul>
 80168be:	4602      	mov	r2, r0
 80168c0:	460b      	mov	r3, r1
 80168c2:	4610      	mov	r0, r2
 80168c4:	4619      	mov	r1, r3
      double input_scale_beta_rescale =
 80168c6:	a30c      	add	r3, pc, #48	; (adr r3, 80168f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 80168c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168cc:	f7e9 ffc8 	bl	8000860 <__aeabi_ddiv>
 80168d0:	4602      	mov	r2, r0
 80168d2:	460b      	mov	r3, r1
 80168d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 80168d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80168da:	3308      	adds	r3, #8
 80168dc:	f107 0214 	add.w	r2, r7, #20
 80168e0:	4611      	mov	r1, r2
 80168e2:	4618      	mov	r0, r3
 80168e4:	ed97 0b06 	vldr	d0, [r7, #24]
 80168e8:	f7fb f8de 	bl	8011aa8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 80168ec:	697a      	ldr	r2, [r7, #20]
 80168ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80168f0:	60da      	str	r2, [r3, #12]
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
 80168f2:	e0ac      	b.n	8016a4e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
 80168f4:	f3af 8000 	nop.w
 80168f8:	00140014 	.word	0x00140014
 80168fc:	3f240014 	.word	0x3f240014
 8016900:	0801d84c 	.word	0x0801d84c
 8016904:	0801d850 	.word	0x0801d850
 8016908:	0801d798 	.word	0x0801d798
 801690c:	0801d830 	.word	0x0801d830
 8016910:	38000000 	.word	0x38000000
 8016914:	3303126f 	.word	0x3303126f
 8016918:	0801d88c 	.word	0x0801d88c
 801691c:	0801d898 	.word	0x0801d898
 8016920:	0801d86c 	.word	0x0801d86c
 8016924:	0801d8cc 	.word	0x0801d8cc
 8016928:	0801d8d8 	.word	0x0801d8d8
 801692c:	0801d8b0 	.word	0x0801d8b0
 8016930:	ffff8000 	.word	0xffff8000
 8016934:	0801d8e4 	.word	0x0801d8e4
 8016938:	37800000 	.word	0x37800000
 801693c:	3283126f 	.word	0x3283126f
 8016940:	3ef00000 	.word	0x3ef00000
 8016944:	0801d8ec 	.word	0x0801d8ec
 8016948:	0801d8f8 	.word	0x0801d8f8
 801694c:	0801d908 	.word	0x0801d908
 8016950:	3b800000 	.word	0x3b800000
 8016954:	0801d928 	.word	0x0801d928
 8016958:	0801d910 	.word	0x0801d910
          static_cast<double>(params->beta),
 801695c:	683b      	ldr	r3, [r7, #0]
 801695e:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 8016960:	4618      	mov	r0, r3
 8016962:	f7e9 fdfb 	bl	800055c <__aeabi_f2d>
 8016966:	4680      	mov	r8, r0
 8016968:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 801696a:	68bb      	ldr	r3, [r7, #8]
 801696c:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 801696e:	4618      	mov	r0, r3
 8016970:	f7e9 fdf4 	bl	800055c <__aeabi_f2d>
 8016974:	4682      	mov	sl, r0
 8016976:	468b      	mov	fp, r1
 8016978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801697a:	3308      	adds	r3, #8
 801697c:	f107 0210 	add.w	r2, r7, #16
 8016980:	4619      	mov	r1, r3
 8016982:	2005      	movs	r0, #5
 8016984:	ec4b ab11 	vmov	d1, sl, fp
 8016988:	ec49 8b10 	vmov	d0, r8, r9
 801698c:	f7fb f958 	bl	8011c40 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 8016990:	693a      	ldr	r2, [r7, #16]
 8016992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016994:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 8016996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016998:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 801699a:	221f      	movs	r2, #31
 801699c:	4619      	mov	r1, r3
 801699e:	2005      	movs	r0, #5
 80169a0:	f7fb f996 	bl	8011cd0 <_ZN6tflite20CalculateInputRadiusEiii>
 80169a4:	4603      	mov	r3, r0
 80169a6:	4618      	mov	r0, r3
 80169a8:	f7e9 fdc6 	bl	8000538 <__aeabi_i2d>
 80169ac:	4602      	mov	r2, r0
 80169ae:	460b      	mov	r3, r1
 80169b0:	4614      	mov	r4, r2
 80169b2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 80169b6:	4620      	mov	r0, r4
 80169b8:	4629      	mov	r1, r5
 80169ba:	f7ea f8d7 	bl	8000b6c <__aeabi_d2iz>
 80169be:	4602      	mov	r2, r0
 80169c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80169c2:	619a      	str	r2, [r3, #24]
    }
 80169c4:	e043      	b.n	8016a4e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 80169c6:	68bb      	ldr	r3, [r7, #8]
 80169c8:	781b      	ldrb	r3, [r3, #0]
 80169ca:	2b01      	cmp	r3, #1
 80169cc:	d018      	beq.n	8016a00 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c8>
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	695c      	ldr	r4, [r3, #20]
 80169d2:	68bb      	ldr	r3, [r7, #8]
 80169d4:	781b      	ldrb	r3, [r3, #0]
 80169d6:	4618      	mov	r0, r3
 80169d8:	f7fa ffe0 	bl	801199c <TfLiteTypeGetName>
 80169dc:	4605      	mov	r5, r0
 80169de:	2001      	movs	r0, #1
 80169e0:	f7fa ffdc 	bl	801199c <TfLiteTypeGetName>
 80169e4:	4603      	mov	r3, r0
 80169e6:	9303      	str	r3, [sp, #12]
 80169e8:	9502      	str	r5, [sp, #8]
 80169ea:	4b1c      	ldr	r3, [pc, #112]	; (8016a5c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 80169ec:	9301      	str	r3, [sp, #4]
 80169ee:	4b1c      	ldr	r3, [pc, #112]	; (8016a60 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x428>)
 80169f0:	9300      	str	r3, [sp, #0]
 80169f2:	234e      	movs	r3, #78	; 0x4e
 80169f4:	4a1b      	ldr	r2, [pc, #108]	; (8016a64 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 80169f6:	491c      	ldr	r1, [pc, #112]	; (8016a68 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 80169f8:	68f8      	ldr	r0, [r7, #12]
 80169fa:	47a0      	blx	r4
 80169fc:	2301      	movs	r3, #1
 80169fe:	e027      	b.n	8016a50 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	781b      	ldrb	r3, [r3, #0]
 8016a04:	2b01      	cmp	r3, #1
 8016a06:	d018      	beq.n	8016a3a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x402>
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	695c      	ldr	r4, [r3, #20]
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	781b      	ldrb	r3, [r3, #0]
 8016a10:	4618      	mov	r0, r3
 8016a12:	f7fa ffc3 	bl	801199c <TfLiteTypeGetName>
 8016a16:	4605      	mov	r5, r0
 8016a18:	2001      	movs	r0, #1
 8016a1a:	f7fa ffbf 	bl	801199c <TfLiteTypeGetName>
 8016a1e:	4603      	mov	r3, r0
 8016a20:	9303      	str	r3, [sp, #12]
 8016a22:	9502      	str	r5, [sp, #8]
 8016a24:	4b0d      	ldr	r3, [pc, #52]	; (8016a5c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 8016a26:	9301      	str	r3, [sp, #4]
 8016a28:	4b10      	ldr	r3, [pc, #64]	; (8016a6c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x434>)
 8016a2a:	9300      	str	r3, [sp, #0]
 8016a2c:	234f      	movs	r3, #79	; 0x4f
 8016a2e:	4a0d      	ldr	r2, [pc, #52]	; (8016a64 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 8016a30:	490d      	ldr	r1, [pc, #52]	; (8016a68 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 8016a32:	68f8      	ldr	r0, [r7, #12]
 8016a34:	47a0      	blx	r4
 8016a36:	2301      	movs	r3, #1
 8016a38:	e00a      	b.n	8016a50 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    op_data->beta = static_cast<double>(params->beta);
 8016a3a:	683b      	ldr	r3, [r7, #0]
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	4618      	mov	r0, r3
 8016a40:	f7e9 fd8c 	bl	800055c <__aeabi_f2d>
 8016a44:	4602      	mov	r2, r0
 8016a46:	460b      	mov	r3, r1
 8016a48:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8016a4a:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 8016a4e:	2300      	movs	r3, #0
}
 8016a50:	4618      	mov	r0, r3
 8016a52:	3728      	adds	r7, #40	; 0x28
 8016a54:	46bd      	mov	sp, r7
 8016a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016a5a:	bf00      	nop
 8016a5c:	0801d94c 	.word	0x0801d94c
 8016a60:	0801d8d8 	.word	0x0801d8d8
 8016a64:	0801d798 	.word	0x0801d798
 8016a68:	0801d8b0 	.word	0x0801d8b0
 8016a6c:	0801d8f8 	.word	0x0801d8f8

08016a70 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 8016a70:	b580      	push	{r7, lr}
 8016a72:	b084      	sub	sp, #16
 8016a74:	af00      	add	r7, sp, #0
 8016a76:	60f8      	str	r0, [r7, #12]
 8016a78:	60b9      	str	r1, [r7, #8]
 8016a7a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d101      	bne.n	8016a88 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0x18>
 8016a84:	f004 f8c6 	bl	801ac14 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a8c:	2138      	movs	r1, #56	; 0x38
 8016a8e:	68f8      	ldr	r0, [r7, #12]
 8016a90:	4798      	blx	r3
 8016a92:	4603      	mov	r3, r0
}
 8016a94:	4618      	mov	r0, r3
 8016a96:	3710      	adds	r7, #16
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	bd80      	pop	{r7, pc}

08016a9c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>:
  // Populate LUT if required
  if (input->type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 8016a9c:	b580      	push	{r7, lr}
 8016a9e:	b082      	sub	sp, #8
 8016aa0:	af00      	add	r7, sp, #0
 8016aa2:	6078      	str	r0, [r7, #4]
 8016aa4:	ed87 0a00 	vstr	s0, [r7]
 8016aa8:	ed97 0a00 	vldr	s0, [r7]
 8016aac:	f7ea fd25 	bl	80014fa <_ZSt3expf>
 8016ab0:	eef0 7a40 	vmov.f32	s15, s0
 8016ab4:	eeb0 0a67 	vmov.f32	s0, s15
 8016ab8:	3708      	adds	r7, #8
 8016aba:	46bd      	mov	sp, r7
 8016abc:	bd80      	pop	{r7, pc}

08016abe <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
 8016abe:	b580      	push	{r7, lr}
 8016ac0:	b082      	sub	sp, #8
 8016ac2:	af00      	add	r7, sp, #0
 8016ac4:	ed87 0a01 	vstr	s0, [r7, #4]
 8016ac8:	ed97 0a01 	vldr	s0, [r7, #4]
 8016acc:	2000      	movs	r0, #0
 8016ace:	f7ff ffe5 	bl	8016a9c <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>
 8016ad2:	eef0 7a40 	vmov.f32	s15, s0
 8016ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8016ada:	3708      	adds	r7, #8
 8016adc:	46bd      	mov	sp, r7
 8016ade:	bd80      	pop	{r7, pc}

08016ae0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>:
 8016ae0:	b480      	push	{r7}
 8016ae2:	b083      	sub	sp, #12
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	6078      	str	r0, [r7, #4]
 8016ae8:	4b03      	ldr	r3, [pc, #12]	; (8016af8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv+0x18>)
 8016aea:	4618      	mov	r0, r3
 8016aec:	370c      	adds	r7, #12
 8016aee:	46bd      	mov	sp, r7
 8016af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016af4:	4770      	bx	lr
 8016af6:	bf00      	nop
 8016af8:	08016abf 	.word	0x08016abf

08016afc <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>:
            op_data->exp_lut, kInt16LUTArraySize);
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 8016afc:	b480      	push	{r7}
 8016afe:	b083      	sub	sp, #12
 8016b00:	af00      	add	r7, sp, #0
 8016b02:	6078      	str	r0, [r7, #4]
 8016b04:	ed87 0a00 	vstr	s0, [r7]
 8016b08:	edd7 7a00 	vldr	s15, [r7]
 8016b0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016b10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016b14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016b18:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8016b1c:	eef0 7a66 	vmov.f32	s15, s13
 8016b20:	eeb0 0a67 	vmov.f32	s0, s15
 8016b24:	370c      	adds	r7, #12
 8016b26:	46bd      	mov	sp, r7
 8016b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b2c:	4770      	bx	lr

08016b2e <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
 8016b2e:	b580      	push	{r7, lr}
 8016b30:	b082      	sub	sp, #8
 8016b32:	af00      	add	r7, sp, #0
 8016b34:	ed87 0a01 	vstr	s0, [r7, #4]
 8016b38:	ed97 0a01 	vldr	s0, [r7, #4]
 8016b3c:	2000      	movs	r0, #0
 8016b3e:	f7ff ffdd 	bl	8016afc <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>
 8016b42:	eef0 7a40 	vmov.f32	s15, s0
 8016b46:	eeb0 0a67 	vmov.f32	s0, s15
 8016b4a:	3708      	adds	r7, #8
 8016b4c:	46bd      	mov	sp, r7
 8016b4e:	bd80      	pop	{r7, pc}

08016b50 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>:
 8016b50:	b480      	push	{r7}
 8016b52:	b083      	sub	sp, #12
 8016b54:	af00      	add	r7, sp, #0
 8016b56:	6078      	str	r0, [r7, #4]
 8016b58:	4b03      	ldr	r3, [pc, #12]	; (8016b68 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv+0x18>)
 8016b5a:	4618      	mov	r0, r3
 8016b5c:	370c      	adds	r7, #12
 8016b5e:	46bd      	mov	sp, r7
 8016b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b64:	4770      	bx	lr
 8016b66:	bf00      	nop
 8016b68:	08016b2f 	.word	0x08016b2f

08016b6c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 8016b6c:	b590      	push	{r4, r7, lr}
 8016b6e:	b08f      	sub	sp, #60	; 0x3c
 8016b70:	af04      	add	r7, sp, #16
 8016b72:	6078      	str	r0, [r7, #4]
 8016b74:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 8016b76:	6838      	ldr	r0, [r7, #0]
 8016b78:	f7fc fe5c 	bl	8013834 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8016b7c:	4603      	mov	r3, r0
 8016b7e:	2b01      	cmp	r3, #1
 8016b80:	bf14      	ite	ne
 8016b82:	2301      	movne	r3, #1
 8016b84:	2300      	moveq	r3, #0
 8016b86:	b2db      	uxtb	r3, r3
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d013      	beq.n	8016bb4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	695c      	ldr	r4, [r3, #20]
 8016b90:	6838      	ldr	r0, [r7, #0]
 8016b92:	f7fc fe4f 	bl	8013834 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8016b96:	4603      	mov	r3, r0
 8016b98:	2201      	movs	r2, #1
 8016b9a:	9203      	str	r2, [sp, #12]
 8016b9c:	9302      	str	r3, [sp, #8]
 8016b9e:	4b7c      	ldr	r3, [pc, #496]	; (8016d90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 8016ba0:	9301      	str	r3, [sp, #4]
 8016ba2:	4b7c      	ldr	r3, [pc, #496]	; (8016d94 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 8016ba4:	9300      	str	r3, [sp, #0]
 8016ba6:	235d      	movs	r3, #93	; 0x5d
 8016ba8:	4a7b      	ldr	r2, [pc, #492]	; (8016d98 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8016baa:	497c      	ldr	r1, [pc, #496]	; (8016d9c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8016bac:	6878      	ldr	r0, [r7, #4]
 8016bae:	47a0      	blx	r4
 8016bb0:	2301      	movs	r3, #1
 8016bb2:	e146      	b.n	8016e42 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8016bb4:	6838      	ldr	r0, [r7, #0]
 8016bb6:	f7fc fe4a 	bl	801384e <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8016bba:	4603      	mov	r3, r0
 8016bbc:	2b01      	cmp	r3, #1
 8016bbe:	bf14      	ite	ne
 8016bc0:	2301      	movne	r3, #1
 8016bc2:	2300      	moveq	r3, #0
 8016bc4:	b2db      	uxtb	r3, r3
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d013      	beq.n	8016bf2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	695c      	ldr	r4, [r3, #20]
 8016bce:	6838      	ldr	r0, [r7, #0]
 8016bd0:	f7fc fe3d 	bl	801384e <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8016bd4:	4603      	mov	r3, r0
 8016bd6:	2201      	movs	r2, #1
 8016bd8:	9203      	str	r2, [sp, #12]
 8016bda:	9302      	str	r3, [sp, #8]
 8016bdc:	4b6c      	ldr	r3, [pc, #432]	; (8016d90 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 8016bde:	9301      	str	r3, [sp, #4]
 8016be0:	4b6f      	ldr	r3, [pc, #444]	; (8016da0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 8016be2:	9300      	str	r3, [sp, #0]
 8016be4:	235e      	movs	r3, #94	; 0x5e
 8016be6:	4a6c      	ldr	r2, [pc, #432]	; (8016d98 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8016be8:	496c      	ldr	r1, [pc, #432]	; (8016d9c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8016bea:	6878      	ldr	r0, [r7, #4]
 8016bec:	47a0      	blx	r4
 8016bee:	2301      	movs	r3, #1
 8016bf0:	e127      	b.n	8016e42 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  const TfLiteTensor* input = GetInput(context, node, 0);
 8016bf2:	2200      	movs	r2, #0
 8016bf4:	6839      	ldr	r1, [r7, #0]
 8016bf6:	6878      	ldr	r0, [r7, #4]
 8016bf8:	f7fb f9d8 	bl	8011fac <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8016bfc:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 8016bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d10a      	bne.n	8016c1a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xae>
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	695c      	ldr	r4, [r3, #20]
 8016c08:	4b66      	ldr	r3, [pc, #408]	; (8016da4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 8016c0a:	9300      	str	r3, [sp, #0]
 8016c0c:	2360      	movs	r3, #96	; 0x60
 8016c0e:	4a62      	ldr	r2, [pc, #392]	; (8016d98 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8016c10:	4965      	ldr	r1, [pc, #404]	; (8016da8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8016c12:	6878      	ldr	r0, [r7, #4]
 8016c14:	47a0      	blx	r4
 8016c16:	2301      	movs	r3, #1
 8016c18:	e113      	b.n	8016e42 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 8016c1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016c1c:	f7fb f949 	bl	8011eb2 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 8016c20:	4603      	mov	r3, r0
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	bfd4      	ite	le
 8016c26:	2301      	movle	r3, #1
 8016c28:	2300      	movgt	r3, #0
 8016c2a:	b2db      	uxtb	r3, r3
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d00a      	beq.n	8016c46 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	695c      	ldr	r4, [r3, #20]
 8016c34:	4b5d      	ldr	r3, [pc, #372]	; (8016dac <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8016c36:	9300      	str	r3, [sp, #0]
 8016c38:	2361      	movs	r3, #97	; 0x61
 8016c3a:	4a57      	ldr	r2, [pc, #348]	; (8016d98 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8016c3c:	495a      	ldr	r1, [pc, #360]	; (8016da8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8016c3e:	6878      	ldr	r0, [r7, #4]
 8016c40:	47a0      	blx	r4
 8016c42:	2301      	movs	r3, #1
 8016c44:	e0fd      	b.n	8016e42 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TfLiteTensor* output = GetOutput(context, node, 0);
 8016c46:	2200      	movs	r2, #0
 8016c48:	6839      	ldr	r1, [r7, #0]
 8016c4a:	6878      	ldr	r0, [r7, #4]
 8016c4c:	f7fb f9be 	bl	8011fcc <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8016c50:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 8016c52:	6a3b      	ldr	r3, [r7, #32]
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d10a      	bne.n	8016c6e <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	695c      	ldr	r4, [r3, #20]
 8016c5c:	4b54      	ldr	r3, [pc, #336]	; (8016db0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 8016c5e:	9300      	str	r3, [sp, #0]
 8016c60:	2363      	movs	r3, #99	; 0x63
 8016c62:	4a4d      	ldr	r2, [pc, #308]	; (8016d98 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8016c64:	4950      	ldr	r1, [pc, #320]	; (8016da8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8016c66:	6878      	ldr	r0, [r7, #4]
 8016c68:	47a0      	blx	r4
 8016c6a:	2301      	movs	r3, #1
 8016c6c:	e0e9      	b.n	8016e42 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 8016c6e:	683b      	ldr	r3, [r7, #0]
 8016c70:	691b      	ldr	r3, [r3, #16]
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d10a      	bne.n	8016c8c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x120>
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	695c      	ldr	r4, [r3, #20]
 8016c7a:	4b4e      	ldr	r3, [pc, #312]	; (8016db4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 8016c7c:	9300      	str	r3, [sp, #0]
 8016c7e:	2365      	movs	r3, #101	; 0x65
 8016c80:	4a45      	ldr	r2, [pc, #276]	; (8016d98 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8016c82:	4949      	ldr	r1, [pc, #292]	; (8016da8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8016c84:	6878      	ldr	r0, [r7, #4]
 8016c86:	47a0      	blx	r4
 8016c88:	2301      	movs	r3, #1
 8016c8a:	e0da      	b.n	8016e42 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 8016c8c:	683b      	ldr	r3, [r7, #0]
 8016c8e:	691b      	ldr	r3, [r3, #16]
 8016c90:	61fb      	str	r3, [r7, #28]
  if (input->type == kTfLiteInt16) {
 8016c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c94:	781b      	ldrb	r3, [r3, #0]
 8016c96:	2b07      	cmp	r3, #7
 8016c98:	d12f      	bne.n	8016cfa <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c9e:	f240 4102 	movw	r1, #1026	; 0x402
 8016ca2:	6878      	ldr	r0, [r7, #4]
 8016ca4:	4798      	blx	r3
 8016ca6:	61b8      	str	r0, [r7, #24]
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 8016ca8:	69bb      	ldr	r3, [r7, #24]
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d10a      	bne.n	8016cc4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x158>
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	695c      	ldr	r4, [r3, #20]
 8016cb2:	4b41      	ldr	r3, [pc, #260]	; (8016db8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 8016cb4:	9300      	str	r3, [sp, #0]
 8016cb6:	236b      	movs	r3, #107	; 0x6b
 8016cb8:	4a37      	ldr	r2, [pc, #220]	; (8016d98 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8016cba:	493b      	ldr	r1, [pc, #236]	; (8016da8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8016cbc:	6878      	ldr	r0, [r7, #4]
 8016cbe:	47a0      	blx	r4
 8016cc0:	2301      	movs	r3, #1
 8016cc2:	e0be      	b.n	8016e42 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 8016cc4:	69fb      	ldr	r3, [r7, #28]
 8016cc6:	69ba      	ldr	r2, [r7, #24]
 8016cc8:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016cce:	f240 4102 	movw	r1, #1026	; 0x402
 8016cd2:	6878      	ldr	r0, [r7, #4]
 8016cd4:	4798      	blx	r3
 8016cd6:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 8016cd8:	697b      	ldr	r3, [r7, #20]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d10a      	bne.n	8016cf4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	695c      	ldr	r4, [r3, #20]
 8016ce2:	4b36      	ldr	r3, [pc, #216]	; (8016dbc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 8016ce4:	9300      	str	r3, [sp, #0]
 8016ce6:	236f      	movs	r3, #111	; 0x6f
 8016ce8:	4a2b      	ldr	r2, [pc, #172]	; (8016d98 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8016cea:	492f      	ldr	r1, [pc, #188]	; (8016da8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8016cec:	6878      	ldr	r0, [r7, #4]
 8016cee:	47a0      	blx	r4
 8016cf0:	2301      	movs	r3, #1
 8016cf2:	e0a6      	b.n	8016e42 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->one_over_one_plus_x_lut =
 8016cf4:	69fb      	ldr	r3, [r7, #28]
 8016cf6:	697a      	ldr	r2, [r7, #20]
 8016cf8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 8016cfa:	6a3b      	ldr	r3, [r7, #32]
 8016cfc:	781b      	ldrb	r3, [r3, #0]
 8016cfe:	2b07      	cmp	r3, #7
 8016d00:	d112      	bne.n	8016d28 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
    TF_LITE_ENSURE(context,
 8016d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d04:	781b      	ldrb	r3, [r3, #0]
 8016d06:	2b09      	cmp	r3, #9
 8016d08:	d028      	beq.n	8016d5c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 8016d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d0c:	781b      	ldrb	r3, [r3, #0]
 8016d0e:	2b07      	cmp	r3, #7
 8016d10:	d024      	beq.n	8016d5c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	695c      	ldr	r4, [r3, #20]
 8016d16:	4b2a      	ldr	r3, [pc, #168]	; (8016dc0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 8016d18:	9300      	str	r3, [sp, #0]
 8016d1a:	2375      	movs	r3, #117	; 0x75
 8016d1c:	4a1e      	ldr	r2, [pc, #120]	; (8016d98 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8016d1e:	4922      	ldr	r1, [pc, #136]	; (8016da8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8016d20:	6878      	ldr	r0, [r7, #4]
 8016d22:	47a0      	blx	r4
 8016d24:	2301      	movs	r3, #1
 8016d26:	e08c      	b.n	8016e42 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 8016d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d2a:	781a      	ldrb	r2, [r3, #0]
 8016d2c:	6a3b      	ldr	r3, [r7, #32]
 8016d2e:	781b      	ldrb	r3, [r3, #0]
 8016d30:	429a      	cmp	r2, r3
 8016d32:	d013      	beq.n	8016d5c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	695c      	ldr	r4, [r3, #20]
 8016d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d3a:	781b      	ldrb	r3, [r3, #0]
 8016d3c:	461a      	mov	r2, r3
 8016d3e:	6a3b      	ldr	r3, [r7, #32]
 8016d40:	781b      	ldrb	r3, [r3, #0]
 8016d42:	9303      	str	r3, [sp, #12]
 8016d44:	9202      	str	r2, [sp, #8]
 8016d46:	4b1f      	ldr	r3, [pc, #124]	; (8016dc4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 8016d48:	9301      	str	r3, [sp, #4]
 8016d4a:	4b1f      	ldr	r3, [pc, #124]	; (8016dc8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 8016d4c:	9300      	str	r3, [sp, #0]
 8016d4e:	2378      	movs	r3, #120	; 0x78
 8016d50:	4a11      	ldr	r2, [pc, #68]	; (8016d98 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8016d52:	4912      	ldr	r1, [pc, #72]	; (8016d9c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8016d54:	6878      	ldr	r0, [r7, #4]
 8016d56:	47a0      	blx	r4
 8016d58:	2301      	movs	r3, #1
 8016d5a:	e072      	b.n	8016e42 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  if (input->type == kTfLiteInt16) {
 8016d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d5e:	781b      	ldrb	r3, [r3, #0]
 8016d60:	2b07      	cmp	r3, #7
 8016d62:	d161      	bne.n	8016e28 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 8016d64:	6a3b      	ldr	r3, [r7, #32]
 8016d66:	691b      	ldr	r3, [r3, #16]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d035      	beq.n	8016dd8 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	695c      	ldr	r4, [r3, #20]
 8016d70:	6a3b      	ldr	r3, [r7, #32]
 8016d72:	691b      	ldr	r3, [r3, #16]
 8016d74:	2200      	movs	r2, #0
 8016d76:	9203      	str	r2, [sp, #12]
 8016d78:	9302      	str	r3, [sp, #8]
 8016d7a:	4b14      	ldr	r3, [pc, #80]	; (8016dcc <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 8016d7c:	9301      	str	r3, [sp, #4]
 8016d7e:	4b14      	ldr	r3, [pc, #80]	; (8016dd0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8016d80:	9300      	str	r3, [sp, #0]
 8016d82:	237d      	movs	r3, #125	; 0x7d
 8016d84:	4a04      	ldr	r2, [pc, #16]	; (8016d98 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8016d86:	4905      	ldr	r1, [pc, #20]	; (8016d9c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8016d88:	6878      	ldr	r0, [r7, #4]
 8016d8a:	47a0      	blx	r4
 8016d8c:	2301      	movs	r3, #1
 8016d8e:	e058      	b.n	8016e42 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
 8016d90:	0801d95c 	.word	0x0801d95c
 8016d94:	0801d960 	.word	0x0801d960
 8016d98:	0801d798 	.word	0x0801d798
 8016d9c:	0801d830 	.word	0x0801d830
 8016da0:	0801d970 	.word	0x0801d970
 8016da4:	0801d984 	.word	0x0801d984
 8016da8:	0801d910 	.word	0x0801d910
 8016dac:	0801d998 	.word	0x0801d998
 8016db0:	0801d9b4 	.word	0x0801d9b4
 8016db4:	0801d9c8 	.word	0x0801d9c8
 8016db8:	0801d9e4 	.word	0x0801d9e4
 8016dbc:	0801d9fc 	.word	0x0801d9fc
 8016dc0:	0801da20 	.word	0x0801da20
 8016dc4:	0801d8f8 	.word	0x0801d8f8
 8016dc8:	0801d8d8 	.word	0x0801d8d8
 8016dcc:	0801d84c 	.word	0x0801d84c
 8016dd0:	0801d850 	.word	0x0801d850
 8016dd4:	00000000 	.word	0x00000000
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 8016dd8:	f107 0308 	add.w	r3, r7, #8
 8016ddc:	4618      	mov	r0, r3
 8016dde:	f7ff fe7f 	bl	8016ae0 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>
 8016de2:	69fb      	ldr	r3, [r7, #28]
 8016de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016de6:	f240 2201 	movw	r2, #513	; 0x201
 8016dea:	4619      	mov	r1, r3
 8016dec:	ed5f 0a07 	vldr	s1, [pc, #-28]	; 8016dd4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 8016df0:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8016df4:	f7ff faf4 	bl	80163e0 <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 8016df8:	f107 030c 	add.w	r3, r7, #12
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	f7ff fea7 	bl	8016b50 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>
 8016e02:	69fb      	ldr	r3, [r7, #28]
 8016e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e06:	f240 2201 	movw	r2, #513	; 0x201
 8016e0a:	4619      	mov	r1, r3
 8016e0c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8016e10:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 8016dd4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 8016e14:	f7ff fae4 	bl	80163e0 <_ZN6tflite7gen_lutEPFffEffPsi>
            op_data->one_over_one_plus_x_lut, kInt16LUTArraySize);
    op_data->zero_point = output->params.zero_point;
 8016e18:	6a3b      	ldr	r3, [r7, #32]
 8016e1a:	691a      	ldr	r2, [r3, #16]
 8016e1c:	69fb      	ldr	r3, [r7, #28]
 8016e1e:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 8016e20:	6a3b      	ldr	r3, [r7, #32]
 8016e22:	68da      	ldr	r2, [r3, #12]
 8016e24:	69fb      	ldr	r3, [r7, #28]
 8016e26:	621a      	str	r2, [r3, #32]
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 8016e28:	683b      	ldr	r3, [r7, #0]
 8016e2a:	695b      	ldr	r3, [r3, #20]
 8016e2c:	613b      	str	r3, [r7, #16]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
 8016e2e:	69fb      	ldr	r3, [r7, #28]
 8016e30:	9300      	str	r3, [sp, #0]
 8016e32:	693b      	ldr	r3, [r7, #16]
 8016e34:	6a3a      	ldr	r2, [r7, #32]
 8016e36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016e38:	6878      	ldr	r0, [r7, #4]
 8016e3a:	f7ff fbfd 	bl	8016638 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 8016e3e:	4603      	mov	r3, r0
 8016e40:	bf00      	nop
}
 8016e42:	4618      	mov	r0, r3
 8016e44:	372c      	adds	r7, #44	; 0x2c
 8016e46:	46bd      	mov	sp, r7
 8016e48:	bd90      	pop	{r4, r7, pc}
 8016e4a:	bf00      	nop

08016e4c <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8016e4c:	b580      	push	{r7, lr}
 8016e4e:	b082      	sub	sp, #8
 8016e50:	af00      	add	r7, sp, #0
 8016e52:	6078      	str	r0, [r7, #4]
 8016e54:	6878      	ldr	r0, [r7, #4]
 8016e56:	f000 fbdb 	bl	8017610 <_ZNSaIPvED1Ev>
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	4618      	mov	r0, r3
 8016e5e:	3708      	adds	r7, #8
 8016e60:	46bd      	mov	sp, r7
 8016e62:	bd80      	pop	{r7, pc}

08016e64 <_ZNSt12_Vector_baseIPvSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8016e64:	b580      	push	{r7, lr}
 8016e66:	b082      	sub	sp, #8
 8016e68:	af00      	add	r7, sp, #0
 8016e6a:	6078      	str	r0, [r7, #4]
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	4618      	mov	r0, r3
 8016e70:	f000 fbbe 	bl	80175f0 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implC1Ev>
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	4618      	mov	r0, r3
 8016e78:	3708      	adds	r7, #8
 8016e7a:	46bd      	mov	sp, r7
 8016e7c:	bd80      	pop	{r7, pc}

08016e7e <_ZNSt6vectorIPvSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8016e7e:	b580      	push	{r7, lr}
 8016e80:	b082      	sub	sp, #8
 8016e82:	af00      	add	r7, sp, #0
 8016e84:	6078      	str	r0, [r7, #4]
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	4618      	mov	r0, r3
 8016e8a:	f7ff ffeb 	bl	8016e64 <_ZNSt12_Vector_baseIPvSaIS0_EEC1Ev>
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	4618      	mov	r0, r3
 8016e92:	3708      	adds	r7, #8
 8016e94:	46bd      	mov	sp, r7
 8016e96:	bd80      	pop	{r7, pc}

08016e98 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>:
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
 8016e98:	b580      	push	{r7, lr}
 8016e9a:	b084      	sub	sp, #16
 8016e9c:	af00      	add	r7, sp, #0
 8016e9e:	6078      	str	r0, [r7, #4]
 8016ea0:	6039      	str	r1, [r7, #0]
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
 8016ea2:	4b1b      	ldr	r3, [pc, #108]	; (8016f10 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x78>)
 8016ea4:	681a      	ldr	r2, [r3, #0]
 8016ea6:	683b      	ldr	r3, [r7, #0]
 8016ea8:	425b      	negs	r3, r3
 8016eaa:	441a      	add	r2, r3
 8016eac:	4b19      	ldr	r3, [pc, #100]	; (8016f14 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x7c>)
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	429a      	cmp	r2, r3
 8016eb2:	d217      	bcs.n	8016ee4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x4c>
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
 8016eb4:	2101      	movs	r1, #1
 8016eb6:	6838      	ldr	r0, [r7, #0]
 8016eb8:	f7fa fd3a 	bl	8011930 <_Z9ei_callocjj>
 8016ebc:	4603      	mov	r3, r0
 8016ebe:	60fb      	str	r3, [r7, #12]
    if (ptr == NULL) {
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d106      	bne.n	8016ed4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x3c>
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 8016ec6:	683b      	ldr	r3, [r7, #0]
 8016ec8:	4619      	mov	r1, r3
 8016eca:	4813      	ldr	r0, [pc, #76]	; (8016f18 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x80>)
 8016ecc:	f004 fb34 	bl	801b538 <iprintf>
      return NULL;
 8016ed0:	2300      	movs	r3, #0
 8016ed2:	e018      	b.n	8016f06 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x6e>
    }
    overflow_buffers.push_back(ptr);
 8016ed4:	f107 030c 	add.w	r3, r7, #12
 8016ed8:	4619      	mov	r1, r3
 8016eda:	4810      	ldr	r0, [pc, #64]	; (8016f1c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x84>)
 8016edc:	f000 fbbd 	bl	801765a <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_>
    return ptr;
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	e010      	b.n	8016f06 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x6e>
  }

  current_location -= bytes;
 8016ee4:	4b0a      	ldr	r3, [pc, #40]	; (8016f10 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x78>)
 8016ee6:	681a      	ldr	r2, [r3, #0]
 8016ee8:	683b      	ldr	r3, [r7, #0]
 8016eea:	425b      	negs	r3, r3
 8016eec:	4413      	add	r3, r2
 8016eee:	4a08      	ldr	r2, [pc, #32]	; (8016f10 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x78>)
 8016ef0:	6013      	str	r3, [r2, #0]

  ptr = current_location;
 8016ef2:	4b07      	ldr	r3, [pc, #28]	; (8016f10 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x78>)
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	60fb      	str	r3, [r7, #12]
  memset(ptr, 0, bytes);
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	683a      	ldr	r2, [r7, #0]
 8016efc:	2100      	movs	r1, #0
 8016efe:	4618      	mov	r0, r3
 8016f00:	f003 ff2e 	bl	801ad60 <memset>

  return ptr;
 8016f04:	68fb      	ldr	r3, [r7, #12]
}
 8016f06:	4618      	mov	r0, r3
 8016f08:	3710      	adds	r7, #16
 8016f0a:	46bd      	mov	sp, r7
 8016f0c:	bd80      	pop	{r7, pc}
 8016f0e:	bf00      	nop
 8016f10:	2000092c 	.word	0x2000092c
 8016f14:	20000928 	.word	0x20000928
 8016f18:	0801da70 	.word	0x0801da70
 8016f1c:	20000d9c 	.word	0x20000d9c

08016f20 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8016f20:	b580      	push	{r7, lr}
 8016f22:	b082      	sub	sp, #8
 8016f24:	af00      	add	r7, sp, #0
 8016f26:	6078      	str	r0, [r7, #4]
 8016f28:	6878      	ldr	r0, [r7, #4]
 8016f2a:	f000 fbcb 	bl	80176c4 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	4618      	mov	r0, r3
 8016f32:	3708      	adds	r7, #8
 8016f34:	46bd      	mov	sp, r7
 8016f36:	bd80      	pop	{r7, pc}

08016f38 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC2Ev>:
      _Vector_base() = default;
 8016f38:	b580      	push	{r7, lr}
 8016f3a:	b082      	sub	sp, #8
 8016f3c:	af00      	add	r7, sp, #0
 8016f3e:	6078      	str	r0, [r7, #4]
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	4618      	mov	r0, r3
 8016f44:	f000 fbae 	bl	80176a4 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implC1Ev>
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	4618      	mov	r0, r3
 8016f4c:	3708      	adds	r7, #8
 8016f4e:	46bd      	mov	sp, r7
 8016f50:	bd80      	pop	{r7, pc}

08016f52 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC1Ev>:
      vector() = default;
 8016f52:	b580      	push	{r7, lr}
 8016f54:	b082      	sub	sp, #8
 8016f56:	af00      	add	r7, sp, #0
 8016f58:	6078      	str	r0, [r7, #4]
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	4618      	mov	r0, r3
 8016f5e:	f7ff ffeb 	bl	8016f38 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC2Ev>
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	4618      	mov	r0, r3
 8016f66:	3708      	adds	r7, #8
 8016f68:	46bd      	mov	sp, r7
 8016f6a:	bd80      	pop	{r7, pc}

08016f6c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 8016f6c:	b580      	push	{r7, lr}
 8016f6e:	b086      	sub	sp, #24
 8016f70:	af00      	add	r7, sp, #0
 8016f72:	60f8      	str	r0, [r7, #12]
 8016f74:	60b9      	str	r1, [r7, #8]
 8016f76:	607a      	str	r2, [r7, #4]
  scratch_buffer_t b;
  b.bytes = bytes;
 8016f78:	68bb      	ldr	r3, [r7, #8]
 8016f7a:	613b      	str	r3, [r7, #16]

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
 8016f7c:	693b      	ldr	r3, [r7, #16]
 8016f7e:	4619      	mov	r1, r3
 8016f80:	68f8      	ldr	r0, [r7, #12]
 8016f82:	f7ff ff89 	bl	8016e98 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>
 8016f86:	4603      	mov	r3, r0
 8016f88:	617b      	str	r3, [r7, #20]
  if (!b.ptr) {
 8016f8a:	697b      	ldr	r3, [r7, #20]
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d101      	bne.n	8016f94 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x28>
    return kTfLiteError;
 8016f90:	2301      	movs	r3, #1
 8016f92:	e00e      	b.n	8016fb2 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x46>
  }

  scratch_buffers.push_back(b);
 8016f94:	f107 0310 	add.w	r3, r7, #16
 8016f98:	4619      	mov	r1, r3
 8016f9a:	4808      	ldr	r0, [pc, #32]	; (8016fbc <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x50>)
 8016f9c:	f000 fbb7 	bl	801770e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_>

  *buffer_idx = scratch_buffers.size() - 1;
 8016fa0:	4806      	ldr	r0, [pc, #24]	; (8016fbc <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x50>)
 8016fa2:	f000 fbda 	bl	801775a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8016fa6:	4603      	mov	r3, r0
 8016fa8:	3b01      	subs	r3, #1
 8016faa:	461a      	mov	r2, r3
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 8016fb0:	2300      	movs	r3, #0
}
 8016fb2:	4618      	mov	r0, r3
 8016fb4:	3718      	adds	r7, #24
 8016fb6:	46bd      	mov	sp, r7
 8016fb8:	bd80      	pop	{r7, pc}
 8016fba:	bf00      	nop
 8016fbc:	20000da8 	.word	0x20000da8

08016fc0 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
 8016fc0:	b580      	push	{r7, lr}
 8016fc2:	b082      	sub	sp, #8
 8016fc4:	af00      	add	r7, sp, #0
 8016fc6:	6078      	str	r0, [r7, #4]
 8016fc8:	6039      	str	r1, [r7, #0]
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
 8016fca:	480d      	ldr	r0, [pc, #52]	; (8017000 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x40>)
 8016fcc:	f000 fbc5 	bl	801775a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8016fd0:	4603      	mov	r3, r0
 8016fd2:	461a      	mov	r2, r3
 8016fd4:	683b      	ldr	r3, [r7, #0]
 8016fd6:	4293      	cmp	r3, r2
 8016fd8:	bfac      	ite	ge
 8016fda:	2301      	movge	r3, #1
 8016fdc:	2300      	movlt	r3, #0
 8016fde:	b2db      	uxtb	r3, r3
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d001      	beq.n	8016fe8 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x28>
    return NULL;
 8016fe4:	2300      	movs	r3, #0
 8016fe6:	e006      	b.n	8016ff6 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x36>
  }
  return scratch_buffers[buffer_idx].ptr;
 8016fe8:	683b      	ldr	r3, [r7, #0]
 8016fea:	4619      	mov	r1, r3
 8016fec:	4804      	ldr	r0, [pc, #16]	; (8017000 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x40>)
 8016fee:	f000 fbc4 	bl	801777a <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEixEj>
 8016ff2:	4603      	mov	r3, r0
 8016ff4:	685b      	ldr	r3, [r3, #4]
}
 8016ff6:	4618      	mov	r0, r3
 8016ff8:	3708      	adds	r7, #8
 8016ffa:	46bd      	mov	sp, r7
 8016ffc:	bd80      	pop	{r7, pc}
 8016ffe:	bf00      	nop
 8017000:	20000da8 	.word	0x20000da8

08017004 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti>:

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
 8017004:	b480      	push	{r7}
 8017006:	b083      	sub	sp, #12
 8017008:	af00      	add	r7, sp, #0
 801700a:	6078      	str	r0, [r7, #4]
 801700c:	6039      	str	r1, [r7, #0]
  return &tflTensors[tensor_idx];
 801700e:	683b      	ldr	r3, [r7, #0]
 8017010:	019b      	lsls	r3, r3, #6
 8017012:	4a04      	ldr	r2, [pc, #16]	; (8017024 <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x20>)
 8017014:	4413      	add	r3, r2
}
 8017016:	4618      	mov	r0, r3
 8017018:	370c      	adds	r7, #12
 801701a:	46bd      	mov	sp, r7
 801701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017020:	4770      	bx	lr
 8017022:	bf00      	nop
 8017024:	20000988 	.word	0x20000988

08017028 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
 8017028:	b480      	push	{r7}
 801702a:	b083      	sub	sp, #12
 801702c:	af00      	add	r7, sp, #0
 801702e:	6078      	str	r0, [r7, #4]
 8017030:	6039      	str	r1, [r7, #0]
  return &tflEvalTensors[tensor_idx];
 8017032:	683a      	ldr	r2, [r7, #0]
 8017034:	4613      	mov	r3, r2
 8017036:	005b      	lsls	r3, r3, #1
 8017038:	4413      	add	r3, r2
 801703a:	009b      	lsls	r3, r3, #2
 801703c:	4a03      	ldr	r2, [pc, #12]	; (801704c <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x24>)
 801703e:	4413      	add	r3, r2
}
 8017040:	4618      	mov	r0, r3
 8017042:	370c      	adds	r7, #12
 8017044:	46bd      	mov	sp, r7
 8017046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801704a:	4770      	bx	lr
 801704c:	20000c48 	.word	0x20000c48

08017050 <_Z18trained_model_initPFPvjjE>:

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
 8017050:	b5b0      	push	{r4, r5, r7, lr}
 8017052:	b092      	sub	sp, #72	; 0x48
 8017054:	af00      	add	r7, sp, #0
 8017056:	6278      	str	r0, [r7, #36]	; 0x24
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 8017058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801705a:	f44f 7188 	mov.w	r1, #272	; 0x110
 801705e:	2010      	movs	r0, #16
 8017060:	4798      	blx	r3
 8017062:	4603      	mov	r3, r0
 8017064:	4aa3      	ldr	r2, [pc, #652]	; (80172f4 <_Z18trained_model_initPFPvjjE+0x2a4>)
 8017066:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 8017068:	4ba2      	ldr	r3, [pc, #648]	; (80172f4 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801706a:	681b      	ldr	r3, [r3, #0]
 801706c:	2b00      	cmp	r3, #0
 801706e:	d104      	bne.n	801707a <_Z18trained_model_initPFPvjjE+0x2a>
    printf("ERR: failed to allocate tensor arena\n");
 8017070:	48a1      	ldr	r0, [pc, #644]	; (80172f8 <_Z18trained_model_initPFPvjjE+0x2a8>)
 8017072:	f004 fae7 	bl	801b644 <puts>
    return kTfLiteError;
 8017076:	2301      	movs	r3, #1
 8017078:	e21d      	b.n	80174b6 <_Z18trained_model_initPFPvjjE+0x466>
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
 801707a:	4b9e      	ldr	r3, [pc, #632]	; (80172f4 <_Z18trained_model_initPFPvjjE+0x2a4>)
 801707c:	681b      	ldr	r3, [r3, #0]
 801707e:	4a9f      	ldr	r2, [pc, #636]	; (80172fc <_Z18trained_model_initPFPvjjE+0x2ac>)
 8017080:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 8017082:	4b9c      	ldr	r3, [pc, #624]	; (80172f4 <_Z18trained_model_initPFPvjjE+0x2a4>)
 8017084:	681b      	ldr	r3, [r3, #0]
 8017086:	f503 7388 	add.w	r3, r3, #272	; 0x110
 801708a:	4a9d      	ldr	r2, [pc, #628]	; (8017300 <_Z18trained_model_initPFPvjjE+0x2b0>)
 801708c:	6013      	str	r3, [r2, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 801708e:	4b9d      	ldr	r3, [pc, #628]	; (8017304 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8017090:	4a9d      	ldr	r2, [pc, #628]	; (8017308 <_Z18trained_model_initPFPvjjE+0x2b8>)
 8017092:	639a      	str	r2, [r3, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 8017094:	4b9b      	ldr	r3, [pc, #620]	; (8017304 <_Z18trained_model_initPFPvjjE+0x2b4>)
 8017096:	4a9d      	ldr	r2, [pc, #628]	; (801730c <_Z18trained_model_initPFPvjjE+0x2bc>)
 8017098:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
 801709a:	4b9a      	ldr	r3, [pc, #616]	; (8017304 <_Z18trained_model_initPFPvjjE+0x2b4>)
 801709c:	4a9c      	ldr	r2, [pc, #624]	; (8017310 <_Z18trained_model_initPFPvjjE+0x2c0>)
 801709e:	645a      	str	r2, [r3, #68]	; 0x44
  ctx.GetTensor = &GetTensor;
 80170a0:	4b98      	ldr	r3, [pc, #608]	; (8017304 <_Z18trained_model_initPFPvjjE+0x2b4>)
 80170a2:	4a9c      	ldr	r2, [pc, #624]	; (8017314 <_Z18trained_model_initPFPvjjE+0x2c4>)
 80170a4:	651a      	str	r2, [r3, #80]	; 0x50
  ctx.GetEvalTensor = &GetEvalTensor;
 80170a6:	4b97      	ldr	r3, [pc, #604]	; (8017304 <_Z18trained_model_initPFPvjjE+0x2b4>)
 80170a8:	4a9b      	ldr	r2, [pc, #620]	; (8017318 <_Z18trained_model_initPFPvjjE+0x2c8>)
 80170aa:	655a      	str	r2, [r3, #84]	; 0x54
  ctx.tensors = tflTensors;
 80170ac:	4b95      	ldr	r3, [pc, #596]	; (8017304 <_Z18trained_model_initPFPvjjE+0x2b4>)
 80170ae:	4a9b      	ldr	r2, [pc, #620]	; (801731c <_Z18trained_model_initPFPvjjE+0x2cc>)
 80170b0:	609a      	str	r2, [r3, #8]
  ctx.tensors_size = 11;
 80170b2:	4b94      	ldr	r3, [pc, #592]	; (8017304 <_Z18trained_model_initPFPvjjE+0x2b4>)
 80170b4:	220b      	movs	r2, #11
 80170b6:	601a      	str	r2, [r3, #0]
  for(size_t i = 0; i < 11; ++i) {
 80170b8:	2300      	movs	r3, #0
 80170ba:	647b      	str	r3, [r7, #68]	; 0x44
 80170bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80170be:	2b0a      	cmp	r3, #10
 80170c0:	f200 810c 	bhi.w	80172dc <_Z18trained_model_initPFPvjjE+0x28c>
    tflTensors[i].type = tensorData[i].type;
 80170c4:	4996      	ldr	r1, [pc, #600]	; (8017320 <_Z18trained_model_initPFPvjjE+0x2d0>)
 80170c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80170c8:	4613      	mov	r3, r2
 80170ca:	005b      	lsls	r3, r3, #1
 80170cc:	4413      	add	r3, r2
 80170ce:	00db      	lsls	r3, r3, #3
 80170d0:	440b      	add	r3, r1
 80170d2:	3301      	adds	r3, #1
 80170d4:	7819      	ldrb	r1, [r3, #0]
 80170d6:	4a91      	ldr	r2, [pc, #580]	; (801731c <_Z18trained_model_initPFPvjjE+0x2cc>)
 80170d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80170da:	019b      	lsls	r3, r3, #6
 80170dc:	4413      	add	r3, r2
 80170de:	460a      	mov	r2, r1
 80170e0:	701a      	strb	r2, [r3, #0]
    tflEvalTensors[i].type = tensorData[i].type;
 80170e2:	498f      	ldr	r1, [pc, #572]	; (8017320 <_Z18trained_model_initPFPvjjE+0x2d0>)
 80170e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80170e6:	4613      	mov	r3, r2
 80170e8:	005b      	lsls	r3, r3, #1
 80170ea:	4413      	add	r3, r2
 80170ec:	00db      	lsls	r3, r3, #3
 80170ee:	440b      	add	r3, r1
 80170f0:	3301      	adds	r3, #1
 80170f2:	7818      	ldrb	r0, [r3, #0]
 80170f4:	498b      	ldr	r1, [pc, #556]	; (8017324 <_Z18trained_model_initPFPvjjE+0x2d4>)
 80170f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80170f8:	4613      	mov	r3, r2
 80170fa:	005b      	lsls	r3, r3, #1
 80170fc:	4413      	add	r3, r2
 80170fe:	009b      	lsls	r3, r3, #2
 8017100:	440b      	add	r3, r1
 8017102:	3308      	adds	r3, #8
 8017104:	4602      	mov	r2, r0
 8017106:	701a      	strb	r2, [r3, #0]
    tflTensors[i].is_variable = 0;
 8017108:	4a84      	ldr	r2, [pc, #528]	; (801731c <_Z18trained_model_initPFPvjjE+0x2cc>)
 801710a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801710c:	019b      	lsls	r3, r3, #6
 801710e:	4413      	add	r3, r2
 8017110:	332d      	adds	r3, #45	; 0x2d
 8017112:	2200      	movs	r2, #0
 8017114:	701a      	strb	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
 8017116:	4982      	ldr	r1, [pc, #520]	; (8017320 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017118:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801711a:	4613      	mov	r3, r2
 801711c:	005b      	lsls	r3, r3, #1
 801711e:	4413      	add	r3, r2
 8017120:	00db      	lsls	r3, r3, #3
 8017122:	440b      	add	r3, r1
 8017124:	7819      	ldrb	r1, [r3, #0]
 8017126:	4a7d      	ldr	r2, [pc, #500]	; (801731c <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801712a:	019b      	lsls	r3, r3, #6
 801712c:	4413      	add	r3, r2
 801712e:	3314      	adds	r3, #20
 8017130:	460a      	mov	r2, r1
 8017132:	701a      	strb	r2, [r3, #0]
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
 8017134:	497a      	ldr	r1, [pc, #488]	; (8017320 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017136:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017138:	4613      	mov	r3, r2
 801713a:	005b      	lsls	r3, r3, #1
 801713c:	4413      	add	r3, r2
 801713e:	00db      	lsls	r3, r3, #3
 8017140:	440b      	add	r3, r1
 8017142:	330c      	adds	r3, #12
 8017144:	681a      	ldr	r2, [r3, #0]
 8017146:	4975      	ldr	r1, [pc, #468]	; (801731c <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801714a:	019b      	lsls	r3, r3, #6
 801714c:	440b      	add	r3, r1
 801714e:	3318      	adds	r3, #24
 8017150:	601a      	str	r2, [r3, #0]
    tflTensors[i].dims = tensorData[i].dims;
 8017152:	4973      	ldr	r1, [pc, #460]	; (8017320 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017154:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017156:	4613      	mov	r3, r2
 8017158:	005b      	lsls	r3, r3, #1
 801715a:	4413      	add	r3, r2
 801715c:	00db      	lsls	r3, r3, #3
 801715e:	440b      	add	r3, r1
 8017160:	3308      	adds	r3, #8
 8017162:	681a      	ldr	r2, [r3, #0]
 8017164:	496d      	ldr	r1, [pc, #436]	; (801731c <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017168:	019b      	lsls	r3, r3, #6
 801716a:	440b      	add	r3, r1
 801716c:	3308      	adds	r3, #8
 801716e:	601a      	str	r2, [r3, #0]
    tflEvalTensors[i].dims = tensorData[i].dims;
 8017170:	496b      	ldr	r1, [pc, #428]	; (8017320 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017172:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017174:	4613      	mov	r3, r2
 8017176:	005b      	lsls	r3, r3, #1
 8017178:	4413      	add	r3, r2
 801717a:	00db      	lsls	r3, r3, #3
 801717c:	440b      	add	r3, r1
 801717e:	3308      	adds	r3, #8
 8017180:	6819      	ldr	r1, [r3, #0]
 8017182:	4868      	ldr	r0, [pc, #416]	; (8017324 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8017184:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017186:	4613      	mov	r3, r2
 8017188:	005b      	lsls	r3, r3, #1
 801718a:	4413      	add	r3, r2
 801718c:	009b      	lsls	r3, r3, #2
 801718e:	4403      	add	r3, r0
 8017190:	3304      	adds	r3, #4
 8017192:	6019      	str	r1, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
 8017194:	4a61      	ldr	r2, [pc, #388]	; (801731c <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017198:	019b      	lsls	r3, r3, #6
 801719a:	4413      	add	r3, r2
 801719c:	3314      	adds	r3, #20
 801719e:	781b      	ldrb	r3, [r3, #0]
 80171a0:	2b02      	cmp	r3, #2
 80171a2:	d11e      	bne.n	80171e2 <_Z18trained_model_initPFPvjjE+0x192>
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 80171a4:	495e      	ldr	r1, [pc, #376]	; (8017320 <_Z18trained_model_initPFPvjjE+0x2d0>)
 80171a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80171a8:	4613      	mov	r3, r2
 80171aa:	005b      	lsls	r3, r3, #1
 80171ac:	4413      	add	r3, r2
 80171ae:	00db      	lsls	r3, r3, #3
 80171b0:	440b      	add	r3, r1
 80171b2:	3304      	adds	r3, #4
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	461a      	mov	r2, r3
 80171b8:	4b4e      	ldr	r3, [pc, #312]	; (80172f4 <_Z18trained_model_initPFPvjjE+0x2a4>)
 80171ba:	681b      	ldr	r3, [r3, #0]
 80171bc:	4413      	add	r3, r2
 80171be:	63bb      	str	r3, [r7, #56]	; 0x38

     tflTensors[i].data.data =  start;
 80171c0:	4a56      	ldr	r2, [pc, #344]	; (801731c <_Z18trained_model_initPFPvjjE+0x2cc>)
 80171c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80171c4:	019b      	lsls	r3, r3, #6
 80171c6:	4413      	add	r3, r2
 80171c8:	3304      	adds	r3, #4
 80171ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80171cc:	601a      	str	r2, [r3, #0]
     tflEvalTensors[i].data.data =  start;
 80171ce:	4955      	ldr	r1, [pc, #340]	; (8017324 <_Z18trained_model_initPFPvjjE+0x2d4>)
 80171d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80171d2:	4613      	mov	r3, r2
 80171d4:	005b      	lsls	r3, r3, #1
 80171d6:	4413      	add	r3, r2
 80171d8:	009b      	lsls	r3, r3, #2
 80171da:	440b      	add	r3, r1
 80171dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80171de:	601a      	str	r2, [r3, #0]
 80171e0:	e01f      	b.n	8017222 <_Z18trained_model_initPFPvjjE+0x1d2>
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
 80171e2:	494f      	ldr	r1, [pc, #316]	; (8017320 <_Z18trained_model_initPFPvjjE+0x2d0>)
 80171e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80171e6:	4613      	mov	r3, r2
 80171e8:	005b      	lsls	r3, r3, #1
 80171ea:	4413      	add	r3, r2
 80171ec:	00db      	lsls	r3, r3, #3
 80171ee:	440b      	add	r3, r1
 80171f0:	3304      	adds	r3, #4
 80171f2:	681a      	ldr	r2, [r3, #0]
 80171f4:	4949      	ldr	r1, [pc, #292]	; (801731c <_Z18trained_model_initPFPvjjE+0x2cc>)
 80171f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80171f8:	019b      	lsls	r3, r3, #6
 80171fa:	440b      	add	r3, r1
 80171fc:	3304      	adds	r3, #4
 80171fe:	601a      	str	r2, [r3, #0]
       tflEvalTensors[i].data.data = tensorData[i].data;
 8017200:	4947      	ldr	r1, [pc, #284]	; (8017320 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017202:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017204:	4613      	mov	r3, r2
 8017206:	005b      	lsls	r3, r3, #1
 8017208:	4413      	add	r3, r2
 801720a:	00db      	lsls	r3, r3, #3
 801720c:	440b      	add	r3, r1
 801720e:	3304      	adds	r3, #4
 8017210:	6819      	ldr	r1, [r3, #0]
 8017212:	4844      	ldr	r0, [pc, #272]	; (8017324 <_Z18trained_model_initPFPvjjE+0x2d4>)
 8017214:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017216:	4613      	mov	r3, r2
 8017218:	005b      	lsls	r3, r3, #1
 801721a:	4413      	add	r3, r2
 801721c:	009b      	lsls	r3, r3, #2
 801721e:	4403      	add	r3, r0
 8017220:	6019      	str	r1, [r3, #0]
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
 8017222:	4a3e      	ldr	r2, [pc, #248]	; (801731c <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017226:	019b      	lsls	r3, r3, #6
 8017228:	4413      	add	r3, r2
 801722a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801722e:	493c      	ldr	r1, [pc, #240]	; (8017320 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8017230:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017232:	4613      	mov	r3, r2
 8017234:	005b      	lsls	r3, r3, #1
 8017236:	4413      	add	r3, r2
 8017238:	00db      	lsls	r3, r3, #3
 801723a:	440b      	add	r3, r1
 801723c:	f103 0210 	add.w	r2, r3, #16
 8017240:	4603      	mov	r3, r0
 8017242:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017246:	e883 0003 	stmia.w	r3, {r0, r1}
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
 801724a:	4a34      	ldr	r2, [pc, #208]	; (801731c <_Z18trained_model_initPFPvjjE+0x2cc>)
 801724c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801724e:	019b      	lsls	r3, r3, #6
 8017250:	4413      	add	r3, r2
 8017252:	3330      	adds	r3, #48	; 0x30
 8017254:	781b      	ldrb	r3, [r3, #0]
 8017256:	2b01      	cmp	r3, #1
 8017258:	d11b      	bne.n	8017292 <_Z18trained_model_initPFPvjjE+0x242>
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
 801725a:	4931      	ldr	r1, [pc, #196]	; (8017320 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801725c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801725e:	4613      	mov	r3, r2
 8017260:	005b      	lsls	r3, r3, #1
 8017262:	4413      	add	r3, r2
 8017264:	00db      	lsls	r3, r3, #3
 8017266:	440b      	add	r3, r1
 8017268:	3314      	adds	r3, #20
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	637b      	str	r3, [r7, #52]	; 0x34
      tflTensors[i].params.scale = quant->scale->data[0];
 801726e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	685a      	ldr	r2, [r3, #4]
 8017274:	4929      	ldr	r1, [pc, #164]	; (801731c <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017278:	019b      	lsls	r3, r3, #6
 801727a:	440b      	add	r3, r1
 801727c:	330c      	adds	r3, #12
 801727e:	601a      	str	r2, [r3, #0]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
 8017280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017282:	685b      	ldr	r3, [r3, #4]
 8017284:	685a      	ldr	r2, [r3, #4]
 8017286:	4925      	ldr	r1, [pc, #148]	; (801731c <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801728a:	019b      	lsls	r3, r3, #6
 801728c:	440b      	add	r3, r1
 801728e:	3310      	adds	r3, #16
 8017290:	601a      	str	r2, [r3, #0]
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
 8017292:	4a22      	ldr	r2, [pc, #136]	; (801731c <_Z18trained_model_initPFPvjjE+0x2cc>)
 8017294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017296:	019b      	lsls	r3, r3, #6
 8017298:	4413      	add	r3, r2
 801729a:	3314      	adds	r3, #20
 801729c:	781b      	ldrb	r3, [r3, #0]
 801729e:	2b02      	cmp	r3, #2
 80172a0:	d118      	bne.n	80172d4 <_Z18trained_model_initPFPvjjE+0x284>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
 80172a2:	4a1e      	ldr	r2, [pc, #120]	; (801731c <_Z18trained_model_initPFPvjjE+0x2cc>)
 80172a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80172a6:	019b      	lsls	r3, r3, #6
 80172a8:	4413      	add	r3, r2
 80172aa:	3304      	adds	r3, #4
 80172ac:	6819      	ldr	r1, [r3, #0]
 80172ae:	481c      	ldr	r0, [pc, #112]	; (8017320 <_Z18trained_model_initPFPvjjE+0x2d0>)
 80172b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80172b2:	4613      	mov	r3, r2
 80172b4:	005b      	lsls	r3, r3, #1
 80172b6:	4413      	add	r3, r2
 80172b8:	00db      	lsls	r3, r3, #3
 80172ba:	4403      	add	r3, r0
 80172bc:	330c      	adds	r3, #12
 80172be:	681b      	ldr	r3, [r3, #0]
 80172c0:	440b      	add	r3, r1
 80172c2:	633b      	str	r3, [r7, #48]	; 0x30
      if (data_end_ptr > tensor_boundary) {
 80172c4:	4b0d      	ldr	r3, [pc, #52]	; (80172fc <_Z18trained_model_initPFPvjjE+0x2ac>)
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80172ca:	429a      	cmp	r2, r3
 80172cc:	d902      	bls.n	80172d4 <_Z18trained_model_initPFPvjjE+0x284>
        tensor_boundary = data_end_ptr;
 80172ce:	4a0b      	ldr	r2, [pc, #44]	; (80172fc <_Z18trained_model_initPFPvjjE+0x2ac>)
 80172d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172d2:	6013      	str	r3, [r2, #0]
  for(size_t i = 0; i < 11; ++i) {
 80172d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80172d6:	3301      	adds	r3, #1
 80172d8:	647b      	str	r3, [r7, #68]	; 0x44
 80172da:	e6ef      	b.n	80170bc <_Z18trained_model_initPFPvjjE+0x6c>
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
 80172dc:	4b07      	ldr	r3, [pc, #28]	; (80172fc <_Z18trained_model_initPFPvjjE+0x2ac>)
 80172de:	681a      	ldr	r2, [r3, #0]
 80172e0:	4b07      	ldr	r3, [pc, #28]	; (8017300 <_Z18trained_model_initPFPvjjE+0x2b0>)
 80172e2:	681b      	ldr	r3, [r3, #0]
 80172e4:	429a      	cmp	r2, r3
 80172e6:	d921      	bls.n	801732c <_Z18trained_model_initPFPvjjE+0x2dc>
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 80172e8:	480f      	ldr	r0, [pc, #60]	; (8017328 <_Z18trained_model_initPFPvjjE+0x2d8>)
 80172ea:	f004 f9ab 	bl	801b644 <puts>
    return kTfLiteError;
 80172ee:	2301      	movs	r3, #1
 80172f0:	e0e1      	b.n	80174b6 <_Z18trained_model_initPFPvjjE+0x466>
 80172f2:	bf00      	nop
 80172f4:	20000924 	.word	0x20000924
 80172f8:	0801daa8 	.word	0x0801daa8
 80172fc:	20000928 	.word	0x20000928
 8017300:	2000092c 	.word	0x2000092c
 8017304:	20000930 	.word	0x20000930
 8017308:	08016e99 	.word	0x08016e99
 801730c:	08016f6d 	.word	0x08016f6d
 8017310:	08016fc1 	.word	0x08016fc1
 8017314:	08017005 	.word	0x08017005
 8017318:	08017029 	.word	0x08017029
 801731c:	20000988 	.word	0x20000988
 8017320:	200000fc 	.word	0x200000fc
 8017324:	20000c48 	.word	0x20000c48
 8017328:	0801dad0 	.word	0x0801dad0
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 801732c:	4c64      	ldr	r4, [pc, #400]	; (80174c0 <_Z18trained_model_initPFPvjjE+0x470>)
 801732e:	463b      	mov	r3, r7
 8017330:	4618      	mov	r0, r3
 8017332:	f7fd fc1f 	bl	8014b74 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 8017336:	4625      	mov	r5, r4
 8017338:	463c      	mov	r4, r7
 801733a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801733c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801733e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017342:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
 8017346:	4c5e      	ldr	r4, [pc, #376]	; (80174c0 <_Z18trained_model_initPFPvjjE+0x470>)
 8017348:	463b      	mov	r3, r7
 801734a:	4618      	mov	r0, r3
 801734c:	f7fe fb22 	bl	8015994 <_ZN6tflite16Register_SOFTMAXEv>
 8017350:	3420      	adds	r4, #32
 8017352:	463d      	mov	r5, r7
 8017354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017358:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801735c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for(size_t i = 0; i < 4; ++i) {
 8017360:	2300      	movs	r3, #0
 8017362:	643b      	str	r3, [r7, #64]	; 0x40
 8017364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017366:	2b03      	cmp	r3, #3
 8017368:	d86f      	bhi.n	801744a <_Z18trained_model_initPFPvjjE+0x3fa>
    tflNodes[i].inputs = nodeData[i].inputs;
 801736a:	4a56      	ldr	r2, [pc, #344]	; (80174c4 <_Z18trained_model_initPFPvjjE+0x474>)
 801736c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801736e:	011b      	lsls	r3, r3, #4
 8017370:	4413      	add	r3, r2
 8017372:	6819      	ldr	r1, [r3, #0]
 8017374:	4854      	ldr	r0, [pc, #336]	; (80174c8 <_Z18trained_model_initPFPvjjE+0x478>)
 8017376:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017378:	4613      	mov	r3, r2
 801737a:	00db      	lsls	r3, r3, #3
 801737c:	4413      	add	r3, r2
 801737e:	009b      	lsls	r3, r3, #2
 8017380:	4403      	add	r3, r0
 8017382:	6019      	str	r1, [r3, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
 8017384:	4a4f      	ldr	r2, [pc, #316]	; (80174c4 <_Z18trained_model_initPFPvjjE+0x474>)
 8017386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017388:	011b      	lsls	r3, r3, #4
 801738a:	4413      	add	r3, r2
 801738c:	3304      	adds	r3, #4
 801738e:	6819      	ldr	r1, [r3, #0]
 8017390:	484d      	ldr	r0, [pc, #308]	; (80174c8 <_Z18trained_model_initPFPvjjE+0x478>)
 8017392:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017394:	4613      	mov	r3, r2
 8017396:	00db      	lsls	r3, r3, #3
 8017398:	4413      	add	r3, r2
 801739a:	009b      	lsls	r3, r3, #2
 801739c:	4403      	add	r3, r0
 801739e:	3304      	adds	r3, #4
 80173a0:	6019      	str	r1, [r3, #0]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
 80173a2:	4a48      	ldr	r2, [pc, #288]	; (80174c4 <_Z18trained_model_initPFPvjjE+0x474>)
 80173a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80173a6:	011b      	lsls	r3, r3, #4
 80173a8:	4413      	add	r3, r2
 80173aa:	3308      	adds	r3, #8
 80173ac:	6819      	ldr	r1, [r3, #0]
 80173ae:	4846      	ldr	r0, [pc, #280]	; (80174c8 <_Z18trained_model_initPFPvjjE+0x478>)
 80173b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80173b2:	4613      	mov	r3, r2
 80173b4:	00db      	lsls	r3, r3, #3
 80173b6:	4413      	add	r3, r2
 80173b8:	009b      	lsls	r3, r3, #2
 80173ba:	4403      	add	r3, r0
 80173bc:	3314      	adds	r3, #20
 80173be:	6019      	str	r1, [r3, #0]
tflNodes[i].custom_initial_data = nullptr;
 80173c0:	4941      	ldr	r1, [pc, #260]	; (80174c8 <_Z18trained_model_initPFPvjjE+0x478>)
 80173c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80173c4:	4613      	mov	r3, r2
 80173c6:	00db      	lsls	r3, r3, #3
 80173c8:	4413      	add	r3, r2
 80173ca:	009b      	lsls	r3, r3, #2
 80173cc:	440b      	add	r3, r1
 80173ce:	3318      	adds	r3, #24
 80173d0:	2200      	movs	r2, #0
 80173d2:	601a      	str	r2, [r3, #0]
      tflNodes[i].custom_initial_data_size = 0;
 80173d4:	493c      	ldr	r1, [pc, #240]	; (80174c8 <_Z18trained_model_initPFPvjjE+0x478>)
 80173d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80173d8:	4613      	mov	r3, r2
 80173da:	00db      	lsls	r3, r3, #3
 80173dc:	4413      	add	r3, r2
 80173de:	009b      	lsls	r3, r3, #2
 80173e0:	440b      	add	r3, r1
 80173e2:	331c      	adds	r3, #28
 80173e4:	2200      	movs	r2, #0
 80173e6:	601a      	str	r2, [r3, #0]
if (registrations[nodeData[i].used_op_index].init) {
 80173e8:	4a36      	ldr	r2, [pc, #216]	; (80174c4 <_Z18trained_model_initPFPvjjE+0x474>)
 80173ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80173ec:	011b      	lsls	r3, r3, #4
 80173ee:	4413      	add	r3, r2
 80173f0:	330c      	adds	r3, #12
 80173f2:	781b      	ldrb	r3, [r3, #0]
 80173f4:	4a32      	ldr	r2, [pc, #200]	; (80174c0 <_Z18trained_model_initPFPvjjE+0x470>)
 80173f6:	015b      	lsls	r3, r3, #5
 80173f8:	4413      	add	r3, r2
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d020      	beq.n	8017442 <_Z18trained_model_initPFPvjjE+0x3f2>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 8017400:	4a30      	ldr	r2, [pc, #192]	; (80174c4 <_Z18trained_model_initPFPvjjE+0x474>)
 8017402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017404:	011b      	lsls	r3, r3, #4
 8017406:	4413      	add	r3, r2
 8017408:	330c      	adds	r3, #12
 801740a:	781b      	ldrb	r3, [r3, #0]
 801740c:	4a2c      	ldr	r2, [pc, #176]	; (80174c0 <_Z18trained_model_initPFPvjjE+0x470>)
 801740e:	015b      	lsls	r3, r3, #5
 8017410:	4413      	add	r3, r2
 8017412:	681c      	ldr	r4, [r3, #0]
 8017414:	492c      	ldr	r1, [pc, #176]	; (80174c8 <_Z18trained_model_initPFPvjjE+0x478>)
 8017416:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017418:	4613      	mov	r3, r2
 801741a:	00db      	lsls	r3, r3, #3
 801741c:	4413      	add	r3, r2
 801741e:	009b      	lsls	r3, r3, #2
 8017420:	440b      	add	r3, r1
 8017422:	3314      	adds	r3, #20
 8017424:	681b      	ldr	r3, [r3, #0]
 8017426:	2200      	movs	r2, #0
 8017428:	4619      	mov	r1, r3
 801742a:	4828      	ldr	r0, [pc, #160]	; (80174cc <_Z18trained_model_initPFPvjjE+0x47c>)
 801742c:	47a0      	blx	r4
 801742e:	4601      	mov	r1, r0
 8017430:	4825      	ldr	r0, [pc, #148]	; (80174c8 <_Z18trained_model_initPFPvjjE+0x478>)
 8017432:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017434:	4613      	mov	r3, r2
 8017436:	00db      	lsls	r3, r3, #3
 8017438:	4413      	add	r3, r2
 801743a:	009b      	lsls	r3, r3, #2
 801743c:	4403      	add	r3, r0
 801743e:	3310      	adds	r3, #16
 8017440:	6019      	str	r1, [r3, #0]
  for(size_t i = 0; i < 4; ++i) {
 8017442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017444:	3301      	adds	r3, #1
 8017446:	643b      	str	r3, [r7, #64]	; 0x40
 8017448:	e78c      	b.n	8017364 <_Z18trained_model_initPFPvjjE+0x314>
    }
  }
  for(size_t i = 0; i < 4; ++i) {
 801744a:	2300      	movs	r3, #0
 801744c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801744e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017450:	2b03      	cmp	r3, #3
 8017452:	d82f      	bhi.n	80174b4 <_Z18trained_model_initPFPvjjE+0x464>
    if (registrations[nodeData[i].used_op_index].prepare) {
 8017454:	4a1b      	ldr	r2, [pc, #108]	; (80174c4 <_Z18trained_model_initPFPvjjE+0x474>)
 8017456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017458:	011b      	lsls	r3, r3, #4
 801745a:	4413      	add	r3, r2
 801745c:	330c      	adds	r3, #12
 801745e:	781b      	ldrb	r3, [r3, #0]
 8017460:	4a17      	ldr	r2, [pc, #92]	; (80174c0 <_Z18trained_model_initPFPvjjE+0x470>)
 8017462:	015b      	lsls	r3, r3, #5
 8017464:	4413      	add	r3, r2
 8017466:	3308      	adds	r3, #8
 8017468:	681b      	ldr	r3, [r3, #0]
 801746a:	2b00      	cmp	r3, #0
 801746c:	d01e      	beq.n	80174ac <_Z18trained_model_initPFPvjjE+0x45c>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 801746e:	4a15      	ldr	r2, [pc, #84]	; (80174c4 <_Z18trained_model_initPFPvjjE+0x474>)
 8017470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017472:	011b      	lsls	r3, r3, #4
 8017474:	4413      	add	r3, r2
 8017476:	330c      	adds	r3, #12
 8017478:	781b      	ldrb	r3, [r3, #0]
 801747a:	4a11      	ldr	r2, [pc, #68]	; (80174c0 <_Z18trained_model_initPFPvjjE+0x470>)
 801747c:	015b      	lsls	r3, r3, #5
 801747e:	4413      	add	r3, r2
 8017480:	3308      	adds	r3, #8
 8017482:	681c      	ldr	r4, [r3, #0]
 8017484:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017486:	4613      	mov	r3, r2
 8017488:	00db      	lsls	r3, r3, #3
 801748a:	4413      	add	r3, r2
 801748c:	009b      	lsls	r3, r3, #2
 801748e:	4a0e      	ldr	r2, [pc, #56]	; (80174c8 <_Z18trained_model_initPFPvjjE+0x478>)
 8017490:	4413      	add	r3, r2
 8017492:	4619      	mov	r1, r3
 8017494:	480d      	ldr	r0, [pc, #52]	; (80174cc <_Z18trained_model_initPFPvjjE+0x47c>)
 8017496:	47a0      	blx	r4
 8017498:	4603      	mov	r3, r0
 801749a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (status != kTfLiteOk) {
 801749e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d002      	beq.n	80174ac <_Z18trained_model_initPFPvjjE+0x45c>
        return status;
 80174a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80174aa:	e004      	b.n	80174b6 <_Z18trained_model_initPFPvjjE+0x466>
  for(size_t i = 0; i < 4; ++i) {
 80174ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80174ae:	3301      	adds	r3, #1
 80174b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80174b2:	e7cc      	b.n	801744e <_Z18trained_model_initPFPvjjE+0x3fe>
      }
    }
  }
  return kTfLiteOk;
 80174b4:	2300      	movs	r3, #0
}
 80174b6:	4618      	mov	r0, r3
 80174b8:	3748      	adds	r7, #72	; 0x48
 80174ba:	46bd      	mov	sp, r7
 80174bc:	bdb0      	pop	{r4, r5, r7, pc}
 80174be:	bf00      	nop
 80174c0:	20000ccc 	.word	0x20000ccc
 80174c4:	0801ef80 	.word	0x0801ef80
 80174c8:	20000d0c 	.word	0x20000d0c
 80174cc:	20000930 	.word	0x20000930

080174d0 <_Z19trained_model_inputi>:

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
 80174d0:	b480      	push	{r7}
 80174d2:	b083      	sub	sp, #12
 80174d4:	af00      	add	r7, sp, #0
 80174d6:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[inTensorIndices[index]];
 80174d8:	4b05      	ldr	r3, [pc, #20]	; (80174f0 <_Z19trained_model_inputi+0x20>)
 80174da:	689a      	ldr	r2, [r3, #8]
 80174dc:	2300      	movs	r3, #0
 80174de:	019b      	lsls	r3, r3, #6
 80174e0:	4413      	add	r3, r2
}
 80174e2:	4618      	mov	r0, r3
 80174e4:	370c      	adds	r7, #12
 80174e6:	46bd      	mov	sp, r7
 80174e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ec:	4770      	bx	lr
 80174ee:	bf00      	nop
 80174f0:	20000930 	.word	0x20000930

080174f4 <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
 80174f4:	b480      	push	{r7}
 80174f6:	b083      	sub	sp, #12
 80174f8:	af00      	add	r7, sp, #0
 80174fa:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[outTensorIndices[index]];
 80174fc:	4b05      	ldr	r3, [pc, #20]	; (8017514 <_Z20trained_model_outputi+0x20>)
 80174fe:	689a      	ldr	r2, [r3, #8]
 8017500:	230a      	movs	r3, #10
 8017502:	019b      	lsls	r3, r3, #6
 8017504:	4413      	add	r3, r2
}
 8017506:	4618      	mov	r0, r3
 8017508:	370c      	adds	r7, #12
 801750a:	46bd      	mov	sp, r7
 801750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017510:	4770      	bx	lr
 8017512:	bf00      	nop
 8017514:	20000930 	.word	0x20000930

08017518 <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
 8017518:	b590      	push	{r4, r7, lr}
 801751a:	b083      	sub	sp, #12
 801751c:	af00      	add	r7, sp, #0
  for(size_t i = 0; i < 4; ++i) {
 801751e:	2300      	movs	r3, #0
 8017520:	607b      	str	r3, [r7, #4]
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	2b03      	cmp	r3, #3
 8017526:	d81f      	bhi.n	8017568 <_Z20trained_model_invokev+0x50>
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 8017528:	4a12      	ldr	r2, [pc, #72]	; (8017574 <_Z20trained_model_invokev+0x5c>)
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	011b      	lsls	r3, r3, #4
 801752e:	4413      	add	r3, r2
 8017530:	330c      	adds	r3, #12
 8017532:	781b      	ldrb	r3, [r3, #0]
 8017534:	4a10      	ldr	r2, [pc, #64]	; (8017578 <_Z20trained_model_invokev+0x60>)
 8017536:	015b      	lsls	r3, r3, #5
 8017538:	4413      	add	r3, r2
 801753a:	330c      	adds	r3, #12
 801753c:	681c      	ldr	r4, [r3, #0]
 801753e:	687a      	ldr	r2, [r7, #4]
 8017540:	4613      	mov	r3, r2
 8017542:	00db      	lsls	r3, r3, #3
 8017544:	4413      	add	r3, r2
 8017546:	009b      	lsls	r3, r3, #2
 8017548:	4a0c      	ldr	r2, [pc, #48]	; (801757c <_Z20trained_model_invokev+0x64>)
 801754a:	4413      	add	r3, r2
 801754c:	4619      	mov	r1, r3
 801754e:	480c      	ldr	r0, [pc, #48]	; (8017580 <_Z20trained_model_invokev+0x68>)
 8017550:	47a0      	blx	r4
 8017552:	4603      	mov	r3, r0
 8017554:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 8017556:	78fb      	ldrb	r3, [r7, #3]
 8017558:	2b00      	cmp	r3, #0
 801755a:	d001      	beq.n	8017560 <_Z20trained_model_invokev+0x48>
      return status;
 801755c:	78fb      	ldrb	r3, [r7, #3]
 801755e:	e004      	b.n	801756a <_Z20trained_model_invokev+0x52>
  for(size_t i = 0; i < 4; ++i) {
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	3301      	adds	r3, #1
 8017564:	607b      	str	r3, [r7, #4]
 8017566:	e7dc      	b.n	8017522 <_Z20trained_model_invokev+0xa>
    }
  }
  return kTfLiteOk;
 8017568:	2300      	movs	r3, #0
}
 801756a:	4618      	mov	r0, r3
 801756c:	370c      	adds	r7, #12
 801756e:	46bd      	mov	sp, r7
 8017570:	bd90      	pop	{r4, r7, pc}
 8017572:	bf00      	nop
 8017574:	0801ef80 	.word	0x0801ef80
 8017578:	20000ccc 	.word	0x20000ccc
 801757c:	20000d0c 	.word	0x20000d0c
 8017580:	20000930 	.word	0x20000930

08017584 <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
 8017584:	b580      	push	{r7, lr}
 8017586:	b084      	sub	sp, #16
 8017588:	af00      	add	r7, sp, #0
 801758a:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 801758c:	4b15      	ldr	r3, [pc, #84]	; (80175e4 <_Z19trained_model_resetPFvPvE+0x60>)
 801758e:	681a      	ldr	r2, [r3, #0]
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	4610      	mov	r0, r2
 8017594:	4798      	blx	r3
#endif
  scratch_buffers.clear();
 8017596:	4814      	ldr	r0, [pc, #80]	; (80175e8 <_Z19trained_model_resetPFvPvE+0x64>)
 8017598:	f000 f8ff 	bl	801779a <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5clearEv>
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
 801759c:	2300      	movs	r3, #0
 801759e:	60fb      	str	r3, [r7, #12]
 80175a0:	4812      	ldr	r0, [pc, #72]	; (80175ec <_Z19trained_model_resetPFvPvE+0x68>)
 80175a2:	f000 f908 	bl	80177b6 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 80175a6:	4602      	mov	r2, r0
 80175a8:	68fb      	ldr	r3, [r7, #12]
 80175aa:	4293      	cmp	r3, r2
 80175ac:	bf34      	ite	cc
 80175ae:	2301      	movcc	r3, #1
 80175b0:	2300      	movcs	r3, #0
 80175b2:	b2db      	uxtb	r3, r3
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d00c      	beq.n	80175d2 <_Z19trained_model_resetPFvPvE+0x4e>
    free(overflow_buffers[ix]);
 80175b8:	68f9      	ldr	r1, [r7, #12]
 80175ba:	480c      	ldr	r0, [pc, #48]	; (80175ec <_Z19trained_model_resetPFvPvE+0x68>)
 80175bc:	f000 f90b 	bl	80177d6 <_ZNSt6vectorIPvSaIS0_EEixEj>
 80175c0:	4603      	mov	r3, r0
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	4618      	mov	r0, r3
 80175c6:	f003 fb9b 	bl	801ad00 <free>
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
 80175ca:	68fb      	ldr	r3, [r7, #12]
 80175cc:	3301      	adds	r3, #1
 80175ce:	60fb      	str	r3, [r7, #12]
 80175d0:	e7e6      	b.n	80175a0 <_Z19trained_model_resetPFvPvE+0x1c>
  }
  overflow_buffers.clear();
 80175d2:	4806      	ldr	r0, [pc, #24]	; (80175ec <_Z19trained_model_resetPFvPvE+0x68>)
 80175d4:	f000 f90f 	bl	80177f6 <_ZNSt6vectorIPvSaIS0_EE5clearEv>
  return kTfLiteOk;
 80175d8:	2300      	movs	r3, #0
}
 80175da:	4618      	mov	r0, r3
 80175dc:	3710      	adds	r7, #16
 80175de:	46bd      	mov	sp, r7
 80175e0:	bd80      	pop	{r7, pc}
 80175e2:	bf00      	nop
 80175e4:	20000924 	.word	0x20000924
 80175e8:	20000da8 	.word	0x20000da8
 80175ec:	20000d9c 	.word	0x20000d9c

080175f0 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80175f0:	b580      	push	{r7, lr}
 80175f2:	b082      	sub	sp, #8
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80175f8:	6878      	ldr	r0, [r7, #4]
 80175fa:	f000 f90a 	bl	8017812 <_ZNSaIPvEC1Ev>
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	4618      	mov	r0, r3
 8017602:	f000 f912 	bl	801782a <_ZNSt12_Vector_baseIPvSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	4618      	mov	r0, r3
 801760a:	3708      	adds	r7, #8
 801760c:	46bd      	mov	sp, r7
 801760e:	bd80      	pop	{r7, pc}

08017610 <_ZNSaIPvED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8017610:	b580      	push	{r7, lr}
 8017612:	b082      	sub	sp, #8
 8017614:	af00      	add	r7, sp, #0
 8017616:	6078      	str	r0, [r7, #4]
 8017618:	6878      	ldr	r0, [r7, #4]
 801761a:	f000 f91a 	bl	8017852 <_ZN9__gnu_cxx13new_allocatorIPvED1Ev>
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	4618      	mov	r0, r3
 8017622:	3708      	adds	r7, #8
 8017624:	46bd      	mov	sp, r7
 8017626:	bd80      	pop	{r7, pc}

08017628 <_ZNSt12_Vector_baseIPvSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8017628:	b580      	push	{r7, lr}
 801762a:	b082      	sub	sp, #8
 801762c:	af00      	add	r7, sp, #0
 801762e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	689a      	ldr	r2, [r3, #8]
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	681b      	ldr	r3, [r3, #0]
 801763c:	1ad3      	subs	r3, r2, r3
 801763e:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8017640:	461a      	mov	r2, r3
 8017642:	6878      	ldr	r0, [r7, #4]
 8017644:	f000 f910 	bl	8017868 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>
      }
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	4618      	mov	r0, r3
 801764c:	f7ff fbfe 	bl	8016e4c <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implD1Ev>
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	4618      	mov	r0, r3
 8017654:	3708      	adds	r7, #8
 8017656:	46bd      	mov	sp, r7
 8017658:	bd80      	pop	{r7, pc}

0801765a <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 801765a:	b580      	push	{r7, lr}
 801765c:	b082      	sub	sp, #8
 801765e:	af00      	add	r7, sp, #0
 8017660:	6078      	str	r0, [r7, #4]
 8017662:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	685a      	ldr	r2, [r3, #4]
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	689b      	ldr	r3, [r3, #8]
 801766c:	429a      	cmp	r2, r3
 801766e:	d00c      	beq.n	801768a <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_+0x30>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8017670:	6878      	ldr	r0, [r7, #4]
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	685b      	ldr	r3, [r3, #4]
 8017676:	683a      	ldr	r2, [r7, #0]
 8017678:	4619      	mov	r1, r3
 801767a:	f000 f908 	bl	801788e <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	685b      	ldr	r3, [r3, #4]
 8017682:	1d1a      	adds	r2, r3, #4
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8017688:	e008      	b.n	801769c <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_+0x42>
	  _M_realloc_insert(end(), __x);
 801768a:	6878      	ldr	r0, [r7, #4]
 801768c:	f000 f912 	bl	80178b4 <_ZNSt6vectorIPvSaIS0_EE3endEv>
 8017690:	4603      	mov	r3, r0
 8017692:	683a      	ldr	r2, [r7, #0]
 8017694:	4619      	mov	r1, r3
 8017696:	6878      	ldr	r0, [r7, #4]
 8017698:	f000 f934 	bl	8017904 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 801769c:	bf00      	nop
 801769e:	3708      	adds	r7, #8
 80176a0:	46bd      	mov	sp, r7
 80176a2:	bd80      	pop	{r7, pc}

080176a4 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80176a4:	b580      	push	{r7, lr}
 80176a6:	b082      	sub	sp, #8
 80176a8:	af00      	add	r7, sp, #0
 80176aa:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80176ac:	6878      	ldr	r0, [r7, #4]
 80176ae:	f000 f9e5 	bl	8017a7c <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	4618      	mov	r0, r3
 80176b6:	f000 f9ed 	bl	8017a94 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_Vector_impl_dataC2Ev>
	{ }
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	4618      	mov	r0, r3
 80176be:	3708      	adds	r7, #8
 80176c0:	46bd      	mov	sp, r7
 80176c2:	bd80      	pop	{r7, pc}

080176c4 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>:
 80176c4:	b580      	push	{r7, lr}
 80176c6:	b082      	sub	sp, #8
 80176c8:	af00      	add	r7, sp, #0
 80176ca:	6078      	str	r0, [r7, #4]
 80176cc:	6878      	ldr	r0, [r7, #4]
 80176ce:	f000 f9f5 	bl	8017abc <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	4618      	mov	r0, r3
 80176d6:	3708      	adds	r7, #8
 80176d8:	46bd      	mov	sp, r7
 80176da:	bd80      	pop	{r7, pc}

080176dc <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED2Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80176dc:	b580      	push	{r7, lr}
 80176de:	b082      	sub	sp, #8
 80176e0:	af00      	add	r7, sp, #0
 80176e2:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	689a      	ldr	r2, [r3, #8]
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	1ad3      	subs	r3, r2, r3
 80176f2:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 80176f4:	461a      	mov	r2, r3
 80176f6:	6878      	ldr	r0, [r7, #4]
 80176f8:	f000 f9eb 	bl	8017ad2 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>
      }
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	4618      	mov	r0, r3
 8017700:	f7ff fc0e 	bl	8016f20 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implD1Ev>
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	4618      	mov	r0, r3
 8017708:	3708      	adds	r7, #8
 801770a:	46bd      	mov	sp, r7
 801770c:	bd80      	pop	{r7, pc}

0801770e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 801770e:	b580      	push	{r7, lr}
 8017710:	b082      	sub	sp, #8
 8017712:	af00      	add	r7, sp, #0
 8017714:	6078      	str	r0, [r7, #4]
 8017716:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	685a      	ldr	r2, [r3, #4]
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	689b      	ldr	r3, [r3, #8]
 8017720:	429a      	cmp	r2, r3
 8017722:	d00d      	beq.n	8017740 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8017724:	6878      	ldr	r0, [r7, #4]
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	685b      	ldr	r3, [r3, #4]
 801772a:	683a      	ldr	r2, [r7, #0]
 801772c:	4619      	mov	r1, r3
 801772e:	f000 f9e3 	bl	8017af8 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	685b      	ldr	r3, [r3, #4]
 8017736:	f103 0208 	add.w	r2, r3, #8
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	605a      	str	r2, [r3, #4]
      }
 801773e:	e008      	b.n	8017752 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_+0x44>
	  _M_realloc_insert(end(), __x);
 8017740:	6878      	ldr	r0, [r7, #4]
 8017742:	f000 f9ec 	bl	8017b1e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE3endEv>
 8017746:	4603      	mov	r3, r0
 8017748:	683a      	ldr	r2, [r7, #0]
 801774a:	4619      	mov	r1, r3
 801774c:	6878      	ldr	r0, [r7, #4]
 801774e:	f000 fa0d 	bl	8017b6c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8017752:	bf00      	nop
 8017754:	3708      	adds	r7, #8
 8017756:	46bd      	mov	sp, r7
 8017758:	bd80      	pop	{r7, pc}

0801775a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 801775a:	b480      	push	{r7}
 801775c:	b083      	sub	sp, #12
 801775e:	af00      	add	r7, sp, #0
 8017760:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	685a      	ldr	r2, [r3, #4]
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	1ad3      	subs	r3, r2, r3
 801776c:	10db      	asrs	r3, r3, #3
 801776e:	4618      	mov	r0, r3
 8017770:	370c      	adds	r7, #12
 8017772:	46bd      	mov	sp, r7
 8017774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017778:	4770      	bx	lr

0801777a <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 801777a:	b480      	push	{r7}
 801777c:	b083      	sub	sp, #12
 801777e:	af00      	add	r7, sp, #0
 8017780:	6078      	str	r0, [r7, #4]
 8017782:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	681a      	ldr	r2, [r3, #0]
 8017788:	683b      	ldr	r3, [r7, #0]
 801778a:	00db      	lsls	r3, r3, #3
 801778c:	4413      	add	r3, r2
      }
 801778e:	4618      	mov	r0, r3
 8017790:	370c      	adds	r7, #12
 8017792:	46bd      	mov	sp, r7
 8017794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017798:	4770      	bx	lr

0801779a <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 801779a:	b580      	push	{r7, lr}
 801779c:	b082      	sub	sp, #8
 801779e:	af00      	add	r7, sp, #0
 80177a0:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	4619      	mov	r1, r3
 80177a8:	6878      	ldr	r0, [r7, #4]
 80177aa:	f000 fa9b 	bl	8017ce4 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_>
 80177ae:	bf00      	nop
 80177b0:	3708      	adds	r7, #8
 80177b2:	46bd      	mov	sp, r7
 80177b4:	bd80      	pop	{r7, pc}

080177b6 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80177b6:	b480      	push	{r7}
 80177b8:	b083      	sub	sp, #12
 80177ba:	af00      	add	r7, sp, #0
 80177bc:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	685a      	ldr	r2, [r3, #4]
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	681b      	ldr	r3, [r3, #0]
 80177c6:	1ad3      	subs	r3, r2, r3
 80177c8:	109b      	asrs	r3, r3, #2
 80177ca:	4618      	mov	r0, r3
 80177cc:	370c      	adds	r7, #12
 80177ce:	46bd      	mov	sp, r7
 80177d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177d4:	4770      	bx	lr

080177d6 <_ZNSt6vectorIPvSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80177d6:	b480      	push	{r7}
 80177d8:	b083      	sub	sp, #12
 80177da:	af00      	add	r7, sp, #0
 80177dc:	6078      	str	r0, [r7, #4]
 80177de:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	681a      	ldr	r2, [r3, #0]
 80177e4:	683b      	ldr	r3, [r7, #0]
 80177e6:	009b      	lsls	r3, r3, #2
 80177e8:	4413      	add	r3, r2
      }
 80177ea:	4618      	mov	r0, r3
 80177ec:	370c      	adds	r7, #12
 80177ee:	46bd      	mov	sp, r7
 80177f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177f4:	4770      	bx	lr

080177f6 <_ZNSt6vectorIPvSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 80177f6:	b580      	push	{r7, lr}
 80177f8:	b082      	sub	sp, #8
 80177fa:	af00      	add	r7, sp, #0
 80177fc:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	681b      	ldr	r3, [r3, #0]
 8017802:	4619      	mov	r1, r3
 8017804:	6878      	ldr	r0, [r7, #4]
 8017806:	f000 fa8e 	bl	8017d26 <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_>
 801780a:	bf00      	nop
 801780c:	3708      	adds	r7, #8
 801780e:	46bd      	mov	sp, r7
 8017810:	bd80      	pop	{r7, pc}

08017812 <_ZNSaIPvEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8017812:	b580      	push	{r7, lr}
 8017814:	b082      	sub	sp, #8
 8017816:	af00      	add	r7, sp, #0
 8017818:	6078      	str	r0, [r7, #4]
 801781a:	6878      	ldr	r0, [r7, #4]
 801781c:	f000 faa4 	bl	8017d68 <_ZN9__gnu_cxx13new_allocatorIPvEC1Ev>
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	4618      	mov	r0, r3
 8017824:	3708      	adds	r7, #8
 8017826:	46bd      	mov	sp, r7
 8017828:	bd80      	pop	{r7, pc}

0801782a <_ZNSt12_Vector_baseIPvSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 801782a:	b480      	push	{r7}
 801782c:	b083      	sub	sp, #12
 801782e:	af00      	add	r7, sp, #0
 8017830:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	2200      	movs	r2, #0
 8017836:	601a      	str	r2, [r3, #0]
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	2200      	movs	r2, #0
 801783c:	605a      	str	r2, [r3, #4]
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	2200      	movs	r2, #0
 8017842:	609a      	str	r2, [r3, #8]
	{ }
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	4618      	mov	r0, r3
 8017848:	370c      	adds	r7, #12
 801784a:	46bd      	mov	sp, r7
 801784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017850:	4770      	bx	lr

08017852 <_ZN9__gnu_cxx13new_allocatorIPvED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8017852:	b480      	push	{r7}
 8017854:	b083      	sub	sp, #12
 8017856:	af00      	add	r7, sp, #0
 8017858:	6078      	str	r0, [r7, #4]
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	4618      	mov	r0, r3
 801785e:	370c      	adds	r7, #12
 8017860:	46bd      	mov	sp, r7
 8017862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017866:	4770      	bx	lr

08017868 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8017868:	b580      	push	{r7, lr}
 801786a:	b084      	sub	sp, #16
 801786c:	af00      	add	r7, sp, #0
 801786e:	60f8      	str	r0, [r7, #12]
 8017870:	60b9      	str	r1, [r7, #8]
 8017872:	607a      	str	r2, [r7, #4]
	if (__p)
 8017874:	68bb      	ldr	r3, [r7, #8]
 8017876:	2b00      	cmp	r3, #0
 8017878:	d005      	beq.n	8017886 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 801787a:	68fb      	ldr	r3, [r7, #12]
 801787c:	687a      	ldr	r2, [r7, #4]
 801787e:	68b9      	ldr	r1, [r7, #8]
 8017880:	4618      	mov	r0, r3
 8017882:	f000 fa7c 	bl	8017d7e <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j>
      }
 8017886:	bf00      	nop
 8017888:	3710      	adds	r7, #16
 801788a:	46bd      	mov	sp, r7
 801788c:	bd80      	pop	{r7, pc}

0801788e <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801788e:	b580      	push	{r7, lr}
 8017890:	b084      	sub	sp, #16
 8017892:	af00      	add	r7, sp, #0
 8017894:	60f8      	str	r0, [r7, #12]
 8017896:	60b9      	str	r1, [r7, #8]
 8017898:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 801789a:	6878      	ldr	r0, [r7, #4]
 801789c:	f000 fa7e 	bl	8017d9c <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 80178a0:	4603      	mov	r3, r0
 80178a2:	461a      	mov	r2, r3
 80178a4:	68b9      	ldr	r1, [r7, #8]
 80178a6:	68f8      	ldr	r0, [r7, #12]
 80178a8:	f000 fa83 	bl	8017db2 <_ZN9__gnu_cxx13new_allocatorIPvE9constructIS1_JRKS1_EEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 80178ac:	bf00      	nop
 80178ae:	3710      	adds	r7, #16
 80178b0:	46bd      	mov	sp, r7
 80178b2:	bd80      	pop	{r7, pc}

080178b4 <_ZNSt6vectorIPvSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80178b4:	b580      	push	{r7, lr}
 80178b6:	b084      	sub	sp, #16
 80178b8:	af00      	add	r7, sp, #0
 80178ba:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	1d1a      	adds	r2, r3, #4
 80178c0:	f107 030c 	add.w	r3, r7, #12
 80178c4:	4611      	mov	r1, r2
 80178c6:	4618      	mov	r0, r3
 80178c8:	f000 fa89 	bl	8017dde <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80178cc:	68fb      	ldr	r3, [r7, #12]
 80178ce:	4618      	mov	r0, r3
 80178d0:	3710      	adds	r7, #16
 80178d2:	46bd      	mov	sp, r7
 80178d4:	bd80      	pop	{r7, pc}

080178d6 <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 80178d6:	b580      	push	{r7, lr}
 80178d8:	b082      	sub	sp, #8
 80178da:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80178dc:	4618      	mov	r0, r3
 80178de:	f000 f805 	bl	80178ec <_ZNSt6vectorIPvSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80178e2:	4603      	mov	r3, r0
      }
 80178e4:	4618      	mov	r0, r3
 80178e6:	3708      	adds	r7, #8
 80178e8:	46bd      	mov	sp, r7
 80178ea:	bd80      	pop	{r7, pc}

080178ec <_ZNSt6vectorIPvSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80178ec:	b480      	push	{r7}
 80178ee:	b083      	sub	sp, #12
 80178f0:	af00      	add	r7, sp, #0
 80178f2:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80178f4:	2301      	movs	r3, #1
      }
 80178f6:	4618      	mov	r0, r3
 80178f8:	370c      	adds	r7, #12
 80178fa:	46bd      	mov	sp, r7
 80178fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017900:	4770      	bx	lr
	...

08017904 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8017904:	b5b0      	push	{r4, r5, r7, lr}
 8017906:	b08c      	sub	sp, #48	; 0x30
 8017908:	af00      	add	r7, sp, #0
 801790a:	60f8      	str	r0, [r7, #12]
 801790c:	60b9      	str	r1, [r7, #8]
 801790e:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8017910:	4a59      	ldr	r2, [pc, #356]	; (8017a78 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x174>)
 8017912:	2101      	movs	r1, #1
 8017914:	68f8      	ldr	r0, [r7, #12]
 8017916:	f000 fa72 	bl	8017dfe <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc>
 801791a:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8017922:	68fb      	ldr	r3, [r7, #12]
 8017924:	685b      	ldr	r3, [r3, #4]
 8017926:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8017928:	68f8      	ldr	r0, [r7, #12]
 801792a:	f000 faaf 	bl	8017e8c <_ZNSt6vectorIPvSaIS0_EE5beginEv>
 801792e:	4603      	mov	r3, r0
 8017930:	617b      	str	r3, [r7, #20]
 8017932:	f107 0214 	add.w	r2, r7, #20
 8017936:	f107 0308 	add.w	r3, r7, #8
 801793a:	4611      	mov	r1, r2
 801793c:	4618      	mov	r0, r3
 801793e:	f000 fab5 	bl	8017eac <_ZN9__gnu_cxxmiIPPvSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8017942:	4603      	mov	r3, r0
 8017944:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801794a:	4618      	mov	r0, r3
 801794c:	f000 fac3 	bl	8017ed6 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj>
 8017950:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8017952:	69bb      	ldr	r3, [r7, #24]
 8017954:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8017956:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8017958:	69fb      	ldr	r3, [r7, #28]
 801795a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 801795c:	69ba      	ldr	r2, [r7, #24]
 801795e:	18d5      	adds	r5, r2, r3
 8017960:	6878      	ldr	r0, [r7, #4]
 8017962:	f000 fa1b 	bl	8017d9c <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 8017966:	4603      	mov	r3, r0
 8017968:	461a      	mov	r2, r3
 801796a:	4629      	mov	r1, r5
 801796c:	4620      	mov	r0, r4
 801796e:	f7ff ff8e 	bl	801788e <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8017972:	2300      	movs	r3, #0
 8017974:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8017976:	f7ff ffae 	bl	80178d6 <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>
 801797a:	4603      	mov	r3, r0
 801797c:	2b00      	cmp	r3, #0
 801797e:	d027      	beq.n	80179d0 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8017980:	f107 0308 	add.w	r3, r7, #8
 8017984:	4618      	mov	r0, r3
 8017986:	f000 face 	bl	8017f26 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 801798a:	4603      	mov	r3, r0
 801798c:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	4618      	mov	r0, r3
 8017992:	f000 fad3 	bl	8017f3c <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8017996:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8017998:	69ba      	ldr	r2, [r7, #24]
 801799a:	4621      	mov	r1, r4
 801799c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801799e:	f000 faae 	bl	8017efe <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80179a2:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80179a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179a6:	3304      	adds	r3, #4
 80179a8:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80179aa:	f107 0308 	add.w	r3, r7, #8
 80179ae:	4618      	mov	r0, r3
 80179b0:	f000 fab9 	bl	8017f26 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 80179b4:	4603      	mov	r3, r0
 80179b6:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80179b8:	68fb      	ldr	r3, [r7, #12]
 80179ba:	4618      	mov	r0, r3
 80179bc:	f000 fabe 	bl	8017f3c <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 80179c0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80179c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80179c4:	6a39      	ldr	r1, [r7, #32]
 80179c6:	4620      	mov	r0, r4
 80179c8:	f000 fa99 	bl	8017efe <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80179cc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80179ce:	e026      	b.n	8017a1e <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 80179d0:	f107 0308 	add.w	r3, r7, #8
 80179d4:	4618      	mov	r0, r3
 80179d6:	f000 faa6 	bl	8017f26 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 80179da:	4603      	mov	r3, r0
 80179dc:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80179de:	68fb      	ldr	r3, [r7, #12]
 80179e0:	4618      	mov	r0, r3
 80179e2:	f000 faab 	bl	8017f3c <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 80179e6:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80179e8:	69ba      	ldr	r2, [r7, #24]
 80179ea:	4621      	mov	r1, r4
 80179ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80179ee:	f000 fab0 	bl	8017f52 <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 80179f2:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80179f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179f6:	3304      	adds	r3, #4
 80179f8:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 80179fa:	f107 0308 	add.w	r3, r7, #8
 80179fe:	4618      	mov	r0, r3
 8017a00:	f000 fa91 	bl	8017f26 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8017a04:	4603      	mov	r3, r0
 8017a06:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	4618      	mov	r0, r3
 8017a0c:	f000 fa96 	bl	8017f3c <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8017a10:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8017a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017a14:	6a39      	ldr	r1, [r7, #32]
 8017a16:	4620      	mov	r0, r4
 8017a18:	f000 fa9b 	bl	8017f52 <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 8017a1c:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8017a1e:	f7ff ff5a 	bl	80178d6 <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>
 8017a22:	4603      	mov	r3, r0
 8017a24:	f083 0301 	eor.w	r3, r3, #1
 8017a28:	b2db      	uxtb	r3, r3
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d009      	beq.n	8017a42 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8017a2e:	68fb      	ldr	r3, [r7, #12]
 8017a30:	4618      	mov	r0, r3
 8017a32:	f000 fa83 	bl	8017f3c <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8017a36:	4603      	mov	r3, r0
 8017a38:	461a      	mov	r2, r3
 8017a3a:	6a39      	ldr	r1, [r7, #32]
 8017a3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017a3e:	f000 faa1 	bl	8017f84 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8017a42:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	689a      	ldr	r2, [r3, #8]
 8017a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a4a:	1ad3      	subs	r3, r2, r3
 8017a4c:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8017a4e:	461a      	mov	r2, r3
 8017a50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017a52:	f7ff ff09 	bl	8017868 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8017a56:	68fb      	ldr	r3, [r7, #12]
 8017a58:	69ba      	ldr	r2, [r7, #24]
 8017a5a:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017a60:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8017a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a64:	009b      	lsls	r3, r3, #2
 8017a66:	69ba      	ldr	r2, [r7, #24]
 8017a68:	441a      	add	r2, r3
 8017a6a:	68fb      	ldr	r3, [r7, #12]
 8017a6c:	609a      	str	r2, [r3, #8]
    }
 8017a6e:	bf00      	nop
 8017a70:	3730      	adds	r7, #48	; 0x30
 8017a72:	46bd      	mov	sp, r7
 8017a74:	bdb0      	pop	{r4, r5, r7, pc}
 8017a76:	bf00      	nop
 8017a78:	0801db24 	.word	0x0801db24

08017a7c <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>:
 8017a7c:	b580      	push	{r7, lr}
 8017a7e:	b082      	sub	sp, #8
 8017a80:	af00      	add	r7, sp, #0
 8017a82:	6078      	str	r0, [r7, #4]
 8017a84:	6878      	ldr	r0, [r7, #4]
 8017a86:	f000 fa8b 	bl	8017fa0 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	3708      	adds	r7, #8
 8017a90:	46bd      	mov	sp, r7
 8017a92:	bd80      	pop	{r7, pc}

08017a94 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_Vector_impl_dataC2Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8017a94:	b480      	push	{r7}
 8017a96:	b083      	sub	sp, #12
 8017a98:	af00      	add	r7, sp, #0
 8017a9a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	2200      	movs	r2, #0
 8017aa0:	601a      	str	r2, [r3, #0]
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	2200      	movs	r2, #0
 8017aa6:	605a      	str	r2, [r3, #4]
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	2200      	movs	r2, #0
 8017aac:	609a      	str	r2, [r3, #8]
	{ }
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	4618      	mov	r0, r3
 8017ab2:	370c      	adds	r7, #12
 8017ab4:	46bd      	mov	sp, r7
 8017ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aba:	4770      	bx	lr

08017abc <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>:
 8017abc:	b480      	push	{r7}
 8017abe:	b083      	sub	sp, #12
 8017ac0:	af00      	add	r7, sp, #0
 8017ac2:	6078      	str	r0, [r7, #4]
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	4618      	mov	r0, r3
 8017ac8:	370c      	adds	r7, #12
 8017aca:	46bd      	mov	sp, r7
 8017acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ad0:	4770      	bx	lr

08017ad2 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8017ad2:	b580      	push	{r7, lr}
 8017ad4:	b084      	sub	sp, #16
 8017ad6:	af00      	add	r7, sp, #0
 8017ad8:	60f8      	str	r0, [r7, #12]
 8017ada:	60b9      	str	r1, [r7, #8]
 8017adc:	607a      	str	r2, [r7, #4]
	if (__p)
 8017ade:	68bb      	ldr	r3, [r7, #8]
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d005      	beq.n	8017af0 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8017ae4:	68fb      	ldr	r3, [r7, #12]
 8017ae6:	687a      	ldr	r2, [r7, #4]
 8017ae8:	68b9      	ldr	r1, [r7, #8]
 8017aea:	4618      	mov	r0, r3
 8017aec:	f000 fa63 	bl	8017fb6 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE10deallocateERS2_PS1_j>
      }
 8017af0:	bf00      	nop
 8017af2:	3710      	adds	r7, #16
 8017af4:	46bd      	mov	sp, r7
 8017af6:	bd80      	pop	{r7, pc}

08017af8 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8017af8:	b580      	push	{r7, lr}
 8017afa:	b084      	sub	sp, #16
 8017afc:	af00      	add	r7, sp, #0
 8017afe:	60f8      	str	r0, [r7, #12]
 8017b00:	60b9      	str	r1, [r7, #8]
 8017b02:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8017b04:	6878      	ldr	r0, [r7, #4]
 8017b06:	f000 fa65 	bl	8017fd4 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 8017b0a:	4603      	mov	r3, r0
 8017b0c:	461a      	mov	r2, r3
 8017b0e:	68b9      	ldr	r1, [r7, #8]
 8017b10:	68f8      	ldr	r0, [r7, #12]
 8017b12:	f000 fa6a 	bl	8017fea <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 8017b16:	bf00      	nop
 8017b18:	3710      	adds	r7, #16
 8017b1a:	46bd      	mov	sp, r7
 8017b1c:	bd80      	pop	{r7, pc}

08017b1e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8017b1e:	b580      	push	{r7, lr}
 8017b20:	b084      	sub	sp, #16
 8017b22:	af00      	add	r7, sp, #0
 8017b24:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	1d1a      	adds	r2, r3, #4
 8017b2a:	f107 030c 	add.w	r3, r7, #12
 8017b2e:	4611      	mov	r1, r2
 8017b30:	4618      	mov	r0, r3
 8017b32:	f000 fa73 	bl	801801c <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	4618      	mov	r0, r3
 8017b3a:	3710      	adds	r7, #16
 8017b3c:	46bd      	mov	sp, r7
 8017b3e:	bd80      	pop	{r7, pc}

08017b40 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8017b40:	b580      	push	{r7, lr}
 8017b42:	b082      	sub	sp, #8
 8017b44:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8017b46:	4618      	mov	r0, r3
 8017b48:	f000 f805 	bl	8017b56 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8017b4c:	4603      	mov	r3, r0
      }
 8017b4e:	4618      	mov	r0, r3
 8017b50:	3708      	adds	r7, #8
 8017b52:	46bd      	mov	sp, r7
 8017b54:	bd80      	pop	{r7, pc}

08017b56 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8017b56:	b480      	push	{r7}
 8017b58:	b083      	sub	sp, #12
 8017b5a:	af00      	add	r7, sp, #0
 8017b5c:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8017b5e:	2301      	movs	r3, #1
      }
 8017b60:	4618      	mov	r0, r3
 8017b62:	370c      	adds	r7, #12
 8017b64:	46bd      	mov	sp, r7
 8017b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b6a:	4770      	bx	lr

08017b6c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8017b6c:	b5b0      	push	{r4, r5, r7, lr}
 8017b6e:	b08c      	sub	sp, #48	; 0x30
 8017b70:	af00      	add	r7, sp, #0
 8017b72:	60f8      	str	r0, [r7, #12]
 8017b74:	60b9      	str	r1, [r7, #8]
 8017b76:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8017b78:	4a59      	ldr	r2, [pc, #356]	; (8017ce0 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 8017b7a:	2101      	movs	r1, #1
 8017b7c:	68f8      	ldr	r0, [r7, #12]
 8017b7e:	f000 fa5d 	bl	801803c <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc>
 8017b82:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8017b84:	68fb      	ldr	r3, [r7, #12]
 8017b86:	681b      	ldr	r3, [r3, #0]
 8017b88:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	685b      	ldr	r3, [r3, #4]
 8017b8e:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8017b90:	68f8      	ldr	r0, [r7, #12]
 8017b92:	f000 fa9a 	bl	80180ca <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5beginEv>
 8017b96:	4603      	mov	r3, r0
 8017b98:	617b      	str	r3, [r7, #20]
 8017b9a:	f107 0214 	add.w	r2, r7, #20
 8017b9e:	f107 0308 	add.w	r3, r7, #8
 8017ba2:	4611      	mov	r1, r2
 8017ba4:	4618      	mov	r0, r3
 8017ba6:	f000 faa0 	bl	80180ea <_ZN9__gnu_cxxmiIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8017baa:	4603      	mov	r3, r0
 8017bac:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017bb2:	4618      	mov	r0, r3
 8017bb4:	f000 faae 	bl	8018114 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj>
 8017bb8:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8017bba:	69bb      	ldr	r3, [r7, #24]
 8017bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8017bbe:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8017bc0:	69fb      	ldr	r3, [r7, #28]
 8017bc2:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8017bc4:	69ba      	ldr	r2, [r7, #24]
 8017bc6:	18d5      	adds	r5, r2, r3
 8017bc8:	6878      	ldr	r0, [r7, #4]
 8017bca:	f000 fa03 	bl	8017fd4 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 8017bce:	4603      	mov	r3, r0
 8017bd0:	461a      	mov	r2, r3
 8017bd2:	4629      	mov	r1, r5
 8017bd4:	4620      	mov	r0, r4
 8017bd6:	f7ff ff8f 	bl	8017af8 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8017bda:	2300      	movs	r3, #0
 8017bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8017bde:	f7ff ffaf 	bl	8017b40 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>
 8017be2:	4603      	mov	r3, r0
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d027      	beq.n	8017c38 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8017be8:	f107 0308 	add.w	r3, r7, #8
 8017bec:	4618      	mov	r0, r3
 8017bee:	f000 fab9 	bl	8018164 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8017bf2:	4603      	mov	r3, r0
 8017bf4:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	4618      	mov	r0, r3
 8017bfa:	f000 fabe 	bl	801817a <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8017bfe:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8017c00:	69ba      	ldr	r2, [r7, #24]
 8017c02:	4621      	mov	r1, r4
 8017c04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017c06:	f000 fa99 	bl	801813c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8017c0a:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8017c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c0e:	3308      	adds	r3, #8
 8017c10:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8017c12:	f107 0308 	add.w	r3, r7, #8
 8017c16:	4618      	mov	r0, r3
 8017c18:	f000 faa4 	bl	8018164 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8017c1c:	4603      	mov	r3, r0
 8017c1e:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	4618      	mov	r0, r3
 8017c24:	f000 faa9 	bl	801817a <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8017c28:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8017c2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017c2c:	6a39      	ldr	r1, [r7, #32]
 8017c2e:	4620      	mov	r0, r4
 8017c30:	f000 fa84 	bl	801813c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8017c34:	62f8      	str	r0, [r7, #44]	; 0x2c
 8017c36:	e026      	b.n	8017c86 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8017c38:	f107 0308 	add.w	r3, r7, #8
 8017c3c:	4618      	mov	r0, r3
 8017c3e:	f000 fa91 	bl	8018164 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8017c42:	4603      	mov	r3, r0
 8017c44:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8017c46:	68fb      	ldr	r3, [r7, #12]
 8017c48:	4618      	mov	r0, r3
 8017c4a:	f000 fa96 	bl	801817a <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8017c4e:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8017c50:	69ba      	ldr	r2, [r7, #24]
 8017c52:	4621      	mov	r1, r4
 8017c54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017c56:	f000 fa9b 	bl	8018190 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 8017c5a:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8017c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c5e:	3308      	adds	r3, #8
 8017c60:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8017c62:	f107 0308 	add.w	r3, r7, #8
 8017c66:	4618      	mov	r0, r3
 8017c68:	f000 fa7c 	bl	8018164 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8017c6c:	4603      	mov	r3, r0
 8017c6e:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8017c70:	68fb      	ldr	r3, [r7, #12]
 8017c72:	4618      	mov	r0, r3
 8017c74:	f000 fa81 	bl	801817a <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8017c78:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8017c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017c7c:	6a39      	ldr	r1, [r7, #32]
 8017c7e:	4620      	mov	r0, r4
 8017c80:	f000 fa86 	bl	8018190 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 8017c84:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8017c86:	f7ff ff5b 	bl	8017b40 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>
 8017c8a:	4603      	mov	r3, r0
 8017c8c:	f083 0301 	eor.w	r3, r3, #1
 8017c90:	b2db      	uxtb	r3, r3
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d009      	beq.n	8017caa <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	4618      	mov	r0, r3
 8017c9a:	f000 fa6e 	bl	801817a <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8017c9e:	4603      	mov	r3, r0
 8017ca0:	461a      	mov	r2, r3
 8017ca2:	6a39      	ldr	r1, [r7, #32]
 8017ca4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017ca6:	f000 fa8c 	bl	80181c2 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 8017caa:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8017cac:	68fb      	ldr	r3, [r7, #12]
 8017cae:	689a      	ldr	r2, [r3, #8]
 8017cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cb2:	1ad3      	subs	r3, r2, r3
 8017cb4:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 8017cb6:	461a      	mov	r2, r3
 8017cb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017cba:	f7ff ff0a 	bl	8017ad2 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8017cbe:	68fb      	ldr	r3, [r7, #12]
 8017cc0:	69ba      	ldr	r2, [r7, #24]
 8017cc2:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8017cc4:	68fb      	ldr	r3, [r7, #12]
 8017cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017cc8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8017cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ccc:	00db      	lsls	r3, r3, #3
 8017cce:	69ba      	ldr	r2, [r7, #24]
 8017cd0:	441a      	add	r2, r3
 8017cd2:	68fb      	ldr	r3, [r7, #12]
 8017cd4:	609a      	str	r2, [r3, #8]
    }
 8017cd6:	bf00      	nop
 8017cd8:	3730      	adds	r7, #48	; 0x30
 8017cda:	46bd      	mov	sp, r7
 8017cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8017cde:	bf00      	nop
 8017ce0:	0801db24 	.word	0x0801db24

08017ce4 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8017ce4:	b590      	push	{r4, r7, lr}
 8017ce6:	b085      	sub	sp, #20
 8017ce8:	af00      	add	r7, sp, #0
 8017cea:	6078      	str	r0, [r7, #4]
 8017cec:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	685a      	ldr	r2, [r3, #4]
 8017cf2:	683b      	ldr	r3, [r7, #0]
 8017cf4:	1ad3      	subs	r3, r2, r3
 8017cf6:	10db      	asrs	r3, r3, #3
 8017cf8:	60fb      	str	r3, [r7, #12]
 8017cfa:	68fb      	ldr	r3, [r7, #12]
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d00e      	beq.n	8017d1e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	4618      	mov	r0, r3
 8017d08:	f000 fa37 	bl	801817a <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8017d0c:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8017d0e:	461a      	mov	r2, r3
 8017d10:	4621      	mov	r1, r4
 8017d12:	6838      	ldr	r0, [r7, #0]
 8017d14:	f000 fa55 	bl	80181c2 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	683a      	ldr	r2, [r7, #0]
 8017d1c:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8017d1e:	bf00      	nop
 8017d20:	3714      	adds	r7, #20
 8017d22:	46bd      	mov	sp, r7
 8017d24:	bd90      	pop	{r4, r7, pc}

08017d26 <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8017d26:	b590      	push	{r4, r7, lr}
 8017d28:	b085      	sub	sp, #20
 8017d2a:	af00      	add	r7, sp, #0
 8017d2c:	6078      	str	r0, [r7, #4]
 8017d2e:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	685a      	ldr	r2, [r3, #4]
 8017d34:	683b      	ldr	r3, [r7, #0]
 8017d36:	1ad3      	subs	r3, r2, r3
 8017d38:	109b      	asrs	r3, r3, #2
 8017d3a:	60fb      	str	r3, [r7, #12]
 8017d3c:	68fb      	ldr	r3, [r7, #12]
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	d00e      	beq.n	8017d60 <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	4618      	mov	r0, r3
 8017d4a:	f000 f8f7 	bl	8017f3c <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8017d4e:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8017d50:	461a      	mov	r2, r3
 8017d52:	4621      	mov	r1, r4
 8017d54:	6838      	ldr	r0, [r7, #0]
 8017d56:	f000 f915 	bl	8017f84 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	683a      	ldr	r2, [r7, #0]
 8017d5e:	605a      	str	r2, [r3, #4]
      }
 8017d60:	bf00      	nop
 8017d62:	3714      	adds	r7, #20
 8017d64:	46bd      	mov	sp, r7
 8017d66:	bd90      	pop	{r4, r7, pc}

08017d68 <_ZN9__gnu_cxx13new_allocatorIPvEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8017d68:	b480      	push	{r7}
 8017d6a:	b083      	sub	sp, #12
 8017d6c:	af00      	add	r7, sp, #0
 8017d6e:	6078      	str	r0, [r7, #4]
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	4618      	mov	r0, r3
 8017d74:	370c      	adds	r7, #12
 8017d76:	46bd      	mov	sp, r7
 8017d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d7c:	4770      	bx	lr

08017d7e <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8017d7e:	b580      	push	{r7, lr}
 8017d80:	b084      	sub	sp, #16
 8017d82:	af00      	add	r7, sp, #0
 8017d84:	60f8      	str	r0, [r7, #12]
 8017d86:	60b9      	str	r1, [r7, #8]
 8017d88:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8017d8a:	687a      	ldr	r2, [r7, #4]
 8017d8c:	68b9      	ldr	r1, [r7, #8]
 8017d8e:	68f8      	ldr	r0, [r7, #12]
 8017d90:	f000 fa25 	bl	80181de <_ZN9__gnu_cxx13new_allocatorIPvE10deallocateEPS1_j>
 8017d94:	bf00      	nop
 8017d96:	3710      	adds	r7, #16
 8017d98:	46bd      	mov	sp, r7
 8017d9a:	bd80      	pop	{r7, pc}

08017d9c <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8017d9c:	b480      	push	{r7}
 8017d9e:	b083      	sub	sp, #12
 8017da0:	af00      	add	r7, sp, #0
 8017da2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	4618      	mov	r0, r3
 8017da8:	370c      	adds	r7, #12
 8017daa:	46bd      	mov	sp, r7
 8017dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017db0:	4770      	bx	lr

08017db2 <_ZN9__gnu_cxx13new_allocatorIPvE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8017db2:	b590      	push	{r4, r7, lr}
 8017db4:	b085      	sub	sp, #20
 8017db6:	af00      	add	r7, sp, #0
 8017db8:	60f8      	str	r0, [r7, #12]
 8017dba:	60b9      	str	r1, [r7, #8]
 8017dbc:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8017dbe:	6878      	ldr	r0, [r7, #4]
 8017dc0:	f7ff ffec 	bl	8017d9c <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 8017dc4:	4603      	mov	r3, r0
 8017dc6:	681c      	ldr	r4, [r3, #0]
 8017dc8:	68bb      	ldr	r3, [r7, #8]
 8017dca:	4619      	mov	r1, r3
 8017dcc:	2004      	movs	r0, #4
 8017dce:	f7e9 fc77 	bl	80016c0 <_ZnwjPv>
 8017dd2:	4603      	mov	r3, r0
 8017dd4:	601c      	str	r4, [r3, #0]
 8017dd6:	bf00      	nop
 8017dd8:	3714      	adds	r7, #20
 8017dda:	46bd      	mov	sp, r7
 8017ddc:	bd90      	pop	{r4, r7, pc}

08017dde <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8017dde:	b480      	push	{r7}
 8017de0:	b083      	sub	sp, #12
 8017de2:	af00      	add	r7, sp, #0
 8017de4:	6078      	str	r0, [r7, #4]
 8017de6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8017de8:	683b      	ldr	r3, [r7, #0]
 8017dea:	681a      	ldr	r2, [r3, #0]
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	601a      	str	r2, [r3, #0]
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	4618      	mov	r0, r3
 8017df4:	370c      	adds	r7, #12
 8017df6:	46bd      	mov	sp, r7
 8017df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dfc:	4770      	bx	lr

08017dfe <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8017dfe:	b590      	push	{r4, r7, lr}
 8017e00:	b087      	sub	sp, #28
 8017e02:	af00      	add	r7, sp, #0
 8017e04:	60f8      	str	r0, [r7, #12]
 8017e06:	60b9      	str	r1, [r7, #8]
 8017e08:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8017e0a:	68f8      	ldr	r0, [r7, #12]
 8017e0c:	f000 f9f7 	bl	80181fe <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 8017e10:	4604      	mov	r4, r0
 8017e12:	68f8      	ldr	r0, [r7, #12]
 8017e14:	f7ff fccf 	bl	80177b6 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 8017e18:	4603      	mov	r3, r0
 8017e1a:	1ae2      	subs	r2, r4, r3
 8017e1c:	68bb      	ldr	r3, [r7, #8]
 8017e1e:	429a      	cmp	r2, r3
 8017e20:	bf34      	ite	cc
 8017e22:	2301      	movcc	r3, #1
 8017e24:	2300      	movcs	r3, #0
 8017e26:	b2db      	uxtb	r3, r3
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d002      	beq.n	8017e32 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8017e2c:	6878      	ldr	r0, [r7, #4]
 8017e2e:	f001 fbd3 	bl	80195d8 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8017e32:	68f8      	ldr	r0, [r7, #12]
 8017e34:	f7ff fcbf 	bl	80177b6 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 8017e38:	4604      	mov	r4, r0
 8017e3a:	68f8      	ldr	r0, [r7, #12]
 8017e3c:	f7ff fcbb 	bl	80177b6 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 8017e40:	4603      	mov	r3, r0
 8017e42:	613b      	str	r3, [r7, #16]
 8017e44:	f107 0208 	add.w	r2, r7, #8
 8017e48:	f107 0310 	add.w	r3, r7, #16
 8017e4c:	4611      	mov	r1, r2
 8017e4e:	4618      	mov	r0, r3
 8017e50:	f7eb fc5f 	bl	8003712 <_ZSt3maxIjERKT_S2_S2_>
 8017e54:	4603      	mov	r3, r0
 8017e56:	681b      	ldr	r3, [r3, #0]
 8017e58:	4423      	add	r3, r4
 8017e5a:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017e5c:	68f8      	ldr	r0, [r7, #12]
 8017e5e:	f7ff fcaa 	bl	80177b6 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 8017e62:	4602      	mov	r2, r0
 8017e64:	697b      	ldr	r3, [r7, #20]
 8017e66:	4293      	cmp	r3, r2
 8017e68:	d306      	bcc.n	8017e78 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8017e6a:	68f8      	ldr	r0, [r7, #12]
 8017e6c:	f000 f9c7 	bl	80181fe <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 8017e70:	4602      	mov	r2, r0
 8017e72:	697b      	ldr	r3, [r7, #20]
 8017e74:	4293      	cmp	r3, r2
 8017e76:	d904      	bls.n	8017e82 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x84>
 8017e78:	68f8      	ldr	r0, [r7, #12]
 8017e7a:	f000 f9c0 	bl	80181fe <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 8017e7e:	4603      	mov	r3, r0
 8017e80:	e000      	b.n	8017e84 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x86>
 8017e82:	697b      	ldr	r3, [r7, #20]
      }
 8017e84:	4618      	mov	r0, r3
 8017e86:	371c      	adds	r7, #28
 8017e88:	46bd      	mov	sp, r7
 8017e8a:	bd90      	pop	{r4, r7, pc}

08017e8c <_ZNSt6vectorIPvSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8017e8c:	b580      	push	{r7, lr}
 8017e8e:	b084      	sub	sp, #16
 8017e90:	af00      	add	r7, sp, #0
 8017e92:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8017e94:	687a      	ldr	r2, [r7, #4]
 8017e96:	f107 030c 	add.w	r3, r7, #12
 8017e9a:	4611      	mov	r1, r2
 8017e9c:	4618      	mov	r0, r3
 8017e9e:	f7ff ff9e 	bl	8017dde <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8017ea2:	68fb      	ldr	r3, [r7, #12]
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	3710      	adds	r7, #16
 8017ea8:	46bd      	mov	sp, r7
 8017eaa:	bd80      	pop	{r7, pc}

08017eac <_ZN9__gnu_cxxmiIPPvSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8017eac:	b590      	push	{r4, r7, lr}
 8017eae:	b083      	sub	sp, #12
 8017eb0:	af00      	add	r7, sp, #0
 8017eb2:	6078      	str	r0, [r7, #4]
 8017eb4:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8017eb6:	6878      	ldr	r0, [r7, #4]
 8017eb8:	f000 f835 	bl	8017f26 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8017ebc:	4603      	mov	r3, r0
 8017ebe:	681c      	ldr	r4, [r3, #0]
 8017ec0:	6838      	ldr	r0, [r7, #0]
 8017ec2:	f000 f830 	bl	8017f26 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8017ec6:	4603      	mov	r3, r0
 8017ec8:	681b      	ldr	r3, [r3, #0]
 8017eca:	1ae3      	subs	r3, r4, r3
 8017ecc:	109b      	asrs	r3, r3, #2
 8017ece:	4618      	mov	r0, r3
 8017ed0:	370c      	adds	r7, #12
 8017ed2:	46bd      	mov	sp, r7
 8017ed4:	bd90      	pop	{r4, r7, pc}

08017ed6 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8017ed6:	b580      	push	{r7, lr}
 8017ed8:	b082      	sub	sp, #8
 8017eda:	af00      	add	r7, sp, #0
 8017edc:	6078      	str	r0, [r7, #4]
 8017ede:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017ee0:	683b      	ldr	r3, [r7, #0]
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d006      	beq.n	8017ef4 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj+0x1e>
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	6839      	ldr	r1, [r7, #0]
 8017eea:	4618      	mov	r0, r3
 8017eec:	f000 f998 	bl	8018220 <_ZNSt16allocator_traitsISaIPvEE8allocateERS1_j>
 8017ef0:	4603      	mov	r3, r0
 8017ef2:	e000      	b.n	8017ef6 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj+0x20>
 8017ef4:	2300      	movs	r3, #0
      }
 8017ef6:	4618      	mov	r0, r3
 8017ef8:	3708      	adds	r7, #8
 8017efa:	46bd      	mov	sp, r7
 8017efc:	bd80      	pop	{r7, pc}

08017efe <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8017efe:	b590      	push	{r4, r7, lr}
 8017f00:	b087      	sub	sp, #28
 8017f02:	af02      	add	r7, sp, #8
 8017f04:	60f8      	str	r0, [r7, #12]
 8017f06:	60b9      	str	r1, [r7, #8]
 8017f08:	607a      	str	r2, [r7, #4]
 8017f0a:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8017f0c:	f88d 4000 	strb.w	r4, [sp]
 8017f10:	683b      	ldr	r3, [r7, #0]
 8017f12:	687a      	ldr	r2, [r7, #4]
 8017f14:	68b9      	ldr	r1, [r7, #8]
 8017f16:	68f8      	ldr	r0, [r7, #12]
 8017f18:	f000 f991 	bl	801823e <_ZNSt6vectorIPvSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 8017f1c:	4603      	mov	r3, r0
      }
 8017f1e:	4618      	mov	r0, r3
 8017f20:	3714      	adds	r7, #20
 8017f22:	46bd      	mov	sp, r7
 8017f24:	bd90      	pop	{r4, r7, pc}

08017f26 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8017f26:	b480      	push	{r7}
 8017f28:	b083      	sub	sp, #12
 8017f2a:	af00      	add	r7, sp, #0
 8017f2c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	4618      	mov	r0, r3
 8017f32:	370c      	adds	r7, #12
 8017f34:	46bd      	mov	sp, r7
 8017f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f3a:	4770      	bx	lr

08017f3c <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8017f3c:	b480      	push	{r7}
 8017f3e:	b083      	sub	sp, #12
 8017f40:	af00      	add	r7, sp, #0
 8017f42:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	4618      	mov	r0, r3
 8017f48:	370c      	adds	r7, #12
 8017f4a:	46bd      	mov	sp, r7
 8017f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f50:	4770      	bx	lr

08017f52 <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8017f52:	b590      	push	{r4, r7, lr}
 8017f54:	b085      	sub	sp, #20
 8017f56:	af00      	add	r7, sp, #0
 8017f58:	60f8      	str	r0, [r7, #12]
 8017f5a:	60b9      	str	r1, [r7, #8]
 8017f5c:	607a      	str	r2, [r7, #4]
 8017f5e:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8017f60:	68f8      	ldr	r0, [r7, #12]
 8017f62:	f000 f97e 	bl	8018262 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>
 8017f66:	4604      	mov	r4, r0
 8017f68:	68b8      	ldr	r0, [r7, #8]
 8017f6a:	f000 f97a 	bl	8018262 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>
 8017f6e:	4601      	mov	r1, r0
 8017f70:	683b      	ldr	r3, [r7, #0]
 8017f72:	687a      	ldr	r2, [r7, #4]
 8017f74:	4620      	mov	r0, r4
 8017f76:	f000 f983 	bl	8018280 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPvES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8017f7a:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	3714      	adds	r7, #20
 8017f80:	46bd      	mov	sp, r7
 8017f82:	bd90      	pop	{r4, r7, pc}

08017f84 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8017f84:	b580      	push	{r7, lr}
 8017f86:	b084      	sub	sp, #16
 8017f88:	af00      	add	r7, sp, #0
 8017f8a:	60f8      	str	r0, [r7, #12]
 8017f8c:	60b9      	str	r1, [r7, #8]
 8017f8e:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8017f90:	68b9      	ldr	r1, [r7, #8]
 8017f92:	68f8      	ldr	r0, [r7, #12]
 8017f94:	f000 f985 	bl	80182a2 <_ZSt8_DestroyIPPvEvT_S2_>
    }
 8017f98:	bf00      	nop
 8017f9a:	3710      	adds	r7, #16
 8017f9c:	46bd      	mov	sp, r7
 8017f9e:	bd80      	pop	{r7, pc}

08017fa0 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8017fa0:	b480      	push	{r7}
 8017fa2:	b083      	sub	sp, #12
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	6078      	str	r0, [r7, #4]
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	4618      	mov	r0, r3
 8017fac:	370c      	adds	r7, #12
 8017fae:	46bd      	mov	sp, r7
 8017fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fb4:	4770      	bx	lr

08017fb6 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8017fb6:	b580      	push	{r7, lr}
 8017fb8:	b084      	sub	sp, #16
 8017fba:	af00      	add	r7, sp, #0
 8017fbc:	60f8      	str	r0, [r7, #12]
 8017fbe:	60b9      	str	r1, [r7, #8]
 8017fc0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8017fc2:	687a      	ldr	r2, [r7, #4]
 8017fc4:	68b9      	ldr	r1, [r7, #8]
 8017fc6:	68f8      	ldr	r0, [r7, #12]
 8017fc8:	f000 f978 	bl	80182bc <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE10deallocateEPS2_j>
 8017fcc:	bf00      	nop
 8017fce:	3710      	adds	r7, #16
 8017fd0:	46bd      	mov	sp, r7
 8017fd2:	bd80      	pop	{r7, pc}

08017fd4 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8017fd4:	b480      	push	{r7}
 8017fd6:	b083      	sub	sp, #12
 8017fd8:	af00      	add	r7, sp, #0
 8017fda:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	4618      	mov	r0, r3
 8017fe0:	370c      	adds	r7, #12
 8017fe2:	46bd      	mov	sp, r7
 8017fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fe8:	4770      	bx	lr

08017fea <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8017fea:	b590      	push	{r4, r7, lr}
 8017fec:	b085      	sub	sp, #20
 8017fee:	af00      	add	r7, sp, #0
 8017ff0:	60f8      	str	r0, [r7, #12]
 8017ff2:	60b9      	str	r1, [r7, #8]
 8017ff4:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8017ff6:	6878      	ldr	r0, [r7, #4]
 8017ff8:	f7ff ffec 	bl	8017fd4 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 8017ffc:	4604      	mov	r4, r0
 8017ffe:	68bb      	ldr	r3, [r7, #8]
 8018000:	4619      	mov	r1, r3
 8018002:	2008      	movs	r0, #8
 8018004:	f7e9 fb5c 	bl	80016c0 <_ZnwjPv>
 8018008:	4603      	mov	r3, r0
 801800a:	4622      	mov	r2, r4
 801800c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018010:	e883 0003 	stmia.w	r3, {r0, r1}
 8018014:	bf00      	nop
 8018016:	3714      	adds	r7, #20
 8018018:	46bd      	mov	sp, r7
 801801a:	bd90      	pop	{r4, r7, pc}

0801801c <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801801c:	b480      	push	{r7}
 801801e:	b083      	sub	sp, #12
 8018020:	af00      	add	r7, sp, #0
 8018022:	6078      	str	r0, [r7, #4]
 8018024:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8018026:	683b      	ldr	r3, [r7, #0]
 8018028:	681a      	ldr	r2, [r3, #0]
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	601a      	str	r2, [r3, #0]
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	4618      	mov	r0, r3
 8018032:	370c      	adds	r7, #12
 8018034:	46bd      	mov	sp, r7
 8018036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801803a:	4770      	bx	lr

0801803c <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 801803c:	b590      	push	{r4, r7, lr}
 801803e:	b087      	sub	sp, #28
 8018040:	af00      	add	r7, sp, #0
 8018042:	60f8      	str	r0, [r7, #12]
 8018044:	60b9      	str	r1, [r7, #8]
 8018046:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8018048:	68f8      	ldr	r0, [r7, #12]
 801804a:	f000 f947 	bl	80182dc <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 801804e:	4604      	mov	r4, r0
 8018050:	68f8      	ldr	r0, [r7, #12]
 8018052:	f7ff fb82 	bl	801775a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8018056:	4603      	mov	r3, r0
 8018058:	1ae2      	subs	r2, r4, r3
 801805a:	68bb      	ldr	r3, [r7, #8]
 801805c:	429a      	cmp	r2, r3
 801805e:	bf34      	ite	cc
 8018060:	2301      	movcc	r3, #1
 8018062:	2300      	movcs	r3, #0
 8018064:	b2db      	uxtb	r3, r3
 8018066:	2b00      	cmp	r3, #0
 8018068:	d002      	beq.n	8018070 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 801806a:	6878      	ldr	r0, [r7, #4]
 801806c:	f001 fab4 	bl	80195d8 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8018070:	68f8      	ldr	r0, [r7, #12]
 8018072:	f7ff fb72 	bl	801775a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8018076:	4604      	mov	r4, r0
 8018078:	68f8      	ldr	r0, [r7, #12]
 801807a:	f7ff fb6e 	bl	801775a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 801807e:	4603      	mov	r3, r0
 8018080:	613b      	str	r3, [r7, #16]
 8018082:	f107 0208 	add.w	r2, r7, #8
 8018086:	f107 0310 	add.w	r3, r7, #16
 801808a:	4611      	mov	r1, r2
 801808c:	4618      	mov	r0, r3
 801808e:	f7eb fb40 	bl	8003712 <_ZSt3maxIjERKT_S2_S2_>
 8018092:	4603      	mov	r3, r0
 8018094:	681b      	ldr	r3, [r3, #0]
 8018096:	4423      	add	r3, r4
 8018098:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801809a:	68f8      	ldr	r0, [r7, #12]
 801809c:	f7ff fb5d 	bl	801775a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 80180a0:	4602      	mov	r2, r0
 80180a2:	697b      	ldr	r3, [r7, #20]
 80180a4:	4293      	cmp	r3, r2
 80180a6:	d306      	bcc.n	80180b6 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x7a>
 80180a8:	68f8      	ldr	r0, [r7, #12]
 80180aa:	f000 f917 	bl	80182dc <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 80180ae:	4602      	mov	r2, r0
 80180b0:	697b      	ldr	r3, [r7, #20]
 80180b2:	4293      	cmp	r3, r2
 80180b4:	d904      	bls.n	80180c0 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x84>
 80180b6:	68f8      	ldr	r0, [r7, #12]
 80180b8:	f000 f910 	bl	80182dc <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 80180bc:	4603      	mov	r3, r0
 80180be:	e000      	b.n	80180c2 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x86>
 80180c0:	697b      	ldr	r3, [r7, #20]
      }
 80180c2:	4618      	mov	r0, r3
 80180c4:	371c      	adds	r7, #28
 80180c6:	46bd      	mov	sp, r7
 80180c8:	bd90      	pop	{r4, r7, pc}

080180ca <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80180ca:	b580      	push	{r7, lr}
 80180cc:	b084      	sub	sp, #16
 80180ce:	af00      	add	r7, sp, #0
 80180d0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80180d2:	687a      	ldr	r2, [r7, #4]
 80180d4:	f107 030c 	add.w	r3, r7, #12
 80180d8:	4611      	mov	r1, r2
 80180da:	4618      	mov	r0, r3
 80180dc:	f7ff ff9e 	bl	801801c <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80180e0:	68fb      	ldr	r3, [r7, #12]
 80180e2:	4618      	mov	r0, r3
 80180e4:	3710      	adds	r7, #16
 80180e6:	46bd      	mov	sp, r7
 80180e8:	bd80      	pop	{r7, pc}

080180ea <_ZN9__gnu_cxxmiIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80180ea:	b590      	push	{r4, r7, lr}
 80180ec:	b083      	sub	sp, #12
 80180ee:	af00      	add	r7, sp, #0
 80180f0:	6078      	str	r0, [r7, #4]
 80180f2:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80180f4:	6878      	ldr	r0, [r7, #4]
 80180f6:	f000 f835 	bl	8018164 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 80180fa:	4603      	mov	r3, r0
 80180fc:	681c      	ldr	r4, [r3, #0]
 80180fe:	6838      	ldr	r0, [r7, #0]
 8018100:	f000 f830 	bl	8018164 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8018104:	4603      	mov	r3, r0
 8018106:	681b      	ldr	r3, [r3, #0]
 8018108:	1ae3      	subs	r3, r4, r3
 801810a:	10db      	asrs	r3, r3, #3
 801810c:	4618      	mov	r0, r3
 801810e:	370c      	adds	r7, #12
 8018110:	46bd      	mov	sp, r7
 8018112:	bd90      	pop	{r4, r7, pc}

08018114 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8018114:	b580      	push	{r7, lr}
 8018116:	b082      	sub	sp, #8
 8018118:	af00      	add	r7, sp, #0
 801811a:	6078      	str	r0, [r7, #4]
 801811c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801811e:	683b      	ldr	r3, [r7, #0]
 8018120:	2b00      	cmp	r3, #0
 8018122:	d006      	beq.n	8018132 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj+0x1e>
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	6839      	ldr	r1, [r7, #0]
 8018128:	4618      	mov	r0, r3
 801812a:	f000 f8e8 	bl	80182fe <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8allocateERS2_j>
 801812e:	4603      	mov	r3, r0
 8018130:	e000      	b.n	8018134 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj+0x20>
 8018132:	2300      	movs	r3, #0
      }
 8018134:	4618      	mov	r0, r3
 8018136:	3708      	adds	r7, #8
 8018138:	46bd      	mov	sp, r7
 801813a:	bd80      	pop	{r7, pc}

0801813c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 801813c:	b590      	push	{r4, r7, lr}
 801813e:	b087      	sub	sp, #28
 8018140:	af02      	add	r7, sp, #8
 8018142:	60f8      	str	r0, [r7, #12]
 8018144:	60b9      	str	r1, [r7, #8]
 8018146:	607a      	str	r2, [r7, #4]
 8018148:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 801814a:	f88d 4000 	strb.w	r4, [sp]
 801814e:	683b      	ldr	r3, [r7, #0]
 8018150:	687a      	ldr	r2, [r7, #4]
 8018152:	68b9      	ldr	r1, [r7, #8]
 8018154:	68f8      	ldr	r0, [r7, #12]
 8018156:	f000 f8e1 	bl	801831c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 801815a:	4603      	mov	r3, r0
      }
 801815c:	4618      	mov	r0, r3
 801815e:	3714      	adds	r7, #20
 8018160:	46bd      	mov	sp, r7
 8018162:	bd90      	pop	{r4, r7, pc}

08018164 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8018164:	b480      	push	{r7}
 8018166:	b083      	sub	sp, #12
 8018168:	af00      	add	r7, sp, #0
 801816a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	4618      	mov	r0, r3
 8018170:	370c      	adds	r7, #12
 8018172:	46bd      	mov	sp, r7
 8018174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018178:	4770      	bx	lr

0801817a <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 801817a:	b480      	push	{r7}
 801817c:	b083      	sub	sp, #12
 801817e:	af00      	add	r7, sp, #0
 8018180:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	4618      	mov	r0, r3
 8018186:	370c      	adds	r7, #12
 8018188:	46bd      	mov	sp, r7
 801818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801818e:	4770      	bx	lr

08018190 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8018190:	b590      	push	{r4, r7, lr}
 8018192:	b085      	sub	sp, #20
 8018194:	af00      	add	r7, sp, #0
 8018196:	60f8      	str	r0, [r7, #12]
 8018198:	60b9      	str	r1, [r7, #8]
 801819a:	607a      	str	r2, [r7, #4]
 801819c:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 801819e:	68f8      	ldr	r0, [r7, #12]
 80181a0:	f000 f8ce 	bl	8018340 <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>
 80181a4:	4604      	mov	r4, r0
 80181a6:	68b8      	ldr	r0, [r7, #8]
 80181a8:	f000 f8ca 	bl	8018340 <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>
 80181ac:	4601      	mov	r1, r0
 80181ae:	683b      	ldr	r3, [r7, #0]
 80181b0:	687a      	ldr	r2, [r7, #4]
 80181b2:	4620      	mov	r0, r4
 80181b4:	f000 f8d3 	bl	801835e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_S2_ET0_T_S6_S5_RSaIT1_E>
 80181b8:	4603      	mov	r3, r0
    }
 80181ba:	4618      	mov	r0, r3
 80181bc:	3714      	adds	r7, #20
 80181be:	46bd      	mov	sp, r7
 80181c0:	bd90      	pop	{r4, r7, pc}

080181c2 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80181c2:	b580      	push	{r7, lr}
 80181c4:	b084      	sub	sp, #16
 80181c6:	af00      	add	r7, sp, #0
 80181c8:	60f8      	str	r0, [r7, #12]
 80181ca:	60b9      	str	r1, [r7, #8]
 80181cc:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80181ce:	68b9      	ldr	r1, [r7, #8]
 80181d0:	68f8      	ldr	r0, [r7, #12]
 80181d2:	f000 f8d5 	bl	8018380 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tEEvT_S3_>
    }
 80181d6:	bf00      	nop
 80181d8:	3710      	adds	r7, #16
 80181da:	46bd      	mov	sp, r7
 80181dc:	bd80      	pop	{r7, pc}

080181de <_ZN9__gnu_cxx13new_allocatorIPvE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 80181de:	b580      	push	{r7, lr}
 80181e0:	b084      	sub	sp, #16
 80181e2:	af00      	add	r7, sp, #0
 80181e4:	60f8      	str	r0, [r7, #12]
 80181e6:	60b9      	str	r1, [r7, #8]
 80181e8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	009b      	lsls	r3, r3, #2
 80181ee:	4619      	mov	r1, r3
 80181f0:	68b8      	ldr	r0, [r7, #8]
 80181f2:	f001 f9d7 	bl	80195a4 <_ZdlPvj>
      }
 80181f6:	bf00      	nop
 80181f8:	3710      	adds	r7, #16
 80181fa:	46bd      	mov	sp, r7
 80181fc:	bd80      	pop	{r7, pc}

080181fe <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80181fe:	b580      	push	{r7, lr}
 8018200:	b082      	sub	sp, #8
 8018202:	af00      	add	r7, sp, #0
 8018204:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	4618      	mov	r0, r3
 801820a:	f000 f8e0 	bl	80183ce <_ZNKSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 801820e:	4603      	mov	r3, r0
 8018210:	4618      	mov	r0, r3
 8018212:	f000 f8c2 	bl	801839a <_ZNSt6vectorIPvSaIS0_EE11_S_max_sizeERKS1_>
 8018216:	4603      	mov	r3, r0
 8018218:	4618      	mov	r0, r3
 801821a:	3708      	adds	r7, #8
 801821c:	46bd      	mov	sp, r7
 801821e:	bd80      	pop	{r7, pc}

08018220 <_ZNSt16allocator_traitsISaIPvEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8018220:	b580      	push	{r7, lr}
 8018222:	b082      	sub	sp, #8
 8018224:	af00      	add	r7, sp, #0
 8018226:	6078      	str	r0, [r7, #4]
 8018228:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 801822a:	2200      	movs	r2, #0
 801822c:	6839      	ldr	r1, [r7, #0]
 801822e:	6878      	ldr	r0, [r7, #4]
 8018230:	f000 f8d8 	bl	80183e4 <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv>
 8018234:	4603      	mov	r3, r0
 8018236:	4618      	mov	r0, r3
 8018238:	3708      	adds	r7, #8
 801823a:	46bd      	mov	sp, r7
 801823c:	bd80      	pop	{r7, pc}

0801823e <_ZNSt6vectorIPvSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 801823e:	b580      	push	{r7, lr}
 8018240:	b084      	sub	sp, #16
 8018242:	af00      	add	r7, sp, #0
 8018244:	60f8      	str	r0, [r7, #12]
 8018246:	60b9      	str	r1, [r7, #8]
 8018248:	607a      	str	r2, [r7, #4]
 801824a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 801824c:	683b      	ldr	r3, [r7, #0]
 801824e:	687a      	ldr	r2, [r7, #4]
 8018250:	68b9      	ldr	r1, [r7, #8]
 8018252:	68f8      	ldr	r0, [r7, #12]
 8018254:	f000 f8e4 	bl	8018420 <_ZSt12__relocate_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 8018258:	4603      	mov	r3, r0
      }
 801825a:	4618      	mov	r0, r3
 801825c:	3710      	adds	r7, #16
 801825e:	46bd      	mov	sp, r7
 8018260:	bd80      	pop	{r7, pc}

08018262 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8018262:	b580      	push	{r7, lr}
 8018264:	b084      	sub	sp, #16
 8018266:	af00      	add	r7, sp, #0
 8018268:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 801826a:	f107 030c 	add.w	r3, r7, #12
 801826e:	6879      	ldr	r1, [r7, #4]
 8018270:	4618      	mov	r0, r3
 8018272:	f000 f8f2 	bl	801845a <_ZNSt13move_iteratorIPPvEC1ES1_>
 8018276:	68fb      	ldr	r3, [r7, #12]
 8018278:	4618      	mov	r0, r3
 801827a:	3710      	adds	r7, #16
 801827c:	46bd      	mov	sp, r7
 801827e:	bd80      	pop	{r7, pc}

08018280 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPvES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8018280:	b580      	push	{r7, lr}
 8018282:	b084      	sub	sp, #16
 8018284:	af00      	add	r7, sp, #0
 8018286:	60f8      	str	r0, [r7, #12]
 8018288:	60b9      	str	r1, [r7, #8]
 801828a:	607a      	str	r2, [r7, #4]
 801828c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 801828e:	687a      	ldr	r2, [r7, #4]
 8018290:	68b9      	ldr	r1, [r7, #8]
 8018292:	68f8      	ldr	r0, [r7, #12]
 8018294:	f000 f8f3 	bl	801847e <_ZSt18uninitialized_copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>
 8018298:	4603      	mov	r3, r0
 801829a:	4618      	mov	r0, r3
 801829c:	3710      	adds	r7, #16
 801829e:	46bd      	mov	sp, r7
 80182a0:	bd80      	pop	{r7, pc}

080182a2 <_ZSt8_DestroyIPPvEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80182a2:	b580      	push	{r7, lr}
 80182a4:	b082      	sub	sp, #8
 80182a6:	af00      	add	r7, sp, #0
 80182a8:	6078      	str	r0, [r7, #4]
 80182aa:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80182ac:	6839      	ldr	r1, [r7, #0]
 80182ae:	6878      	ldr	r0, [r7, #4]
 80182b0:	f000 f8f7 	bl	80184a2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPvEEvT_S4_>
    }
 80182b4:	bf00      	nop
 80182b6:	3708      	adds	r7, #8
 80182b8:	46bd      	mov	sp, r7
 80182ba:	bd80      	pop	{r7, pc}

080182bc <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80182bc:	b580      	push	{r7, lr}
 80182be:	b084      	sub	sp, #16
 80182c0:	af00      	add	r7, sp, #0
 80182c2:	60f8      	str	r0, [r7, #12]
 80182c4:	60b9      	str	r1, [r7, #8]
 80182c6:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	00db      	lsls	r3, r3, #3
 80182cc:	4619      	mov	r1, r3
 80182ce:	68b8      	ldr	r0, [r7, #8]
 80182d0:	f001 f968 	bl	80195a4 <_ZdlPvj>
      }
 80182d4:	bf00      	nop
 80182d6:	3710      	adds	r7, #16
 80182d8:	46bd      	mov	sp, r7
 80182da:	bd80      	pop	{r7, pc}

080182dc <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80182dc:	b580      	push	{r7, lr}
 80182de:	b082      	sub	sp, #8
 80182e0:	af00      	add	r7, sp, #0
 80182e2:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	4618      	mov	r0, r3
 80182e8:	f000 f900 	bl	80184ec <_ZNKSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 80182ec:	4603      	mov	r3, r0
 80182ee:	4618      	mov	r0, r3
 80182f0:	f000 f8e2 	bl	80184b8 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_max_sizeERKS2_>
 80182f4:	4603      	mov	r3, r0
 80182f6:	4618      	mov	r0, r3
 80182f8:	3708      	adds	r7, #8
 80182fa:	46bd      	mov	sp, r7
 80182fc:	bd80      	pop	{r7, pc}

080182fe <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80182fe:	b580      	push	{r7, lr}
 8018300:	b082      	sub	sp, #8
 8018302:	af00      	add	r7, sp, #0
 8018304:	6078      	str	r0, [r7, #4]
 8018306:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8018308:	2200      	movs	r2, #0
 801830a:	6839      	ldr	r1, [r7, #0]
 801830c:	6878      	ldr	r0, [r7, #4]
 801830e:	f000 f8f8 	bl	8018502 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv>
 8018312:	4603      	mov	r3, r0
 8018314:	4618      	mov	r0, r3
 8018316:	3708      	adds	r7, #8
 8018318:	46bd      	mov	sp, r7
 801831a:	bd80      	pop	{r7, pc}

0801831c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 801831c:	b580      	push	{r7, lr}
 801831e:	b084      	sub	sp, #16
 8018320:	af00      	add	r7, sp, #0
 8018322:	60f8      	str	r0, [r7, #12]
 8018324:	60b9      	str	r1, [r7, #8]
 8018326:	607a      	str	r2, [r7, #4]
 8018328:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 801832a:	683b      	ldr	r3, [r7, #0]
 801832c:	687a      	ldr	r2, [r7, #4]
 801832e:	68b9      	ldr	r1, [r7, #8]
 8018330:	68f8      	ldr	r0, [r7, #12]
 8018332:	f000 f904 	bl	801853e <_ZSt12__relocate_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 8018336:	4603      	mov	r3, r0
      }
 8018338:	4618      	mov	r0, r3
 801833a:	3710      	adds	r7, #16
 801833c:	46bd      	mov	sp, r7
 801833e:	bd80      	pop	{r7, pc}

08018340 <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8018340:	b580      	push	{r7, lr}
 8018342:	b084      	sub	sp, #16
 8018344:	af00      	add	r7, sp, #0
 8018346:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8018348:	f107 030c 	add.w	r3, r7, #12
 801834c:	6879      	ldr	r1, [r7, #4]
 801834e:	4618      	mov	r0, r3
 8018350:	f000 f912 	bl	8018578 <_ZNSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEEC1ES2_>
 8018354:	68fb      	ldr	r3, [r7, #12]
 8018356:	4618      	mov	r0, r3
 8018358:	3710      	adds	r7, #16
 801835a:	46bd      	mov	sp, r7
 801835c:	bd80      	pop	{r7, pc}

0801835e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 801835e:	b580      	push	{r7, lr}
 8018360:	b084      	sub	sp, #16
 8018362:	af00      	add	r7, sp, #0
 8018364:	60f8      	str	r0, [r7, #12]
 8018366:	60b9      	str	r1, [r7, #8]
 8018368:	607a      	str	r2, [r7, #4]
 801836a:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 801836c:	687a      	ldr	r2, [r7, #4]
 801836e:	68b9      	ldr	r1, [r7, #8]
 8018370:	68f8      	ldr	r0, [r7, #12]
 8018372:	f000 f913 	bl	801859c <_ZSt18uninitialized_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>
 8018376:	4603      	mov	r3, r0
 8018378:	4618      	mov	r0, r3
 801837a:	3710      	adds	r7, #16
 801837c:	46bd      	mov	sp, r7
 801837e:	bd80      	pop	{r7, pc}

08018380 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8018380:	b580      	push	{r7, lr}
 8018382:	b082      	sub	sp, #8
 8018384:	af00      	add	r7, sp, #0
 8018386:	6078      	str	r0, [r7, #4]
 8018388:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 801838a:	6839      	ldr	r1, [r7, #0]
 801838c:	6878      	ldr	r0, [r7, #4]
 801838e:	f000 f917 	bl	80185c0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN12_GLOBAL__N_116scratch_buffer_tEEEvT_S5_>
    }
 8018392:	bf00      	nop
 8018394:	3708      	adds	r7, #8
 8018396:	46bd      	mov	sp, r7
 8018398:	bd80      	pop	{r7, pc}

0801839a <_ZNSt6vectorIPvSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 801839a:	b580      	push	{r7, lr}
 801839c:	b084      	sub	sp, #16
 801839e:	af00      	add	r7, sp, #0
 80183a0:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80183a2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80183a6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80183a8:	6878      	ldr	r0, [r7, #4]
 80183aa:	f000 f914 	bl	80185d6 <_ZNSt16allocator_traitsISaIPvEE8max_sizeERKS1_>
 80183ae:	4603      	mov	r3, r0
 80183b0:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80183b2:	f107 0208 	add.w	r2, r7, #8
 80183b6:	f107 030c 	add.w	r3, r7, #12
 80183ba:	4611      	mov	r1, r2
 80183bc:	4618      	mov	r0, r3
 80183be:	f7eb fbbe 	bl	8003b3e <_ZSt3minIjERKT_S2_S2_>
 80183c2:	4603      	mov	r3, r0
 80183c4:	681b      	ldr	r3, [r3, #0]
      }
 80183c6:	4618      	mov	r0, r3
 80183c8:	3710      	adds	r7, #16
 80183ca:	46bd      	mov	sp, r7
 80183cc:	bd80      	pop	{r7, pc}

080183ce <_ZNKSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80183ce:	b480      	push	{r7}
 80183d0:	b083      	sub	sp, #12
 80183d2:	af00      	add	r7, sp, #0
 80183d4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	4618      	mov	r0, r3
 80183da:	370c      	adds	r7, #12
 80183dc:	46bd      	mov	sp, r7
 80183de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183e2:	4770      	bx	lr

080183e4 <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80183e4:	b580      	push	{r7, lr}
 80183e6:	b084      	sub	sp, #16
 80183e8:	af00      	add	r7, sp, #0
 80183ea:	60f8      	str	r0, [r7, #12]
 80183ec:	60b9      	str	r1, [r7, #8]
 80183ee:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80183f0:	68f8      	ldr	r0, [r7, #12]
 80183f2:	f000 f8fc 	bl	80185ee <_ZNK9__gnu_cxx13new_allocatorIPvE11_M_max_sizeEv>
 80183f6:	4602      	mov	r2, r0
 80183f8:	68bb      	ldr	r3, [r7, #8]
 80183fa:	4293      	cmp	r3, r2
 80183fc:	bf8c      	ite	hi
 80183fe:	2301      	movhi	r3, #1
 8018400:	2300      	movls	r3, #0
 8018402:	b2db      	uxtb	r3, r3
 8018404:	2b00      	cmp	r3, #0
 8018406:	d001      	beq.n	801840c <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8018408:	f001 f8e3 	bl	80195d2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801840c:	68bb      	ldr	r3, [r7, #8]
 801840e:	009b      	lsls	r3, r3, #2
 8018410:	4618      	mov	r0, r3
 8018412:	f001 f8cb 	bl	80195ac <_Znwj>
 8018416:	4603      	mov	r3, r0
      }
 8018418:	4618      	mov	r0, r3
 801841a:	3710      	adds	r7, #16
 801841c:	46bd      	mov	sp, r7
 801841e:	bd80      	pop	{r7, pc}

08018420 <_ZSt12__relocate_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8018420:	b5b0      	push	{r4, r5, r7, lr}
 8018422:	b084      	sub	sp, #16
 8018424:	af00      	add	r7, sp, #0
 8018426:	60f8      	str	r0, [r7, #12]
 8018428:	60b9      	str	r1, [r7, #8]
 801842a:	607a      	str	r2, [r7, #4]
 801842c:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 801842e:	68f8      	ldr	r0, [r7, #12]
 8018430:	f000 f8e9 	bl	8018606 <_ZSt12__niter_baseIPPvET_S2_>
 8018434:	4604      	mov	r4, r0
 8018436:	68b8      	ldr	r0, [r7, #8]
 8018438:	f000 f8e5 	bl	8018606 <_ZSt12__niter_baseIPPvET_S2_>
 801843c:	4605      	mov	r5, r0
 801843e:	6878      	ldr	r0, [r7, #4]
 8018440:	f000 f8e1 	bl	8018606 <_ZSt12__niter_baseIPPvET_S2_>
 8018444:	4602      	mov	r2, r0
 8018446:	683b      	ldr	r3, [r7, #0]
 8018448:	4629      	mov	r1, r5
 801844a:	4620      	mov	r0, r4
 801844c:	f000 f8e6 	bl	801861c <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 8018450:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8018452:	4618      	mov	r0, r3
 8018454:	3710      	adds	r7, #16
 8018456:	46bd      	mov	sp, r7
 8018458:	bdb0      	pop	{r4, r5, r7, pc}

0801845a <_ZNSt13move_iteratorIPPvEC1ES1_>:
      move_iterator(iterator_type __i)
 801845a:	b580      	push	{r7, lr}
 801845c:	b082      	sub	sp, #8
 801845e:	af00      	add	r7, sp, #0
 8018460:	6078      	str	r0, [r7, #4]
 8018462:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8018464:	463b      	mov	r3, r7
 8018466:	4618      	mov	r0, r3
 8018468:	f000 f8f6 	bl	8018658 <_ZSt4moveIRPPvEONSt16remove_referenceIT_E4typeEOS4_>
 801846c:	4603      	mov	r3, r0
 801846e:	681a      	ldr	r2, [r3, #0]
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	601a      	str	r2, [r3, #0]
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	4618      	mov	r0, r3
 8018478:	3708      	adds	r7, #8
 801847a:	46bd      	mov	sp, r7
 801847c:	bd80      	pop	{r7, pc}

0801847e <_ZSt18uninitialized_copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 801847e:	b580      	push	{r7, lr}
 8018480:	b086      	sub	sp, #24
 8018482:	af00      	add	r7, sp, #0
 8018484:	60f8      	str	r0, [r7, #12]
 8018486:	60b9      	str	r1, [r7, #8]
 8018488:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 801848a:	2301      	movs	r3, #1
 801848c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 801848e:	687a      	ldr	r2, [r7, #4]
 8018490:	68b9      	ldr	r1, [r7, #8]
 8018492:	68f8      	ldr	r0, [r7, #12]
 8018494:	f000 f8eb 	bl	801866e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPvES4_EET0_T_S7_S6_>
 8018498:	4603      	mov	r3, r0
    }
 801849a:	4618      	mov	r0, r3
 801849c:	3718      	adds	r7, #24
 801849e:	46bd      	mov	sp, r7
 80184a0:	bd80      	pop	{r7, pc}

080184a2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPvEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80184a2:	b480      	push	{r7}
 80184a4:	b083      	sub	sp, #12
 80184a6:	af00      	add	r7, sp, #0
 80184a8:	6078      	str	r0, [r7, #4]
 80184aa:	6039      	str	r1, [r7, #0]
 80184ac:	bf00      	nop
 80184ae:	370c      	adds	r7, #12
 80184b0:	46bd      	mov	sp, r7
 80184b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184b6:	4770      	bx	lr

080184b8 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80184b8:	b580      	push	{r7, lr}
 80184ba:	b084      	sub	sp, #16
 80184bc:	af00      	add	r7, sp, #0
 80184be:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80184c0:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80184c4:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80184c6:	6878      	ldr	r0, [r7, #4]
 80184c8:	f000 f8e1 	bl	801868e <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8max_sizeERKS2_>
 80184cc:	4603      	mov	r3, r0
 80184ce:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80184d0:	f107 0208 	add.w	r2, r7, #8
 80184d4:	f107 030c 	add.w	r3, r7, #12
 80184d8:	4611      	mov	r1, r2
 80184da:	4618      	mov	r0, r3
 80184dc:	f7eb fb2f 	bl	8003b3e <_ZSt3minIjERKT_S2_S2_>
 80184e0:	4603      	mov	r3, r0
 80184e2:	681b      	ldr	r3, [r3, #0]
      }
 80184e4:	4618      	mov	r0, r3
 80184e6:	3710      	adds	r7, #16
 80184e8:	46bd      	mov	sp, r7
 80184ea:	bd80      	pop	{r7, pc}

080184ec <_ZNKSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80184ec:	b480      	push	{r7}
 80184ee:	b083      	sub	sp, #12
 80184f0:	af00      	add	r7, sp, #0
 80184f2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	4618      	mov	r0, r3
 80184f8:	370c      	adds	r7, #12
 80184fa:	46bd      	mov	sp, r7
 80184fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018500:	4770      	bx	lr

08018502 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8018502:	b580      	push	{r7, lr}
 8018504:	b084      	sub	sp, #16
 8018506:	af00      	add	r7, sp, #0
 8018508:	60f8      	str	r0, [r7, #12]
 801850a:	60b9      	str	r1, [r7, #8]
 801850c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 801850e:	68f8      	ldr	r0, [r7, #12]
 8018510:	f000 f8c9 	bl	80186a6 <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE11_M_max_sizeEv>
 8018514:	4602      	mov	r2, r0
 8018516:	68bb      	ldr	r3, [r7, #8]
 8018518:	4293      	cmp	r3, r2
 801851a:	bf8c      	ite	hi
 801851c:	2301      	movhi	r3, #1
 801851e:	2300      	movls	r3, #0
 8018520:	b2db      	uxtb	r3, r3
 8018522:	2b00      	cmp	r3, #0
 8018524:	d001      	beq.n	801852a <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8018526:	f001 f854 	bl	80195d2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801852a:	68bb      	ldr	r3, [r7, #8]
 801852c:	00db      	lsls	r3, r3, #3
 801852e:	4618      	mov	r0, r3
 8018530:	f001 f83c 	bl	80195ac <_Znwj>
 8018534:	4603      	mov	r3, r0
      }
 8018536:	4618      	mov	r0, r3
 8018538:	3710      	adds	r7, #16
 801853a:	46bd      	mov	sp, r7
 801853c:	bd80      	pop	{r7, pc}

0801853e <_ZSt12__relocate_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 801853e:	b5b0      	push	{r4, r5, r7, lr}
 8018540:	b084      	sub	sp, #16
 8018542:	af00      	add	r7, sp, #0
 8018544:	60f8      	str	r0, [r7, #12]
 8018546:	60b9      	str	r1, [r7, #8]
 8018548:	607a      	str	r2, [r7, #4]
 801854a:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 801854c:	68f8      	ldr	r0, [r7, #12]
 801854e:	f000 f8b6 	bl	80186be <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8018552:	4604      	mov	r4, r0
 8018554:	68b8      	ldr	r0, [r7, #8]
 8018556:	f000 f8b2 	bl	80186be <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 801855a:	4605      	mov	r5, r0
 801855c:	6878      	ldr	r0, [r7, #4]
 801855e:	f000 f8ae 	bl	80186be <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8018562:	4602      	mov	r2, r0
 8018564:	683b      	ldr	r3, [r7, #0]
 8018566:	4629      	mov	r1, r5
 8018568:	4620      	mov	r0, r4
 801856a:	f000 f8b3 	bl	80186d4 <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 801856e:	4603      	mov	r3, r0
    }
 8018570:	4618      	mov	r0, r3
 8018572:	3710      	adds	r7, #16
 8018574:	46bd      	mov	sp, r7
 8018576:	bdb0      	pop	{r4, r5, r7, pc}

08018578 <_ZNSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEEC1ES2_>:
      move_iterator(iterator_type __i)
 8018578:	b580      	push	{r7, lr}
 801857a:	b082      	sub	sp, #8
 801857c:	af00      	add	r7, sp, #0
 801857e:	6078      	str	r0, [r7, #4]
 8018580:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8018582:	463b      	mov	r3, r7
 8018584:	4618      	mov	r0, r3
 8018586:	f000 f8c3 	bl	8018710 <_ZSt4moveIRPN12_GLOBAL__N_116scratch_buffer_tEEONSt16remove_referenceIT_E4typeEOS5_>
 801858a:	4603      	mov	r3, r0
 801858c:	681a      	ldr	r2, [r3, #0]
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	601a      	str	r2, [r3, #0]
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	4618      	mov	r0, r3
 8018596:	3708      	adds	r7, #8
 8018598:	46bd      	mov	sp, r7
 801859a:	bd80      	pop	{r7, pc}

0801859c <_ZSt18uninitialized_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 801859c:	b580      	push	{r7, lr}
 801859e:	b086      	sub	sp, #24
 80185a0:	af00      	add	r7, sp, #0
 80185a2:	60f8      	str	r0, [r7, #12]
 80185a4:	60b9      	str	r1, [r7, #8]
 80185a6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80185a8:	2301      	movs	r3, #1
 80185aa:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80185ac:	687a      	ldr	r2, [r7, #4]
 80185ae:	68b9      	ldr	r1, [r7, #8]
 80185b0:	68f8      	ldr	r0, [r7, #12]
 80185b2:	f000 f8b8 	bl	8018726 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES5_EET0_T_S8_S7_>
 80185b6:	4603      	mov	r3, r0
    }
 80185b8:	4618      	mov	r0, r3
 80185ba:	3718      	adds	r7, #24
 80185bc:	46bd      	mov	sp, r7
 80185be:	bd80      	pop	{r7, pc}

080185c0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN12_GLOBAL__N_116scratch_buffer_tEEEvT_S5_>:
 80185c0:	b480      	push	{r7}
 80185c2:	b083      	sub	sp, #12
 80185c4:	af00      	add	r7, sp, #0
 80185c6:	6078      	str	r0, [r7, #4]
 80185c8:	6039      	str	r1, [r7, #0]
 80185ca:	bf00      	nop
 80185cc:	370c      	adds	r7, #12
 80185ce:	46bd      	mov	sp, r7
 80185d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185d4:	4770      	bx	lr

080185d6 <_ZNSt16allocator_traitsISaIPvEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80185d6:	b580      	push	{r7, lr}
 80185d8:	b082      	sub	sp, #8
 80185da:	af00      	add	r7, sp, #0
 80185dc:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80185de:	6878      	ldr	r0, [r7, #4]
 80185e0:	f000 f8b1 	bl	8018746 <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>
 80185e4:	4603      	mov	r3, r0
      }
 80185e6:	4618      	mov	r0, r3
 80185e8:	3708      	adds	r7, #8
 80185ea:	46bd      	mov	sp, r7
 80185ec:	bd80      	pop	{r7, pc}

080185ee <_ZNK9__gnu_cxx13new_allocatorIPvE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80185ee:	b480      	push	{r7}
 80185f0:	b083      	sub	sp, #12
 80185f2:	af00      	add	r7, sp, #0
 80185f4:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80185f6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80185fa:	4618      	mov	r0, r3
 80185fc:	370c      	adds	r7, #12
 80185fe:	46bd      	mov	sp, r7
 8018600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018604:	4770      	bx	lr

08018606 <_ZSt12__niter_baseIPPvET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8018606:	b480      	push	{r7}
 8018608:	b083      	sub	sp, #12
 801860a:	af00      	add	r7, sp, #0
 801860c:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	4618      	mov	r0, r3
 8018612:	370c      	adds	r7, #12
 8018614:	46bd      	mov	sp, r7
 8018616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801861a:	4770      	bx	lr

0801861c <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 801861c:	b580      	push	{r7, lr}
 801861e:	b086      	sub	sp, #24
 8018620:	af00      	add	r7, sp, #0
 8018622:	60f8      	str	r0, [r7, #12]
 8018624:	60b9      	str	r1, [r7, #8]
 8018626:	607a      	str	r2, [r7, #4]
 8018628:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 801862a:	68ba      	ldr	r2, [r7, #8]
 801862c:	68fb      	ldr	r3, [r7, #12]
 801862e:	1ad3      	subs	r3, r2, r3
 8018630:	109b      	asrs	r3, r3, #2
 8018632:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8018634:	697b      	ldr	r3, [r7, #20]
 8018636:	2b00      	cmp	r3, #0
 8018638:	dd06      	ble.n	8018648 <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801863a:	697b      	ldr	r3, [r7, #20]
 801863c:	009b      	lsls	r3, r3, #2
 801863e:	461a      	mov	r2, r3
 8018640:	68f9      	ldr	r1, [r7, #12]
 8018642:	6878      	ldr	r0, [r7, #4]
 8018644:	f002 fb72 	bl	801ad2c <memmove>
      return __result + __count;
 8018648:	697b      	ldr	r3, [r7, #20]
 801864a:	009b      	lsls	r3, r3, #2
 801864c:	687a      	ldr	r2, [r7, #4]
 801864e:	4413      	add	r3, r2
    }
 8018650:	4618      	mov	r0, r3
 8018652:	3718      	adds	r7, #24
 8018654:	46bd      	mov	sp, r7
 8018656:	bd80      	pop	{r7, pc}

08018658 <_ZSt4moveIRPPvEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8018658:	b480      	push	{r7}
 801865a:	b083      	sub	sp, #12
 801865c:	af00      	add	r7, sp, #0
 801865e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	4618      	mov	r0, r3
 8018664:	370c      	adds	r7, #12
 8018666:	46bd      	mov	sp, r7
 8018668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801866c:	4770      	bx	lr

0801866e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPvES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 801866e:	b580      	push	{r7, lr}
 8018670:	b084      	sub	sp, #16
 8018672:	af00      	add	r7, sp, #0
 8018674:	60f8      	str	r0, [r7, #12]
 8018676:	60b9      	str	r1, [r7, #8]
 8018678:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 801867a:	687a      	ldr	r2, [r7, #4]
 801867c:	68b9      	ldr	r1, [r7, #8]
 801867e:	68f8      	ldr	r0, [r7, #12]
 8018680:	f000 f86d 	bl	801875e <_ZSt4copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>
 8018684:	4603      	mov	r3, r0
 8018686:	4618      	mov	r0, r3
 8018688:	3710      	adds	r7, #16
 801868a:	46bd      	mov	sp, r7
 801868c:	bd80      	pop	{r7, pc}

0801868e <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 801868e:	b580      	push	{r7, lr}
 8018690:	b082      	sub	sp, #8
 8018692:	af00      	add	r7, sp, #0
 8018694:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8018696:	6878      	ldr	r0, [r7, #4]
 8018698:	f000 f879 	bl	801878e <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>
 801869c:	4603      	mov	r3, r0
      }
 801869e:	4618      	mov	r0, r3
 80186a0:	3708      	adds	r7, #8
 80186a2:	46bd      	mov	sp, r7
 80186a4:	bd80      	pop	{r7, pc}

080186a6 <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80186a6:	b480      	push	{r7}
 80186a8:	b083      	sub	sp, #12
 80186aa:	af00      	add	r7, sp, #0
 80186ac:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80186ae:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 80186b2:	4618      	mov	r0, r3
 80186b4:	370c      	adds	r7, #12
 80186b6:	46bd      	mov	sp, r7
 80186b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186bc:	4770      	bx	lr

080186be <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>:
    __niter_base(_Iterator __it)
 80186be:	b480      	push	{r7}
 80186c0:	b083      	sub	sp, #12
 80186c2:	af00      	add	r7, sp, #0
 80186c4:	6078      	str	r0, [r7, #4]
    { return __it; }
 80186c6:	687b      	ldr	r3, [r7, #4]
 80186c8:	4618      	mov	r0, r3
 80186ca:	370c      	adds	r7, #12
 80186cc:	46bd      	mov	sp, r7
 80186ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186d2:	4770      	bx	lr

080186d4 <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80186d4:	b580      	push	{r7, lr}
 80186d6:	b086      	sub	sp, #24
 80186d8:	af00      	add	r7, sp, #0
 80186da:	60f8      	str	r0, [r7, #12]
 80186dc:	60b9      	str	r1, [r7, #8]
 80186de:	607a      	str	r2, [r7, #4]
 80186e0:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80186e2:	68ba      	ldr	r2, [r7, #8]
 80186e4:	68fb      	ldr	r3, [r7, #12]
 80186e6:	1ad3      	subs	r3, r2, r3
 80186e8:	10db      	asrs	r3, r3, #3
 80186ea:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80186ec:	697b      	ldr	r3, [r7, #20]
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	dd06      	ble.n	8018700 <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80186f2:	697b      	ldr	r3, [r7, #20]
 80186f4:	00db      	lsls	r3, r3, #3
 80186f6:	461a      	mov	r2, r3
 80186f8:	68f9      	ldr	r1, [r7, #12]
 80186fa:	6878      	ldr	r0, [r7, #4]
 80186fc:	f002 fb16 	bl	801ad2c <memmove>
      return __result + __count;
 8018700:	697b      	ldr	r3, [r7, #20]
 8018702:	00db      	lsls	r3, r3, #3
 8018704:	687a      	ldr	r2, [r7, #4]
 8018706:	4413      	add	r3, r2
    }
 8018708:	4618      	mov	r0, r3
 801870a:	3718      	adds	r7, #24
 801870c:	46bd      	mov	sp, r7
 801870e:	bd80      	pop	{r7, pc}

08018710 <_ZSt4moveIRPN12_GLOBAL__N_116scratch_buffer_tEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8018710:	b480      	push	{r7}
 8018712:	b083      	sub	sp, #12
 8018714:	af00      	add	r7, sp, #0
 8018716:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	4618      	mov	r0, r3
 801871c:	370c      	adds	r7, #12
 801871e:	46bd      	mov	sp, r7
 8018720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018724:	4770      	bx	lr

08018726 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8018726:	b580      	push	{r7, lr}
 8018728:	b084      	sub	sp, #16
 801872a:	af00      	add	r7, sp, #0
 801872c:	60f8      	str	r0, [r7, #12]
 801872e:	60b9      	str	r1, [r7, #8]
 8018730:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8018732:	687a      	ldr	r2, [r7, #4]
 8018734:	68b9      	ldr	r1, [r7, #8]
 8018736:	68f8      	ldr	r0, [r7, #12]
 8018738:	f000 f835 	bl	80187a6 <_ZSt4copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>
 801873c:	4603      	mov	r3, r0
 801873e:	4618      	mov	r0, r3
 8018740:	3710      	adds	r7, #16
 8018742:	46bd      	mov	sp, r7
 8018744:	bd80      	pop	{r7, pc}

08018746 <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8018746:	b580      	push	{r7, lr}
 8018748:	b082      	sub	sp, #8
 801874a:	af00      	add	r7, sp, #0
 801874c:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 801874e:	6878      	ldr	r0, [r7, #4]
 8018750:	f7ff ff4d 	bl	80185ee <_ZNK9__gnu_cxx13new_allocatorIPvE11_M_max_sizeEv>
 8018754:	4603      	mov	r3, r0
 8018756:	4618      	mov	r0, r3
 8018758:	3708      	adds	r7, #8
 801875a:	46bd      	mov	sp, r7
 801875c:	bd80      	pop	{r7, pc}

0801875e <_ZSt4copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 801875e:	b590      	push	{r4, r7, lr}
 8018760:	b085      	sub	sp, #20
 8018762:	af00      	add	r7, sp, #0
 8018764:	60f8      	str	r0, [r7, #12]
 8018766:	60b9      	str	r1, [r7, #8]
 8018768:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 801876a:	68f8      	ldr	r0, [r7, #12]
 801876c:	f000 f833 	bl	80187d6 <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8018770:	4604      	mov	r4, r0
 8018772:	68b8      	ldr	r0, [r7, #8]
 8018774:	f000 f82f 	bl	80187d6 <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8018778:	4603      	mov	r3, r0
 801877a:	687a      	ldr	r2, [r7, #4]
 801877c:	4619      	mov	r1, r3
 801877e:	4620      	mov	r0, r4
 8018780:	f000 f83a 	bl	80187f8 <_ZSt13__copy_move_aILb1EPPvS1_ET1_T0_S3_S2_>
 8018784:	4603      	mov	r3, r0
    }
 8018786:	4618      	mov	r0, r3
 8018788:	3714      	adds	r7, #20
 801878a:	46bd      	mov	sp, r7
 801878c:	bd90      	pop	{r4, r7, pc}

0801878e <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 801878e:	b580      	push	{r7, lr}
 8018790:	b082      	sub	sp, #8
 8018792:	af00      	add	r7, sp, #0
 8018794:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8018796:	6878      	ldr	r0, [r7, #4]
 8018798:	f7ff ff85 	bl	80186a6 <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE11_M_max_sizeEv>
 801879c:	4603      	mov	r3, r0
 801879e:	4618      	mov	r0, r3
 80187a0:	3708      	adds	r7, #8
 80187a2:	46bd      	mov	sp, r7
 80187a4:	bd80      	pop	{r7, pc}

080187a6 <_ZSt4copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 80187a6:	b590      	push	{r4, r7, lr}
 80187a8:	b085      	sub	sp, #20
 80187aa:	af00      	add	r7, sp, #0
 80187ac:	60f8      	str	r0, [r7, #12]
 80187ae:	60b9      	str	r1, [r7, #8]
 80187b0:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80187b2:	68f8      	ldr	r0, [r7, #12]
 80187b4:	f000 f843 	bl	801883e <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80187b8:	4604      	mov	r4, r0
 80187ba:	68b8      	ldr	r0, [r7, #8]
 80187bc:	f000 f83f 	bl	801883e <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80187c0:	4603      	mov	r3, r0
 80187c2:	687a      	ldr	r2, [r7, #4]
 80187c4:	4619      	mov	r1, r3
 80187c6:	4620      	mov	r0, r4
 80187c8:	f000 f84a 	bl	8018860 <_ZSt13__copy_move_aILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>
 80187cc:	4603      	mov	r3, r0
    }
 80187ce:	4618      	mov	r0, r3
 80187d0:	3714      	adds	r7, #20
 80187d2:	46bd      	mov	sp, r7
 80187d4:	bd90      	pop	{r4, r7, pc}

080187d6 <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80187d6:	b580      	push	{r7, lr}
 80187d8:	b082      	sub	sp, #8
 80187da:	af00      	add	r7, sp, #0
 80187dc:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80187de:	1d3b      	adds	r3, r7, #4
 80187e0:	4618      	mov	r0, r3
 80187e2:	f000 f860 	bl	80188a6 <_ZNKSt13move_iteratorIPPvE4baseEv>
 80187e6:	4603      	mov	r3, r0
 80187e8:	4618      	mov	r0, r3
 80187ea:	f000 f868 	bl	80188be <_ZSt12__miter_baseIPPvET_S2_>
 80187ee:	4603      	mov	r3, r0
 80187f0:	4618      	mov	r0, r3
 80187f2:	3708      	adds	r7, #8
 80187f4:	46bd      	mov	sp, r7
 80187f6:	bd80      	pop	{r7, pc}

080187f8 <_ZSt13__copy_move_aILb1EPPvS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80187f8:	b5b0      	push	{r4, r5, r7, lr}
 80187fa:	b084      	sub	sp, #16
 80187fc:	af00      	add	r7, sp, #0
 80187fe:	60f8      	str	r0, [r7, #12]
 8018800:	60b9      	str	r1, [r7, #8]
 8018802:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8018804:	68f8      	ldr	r0, [r7, #12]
 8018806:	f7ff fefe 	bl	8018606 <_ZSt12__niter_baseIPPvET_S2_>
 801880a:	4604      	mov	r4, r0
 801880c:	68b8      	ldr	r0, [r7, #8]
 801880e:	f7ff fefa 	bl	8018606 <_ZSt12__niter_baseIPPvET_S2_>
 8018812:	4605      	mov	r5, r0
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	4618      	mov	r0, r3
 8018818:	f7ff fef5 	bl	8018606 <_ZSt12__niter_baseIPPvET_S2_>
 801881c:	4603      	mov	r3, r0
 801881e:	461a      	mov	r2, r3
 8018820:	4629      	mov	r1, r5
 8018822:	4620      	mov	r0, r4
 8018824:	f000 f856 	bl	80188d4 <_ZSt14__copy_move_a1ILb1EPPvS1_ET1_T0_S3_S2_>
 8018828:	4602      	mov	r2, r0
 801882a:	1d3b      	adds	r3, r7, #4
 801882c:	4611      	mov	r1, r2
 801882e:	4618      	mov	r0, r3
 8018830:	f000 f860 	bl	80188f4 <_ZSt12__niter_wrapIPPvET_RKS2_S2_>
 8018834:	4603      	mov	r3, r0
    }
 8018836:	4618      	mov	r0, r3
 8018838:	3710      	adds	r7, #16
 801883a:	46bd      	mov	sp, r7
 801883c:	bdb0      	pop	{r4, r5, r7, pc}

0801883e <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 801883e:	b580      	push	{r7, lr}
 8018840:	b082      	sub	sp, #8
 8018842:	af00      	add	r7, sp, #0
 8018844:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8018846:	1d3b      	adds	r3, r7, #4
 8018848:	4618      	mov	r0, r3
 801884a:	f000 f85f 	bl	801890c <_ZNKSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEE4baseEv>
 801884e:	4603      	mov	r3, r0
 8018850:	4618      	mov	r0, r3
 8018852:	f000 f867 	bl	8018924 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8018856:	4603      	mov	r3, r0
 8018858:	4618      	mov	r0, r3
 801885a:	3708      	adds	r7, #8
 801885c:	46bd      	mov	sp, r7
 801885e:	bd80      	pop	{r7, pc}

08018860 <_ZSt13__copy_move_aILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8018860:	b5b0      	push	{r4, r5, r7, lr}
 8018862:	b084      	sub	sp, #16
 8018864:	af00      	add	r7, sp, #0
 8018866:	60f8      	str	r0, [r7, #12]
 8018868:	60b9      	str	r1, [r7, #8]
 801886a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 801886c:	68f8      	ldr	r0, [r7, #12]
 801886e:	f7ff ff26 	bl	80186be <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8018872:	4604      	mov	r4, r0
 8018874:	68b8      	ldr	r0, [r7, #8]
 8018876:	f7ff ff22 	bl	80186be <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 801887a:	4605      	mov	r5, r0
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	4618      	mov	r0, r3
 8018880:	f7ff ff1d 	bl	80186be <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8018884:	4603      	mov	r3, r0
 8018886:	461a      	mov	r2, r3
 8018888:	4629      	mov	r1, r5
 801888a:	4620      	mov	r0, r4
 801888c:	f000 f855 	bl	801893a <_ZSt14__copy_move_a1ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>
 8018890:	4602      	mov	r2, r0
 8018892:	1d3b      	adds	r3, r7, #4
 8018894:	4611      	mov	r1, r2
 8018896:	4618      	mov	r0, r3
 8018898:	f000 f85f 	bl	801895a <_ZSt12__niter_wrapIPN12_GLOBAL__N_116scratch_buffer_tEET_RKS3_S3_>
 801889c:	4603      	mov	r3, r0
    }
 801889e:	4618      	mov	r0, r3
 80188a0:	3710      	adds	r7, #16
 80188a2:	46bd      	mov	sp, r7
 80188a4:	bdb0      	pop	{r4, r5, r7, pc}

080188a6 <_ZNKSt13move_iteratorIPPvE4baseEv>:
      base() const
 80188a6:	b480      	push	{r7}
 80188a8:	b083      	sub	sp, #12
 80188aa:	af00      	add	r7, sp, #0
 80188ac:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	681b      	ldr	r3, [r3, #0]
 80188b2:	4618      	mov	r0, r3
 80188b4:	370c      	adds	r7, #12
 80188b6:	46bd      	mov	sp, r7
 80188b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188bc:	4770      	bx	lr

080188be <_ZSt12__miter_baseIPPvET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 80188be:	b480      	push	{r7}
 80188c0:	b083      	sub	sp, #12
 80188c2:	af00      	add	r7, sp, #0
 80188c4:	6078      	str	r0, [r7, #4]
    { return __it; }
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	4618      	mov	r0, r3
 80188ca:	370c      	adds	r7, #12
 80188cc:	46bd      	mov	sp, r7
 80188ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188d2:	4770      	bx	lr

080188d4 <_ZSt14__copy_move_a1ILb1EPPvS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80188d4:	b580      	push	{r7, lr}
 80188d6:	b084      	sub	sp, #16
 80188d8:	af00      	add	r7, sp, #0
 80188da:	60f8      	str	r0, [r7, #12]
 80188dc:	60b9      	str	r1, [r7, #8]
 80188de:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80188e0:	687a      	ldr	r2, [r7, #4]
 80188e2:	68b9      	ldr	r1, [r7, #8]
 80188e4:	68f8      	ldr	r0, [r7, #12]
 80188e6:	f000 f844 	bl	8018972 <_ZSt14__copy_move_a2ILb1EPPvS1_ET1_T0_S3_S2_>
 80188ea:	4603      	mov	r3, r0
 80188ec:	4618      	mov	r0, r3
 80188ee:	3710      	adds	r7, #16
 80188f0:	46bd      	mov	sp, r7
 80188f2:	bd80      	pop	{r7, pc}

080188f4 <_ZSt12__niter_wrapIPPvET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80188f4:	b480      	push	{r7}
 80188f6:	b083      	sub	sp, #12
 80188f8:	af00      	add	r7, sp, #0
 80188fa:	6078      	str	r0, [r7, #4]
 80188fc:	6039      	str	r1, [r7, #0]
    { return __res; }
 80188fe:	683b      	ldr	r3, [r7, #0]
 8018900:	4618      	mov	r0, r3
 8018902:	370c      	adds	r7, #12
 8018904:	46bd      	mov	sp, r7
 8018906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801890a:	4770      	bx	lr

0801890c <_ZNKSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEE4baseEv>:
      base() const
 801890c:	b480      	push	{r7}
 801890e:	b083      	sub	sp, #12
 8018910:	af00      	add	r7, sp, #0
 8018912:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	681b      	ldr	r3, [r3, #0]
 8018918:	4618      	mov	r0, r3
 801891a:	370c      	adds	r7, #12
 801891c:	46bd      	mov	sp, r7
 801891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018922:	4770      	bx	lr

08018924 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>:
    __miter_base(_Iterator __it)
 8018924:	b480      	push	{r7}
 8018926:	b083      	sub	sp, #12
 8018928:	af00      	add	r7, sp, #0
 801892a:	6078      	str	r0, [r7, #4]
    { return __it; }
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	4618      	mov	r0, r3
 8018930:	370c      	adds	r7, #12
 8018932:	46bd      	mov	sp, r7
 8018934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018938:	4770      	bx	lr

0801893a <_ZSt14__copy_move_a1ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 801893a:	b580      	push	{r7, lr}
 801893c:	b084      	sub	sp, #16
 801893e:	af00      	add	r7, sp, #0
 8018940:	60f8      	str	r0, [r7, #12]
 8018942:	60b9      	str	r1, [r7, #8]
 8018944:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8018946:	687a      	ldr	r2, [r7, #4]
 8018948:	68b9      	ldr	r1, [r7, #8]
 801894a:	68f8      	ldr	r0, [r7, #12]
 801894c:	f000 f821 	bl	8018992 <_ZSt14__copy_move_a2ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>
 8018950:	4603      	mov	r3, r0
 8018952:	4618      	mov	r0, r3
 8018954:	3710      	adds	r7, #16
 8018956:	46bd      	mov	sp, r7
 8018958:	bd80      	pop	{r7, pc}

0801895a <_ZSt12__niter_wrapIPN12_GLOBAL__N_116scratch_buffer_tEET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 801895a:	b480      	push	{r7}
 801895c:	b083      	sub	sp, #12
 801895e:	af00      	add	r7, sp, #0
 8018960:	6078      	str	r0, [r7, #4]
 8018962:	6039      	str	r1, [r7, #0]
    { return __res; }
 8018964:	683b      	ldr	r3, [r7, #0]
 8018966:	4618      	mov	r0, r3
 8018968:	370c      	adds	r7, #12
 801896a:	46bd      	mov	sp, r7
 801896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018970:	4770      	bx	lr

08018972 <_ZSt14__copy_move_a2ILb1EPPvS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8018972:	b580      	push	{r7, lr}
 8018974:	b084      	sub	sp, #16
 8018976:	af00      	add	r7, sp, #0
 8018978:	60f8      	str	r0, [r7, #12]
 801897a:	60b9      	str	r1, [r7, #8]
 801897c:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 801897e:	687a      	ldr	r2, [r7, #4]
 8018980:	68b9      	ldr	r1, [r7, #8]
 8018982:	68f8      	ldr	r0, [r7, #12]
 8018984:	f000 f815 	bl	80189b2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_>
 8018988:	4603      	mov	r3, r0
    }
 801898a:	4618      	mov	r0, r3
 801898c:	3710      	adds	r7, #16
 801898e:	46bd      	mov	sp, r7
 8018990:	bd80      	pop	{r7, pc}

08018992 <_ZSt14__copy_move_a2ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8018992:	b580      	push	{r7, lr}
 8018994:	b084      	sub	sp, #16
 8018996:	af00      	add	r7, sp, #0
 8018998:	60f8      	str	r0, [r7, #12]
 801899a:	60b9      	str	r1, [r7, #8]
 801899c:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 801899e:	687a      	ldr	r2, [r7, #4]
 80189a0:	68b9      	ldr	r1, [r7, #8]
 80189a2:	68f8      	ldr	r0, [r7, #12]
 80189a4:	f000 f822 	bl	80189ec <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_>
 80189a8:	4603      	mov	r3, r0
    }
 80189aa:	4618      	mov	r0, r3
 80189ac:	3710      	adds	r7, #16
 80189ae:	46bd      	mov	sp, r7
 80189b0:	bd80      	pop	{r7, pc}

080189b2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80189b2:	b580      	push	{r7, lr}
 80189b4:	b086      	sub	sp, #24
 80189b6:	af00      	add	r7, sp, #0
 80189b8:	60f8      	str	r0, [r7, #12]
 80189ba:	60b9      	str	r1, [r7, #8]
 80189bc:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80189be:	68ba      	ldr	r2, [r7, #8]
 80189c0:	68fb      	ldr	r3, [r7, #12]
 80189c2:	1ad3      	subs	r3, r2, r3
 80189c4:	109b      	asrs	r3, r3, #2
 80189c6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80189c8:	697b      	ldr	r3, [r7, #20]
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d006      	beq.n	80189dc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80189ce:	697b      	ldr	r3, [r7, #20]
 80189d0:	009b      	lsls	r3, r3, #2
 80189d2:	461a      	mov	r2, r3
 80189d4:	68f9      	ldr	r1, [r7, #12]
 80189d6:	6878      	ldr	r0, [r7, #4]
 80189d8:	f002 f9a8 	bl	801ad2c <memmove>
	  return __result + _Num;
 80189dc:	697b      	ldr	r3, [r7, #20]
 80189de:	009b      	lsls	r3, r3, #2
 80189e0:	687a      	ldr	r2, [r7, #4]
 80189e2:	4413      	add	r3, r2
	}
 80189e4:	4618      	mov	r0, r3
 80189e6:	3718      	adds	r7, #24
 80189e8:	46bd      	mov	sp, r7
 80189ea:	bd80      	pop	{r7, pc}

080189ec <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80189ec:	b580      	push	{r7, lr}
 80189ee:	b086      	sub	sp, #24
 80189f0:	af00      	add	r7, sp, #0
 80189f2:	60f8      	str	r0, [r7, #12]
 80189f4:	60b9      	str	r1, [r7, #8]
 80189f6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80189f8:	68ba      	ldr	r2, [r7, #8]
 80189fa:	68fb      	ldr	r3, [r7, #12]
 80189fc:	1ad3      	subs	r3, r2, r3
 80189fe:	10db      	asrs	r3, r3, #3
 8018a00:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8018a02:	697b      	ldr	r3, [r7, #20]
 8018a04:	2b00      	cmp	r3, #0
 8018a06:	d006      	beq.n	8018a16 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8018a08:	697b      	ldr	r3, [r7, #20]
 8018a0a:	00db      	lsls	r3, r3, #3
 8018a0c:	461a      	mov	r2, r3
 8018a0e:	68f9      	ldr	r1, [r7, #12]
 8018a10:	6878      	ldr	r0, [r7, #4]
 8018a12:	f002 f98b 	bl	801ad2c <memmove>
	  return __result + _Num;
 8018a16:	697b      	ldr	r3, [r7, #20]
 8018a18:	00db      	lsls	r3, r3, #3
 8018a1a:	687a      	ldr	r2, [r7, #4]
 8018a1c:	4413      	add	r3, r2
	}
 8018a1e:	4618      	mov	r0, r3
 8018a20:	3718      	adds	r7, #24
 8018a22:	46bd      	mov	sp, r7
 8018a24:	bd80      	pop	{r7, pc}
	...

08018a28 <_Z41__static_initialization_and_destruction_0ii>:
 8018a28:	b580      	push	{r7, lr}
 8018a2a:	b082      	sub	sp, #8
 8018a2c:	af00      	add	r7, sp, #0
 8018a2e:	6078      	str	r0, [r7, #4]
 8018a30:	6039      	str	r1, [r7, #0]
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	2b01      	cmp	r3, #1
 8018a36:	d125      	bne.n	8018a84 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 8018a38:	683b      	ldr	r3, [r7, #0]
 8018a3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018a3e:	4293      	cmp	r3, r2
 8018a40:	d120      	bne.n	8018a84 <_Z41__static_initialization_and_destruction_0ii+0x5c>
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension0, 18, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
 8018a42:	4b19      	ldr	r3, [pc, #100]	; (8018aa8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8018a44:	681b      	ldr	r3, [r3, #0]
 8018a46:	3330      	adds	r3, #48	; 0x30
};const NodeInfo_t nodeData[] = {
 8018a48:	4a18      	ldr	r2, [pc, #96]	; (8018aac <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8018a4a:	6053      	str	r3, [r2, #4]
 8018a4c:	4b16      	ldr	r3, [pc, #88]	; (8018aa8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	4a16      	ldr	r2, [pc, #88]	; (8018aac <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8018a52:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension8, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
 8018a56:	4b14      	ldr	r3, [pc, #80]	; (8018aa8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	3330      	adds	r3, #48	; 0x30
};const NodeInfo_t nodeData[] = {
 8018a5c:	4a13      	ldr	r2, [pc, #76]	; (8018aac <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8018a5e:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
 8018a62:	4b11      	ldr	r3, [pc, #68]	; (8018aa8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8018a64:	681b      	ldr	r3, [r3, #0]
 8018a66:	3310      	adds	r3, #16
};const NodeInfo_t nodeData[] = {
 8018a68:	4a10      	ldr	r2, [pc, #64]	; (8018aac <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8018a6a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8018a6e:	4b0e      	ldr	r3, [pc, #56]	; (8018aa8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8018a70:	681b      	ldr	r3, [r3, #0]
 8018a72:	4a0e      	ldr	r2, [pc, #56]	; (8018aac <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8018a74:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
static std::vector<void*> overflow_buffers;
 8018a78:	480d      	ldr	r0, [pc, #52]	; (8018ab0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8018a7a:	f7fe fa00 	bl	8016e7e <_ZNSt6vectorIPvSaIS0_EEC1Ev>
static std::vector<scratch_buffer_t> scratch_buffers;
 8018a7e:	480d      	ldr	r0, [pc, #52]	; (8018ab4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8018a80:	f7fe fa67 	bl	8016f52 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC1Ev>
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	d10a      	bne.n	8018aa0 <_Z41__static_initialization_and_destruction_0ii+0x78>
 8018a8a:	683b      	ldr	r3, [r7, #0]
 8018a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018a90:	4293      	cmp	r3, r2
 8018a92:	d105      	bne.n	8018aa0 <_Z41__static_initialization_and_destruction_0ii+0x78>
 8018a94:	4807      	ldr	r0, [pc, #28]	; (8018ab4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8018a96:	f000 f80f 	bl	8018ab8 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>
static std::vector<void*> overflow_buffers;
 8018a9a:	4805      	ldr	r0, [pc, #20]	; (8018ab0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8018a9c:	f000 f827 	bl	8018aee <_ZNSt6vectorIPvSaIS0_EED1Ev>
}
 8018aa0:	bf00      	nop
 8018aa2:	3708      	adds	r7, #8
 8018aa4:	46bd      	mov	sp, r7
 8018aa6:	bd80      	pop	{r7, pc}
 8018aa8:	20000924 	.word	0x20000924
 8018aac:	200000fc 	.word	0x200000fc
 8018ab0:	20000d9c 	.word	0x20000d9c
 8018ab4:	20000da8 	.word	0x20000da8

08018ab8 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8018ab8:	b5b0      	push	{r4, r5, r7, lr}
 8018aba:	b082      	sub	sp, #8
 8018abc:	af00      	add	r7, sp, #0
 8018abe:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	681c      	ldr	r4, [r3, #0]
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	4618      	mov	r0, r3
 8018acc:	f7ff fb55 	bl	801817a <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8018ad0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8018ad2:	461a      	mov	r2, r3
 8018ad4:	4629      	mov	r1, r5
 8018ad6:	4620      	mov	r0, r4
 8018ad8:	f7ff fb73 	bl	80181c2 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
      }
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	4618      	mov	r0, r3
 8018ae0:	f7fe fdfc 	bl	80176dc <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED2Ev>
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	3708      	adds	r7, #8
 8018aea:	46bd      	mov	sp, r7
 8018aec:	bdb0      	pop	{r4, r5, r7, pc}

08018aee <_ZNSt6vectorIPvSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8018aee:	b5b0      	push	{r4, r5, r7, lr}
 8018af0:	b082      	sub	sp, #8
 8018af2:	af00      	add	r7, sp, #0
 8018af4:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	681c      	ldr	r4, [r3, #0]
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	4618      	mov	r0, r3
 8018b02:	f7ff fa1b 	bl	8017f3c <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8018b06:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8018b08:	461a      	mov	r2, r3
 8018b0a:	4629      	mov	r1, r5
 8018b0c:	4620      	mov	r0, r4
 8018b0e:	f7ff fa39 	bl	8017f84 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
      }
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	4618      	mov	r0, r3
 8018b16:	f7fe fd87 	bl	8017628 <_ZNSt12_Vector_baseIPvSaIS0_EED1Ev>
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	4618      	mov	r0, r3
 8018b1e:	3708      	adds	r7, #8
 8018b20:	46bd      	mov	sp, r7
 8018b22:	bdb0      	pop	{r4, r5, r7, pc}

08018b24 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
 8018b24:	b580      	push	{r7, lr}
 8018b26:	af00      	add	r7, sp, #0
 8018b28:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018b2c:	2001      	movs	r0, #1
 8018b2e:	f7ff ff7b 	bl	8018a28 <_Z41__static_initialization_and_destruction_0ii>
 8018b32:	bd80      	pop	{r7, pc}

08018b34 <_GLOBAL__sub_D__Z18trained_model_initPFPvjjE>:
 8018b34:	b580      	push	{r7, lr}
 8018b36:	af00      	add	r7, sp, #0
 8018b38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018b3c:	2000      	movs	r0, #0
 8018b3e:	f7ff ff73 	bl	8018a28 <_Z41__static_initialization_and_destruction_0ii>
 8018b42:	bd80      	pop	{r7, pc}

08018b44 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018b44:	b580      	push	{r7, lr}
 8018b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8018b48:	2200      	movs	r2, #0
 8018b4a:	4912      	ldr	r1, [pc, #72]	; (8018b94 <MX_USB_DEVICE_Init+0x50>)
 8018b4c:	4812      	ldr	r0, [pc, #72]	; (8018b98 <MX_USB_DEVICE_Init+0x54>)
 8018b4e:	f7f0 fb81 	bl	8009254 <USBD_Init>
 8018b52:	4603      	mov	r3, r0
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d001      	beq.n	8018b5c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018b58:	f7ea f9cc 	bl	8002ef4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8018b5c:	490f      	ldr	r1, [pc, #60]	; (8018b9c <MX_USB_DEVICE_Init+0x58>)
 8018b5e:	480e      	ldr	r0, [pc, #56]	; (8018b98 <MX_USB_DEVICE_Init+0x54>)
 8018b60:	f7f0 fba8 	bl	80092b4 <USBD_RegisterClass>
 8018b64:	4603      	mov	r3, r0
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	d001      	beq.n	8018b6e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018b6a:	f7ea f9c3 	bl	8002ef4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8018b6e:	490c      	ldr	r1, [pc, #48]	; (8018ba0 <MX_USB_DEVICE_Init+0x5c>)
 8018b70:	4809      	ldr	r0, [pc, #36]	; (8018b98 <MX_USB_DEVICE_Init+0x54>)
 8018b72:	f7f0 fa99 	bl	80090a8 <USBD_CDC_RegisterInterface>
 8018b76:	4603      	mov	r3, r0
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	d001      	beq.n	8018b80 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018b7c:	f7ea f9ba 	bl	8002ef4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018b80:	4805      	ldr	r0, [pc, #20]	; (8018b98 <MX_USB_DEVICE_Init+0x54>)
 8018b82:	f7f0 fbcd 	bl	8009320 <USBD_Start>
 8018b86:	4603      	mov	r3, r0
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	d001      	beq.n	8018b90 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018b8c:	f7ea f9b2 	bl	8002ef4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018b90:	bf00      	nop
 8018b92:	bd80      	pop	{r7, pc}
 8018b94:	20000218 	.word	0x20000218
 8018b98:	20000db4 	.word	0x20000db4
 8018b9c:	20000070 	.word	0x20000070
 8018ba0:	20000204 	.word	0x20000204

08018ba4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018ba4:	b580      	push	{r7, lr}
 8018ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018ba8:	2200      	movs	r2, #0
 8018baa:	4905      	ldr	r1, [pc, #20]	; (8018bc0 <CDC_Init_FS+0x1c>)
 8018bac:	4805      	ldr	r0, [pc, #20]	; (8018bc4 <CDC_Init_FS+0x20>)
 8018bae:	f7f0 fa95 	bl	80090dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8018bb2:	4905      	ldr	r1, [pc, #20]	; (8018bc8 <CDC_Init_FS+0x24>)
 8018bb4:	4803      	ldr	r0, [pc, #12]	; (8018bc4 <CDC_Init_FS+0x20>)
 8018bb6:	f7f0 fab3 	bl	8009120 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8018bba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018bbc:	4618      	mov	r0, r3
 8018bbe:	bd80      	pop	{r7, pc}
 8018bc0:	20001890 	.word	0x20001890
 8018bc4:	20000db4 	.word	0x20000db4
 8018bc8:	20001090 	.word	0x20001090

08018bcc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8018bcc:	b480      	push	{r7}
 8018bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018bd0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018bd2:	4618      	mov	r0, r3
 8018bd4:	46bd      	mov	sp, r7
 8018bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bda:	4770      	bx	lr

08018bdc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018bdc:	b480      	push	{r7}
 8018bde:	b083      	sub	sp, #12
 8018be0:	af00      	add	r7, sp, #0
 8018be2:	4603      	mov	r3, r0
 8018be4:	6039      	str	r1, [r7, #0]
 8018be6:	71fb      	strb	r3, [r7, #7]
 8018be8:	4613      	mov	r3, r2
 8018bea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8018bec:	79fb      	ldrb	r3, [r7, #7]
 8018bee:	2b23      	cmp	r3, #35	; 0x23
 8018bf0:	d84a      	bhi.n	8018c88 <CDC_Control_FS+0xac>
 8018bf2:	a201      	add	r2, pc, #4	; (adr r2, 8018bf8 <CDC_Control_FS+0x1c>)
 8018bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018bf8:	08018c89 	.word	0x08018c89
 8018bfc:	08018c89 	.word	0x08018c89
 8018c00:	08018c89 	.word	0x08018c89
 8018c04:	08018c89 	.word	0x08018c89
 8018c08:	08018c89 	.word	0x08018c89
 8018c0c:	08018c89 	.word	0x08018c89
 8018c10:	08018c89 	.word	0x08018c89
 8018c14:	08018c89 	.word	0x08018c89
 8018c18:	08018c89 	.word	0x08018c89
 8018c1c:	08018c89 	.word	0x08018c89
 8018c20:	08018c89 	.word	0x08018c89
 8018c24:	08018c89 	.word	0x08018c89
 8018c28:	08018c89 	.word	0x08018c89
 8018c2c:	08018c89 	.word	0x08018c89
 8018c30:	08018c89 	.word	0x08018c89
 8018c34:	08018c89 	.word	0x08018c89
 8018c38:	08018c89 	.word	0x08018c89
 8018c3c:	08018c89 	.word	0x08018c89
 8018c40:	08018c89 	.word	0x08018c89
 8018c44:	08018c89 	.word	0x08018c89
 8018c48:	08018c89 	.word	0x08018c89
 8018c4c:	08018c89 	.word	0x08018c89
 8018c50:	08018c89 	.word	0x08018c89
 8018c54:	08018c89 	.word	0x08018c89
 8018c58:	08018c89 	.word	0x08018c89
 8018c5c:	08018c89 	.word	0x08018c89
 8018c60:	08018c89 	.word	0x08018c89
 8018c64:	08018c89 	.word	0x08018c89
 8018c68:	08018c89 	.word	0x08018c89
 8018c6c:	08018c89 	.word	0x08018c89
 8018c70:	08018c89 	.word	0x08018c89
 8018c74:	08018c89 	.word	0x08018c89
 8018c78:	08018c89 	.word	0x08018c89
 8018c7c:	08018c89 	.word	0x08018c89
 8018c80:	08018c89 	.word	0x08018c89
 8018c84:	08018c89 	.word	0x08018c89
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018c88:	bf00      	nop
  }

  return (USBD_OK);
 8018c8a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018c8c:	4618      	mov	r0, r3
 8018c8e:	370c      	adds	r7, #12
 8018c90:	46bd      	mov	sp, r7
 8018c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c96:	4770      	bx	lr

08018c98 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018c98:	b580      	push	{r7, lr}
 8018c9a:	b084      	sub	sp, #16
 8018c9c:	af00      	add	r7, sp, #0
 8018c9e:	6078      	str	r0, [r7, #4]
 8018ca0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8018ca2:	6879      	ldr	r1, [r7, #4]
 8018ca4:	480f      	ldr	r0, [pc, #60]	; (8018ce4 <CDC_Receive_FS+0x4c>)
 8018ca6:	f7f0 fa3b 	bl	8009120 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018caa:	480e      	ldr	r0, [pc, #56]	; (8018ce4 <CDC_Receive_FS+0x4c>)
 8018cac:	f7f0 fa9c 	bl	80091e8 <USBD_CDC_ReceivePacket>
  memset (recivebuffer, '\0', 64);  // clear the buffer
 8018cb0:	2240      	movs	r2, #64	; 0x40
 8018cb2:	2100      	movs	r1, #0
 8018cb4:	480c      	ldr	r0, [pc, #48]	; (8018ce8 <CDC_Receive_FS+0x50>)
 8018cb6:	f002 f853 	bl	801ad60 <memset>
    uint8_t len = (uint8_t)*Len;
 8018cba:	683b      	ldr	r3, [r7, #0]
 8018cbc:	681b      	ldr	r3, [r3, #0]
 8018cbe:	73fb      	strb	r3, [r7, #15]
    memcpy(recivebuffer, Buf, len);  // copy the data to the buffer
 8018cc0:	7bfb      	ldrb	r3, [r7, #15]
 8018cc2:	461a      	mov	r2, r3
 8018cc4:	6879      	ldr	r1, [r7, #4]
 8018cc6:	4808      	ldr	r0, [pc, #32]	; (8018ce8 <CDC_Receive_FS+0x50>)
 8018cc8:	f002 f822 	bl	801ad10 <memcpy>
    memset(Buf, '\0', len);   // clear the Buf also
 8018ccc:	7bfb      	ldrb	r3, [r7, #15]
 8018cce:	461a      	mov	r2, r3
 8018cd0:	2100      	movs	r1, #0
 8018cd2:	6878      	ldr	r0, [r7, #4]
 8018cd4:	f002 f844 	bl	801ad60 <memset>
  return (USBD_OK);
 8018cd8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8018cda:	4618      	mov	r0, r3
 8018cdc:	3710      	adds	r7, #16
 8018cde:	46bd      	mov	sp, r7
 8018ce0:	bd80      	pop	{r7, pc}
 8018ce2:	bf00      	nop
 8018ce4:	20000db4 	.word	0x20000db4
 8018ce8:	20000350 	.word	0x20000350

08018cec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8018cec:	b580      	push	{r7, lr}
 8018cee:	b084      	sub	sp, #16
 8018cf0:	af00      	add	r7, sp, #0
 8018cf2:	6078      	str	r0, [r7, #4]
 8018cf4:	460b      	mov	r3, r1
 8018cf6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8018cf8:	2300      	movs	r3, #0
 8018cfa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8018cfc:	4b0d      	ldr	r3, [pc, #52]	; (8018d34 <CDC_Transmit_FS+0x48>)
 8018cfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018d02:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8018d04:	68bb      	ldr	r3, [r7, #8]
 8018d06:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d001      	beq.n	8018d12 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8018d0e:	2301      	movs	r3, #1
 8018d10:	e00b      	b.n	8018d2a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8018d12:	887b      	ldrh	r3, [r7, #2]
 8018d14:	461a      	mov	r2, r3
 8018d16:	6879      	ldr	r1, [r7, #4]
 8018d18:	4806      	ldr	r0, [pc, #24]	; (8018d34 <CDC_Transmit_FS+0x48>)
 8018d1a:	f7f0 f9df 	bl	80090dc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8018d1e:	4805      	ldr	r0, [pc, #20]	; (8018d34 <CDC_Transmit_FS+0x48>)
 8018d20:	f7f0 fa1c 	bl	800915c <USBD_CDC_TransmitPacket>
 8018d24:	4603      	mov	r3, r0
 8018d26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8018d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	3710      	adds	r7, #16
 8018d2e:	46bd      	mov	sp, r7
 8018d30:	bd80      	pop	{r7, pc}
 8018d32:	bf00      	nop
 8018d34:	20000db4 	.word	0x20000db4

08018d38 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8018d38:	b480      	push	{r7}
 8018d3a:	b087      	sub	sp, #28
 8018d3c:	af00      	add	r7, sp, #0
 8018d3e:	60f8      	str	r0, [r7, #12]
 8018d40:	60b9      	str	r1, [r7, #8]
 8018d42:	4613      	mov	r3, r2
 8018d44:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018d46:	2300      	movs	r3, #0
 8018d48:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8018d4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018d4e:	4618      	mov	r0, r3
 8018d50:	371c      	adds	r7, #28
 8018d52:	46bd      	mov	sp, r7
 8018d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d58:	4770      	bx	lr
	...

08018d5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018d5c:	b480      	push	{r7}
 8018d5e:	b083      	sub	sp, #12
 8018d60:	af00      	add	r7, sp, #0
 8018d62:	4603      	mov	r3, r0
 8018d64:	6039      	str	r1, [r7, #0]
 8018d66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018d68:	683b      	ldr	r3, [r7, #0]
 8018d6a:	2212      	movs	r2, #18
 8018d6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8018d6e:	4b03      	ldr	r3, [pc, #12]	; (8018d7c <USBD_FS_DeviceDescriptor+0x20>)
}
 8018d70:	4618      	mov	r0, r3
 8018d72:	370c      	adds	r7, #12
 8018d74:	46bd      	mov	sp, r7
 8018d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d7a:	4770      	bx	lr
 8018d7c:	20000234 	.word	0x20000234

08018d80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018d80:	b480      	push	{r7}
 8018d82:	b083      	sub	sp, #12
 8018d84:	af00      	add	r7, sp, #0
 8018d86:	4603      	mov	r3, r0
 8018d88:	6039      	str	r1, [r7, #0]
 8018d8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018d8c:	683b      	ldr	r3, [r7, #0]
 8018d8e:	2204      	movs	r2, #4
 8018d90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018d92:	4b03      	ldr	r3, [pc, #12]	; (8018da0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018d94:	4618      	mov	r0, r3
 8018d96:	370c      	adds	r7, #12
 8018d98:	46bd      	mov	sp, r7
 8018d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d9e:	4770      	bx	lr
 8018da0:	20000248 	.word	0x20000248

08018da4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018da4:	b580      	push	{r7, lr}
 8018da6:	b082      	sub	sp, #8
 8018da8:	af00      	add	r7, sp, #0
 8018daa:	4603      	mov	r3, r0
 8018dac:	6039      	str	r1, [r7, #0]
 8018dae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018db0:	79fb      	ldrb	r3, [r7, #7]
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d105      	bne.n	8018dc2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018db6:	683a      	ldr	r2, [r7, #0]
 8018db8:	4907      	ldr	r1, [pc, #28]	; (8018dd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8018dba:	4808      	ldr	r0, [pc, #32]	; (8018ddc <USBD_FS_ProductStrDescriptor+0x38>)
 8018dbc:	f7f1 fc5c 	bl	800a678 <USBD_GetString>
 8018dc0:	e004      	b.n	8018dcc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018dc2:	683a      	ldr	r2, [r7, #0]
 8018dc4:	4904      	ldr	r1, [pc, #16]	; (8018dd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8018dc6:	4805      	ldr	r0, [pc, #20]	; (8018ddc <USBD_FS_ProductStrDescriptor+0x38>)
 8018dc8:	f7f1 fc56 	bl	800a678 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018dcc:	4b02      	ldr	r3, [pc, #8]	; (8018dd8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8018dce:	4618      	mov	r0, r3
 8018dd0:	3708      	adds	r7, #8
 8018dd2:	46bd      	mov	sp, r7
 8018dd4:	bd80      	pop	{r7, pc}
 8018dd6:	bf00      	nop
 8018dd8:	20002090 	.word	0x20002090
 8018ddc:	0801db40 	.word	0x0801db40

08018de0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018de0:	b580      	push	{r7, lr}
 8018de2:	b082      	sub	sp, #8
 8018de4:	af00      	add	r7, sp, #0
 8018de6:	4603      	mov	r3, r0
 8018de8:	6039      	str	r1, [r7, #0]
 8018dea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018dec:	683a      	ldr	r2, [r7, #0]
 8018dee:	4904      	ldr	r1, [pc, #16]	; (8018e00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8018df0:	4804      	ldr	r0, [pc, #16]	; (8018e04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8018df2:	f7f1 fc41 	bl	800a678 <USBD_GetString>
  return USBD_StrDesc;
 8018df6:	4b02      	ldr	r3, [pc, #8]	; (8018e00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8018df8:	4618      	mov	r0, r3
 8018dfa:	3708      	adds	r7, #8
 8018dfc:	46bd      	mov	sp, r7
 8018dfe:	bd80      	pop	{r7, pc}
 8018e00:	20002090 	.word	0x20002090
 8018e04:	0801db58 	.word	0x0801db58

08018e08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018e08:	b580      	push	{r7, lr}
 8018e0a:	b082      	sub	sp, #8
 8018e0c:	af00      	add	r7, sp, #0
 8018e0e:	4603      	mov	r3, r0
 8018e10:	6039      	str	r1, [r7, #0]
 8018e12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018e14:	683b      	ldr	r3, [r7, #0]
 8018e16:	221a      	movs	r2, #26
 8018e18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018e1a:	f000 f843 	bl	8018ea4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8018e1e:	4b02      	ldr	r3, [pc, #8]	; (8018e28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018e20:	4618      	mov	r0, r3
 8018e22:	3708      	adds	r7, #8
 8018e24:	46bd      	mov	sp, r7
 8018e26:	bd80      	pop	{r7, pc}
 8018e28:	2000024c 	.word	0x2000024c

08018e2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018e2c:	b580      	push	{r7, lr}
 8018e2e:	b082      	sub	sp, #8
 8018e30:	af00      	add	r7, sp, #0
 8018e32:	4603      	mov	r3, r0
 8018e34:	6039      	str	r1, [r7, #0]
 8018e36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018e38:	79fb      	ldrb	r3, [r7, #7]
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d105      	bne.n	8018e4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018e3e:	683a      	ldr	r2, [r7, #0]
 8018e40:	4907      	ldr	r1, [pc, #28]	; (8018e60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018e42:	4808      	ldr	r0, [pc, #32]	; (8018e64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018e44:	f7f1 fc18 	bl	800a678 <USBD_GetString>
 8018e48:	e004      	b.n	8018e54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018e4a:	683a      	ldr	r2, [r7, #0]
 8018e4c:	4904      	ldr	r1, [pc, #16]	; (8018e60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018e4e:	4805      	ldr	r0, [pc, #20]	; (8018e64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018e50:	f7f1 fc12 	bl	800a678 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018e54:	4b02      	ldr	r3, [pc, #8]	; (8018e60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018e56:	4618      	mov	r0, r3
 8018e58:	3708      	adds	r7, #8
 8018e5a:	46bd      	mov	sp, r7
 8018e5c:	bd80      	pop	{r7, pc}
 8018e5e:	bf00      	nop
 8018e60:	20002090 	.word	0x20002090
 8018e64:	0801db6c 	.word	0x0801db6c

08018e68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018e68:	b580      	push	{r7, lr}
 8018e6a:	b082      	sub	sp, #8
 8018e6c:	af00      	add	r7, sp, #0
 8018e6e:	4603      	mov	r3, r0
 8018e70:	6039      	str	r1, [r7, #0]
 8018e72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018e74:	79fb      	ldrb	r3, [r7, #7]
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d105      	bne.n	8018e86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018e7a:	683a      	ldr	r2, [r7, #0]
 8018e7c:	4907      	ldr	r1, [pc, #28]	; (8018e9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018e7e:	4808      	ldr	r0, [pc, #32]	; (8018ea0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018e80:	f7f1 fbfa 	bl	800a678 <USBD_GetString>
 8018e84:	e004      	b.n	8018e90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018e86:	683a      	ldr	r2, [r7, #0]
 8018e88:	4904      	ldr	r1, [pc, #16]	; (8018e9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018e8a:	4805      	ldr	r0, [pc, #20]	; (8018ea0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018e8c:	f7f1 fbf4 	bl	800a678 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018e90:	4b02      	ldr	r3, [pc, #8]	; (8018e9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018e92:	4618      	mov	r0, r3
 8018e94:	3708      	adds	r7, #8
 8018e96:	46bd      	mov	sp, r7
 8018e98:	bd80      	pop	{r7, pc}
 8018e9a:	bf00      	nop
 8018e9c:	20002090 	.word	0x20002090
 8018ea0:	0801db78 	.word	0x0801db78

08018ea4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018ea4:	b580      	push	{r7, lr}
 8018ea6:	b084      	sub	sp, #16
 8018ea8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018eaa:	4b0f      	ldr	r3, [pc, #60]	; (8018ee8 <Get_SerialNum+0x44>)
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018eb0:	4b0e      	ldr	r3, [pc, #56]	; (8018eec <Get_SerialNum+0x48>)
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018eb6:	4b0e      	ldr	r3, [pc, #56]	; (8018ef0 <Get_SerialNum+0x4c>)
 8018eb8:	681b      	ldr	r3, [r3, #0]
 8018eba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018ebc:	68fa      	ldr	r2, [r7, #12]
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	4413      	add	r3, r2
 8018ec2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018ec4:	68fb      	ldr	r3, [r7, #12]
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d009      	beq.n	8018ede <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018eca:	2208      	movs	r2, #8
 8018ecc:	4909      	ldr	r1, [pc, #36]	; (8018ef4 <Get_SerialNum+0x50>)
 8018ece:	68f8      	ldr	r0, [r7, #12]
 8018ed0:	f000 f814 	bl	8018efc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018ed4:	2204      	movs	r2, #4
 8018ed6:	4908      	ldr	r1, [pc, #32]	; (8018ef8 <Get_SerialNum+0x54>)
 8018ed8:	68b8      	ldr	r0, [r7, #8]
 8018eda:	f000 f80f 	bl	8018efc <IntToUnicode>
  }
}
 8018ede:	bf00      	nop
 8018ee0:	3710      	adds	r7, #16
 8018ee2:	46bd      	mov	sp, r7
 8018ee4:	bd80      	pop	{r7, pc}
 8018ee6:	bf00      	nop
 8018ee8:	1fff7a10 	.word	0x1fff7a10
 8018eec:	1fff7a14 	.word	0x1fff7a14
 8018ef0:	1fff7a18 	.word	0x1fff7a18
 8018ef4:	2000024e 	.word	0x2000024e
 8018ef8:	2000025e 	.word	0x2000025e

08018efc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018efc:	b480      	push	{r7}
 8018efe:	b087      	sub	sp, #28
 8018f00:	af00      	add	r7, sp, #0
 8018f02:	60f8      	str	r0, [r7, #12]
 8018f04:	60b9      	str	r1, [r7, #8]
 8018f06:	4613      	mov	r3, r2
 8018f08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018f0a:	2300      	movs	r3, #0
 8018f0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018f0e:	2300      	movs	r3, #0
 8018f10:	75fb      	strb	r3, [r7, #23]
 8018f12:	e027      	b.n	8018f64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018f14:	68fb      	ldr	r3, [r7, #12]
 8018f16:	0f1b      	lsrs	r3, r3, #28
 8018f18:	2b09      	cmp	r3, #9
 8018f1a:	d80b      	bhi.n	8018f34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018f1c:	68fb      	ldr	r3, [r7, #12]
 8018f1e:	0f1b      	lsrs	r3, r3, #28
 8018f20:	b2da      	uxtb	r2, r3
 8018f22:	7dfb      	ldrb	r3, [r7, #23]
 8018f24:	005b      	lsls	r3, r3, #1
 8018f26:	4619      	mov	r1, r3
 8018f28:	68bb      	ldr	r3, [r7, #8]
 8018f2a:	440b      	add	r3, r1
 8018f2c:	3230      	adds	r2, #48	; 0x30
 8018f2e:	b2d2      	uxtb	r2, r2
 8018f30:	701a      	strb	r2, [r3, #0]
 8018f32:	e00a      	b.n	8018f4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	0f1b      	lsrs	r3, r3, #28
 8018f38:	b2da      	uxtb	r2, r3
 8018f3a:	7dfb      	ldrb	r3, [r7, #23]
 8018f3c:	005b      	lsls	r3, r3, #1
 8018f3e:	4619      	mov	r1, r3
 8018f40:	68bb      	ldr	r3, [r7, #8]
 8018f42:	440b      	add	r3, r1
 8018f44:	3237      	adds	r2, #55	; 0x37
 8018f46:	b2d2      	uxtb	r2, r2
 8018f48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018f4a:	68fb      	ldr	r3, [r7, #12]
 8018f4c:	011b      	lsls	r3, r3, #4
 8018f4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018f50:	7dfb      	ldrb	r3, [r7, #23]
 8018f52:	005b      	lsls	r3, r3, #1
 8018f54:	3301      	adds	r3, #1
 8018f56:	68ba      	ldr	r2, [r7, #8]
 8018f58:	4413      	add	r3, r2
 8018f5a:	2200      	movs	r2, #0
 8018f5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018f5e:	7dfb      	ldrb	r3, [r7, #23]
 8018f60:	3301      	adds	r3, #1
 8018f62:	75fb      	strb	r3, [r7, #23]
 8018f64:	7dfa      	ldrb	r2, [r7, #23]
 8018f66:	79fb      	ldrb	r3, [r7, #7]
 8018f68:	429a      	cmp	r2, r3
 8018f6a:	d3d3      	bcc.n	8018f14 <IntToUnicode+0x18>
  }
}
 8018f6c:	bf00      	nop
 8018f6e:	bf00      	nop
 8018f70:	371c      	adds	r7, #28
 8018f72:	46bd      	mov	sp, r7
 8018f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f78:	4770      	bx	lr
	...

08018f7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018f7c:	b580      	push	{r7, lr}
 8018f7e:	b08a      	sub	sp, #40	; 0x28
 8018f80:	af00      	add	r7, sp, #0
 8018f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018f84:	f107 0314 	add.w	r3, r7, #20
 8018f88:	2200      	movs	r2, #0
 8018f8a:	601a      	str	r2, [r3, #0]
 8018f8c:	605a      	str	r2, [r3, #4]
 8018f8e:	609a      	str	r2, [r3, #8]
 8018f90:	60da      	str	r2, [r3, #12]
 8018f92:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	681b      	ldr	r3, [r3, #0]
 8018f98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018f9c:	d13a      	bne.n	8019014 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018f9e:	2300      	movs	r3, #0
 8018fa0:	613b      	str	r3, [r7, #16]
 8018fa2:	4b1e      	ldr	r3, [pc, #120]	; (801901c <HAL_PCD_MspInit+0xa0>)
 8018fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018fa6:	4a1d      	ldr	r2, [pc, #116]	; (801901c <HAL_PCD_MspInit+0xa0>)
 8018fa8:	f043 0301 	orr.w	r3, r3, #1
 8018fac:	6313      	str	r3, [r2, #48]	; 0x30
 8018fae:	4b1b      	ldr	r3, [pc, #108]	; (801901c <HAL_PCD_MspInit+0xa0>)
 8018fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018fb2:	f003 0301 	and.w	r3, r3, #1
 8018fb6:	613b      	str	r3, [r7, #16]
 8018fb8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018fba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8018fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018fc0:	2302      	movs	r3, #2
 8018fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018fc4:	2300      	movs	r3, #0
 8018fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018fc8:	2303      	movs	r3, #3
 8018fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8018fcc:	230a      	movs	r3, #10
 8018fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018fd0:	f107 0314 	add.w	r3, r7, #20
 8018fd4:	4619      	mov	r1, r3
 8018fd6:	4812      	ldr	r0, [pc, #72]	; (8019020 <HAL_PCD_MspInit+0xa4>)
 8018fd8:	f7eb f9ce 	bl	8004378 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018fdc:	4b0f      	ldr	r3, [pc, #60]	; (801901c <HAL_PCD_MspInit+0xa0>)
 8018fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018fe0:	4a0e      	ldr	r2, [pc, #56]	; (801901c <HAL_PCD_MspInit+0xa0>)
 8018fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018fe6:	6353      	str	r3, [r2, #52]	; 0x34
 8018fe8:	2300      	movs	r3, #0
 8018fea:	60fb      	str	r3, [r7, #12]
 8018fec:	4b0b      	ldr	r3, [pc, #44]	; (801901c <HAL_PCD_MspInit+0xa0>)
 8018fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ff0:	4a0a      	ldr	r2, [pc, #40]	; (801901c <HAL_PCD_MspInit+0xa0>)
 8018ff2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018ff6:	6453      	str	r3, [r2, #68]	; 0x44
 8018ff8:	4b08      	ldr	r3, [pc, #32]	; (801901c <HAL_PCD_MspInit+0xa0>)
 8018ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019000:	60fb      	str	r3, [r7, #12]
 8019002:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8019004:	2200      	movs	r2, #0
 8019006:	2100      	movs	r1, #0
 8019008:	2043      	movs	r0, #67	; 0x43
 801900a:	f7eb f962 	bl	80042d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801900e:	2043      	movs	r0, #67	; 0x43
 8019010:	f7eb f97b 	bl	800430a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019014:	bf00      	nop
 8019016:	3728      	adds	r7, #40	; 0x28
 8019018:	46bd      	mov	sp, r7
 801901a:	bd80      	pop	{r7, pc}
 801901c:	40023800 	.word	0x40023800
 8019020:	40020000 	.word	0x40020000

08019024 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019024:	b580      	push	{r7, lr}
 8019026:	b082      	sub	sp, #8
 8019028:	af00      	add	r7, sp, #0
 801902a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8019038:	4619      	mov	r1, r3
 801903a:	4610      	mov	r0, r2
 801903c:	f7f0 f9bd 	bl	80093ba <USBD_LL_SetupStage>
}
 8019040:	bf00      	nop
 8019042:	3708      	adds	r7, #8
 8019044:	46bd      	mov	sp, r7
 8019046:	bd80      	pop	{r7, pc}

08019048 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019048:	b580      	push	{r7, lr}
 801904a:	b082      	sub	sp, #8
 801904c:	af00      	add	r7, sp, #0
 801904e:	6078      	str	r0, [r7, #4]
 8019050:	460b      	mov	r3, r1
 8019052:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801905a:	78fa      	ldrb	r2, [r7, #3]
 801905c:	6879      	ldr	r1, [r7, #4]
 801905e:	4613      	mov	r3, r2
 8019060:	00db      	lsls	r3, r3, #3
 8019062:	4413      	add	r3, r2
 8019064:	009b      	lsls	r3, r3, #2
 8019066:	440b      	add	r3, r1
 8019068:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801906c:	681a      	ldr	r2, [r3, #0]
 801906e:	78fb      	ldrb	r3, [r7, #3]
 8019070:	4619      	mov	r1, r3
 8019072:	f7f0 f9f7 	bl	8009464 <USBD_LL_DataOutStage>
}
 8019076:	bf00      	nop
 8019078:	3708      	adds	r7, #8
 801907a:	46bd      	mov	sp, r7
 801907c:	bd80      	pop	{r7, pc}

0801907e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801907e:	b580      	push	{r7, lr}
 8019080:	b082      	sub	sp, #8
 8019082:	af00      	add	r7, sp, #0
 8019084:	6078      	str	r0, [r7, #4]
 8019086:	460b      	mov	r3, r1
 8019088:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8019090:	78fa      	ldrb	r2, [r7, #3]
 8019092:	6879      	ldr	r1, [r7, #4]
 8019094:	4613      	mov	r3, r2
 8019096:	00db      	lsls	r3, r3, #3
 8019098:	4413      	add	r3, r2
 801909a:	009b      	lsls	r3, r3, #2
 801909c:	440b      	add	r3, r1
 801909e:	334c      	adds	r3, #76	; 0x4c
 80190a0:	681a      	ldr	r2, [r3, #0]
 80190a2:	78fb      	ldrb	r3, [r7, #3]
 80190a4:	4619      	mov	r1, r3
 80190a6:	f7f0 fa90 	bl	80095ca <USBD_LL_DataInStage>
}
 80190aa:	bf00      	nop
 80190ac:	3708      	adds	r7, #8
 80190ae:	46bd      	mov	sp, r7
 80190b0:	bd80      	pop	{r7, pc}

080190b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80190b2:	b580      	push	{r7, lr}
 80190b4:	b082      	sub	sp, #8
 80190b6:	af00      	add	r7, sp, #0
 80190b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80190c0:	4618      	mov	r0, r3
 80190c2:	f7f0 fbc4 	bl	800984e <USBD_LL_SOF>
}
 80190c6:	bf00      	nop
 80190c8:	3708      	adds	r7, #8
 80190ca:	46bd      	mov	sp, r7
 80190cc:	bd80      	pop	{r7, pc}

080190ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80190ce:	b580      	push	{r7, lr}
 80190d0:	b084      	sub	sp, #16
 80190d2:	af00      	add	r7, sp, #0
 80190d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80190d6:	2301      	movs	r3, #1
 80190d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	68db      	ldr	r3, [r3, #12]
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d102      	bne.n	80190e8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80190e2:	2300      	movs	r3, #0
 80190e4:	73fb      	strb	r3, [r7, #15]
 80190e6:	e008      	b.n	80190fa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	68db      	ldr	r3, [r3, #12]
 80190ec:	2b02      	cmp	r3, #2
 80190ee:	d102      	bne.n	80190f6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80190f0:	2301      	movs	r3, #1
 80190f2:	73fb      	strb	r3, [r7, #15]
 80190f4:	e001      	b.n	80190fa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80190f6:	f7e9 fefd 	bl	8002ef4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019100:	7bfa      	ldrb	r2, [r7, #15]
 8019102:	4611      	mov	r1, r2
 8019104:	4618      	mov	r0, r3
 8019106:	f7f0 fb64 	bl	80097d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019110:	4618      	mov	r0, r3
 8019112:	f7f0 fb0c 	bl	800972e <USBD_LL_Reset>
}
 8019116:	bf00      	nop
 8019118:	3710      	adds	r7, #16
 801911a:	46bd      	mov	sp, r7
 801911c:	bd80      	pop	{r7, pc}
	...

08019120 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019120:	b580      	push	{r7, lr}
 8019122:	b082      	sub	sp, #8
 8019124:	af00      	add	r7, sp, #0
 8019126:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801912e:	4618      	mov	r0, r3
 8019130:	f7f0 fb5f 	bl	80097f2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	681b      	ldr	r3, [r3, #0]
 8019138:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801913c:	681b      	ldr	r3, [r3, #0]
 801913e:	687a      	ldr	r2, [r7, #4]
 8019140:	6812      	ldr	r2, [r2, #0]
 8019142:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019146:	f043 0301 	orr.w	r3, r3, #1
 801914a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	6a1b      	ldr	r3, [r3, #32]
 8019150:	2b00      	cmp	r3, #0
 8019152:	d005      	beq.n	8019160 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019154:	4b04      	ldr	r3, [pc, #16]	; (8019168 <HAL_PCD_SuspendCallback+0x48>)
 8019156:	691b      	ldr	r3, [r3, #16]
 8019158:	4a03      	ldr	r2, [pc, #12]	; (8019168 <HAL_PCD_SuspendCallback+0x48>)
 801915a:	f043 0306 	orr.w	r3, r3, #6
 801915e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8019160:	bf00      	nop
 8019162:	3708      	adds	r7, #8
 8019164:	46bd      	mov	sp, r7
 8019166:	bd80      	pop	{r7, pc}
 8019168:	e000ed00 	.word	0xe000ed00

0801916c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801916c:	b580      	push	{r7, lr}
 801916e:	b082      	sub	sp, #8
 8019170:	af00      	add	r7, sp, #0
 8019172:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801917a:	4618      	mov	r0, r3
 801917c:	f7f0 fb4f 	bl	800981e <USBD_LL_Resume>
}
 8019180:	bf00      	nop
 8019182:	3708      	adds	r7, #8
 8019184:	46bd      	mov	sp, r7
 8019186:	bd80      	pop	{r7, pc}

08019188 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019188:	b580      	push	{r7, lr}
 801918a:	b082      	sub	sp, #8
 801918c:	af00      	add	r7, sp, #0
 801918e:	6078      	str	r0, [r7, #4]
 8019190:	460b      	mov	r3, r1
 8019192:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801919a:	78fa      	ldrb	r2, [r7, #3]
 801919c:	4611      	mov	r1, r2
 801919e:	4618      	mov	r0, r3
 80191a0:	f7f0 fba7 	bl	80098f2 <USBD_LL_IsoOUTIncomplete>
}
 80191a4:	bf00      	nop
 80191a6:	3708      	adds	r7, #8
 80191a8:	46bd      	mov	sp, r7
 80191aa:	bd80      	pop	{r7, pc}

080191ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80191ac:	b580      	push	{r7, lr}
 80191ae:	b082      	sub	sp, #8
 80191b0:	af00      	add	r7, sp, #0
 80191b2:	6078      	str	r0, [r7, #4]
 80191b4:	460b      	mov	r3, r1
 80191b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80191be:	78fa      	ldrb	r2, [r7, #3]
 80191c0:	4611      	mov	r1, r2
 80191c2:	4618      	mov	r0, r3
 80191c4:	f7f0 fb63 	bl	800988e <USBD_LL_IsoINIncomplete>
}
 80191c8:	bf00      	nop
 80191ca:	3708      	adds	r7, #8
 80191cc:	46bd      	mov	sp, r7
 80191ce:	bd80      	pop	{r7, pc}

080191d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80191d0:	b580      	push	{r7, lr}
 80191d2:	b082      	sub	sp, #8
 80191d4:	af00      	add	r7, sp, #0
 80191d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80191de:	4618      	mov	r0, r3
 80191e0:	f7f0 fbb9 	bl	8009956 <USBD_LL_DevConnected>
}
 80191e4:	bf00      	nop
 80191e6:	3708      	adds	r7, #8
 80191e8:	46bd      	mov	sp, r7
 80191ea:	bd80      	pop	{r7, pc}

080191ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80191ec:	b580      	push	{r7, lr}
 80191ee:	b082      	sub	sp, #8
 80191f0:	af00      	add	r7, sp, #0
 80191f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80191fa:	4618      	mov	r0, r3
 80191fc:	f7f0 fbb6 	bl	800996c <USBD_LL_DevDisconnected>
}
 8019200:	bf00      	nop
 8019202:	3708      	adds	r7, #8
 8019204:	46bd      	mov	sp, r7
 8019206:	bd80      	pop	{r7, pc}

08019208 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019208:	b580      	push	{r7, lr}
 801920a:	b082      	sub	sp, #8
 801920c:	af00      	add	r7, sp, #0
 801920e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	781b      	ldrb	r3, [r3, #0]
 8019214:	2b00      	cmp	r3, #0
 8019216:	d13c      	bne.n	8019292 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019218:	4a20      	ldr	r2, [pc, #128]	; (801929c <USBD_LL_Init+0x94>)
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	4a1e      	ldr	r2, [pc, #120]	; (801929c <USBD_LL_Init+0x94>)
 8019224:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019228:	4b1c      	ldr	r3, [pc, #112]	; (801929c <USBD_LL_Init+0x94>)
 801922a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801922e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8019230:	4b1a      	ldr	r3, [pc, #104]	; (801929c <USBD_LL_Init+0x94>)
 8019232:	2204      	movs	r2, #4
 8019234:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8019236:	4b19      	ldr	r3, [pc, #100]	; (801929c <USBD_LL_Init+0x94>)
 8019238:	2202      	movs	r2, #2
 801923a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801923c:	4b17      	ldr	r3, [pc, #92]	; (801929c <USBD_LL_Init+0x94>)
 801923e:	2200      	movs	r2, #0
 8019240:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019242:	4b16      	ldr	r3, [pc, #88]	; (801929c <USBD_LL_Init+0x94>)
 8019244:	2202      	movs	r2, #2
 8019246:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8019248:	4b14      	ldr	r3, [pc, #80]	; (801929c <USBD_LL_Init+0x94>)
 801924a:	2200      	movs	r2, #0
 801924c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801924e:	4b13      	ldr	r3, [pc, #76]	; (801929c <USBD_LL_Init+0x94>)
 8019250:	2200      	movs	r2, #0
 8019252:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8019254:	4b11      	ldr	r3, [pc, #68]	; (801929c <USBD_LL_Init+0x94>)
 8019256:	2200      	movs	r2, #0
 8019258:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801925a:	4b10      	ldr	r3, [pc, #64]	; (801929c <USBD_LL_Init+0x94>)
 801925c:	2200      	movs	r2, #0
 801925e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8019260:	4b0e      	ldr	r3, [pc, #56]	; (801929c <USBD_LL_Init+0x94>)
 8019262:	2200      	movs	r2, #0
 8019264:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8019266:	480d      	ldr	r0, [pc, #52]	; (801929c <USBD_LL_Init+0x94>)
 8019268:	f7eb fa3b 	bl	80046e2 <HAL_PCD_Init>
 801926c:	4603      	mov	r3, r0
 801926e:	2b00      	cmp	r3, #0
 8019270:	d001      	beq.n	8019276 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8019272:	f7e9 fe3f 	bl	8002ef4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8019276:	2180      	movs	r1, #128	; 0x80
 8019278:	4808      	ldr	r0, [pc, #32]	; (801929c <USBD_LL_Init+0x94>)
 801927a:	f7ec fc92 	bl	8005ba2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801927e:	2240      	movs	r2, #64	; 0x40
 8019280:	2100      	movs	r1, #0
 8019282:	4806      	ldr	r0, [pc, #24]	; (801929c <USBD_LL_Init+0x94>)
 8019284:	f7ec fc46 	bl	8005b14 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8019288:	2280      	movs	r2, #128	; 0x80
 801928a:	2101      	movs	r1, #1
 801928c:	4803      	ldr	r0, [pc, #12]	; (801929c <USBD_LL_Init+0x94>)
 801928e:	f7ec fc41 	bl	8005b14 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8019292:	2300      	movs	r3, #0
}
 8019294:	4618      	mov	r0, r3
 8019296:	3708      	adds	r7, #8
 8019298:	46bd      	mov	sp, r7
 801929a:	bd80      	pop	{r7, pc}
 801929c:	20002290 	.word	0x20002290

080192a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80192a0:	b580      	push	{r7, lr}
 80192a2:	b084      	sub	sp, #16
 80192a4:	af00      	add	r7, sp, #0
 80192a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80192a8:	2300      	movs	r3, #0
 80192aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80192ac:	2300      	movs	r3, #0
 80192ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80192b6:	4618      	mov	r0, r3
 80192b8:	f7eb fb30 	bl	800491c <HAL_PCD_Start>
 80192bc:	4603      	mov	r3, r0
 80192be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80192c0:	7bfb      	ldrb	r3, [r7, #15]
 80192c2:	4618      	mov	r0, r3
 80192c4:	f000 f942 	bl	801954c <USBD_Get_USB_Status>
 80192c8:	4603      	mov	r3, r0
 80192ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80192cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80192ce:	4618      	mov	r0, r3
 80192d0:	3710      	adds	r7, #16
 80192d2:	46bd      	mov	sp, r7
 80192d4:	bd80      	pop	{r7, pc}

080192d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80192d6:	b580      	push	{r7, lr}
 80192d8:	b084      	sub	sp, #16
 80192da:	af00      	add	r7, sp, #0
 80192dc:	6078      	str	r0, [r7, #4]
 80192de:	4608      	mov	r0, r1
 80192e0:	4611      	mov	r1, r2
 80192e2:	461a      	mov	r2, r3
 80192e4:	4603      	mov	r3, r0
 80192e6:	70fb      	strb	r3, [r7, #3]
 80192e8:	460b      	mov	r3, r1
 80192ea:	70bb      	strb	r3, [r7, #2]
 80192ec:	4613      	mov	r3, r2
 80192ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80192f0:	2300      	movs	r3, #0
 80192f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80192f4:	2300      	movs	r3, #0
 80192f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80192fe:	78bb      	ldrb	r3, [r7, #2]
 8019300:	883a      	ldrh	r2, [r7, #0]
 8019302:	78f9      	ldrb	r1, [r7, #3]
 8019304:	f7ec f801 	bl	800530a <HAL_PCD_EP_Open>
 8019308:	4603      	mov	r3, r0
 801930a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801930c:	7bfb      	ldrb	r3, [r7, #15]
 801930e:	4618      	mov	r0, r3
 8019310:	f000 f91c 	bl	801954c <USBD_Get_USB_Status>
 8019314:	4603      	mov	r3, r0
 8019316:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019318:	7bbb      	ldrb	r3, [r7, #14]
}
 801931a:	4618      	mov	r0, r3
 801931c:	3710      	adds	r7, #16
 801931e:	46bd      	mov	sp, r7
 8019320:	bd80      	pop	{r7, pc}

08019322 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019322:	b580      	push	{r7, lr}
 8019324:	b084      	sub	sp, #16
 8019326:	af00      	add	r7, sp, #0
 8019328:	6078      	str	r0, [r7, #4]
 801932a:	460b      	mov	r3, r1
 801932c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801932e:	2300      	movs	r3, #0
 8019330:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019332:	2300      	movs	r3, #0
 8019334:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801933c:	78fa      	ldrb	r2, [r7, #3]
 801933e:	4611      	mov	r1, r2
 8019340:	4618      	mov	r0, r3
 8019342:	f7ec f84a 	bl	80053da <HAL_PCD_EP_Close>
 8019346:	4603      	mov	r3, r0
 8019348:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801934a:	7bfb      	ldrb	r3, [r7, #15]
 801934c:	4618      	mov	r0, r3
 801934e:	f000 f8fd 	bl	801954c <USBD_Get_USB_Status>
 8019352:	4603      	mov	r3, r0
 8019354:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019356:	7bbb      	ldrb	r3, [r7, #14]
}
 8019358:	4618      	mov	r0, r3
 801935a:	3710      	adds	r7, #16
 801935c:	46bd      	mov	sp, r7
 801935e:	bd80      	pop	{r7, pc}

08019360 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019360:	b580      	push	{r7, lr}
 8019362:	b084      	sub	sp, #16
 8019364:	af00      	add	r7, sp, #0
 8019366:	6078      	str	r0, [r7, #4]
 8019368:	460b      	mov	r3, r1
 801936a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801936c:	2300      	movs	r3, #0
 801936e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019370:	2300      	movs	r3, #0
 8019372:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801937a:	78fa      	ldrb	r2, [r7, #3]
 801937c:	4611      	mov	r1, r2
 801937e:	4618      	mov	r0, r3
 8019380:	f7ec f922 	bl	80055c8 <HAL_PCD_EP_SetStall>
 8019384:	4603      	mov	r3, r0
 8019386:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019388:	7bfb      	ldrb	r3, [r7, #15]
 801938a:	4618      	mov	r0, r3
 801938c:	f000 f8de 	bl	801954c <USBD_Get_USB_Status>
 8019390:	4603      	mov	r3, r0
 8019392:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019394:	7bbb      	ldrb	r3, [r7, #14]
}
 8019396:	4618      	mov	r0, r3
 8019398:	3710      	adds	r7, #16
 801939a:	46bd      	mov	sp, r7
 801939c:	bd80      	pop	{r7, pc}

0801939e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801939e:	b580      	push	{r7, lr}
 80193a0:	b084      	sub	sp, #16
 80193a2:	af00      	add	r7, sp, #0
 80193a4:	6078      	str	r0, [r7, #4]
 80193a6:	460b      	mov	r3, r1
 80193a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80193aa:	2300      	movs	r3, #0
 80193ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80193ae:	2300      	movs	r3, #0
 80193b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80193b8:	78fa      	ldrb	r2, [r7, #3]
 80193ba:	4611      	mov	r1, r2
 80193bc:	4618      	mov	r0, r3
 80193be:	f7ec f967 	bl	8005690 <HAL_PCD_EP_ClrStall>
 80193c2:	4603      	mov	r3, r0
 80193c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80193c6:	7bfb      	ldrb	r3, [r7, #15]
 80193c8:	4618      	mov	r0, r3
 80193ca:	f000 f8bf 	bl	801954c <USBD_Get_USB_Status>
 80193ce:	4603      	mov	r3, r0
 80193d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80193d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80193d4:	4618      	mov	r0, r3
 80193d6:	3710      	adds	r7, #16
 80193d8:	46bd      	mov	sp, r7
 80193da:	bd80      	pop	{r7, pc}

080193dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80193dc:	b480      	push	{r7}
 80193de:	b085      	sub	sp, #20
 80193e0:	af00      	add	r7, sp, #0
 80193e2:	6078      	str	r0, [r7, #4]
 80193e4:	460b      	mov	r3, r1
 80193e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80193ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80193f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	da0b      	bge.n	8019410 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80193f8:	78fb      	ldrb	r3, [r7, #3]
 80193fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80193fe:	68f9      	ldr	r1, [r7, #12]
 8019400:	4613      	mov	r3, r2
 8019402:	00db      	lsls	r3, r3, #3
 8019404:	4413      	add	r3, r2
 8019406:	009b      	lsls	r3, r3, #2
 8019408:	440b      	add	r3, r1
 801940a:	333e      	adds	r3, #62	; 0x3e
 801940c:	781b      	ldrb	r3, [r3, #0]
 801940e:	e00b      	b.n	8019428 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019410:	78fb      	ldrb	r3, [r7, #3]
 8019412:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019416:	68f9      	ldr	r1, [r7, #12]
 8019418:	4613      	mov	r3, r2
 801941a:	00db      	lsls	r3, r3, #3
 801941c:	4413      	add	r3, r2
 801941e:	009b      	lsls	r3, r3, #2
 8019420:	440b      	add	r3, r1
 8019422:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8019426:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019428:	4618      	mov	r0, r3
 801942a:	3714      	adds	r7, #20
 801942c:	46bd      	mov	sp, r7
 801942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019432:	4770      	bx	lr

08019434 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019434:	b580      	push	{r7, lr}
 8019436:	b084      	sub	sp, #16
 8019438:	af00      	add	r7, sp, #0
 801943a:	6078      	str	r0, [r7, #4]
 801943c:	460b      	mov	r3, r1
 801943e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019440:	2300      	movs	r3, #0
 8019442:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019444:	2300      	movs	r3, #0
 8019446:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801944e:	78fa      	ldrb	r2, [r7, #3]
 8019450:	4611      	mov	r1, r2
 8019452:	4618      	mov	r0, r3
 8019454:	f7eb ff34 	bl	80052c0 <HAL_PCD_SetAddress>
 8019458:	4603      	mov	r3, r0
 801945a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801945c:	7bfb      	ldrb	r3, [r7, #15]
 801945e:	4618      	mov	r0, r3
 8019460:	f000 f874 	bl	801954c <USBD_Get_USB_Status>
 8019464:	4603      	mov	r3, r0
 8019466:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019468:	7bbb      	ldrb	r3, [r7, #14]
}
 801946a:	4618      	mov	r0, r3
 801946c:	3710      	adds	r7, #16
 801946e:	46bd      	mov	sp, r7
 8019470:	bd80      	pop	{r7, pc}

08019472 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019472:	b580      	push	{r7, lr}
 8019474:	b086      	sub	sp, #24
 8019476:	af00      	add	r7, sp, #0
 8019478:	60f8      	str	r0, [r7, #12]
 801947a:	607a      	str	r2, [r7, #4]
 801947c:	603b      	str	r3, [r7, #0]
 801947e:	460b      	mov	r3, r1
 8019480:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019482:	2300      	movs	r3, #0
 8019484:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019486:	2300      	movs	r3, #0
 8019488:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801948a:	68fb      	ldr	r3, [r7, #12]
 801948c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8019490:	7af9      	ldrb	r1, [r7, #11]
 8019492:	683b      	ldr	r3, [r7, #0]
 8019494:	687a      	ldr	r2, [r7, #4]
 8019496:	f7ec f84d 	bl	8005534 <HAL_PCD_EP_Transmit>
 801949a:	4603      	mov	r3, r0
 801949c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801949e:	7dfb      	ldrb	r3, [r7, #23]
 80194a0:	4618      	mov	r0, r3
 80194a2:	f000 f853 	bl	801954c <USBD_Get_USB_Status>
 80194a6:	4603      	mov	r3, r0
 80194a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80194aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80194ac:	4618      	mov	r0, r3
 80194ae:	3718      	adds	r7, #24
 80194b0:	46bd      	mov	sp, r7
 80194b2:	bd80      	pop	{r7, pc}

080194b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80194b4:	b580      	push	{r7, lr}
 80194b6:	b086      	sub	sp, #24
 80194b8:	af00      	add	r7, sp, #0
 80194ba:	60f8      	str	r0, [r7, #12]
 80194bc:	607a      	str	r2, [r7, #4]
 80194be:	603b      	str	r3, [r7, #0]
 80194c0:	460b      	mov	r3, r1
 80194c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80194c4:	2300      	movs	r3, #0
 80194c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80194c8:	2300      	movs	r3, #0
 80194ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80194cc:	68fb      	ldr	r3, [r7, #12]
 80194ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80194d2:	7af9      	ldrb	r1, [r7, #11]
 80194d4:	683b      	ldr	r3, [r7, #0]
 80194d6:	687a      	ldr	r2, [r7, #4]
 80194d8:	f7eb ffc9 	bl	800546e <HAL_PCD_EP_Receive>
 80194dc:	4603      	mov	r3, r0
 80194de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80194e0:	7dfb      	ldrb	r3, [r7, #23]
 80194e2:	4618      	mov	r0, r3
 80194e4:	f000 f832 	bl	801954c <USBD_Get_USB_Status>
 80194e8:	4603      	mov	r3, r0
 80194ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80194ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80194ee:	4618      	mov	r0, r3
 80194f0:	3718      	adds	r7, #24
 80194f2:	46bd      	mov	sp, r7
 80194f4:	bd80      	pop	{r7, pc}

080194f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80194f6:	b580      	push	{r7, lr}
 80194f8:	b082      	sub	sp, #8
 80194fa:	af00      	add	r7, sp, #0
 80194fc:	6078      	str	r0, [r7, #4]
 80194fe:	460b      	mov	r3, r1
 8019500:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019508:	78fa      	ldrb	r2, [r7, #3]
 801950a:	4611      	mov	r1, r2
 801950c:	4618      	mov	r0, r3
 801950e:	f7eb fff9 	bl	8005504 <HAL_PCD_EP_GetRxCount>
 8019512:	4603      	mov	r3, r0
}
 8019514:	4618      	mov	r0, r3
 8019516:	3708      	adds	r7, #8
 8019518:	46bd      	mov	sp, r7
 801951a:	bd80      	pop	{r7, pc}

0801951c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801951c:	b480      	push	{r7}
 801951e:	b083      	sub	sp, #12
 8019520:	af00      	add	r7, sp, #0
 8019522:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019524:	4b03      	ldr	r3, [pc, #12]	; (8019534 <USBD_static_malloc+0x18>)
}
 8019526:	4618      	mov	r0, r3
 8019528:	370c      	adds	r7, #12
 801952a:	46bd      	mov	sp, r7
 801952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019530:	4770      	bx	lr
 8019532:	bf00      	nop
 8019534:	2000279c 	.word	0x2000279c

08019538 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019538:	b480      	push	{r7}
 801953a:	b083      	sub	sp, #12
 801953c:	af00      	add	r7, sp, #0
 801953e:	6078      	str	r0, [r7, #4]

}
 8019540:	bf00      	nop
 8019542:	370c      	adds	r7, #12
 8019544:	46bd      	mov	sp, r7
 8019546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801954a:	4770      	bx	lr

0801954c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801954c:	b480      	push	{r7}
 801954e:	b085      	sub	sp, #20
 8019550:	af00      	add	r7, sp, #0
 8019552:	4603      	mov	r3, r0
 8019554:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019556:	2300      	movs	r3, #0
 8019558:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801955a:	79fb      	ldrb	r3, [r7, #7]
 801955c:	2b03      	cmp	r3, #3
 801955e:	d817      	bhi.n	8019590 <USBD_Get_USB_Status+0x44>
 8019560:	a201      	add	r2, pc, #4	; (adr r2, 8019568 <USBD_Get_USB_Status+0x1c>)
 8019562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019566:	bf00      	nop
 8019568:	08019579 	.word	0x08019579
 801956c:	0801957f 	.word	0x0801957f
 8019570:	08019585 	.word	0x08019585
 8019574:	0801958b 	.word	0x0801958b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019578:	2300      	movs	r3, #0
 801957a:	73fb      	strb	r3, [r7, #15]
    break;
 801957c:	e00b      	b.n	8019596 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801957e:	2303      	movs	r3, #3
 8019580:	73fb      	strb	r3, [r7, #15]
    break;
 8019582:	e008      	b.n	8019596 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019584:	2301      	movs	r3, #1
 8019586:	73fb      	strb	r3, [r7, #15]
    break;
 8019588:	e005      	b.n	8019596 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801958a:	2303      	movs	r3, #3
 801958c:	73fb      	strb	r3, [r7, #15]
    break;
 801958e:	e002      	b.n	8019596 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019590:	2303      	movs	r3, #3
 8019592:	73fb      	strb	r3, [r7, #15]
    break;
 8019594:	bf00      	nop
  }
  return usb_status;
 8019596:	7bfb      	ldrb	r3, [r7, #15]
}
 8019598:	4618      	mov	r0, r3
 801959a:	3714      	adds	r7, #20
 801959c:	46bd      	mov	sp, r7
 801959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195a2:	4770      	bx	lr

080195a4 <_ZdlPvj>:
 80195a4:	f000 b81b 	b.w	80195de <_ZdlPv>

080195a8 <_ZdaPv>:
 80195a8:	f000 b819 	b.w	80195de <_ZdlPv>

080195ac <_Znwj>:
 80195ac:	2801      	cmp	r0, #1
 80195ae:	bf38      	it	cc
 80195b0:	2001      	movcc	r0, #1
 80195b2:	b510      	push	{r4, lr}
 80195b4:	4604      	mov	r4, r0
 80195b6:	4620      	mov	r0, r4
 80195b8:	f001 fb9a 	bl	801acf0 <malloc>
 80195bc:	b930      	cbnz	r0, 80195cc <_Znwj+0x20>
 80195be:	f000 f811 	bl	80195e4 <_ZSt15get_new_handlerv>
 80195c2:	b908      	cbnz	r0, 80195c8 <_Znwj+0x1c>
 80195c4:	f001 fb26 	bl	801ac14 <abort>
 80195c8:	4780      	blx	r0
 80195ca:	e7f4      	b.n	80195b6 <_Znwj+0xa>
 80195cc:	bd10      	pop	{r4, pc}

080195ce <_Znaj>:
 80195ce:	f7ff bfed 	b.w	80195ac <_Znwj>

080195d2 <_ZSt17__throw_bad_allocv>:
 80195d2:	b508      	push	{r3, lr}
 80195d4:	f001 fb1e 	bl	801ac14 <abort>

080195d8 <_ZSt20__throw_length_errorPKc>:
 80195d8:	b508      	push	{r3, lr}
 80195da:	f001 fb1b 	bl	801ac14 <abort>

080195de <_ZdlPv>:
 80195de:	f001 bb8f 	b.w	801ad00 <free>
	...

080195e4 <_ZSt15get_new_handlerv>:
 80195e4:	4b02      	ldr	r3, [pc, #8]	; (80195f0 <_ZSt15get_new_handlerv+0xc>)
 80195e6:	6818      	ldr	r0, [r3, #0]
 80195e8:	f3bf 8f5b 	dmb	ish
 80195ec:	4770      	bx	lr
 80195ee:	bf00      	nop
 80195f0:	200029bc 	.word	0x200029bc
 80195f4:	00000000 	.word	0x00000000

080195f8 <floor>:
 80195f8:	ec51 0b10 	vmov	r0, r1, d0
 80195fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019600:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8019604:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8019608:	2e13      	cmp	r6, #19
 801960a:	ee10 5a10 	vmov	r5, s0
 801960e:	ee10 8a10 	vmov	r8, s0
 8019612:	460c      	mov	r4, r1
 8019614:	dc32      	bgt.n	801967c <floor+0x84>
 8019616:	2e00      	cmp	r6, #0
 8019618:	da14      	bge.n	8019644 <floor+0x4c>
 801961a:	a333      	add	r3, pc, #204	; (adr r3, 80196e8 <floor+0xf0>)
 801961c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019620:	f7e6 fe3e 	bl	80002a0 <__adddf3>
 8019624:	2200      	movs	r2, #0
 8019626:	2300      	movs	r3, #0
 8019628:	f7e7 fa80 	bl	8000b2c <__aeabi_dcmpgt>
 801962c:	b138      	cbz	r0, 801963e <floor+0x46>
 801962e:	2c00      	cmp	r4, #0
 8019630:	da57      	bge.n	80196e2 <floor+0xea>
 8019632:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8019636:	431d      	orrs	r5, r3
 8019638:	d001      	beq.n	801963e <floor+0x46>
 801963a:	4c2d      	ldr	r4, [pc, #180]	; (80196f0 <floor+0xf8>)
 801963c:	2500      	movs	r5, #0
 801963e:	4621      	mov	r1, r4
 8019640:	4628      	mov	r0, r5
 8019642:	e025      	b.n	8019690 <floor+0x98>
 8019644:	4f2b      	ldr	r7, [pc, #172]	; (80196f4 <floor+0xfc>)
 8019646:	4137      	asrs	r7, r6
 8019648:	ea01 0307 	and.w	r3, r1, r7
 801964c:	4303      	orrs	r3, r0
 801964e:	d01f      	beq.n	8019690 <floor+0x98>
 8019650:	a325      	add	r3, pc, #148	; (adr r3, 80196e8 <floor+0xf0>)
 8019652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019656:	f7e6 fe23 	bl	80002a0 <__adddf3>
 801965a:	2200      	movs	r2, #0
 801965c:	2300      	movs	r3, #0
 801965e:	f7e7 fa65 	bl	8000b2c <__aeabi_dcmpgt>
 8019662:	2800      	cmp	r0, #0
 8019664:	d0eb      	beq.n	801963e <floor+0x46>
 8019666:	2c00      	cmp	r4, #0
 8019668:	bfbe      	ittt	lt
 801966a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801966e:	fa43 f606 	asrlt.w	r6, r3, r6
 8019672:	19a4      	addlt	r4, r4, r6
 8019674:	ea24 0407 	bic.w	r4, r4, r7
 8019678:	2500      	movs	r5, #0
 801967a:	e7e0      	b.n	801963e <floor+0x46>
 801967c:	2e33      	cmp	r6, #51	; 0x33
 801967e:	dd0b      	ble.n	8019698 <floor+0xa0>
 8019680:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8019684:	d104      	bne.n	8019690 <floor+0x98>
 8019686:	ee10 2a10 	vmov	r2, s0
 801968a:	460b      	mov	r3, r1
 801968c:	f7e6 fe08 	bl	80002a0 <__adddf3>
 8019690:	ec41 0b10 	vmov	d0, r0, r1
 8019694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019698:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801969c:	f04f 33ff 	mov.w	r3, #4294967295
 80196a0:	fa23 f707 	lsr.w	r7, r3, r7
 80196a4:	4207      	tst	r7, r0
 80196a6:	d0f3      	beq.n	8019690 <floor+0x98>
 80196a8:	a30f      	add	r3, pc, #60	; (adr r3, 80196e8 <floor+0xf0>)
 80196aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196ae:	f7e6 fdf7 	bl	80002a0 <__adddf3>
 80196b2:	2200      	movs	r2, #0
 80196b4:	2300      	movs	r3, #0
 80196b6:	f7e7 fa39 	bl	8000b2c <__aeabi_dcmpgt>
 80196ba:	2800      	cmp	r0, #0
 80196bc:	d0bf      	beq.n	801963e <floor+0x46>
 80196be:	2c00      	cmp	r4, #0
 80196c0:	da02      	bge.n	80196c8 <floor+0xd0>
 80196c2:	2e14      	cmp	r6, #20
 80196c4:	d103      	bne.n	80196ce <floor+0xd6>
 80196c6:	3401      	adds	r4, #1
 80196c8:	ea25 0507 	bic.w	r5, r5, r7
 80196cc:	e7b7      	b.n	801963e <floor+0x46>
 80196ce:	2301      	movs	r3, #1
 80196d0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80196d4:	fa03 f606 	lsl.w	r6, r3, r6
 80196d8:	4435      	add	r5, r6
 80196da:	4545      	cmp	r5, r8
 80196dc:	bf38      	it	cc
 80196de:	18e4      	addcc	r4, r4, r3
 80196e0:	e7f2      	b.n	80196c8 <floor+0xd0>
 80196e2:	2500      	movs	r5, #0
 80196e4:	462c      	mov	r4, r5
 80196e6:	e7aa      	b.n	801963e <floor+0x46>
 80196e8:	8800759c 	.word	0x8800759c
 80196ec:	7e37e43c 	.word	0x7e37e43c
 80196f0:	bff00000 	.word	0xbff00000
 80196f4:	000fffff 	.word	0x000fffff

080196f8 <frexp>:
 80196f8:	b570      	push	{r4, r5, r6, lr}
 80196fa:	2100      	movs	r1, #0
 80196fc:	ec55 4b10 	vmov	r4, r5, d0
 8019700:	6001      	str	r1, [r0, #0]
 8019702:	4916      	ldr	r1, [pc, #88]	; (801975c <frexp+0x64>)
 8019704:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8019708:	428a      	cmp	r2, r1
 801970a:	4606      	mov	r6, r0
 801970c:	462b      	mov	r3, r5
 801970e:	dc22      	bgt.n	8019756 <frexp+0x5e>
 8019710:	ee10 1a10 	vmov	r1, s0
 8019714:	4311      	orrs	r1, r2
 8019716:	d01e      	beq.n	8019756 <frexp+0x5e>
 8019718:	4911      	ldr	r1, [pc, #68]	; (8019760 <frexp+0x68>)
 801971a:	4029      	ands	r1, r5
 801971c:	b969      	cbnz	r1, 801973a <frexp+0x42>
 801971e:	4b11      	ldr	r3, [pc, #68]	; (8019764 <frexp+0x6c>)
 8019720:	2200      	movs	r2, #0
 8019722:	ee10 0a10 	vmov	r0, s0
 8019726:	4629      	mov	r1, r5
 8019728:	f7e6 ff70 	bl	800060c <__aeabi_dmul>
 801972c:	460b      	mov	r3, r1
 801972e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8019732:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8019736:	4604      	mov	r4, r0
 8019738:	6031      	str	r1, [r6, #0]
 801973a:	6831      	ldr	r1, [r6, #0]
 801973c:	1512      	asrs	r2, r2, #20
 801973e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019742:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8019746:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801974a:	440a      	add	r2, r1
 801974c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8019750:	6032      	str	r2, [r6, #0]
 8019752:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8019756:	ec45 4b10 	vmov	d0, r4, r5
 801975a:	bd70      	pop	{r4, r5, r6, pc}
 801975c:	7fefffff 	.word	0x7fefffff
 8019760:	7ff00000 	.word	0x7ff00000
 8019764:	43500000 	.word	0x43500000

08019768 <round>:
 8019768:	ec51 0b10 	vmov	r0, r1, d0
 801976c:	b570      	push	{r4, r5, r6, lr}
 801976e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8019772:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8019776:	2c13      	cmp	r4, #19
 8019778:	ee10 2a10 	vmov	r2, s0
 801977c:	460b      	mov	r3, r1
 801977e:	dc19      	bgt.n	80197b4 <round+0x4c>
 8019780:	2c00      	cmp	r4, #0
 8019782:	da09      	bge.n	8019798 <round+0x30>
 8019784:	3401      	adds	r4, #1
 8019786:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801978a:	d103      	bne.n	8019794 <round+0x2c>
 801978c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8019790:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019794:	2200      	movs	r2, #0
 8019796:	e028      	b.n	80197ea <round+0x82>
 8019798:	4d15      	ldr	r5, [pc, #84]	; (80197f0 <round+0x88>)
 801979a:	4125      	asrs	r5, r4
 801979c:	ea01 0605 	and.w	r6, r1, r5
 80197a0:	4332      	orrs	r2, r6
 80197a2:	d00e      	beq.n	80197c2 <round+0x5a>
 80197a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80197a8:	fa42 f404 	asr.w	r4, r2, r4
 80197ac:	4423      	add	r3, r4
 80197ae:	ea23 0305 	bic.w	r3, r3, r5
 80197b2:	e7ef      	b.n	8019794 <round+0x2c>
 80197b4:	2c33      	cmp	r4, #51	; 0x33
 80197b6:	dd07      	ble.n	80197c8 <round+0x60>
 80197b8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80197bc:	d101      	bne.n	80197c2 <round+0x5a>
 80197be:	f7e6 fd6f 	bl	80002a0 <__adddf3>
 80197c2:	ec41 0b10 	vmov	d0, r0, r1
 80197c6:	bd70      	pop	{r4, r5, r6, pc}
 80197c8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80197cc:	f04f 35ff 	mov.w	r5, #4294967295
 80197d0:	40f5      	lsrs	r5, r6
 80197d2:	4228      	tst	r0, r5
 80197d4:	d0f5      	beq.n	80197c2 <round+0x5a>
 80197d6:	2101      	movs	r1, #1
 80197d8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80197dc:	fa01 f404 	lsl.w	r4, r1, r4
 80197e0:	1912      	adds	r2, r2, r4
 80197e2:	bf28      	it	cs
 80197e4:	185b      	addcs	r3, r3, r1
 80197e6:	ea22 0205 	bic.w	r2, r2, r5
 80197ea:	4619      	mov	r1, r3
 80197ec:	4610      	mov	r0, r2
 80197ee:	e7e8      	b.n	80197c2 <round+0x5a>
 80197f0:	000fffff 	.word	0x000fffff

080197f4 <roundf>:
 80197f4:	ee10 0a10 	vmov	r0, s0
 80197f8:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80197fc:	3a7f      	subs	r2, #127	; 0x7f
 80197fe:	2a16      	cmp	r2, #22
 8019800:	dc15      	bgt.n	801982e <roundf+0x3a>
 8019802:	2a00      	cmp	r2, #0
 8019804:	da08      	bge.n	8019818 <roundf+0x24>
 8019806:	3201      	adds	r2, #1
 8019808:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801980c:	d101      	bne.n	8019812 <roundf+0x1e>
 801980e:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8019812:	ee00 3a10 	vmov	s0, r3
 8019816:	4770      	bx	lr
 8019818:	4907      	ldr	r1, [pc, #28]	; (8019838 <roundf+0x44>)
 801981a:	4111      	asrs	r1, r2
 801981c:	4208      	tst	r0, r1
 801981e:	d0fa      	beq.n	8019816 <roundf+0x22>
 8019820:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8019824:	4113      	asrs	r3, r2
 8019826:	4403      	add	r3, r0
 8019828:	ea23 0301 	bic.w	r3, r3, r1
 801982c:	e7f1      	b.n	8019812 <roundf+0x1e>
 801982e:	2a80      	cmp	r2, #128	; 0x80
 8019830:	d1f1      	bne.n	8019816 <roundf+0x22>
 8019832:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019836:	4770      	bx	lr
 8019838:	007fffff 	.word	0x007fffff

0801983c <pow>:
 801983c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801983e:	ed2d 8b02 	vpush	{d8}
 8019842:	eeb0 8a40 	vmov.f32	s16, s0
 8019846:	eef0 8a60 	vmov.f32	s17, s1
 801984a:	ec55 4b11 	vmov	r4, r5, d1
 801984e:	f000 f8e7 	bl	8019a20 <__ieee754_pow>
 8019852:	4622      	mov	r2, r4
 8019854:	462b      	mov	r3, r5
 8019856:	4620      	mov	r0, r4
 8019858:	4629      	mov	r1, r5
 801985a:	ec57 6b10 	vmov	r6, r7, d0
 801985e:	f7e7 f96f 	bl	8000b40 <__aeabi_dcmpun>
 8019862:	2800      	cmp	r0, #0
 8019864:	d13b      	bne.n	80198de <pow+0xa2>
 8019866:	ec51 0b18 	vmov	r0, r1, d8
 801986a:	2200      	movs	r2, #0
 801986c:	2300      	movs	r3, #0
 801986e:	f7e7 f935 	bl	8000adc <__aeabi_dcmpeq>
 8019872:	b1b8      	cbz	r0, 80198a4 <pow+0x68>
 8019874:	2200      	movs	r2, #0
 8019876:	2300      	movs	r3, #0
 8019878:	4620      	mov	r0, r4
 801987a:	4629      	mov	r1, r5
 801987c:	f7e7 f92e 	bl	8000adc <__aeabi_dcmpeq>
 8019880:	2800      	cmp	r0, #0
 8019882:	d146      	bne.n	8019912 <pow+0xd6>
 8019884:	ec45 4b10 	vmov	d0, r4, r5
 8019888:	f001 f91f 	bl	801aaca <finite>
 801988c:	b338      	cbz	r0, 80198de <pow+0xa2>
 801988e:	2200      	movs	r2, #0
 8019890:	2300      	movs	r3, #0
 8019892:	4620      	mov	r0, r4
 8019894:	4629      	mov	r1, r5
 8019896:	f7e7 f92b 	bl	8000af0 <__aeabi_dcmplt>
 801989a:	b300      	cbz	r0, 80198de <pow+0xa2>
 801989c:	f001 f9e8 	bl	801ac70 <__errno>
 80198a0:	2322      	movs	r3, #34	; 0x22
 80198a2:	e01b      	b.n	80198dc <pow+0xa0>
 80198a4:	ec47 6b10 	vmov	d0, r6, r7
 80198a8:	f001 f90f 	bl	801aaca <finite>
 80198ac:	b9e0      	cbnz	r0, 80198e8 <pow+0xac>
 80198ae:	eeb0 0a48 	vmov.f32	s0, s16
 80198b2:	eef0 0a68 	vmov.f32	s1, s17
 80198b6:	f001 f908 	bl	801aaca <finite>
 80198ba:	b1a8      	cbz	r0, 80198e8 <pow+0xac>
 80198bc:	ec45 4b10 	vmov	d0, r4, r5
 80198c0:	f001 f903 	bl	801aaca <finite>
 80198c4:	b180      	cbz	r0, 80198e8 <pow+0xac>
 80198c6:	4632      	mov	r2, r6
 80198c8:	463b      	mov	r3, r7
 80198ca:	4630      	mov	r0, r6
 80198cc:	4639      	mov	r1, r7
 80198ce:	f7e7 f937 	bl	8000b40 <__aeabi_dcmpun>
 80198d2:	2800      	cmp	r0, #0
 80198d4:	d0e2      	beq.n	801989c <pow+0x60>
 80198d6:	f001 f9cb 	bl	801ac70 <__errno>
 80198da:	2321      	movs	r3, #33	; 0x21
 80198dc:	6003      	str	r3, [r0, #0]
 80198de:	ecbd 8b02 	vpop	{d8}
 80198e2:	ec47 6b10 	vmov	d0, r6, r7
 80198e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80198e8:	2200      	movs	r2, #0
 80198ea:	2300      	movs	r3, #0
 80198ec:	4630      	mov	r0, r6
 80198ee:	4639      	mov	r1, r7
 80198f0:	f7e7 f8f4 	bl	8000adc <__aeabi_dcmpeq>
 80198f4:	2800      	cmp	r0, #0
 80198f6:	d0f2      	beq.n	80198de <pow+0xa2>
 80198f8:	eeb0 0a48 	vmov.f32	s0, s16
 80198fc:	eef0 0a68 	vmov.f32	s1, s17
 8019900:	f001 f8e3 	bl	801aaca <finite>
 8019904:	2800      	cmp	r0, #0
 8019906:	d0ea      	beq.n	80198de <pow+0xa2>
 8019908:	ec45 4b10 	vmov	d0, r4, r5
 801990c:	f001 f8dd 	bl	801aaca <finite>
 8019910:	e7c3      	b.n	801989a <pow+0x5e>
 8019912:	4f01      	ldr	r7, [pc, #4]	; (8019918 <pow+0xdc>)
 8019914:	2600      	movs	r6, #0
 8019916:	e7e2      	b.n	80198de <pow+0xa2>
 8019918:	3ff00000 	.word	0x3ff00000

0801991c <expf>:
 801991c:	b508      	push	{r3, lr}
 801991e:	ed2d 8b02 	vpush	{d8}
 8019922:	eef0 8a40 	vmov.f32	s17, s0
 8019926:	f000 fe5b 	bl	801a5e0 <__ieee754_expf>
 801992a:	eeb0 8a40 	vmov.f32	s16, s0
 801992e:	eeb0 0a68 	vmov.f32	s0, s17
 8019932:	f001 f95b 	bl	801abec <finitef>
 8019936:	b160      	cbz	r0, 8019952 <expf+0x36>
 8019938:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8019978 <expf+0x5c>
 801993c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8019940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019944:	dd0a      	ble.n	801995c <expf+0x40>
 8019946:	f001 f993 	bl	801ac70 <__errno>
 801994a:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 801997c <expf+0x60>
 801994e:	2322      	movs	r3, #34	; 0x22
 8019950:	6003      	str	r3, [r0, #0]
 8019952:	eeb0 0a48 	vmov.f32	s0, s16
 8019956:	ecbd 8b02 	vpop	{d8}
 801995a:	bd08      	pop	{r3, pc}
 801995c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8019980 <expf+0x64>
 8019960:	eef4 8ae7 	vcmpe.f32	s17, s15
 8019964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019968:	d5f3      	bpl.n	8019952 <expf+0x36>
 801996a:	f001 f981 	bl	801ac70 <__errno>
 801996e:	2322      	movs	r3, #34	; 0x22
 8019970:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8019984 <expf+0x68>
 8019974:	6003      	str	r3, [r0, #0]
 8019976:	e7ec      	b.n	8019952 <expf+0x36>
 8019978:	42b17180 	.word	0x42b17180
 801997c:	7f800000 	.word	0x7f800000
 8019980:	c2cff1b5 	.word	0xc2cff1b5
 8019984:	00000000 	.word	0x00000000

08019988 <log10f>:
 8019988:	b508      	push	{r3, lr}
 801998a:	ed2d 8b02 	vpush	{d8}
 801998e:	eeb0 8a40 	vmov.f32	s16, s0
 8019992:	f000 ffe3 	bl	801a95c <__ieee754_log10f>
 8019996:	eeb4 8a48 	vcmp.f32	s16, s16
 801999a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801999e:	d60f      	bvs.n	80199c0 <log10f+0x38>
 80199a0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80199a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199a8:	d80a      	bhi.n	80199c0 <log10f+0x38>
 80199aa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80199ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199b2:	d108      	bne.n	80199c6 <log10f+0x3e>
 80199b4:	f001 f95c 	bl	801ac70 <__errno>
 80199b8:	2322      	movs	r3, #34	; 0x22
 80199ba:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80199dc <log10f+0x54>
 80199be:	6003      	str	r3, [r0, #0]
 80199c0:	ecbd 8b02 	vpop	{d8}
 80199c4:	bd08      	pop	{r3, pc}
 80199c6:	f001 f953 	bl	801ac70 <__errno>
 80199ca:	ecbd 8b02 	vpop	{d8}
 80199ce:	2321      	movs	r3, #33	; 0x21
 80199d0:	6003      	str	r3, [r0, #0]
 80199d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80199d6:	4802      	ldr	r0, [pc, #8]	; (80199e0 <log10f+0x58>)
 80199d8:	f001 b916 	b.w	801ac08 <nanf>
 80199dc:	ff800000 	.word	0xff800000
 80199e0:	0801f043 	.word	0x0801f043

080199e4 <sqrtf>:
 80199e4:	b508      	push	{r3, lr}
 80199e6:	ed2d 8b02 	vpush	{d8}
 80199ea:	eeb0 8a40 	vmov.f32	s16, s0
 80199ee:	f001 f80d 	bl	801aa0c <__ieee754_sqrtf>
 80199f2:	eeb4 8a48 	vcmp.f32	s16, s16
 80199f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199fa:	d60c      	bvs.n	8019a16 <sqrtf+0x32>
 80199fc:	eddf 8a07 	vldr	s17, [pc, #28]	; 8019a1c <sqrtf+0x38>
 8019a00:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8019a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a08:	d505      	bpl.n	8019a16 <sqrtf+0x32>
 8019a0a:	f001 f931 	bl	801ac70 <__errno>
 8019a0e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8019a12:	2321      	movs	r3, #33	; 0x21
 8019a14:	6003      	str	r3, [r0, #0]
 8019a16:	ecbd 8b02 	vpop	{d8}
 8019a1a:	bd08      	pop	{r3, pc}
 8019a1c:	00000000 	.word	0x00000000

08019a20 <__ieee754_pow>:
 8019a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a24:	ed2d 8b06 	vpush	{d8-d10}
 8019a28:	b089      	sub	sp, #36	; 0x24
 8019a2a:	ed8d 1b00 	vstr	d1, [sp]
 8019a2e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8019a32:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8019a36:	ea58 0102 	orrs.w	r1, r8, r2
 8019a3a:	ec57 6b10 	vmov	r6, r7, d0
 8019a3e:	d115      	bne.n	8019a6c <__ieee754_pow+0x4c>
 8019a40:	19b3      	adds	r3, r6, r6
 8019a42:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8019a46:	4152      	adcs	r2, r2
 8019a48:	4299      	cmp	r1, r3
 8019a4a:	4b89      	ldr	r3, [pc, #548]	; (8019c70 <__ieee754_pow+0x250>)
 8019a4c:	4193      	sbcs	r3, r2
 8019a4e:	f080 84d2 	bcs.w	801a3f6 <__ieee754_pow+0x9d6>
 8019a52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019a56:	4630      	mov	r0, r6
 8019a58:	4639      	mov	r1, r7
 8019a5a:	f7e6 fc21 	bl	80002a0 <__adddf3>
 8019a5e:	ec41 0b10 	vmov	d0, r0, r1
 8019a62:	b009      	add	sp, #36	; 0x24
 8019a64:	ecbd 8b06 	vpop	{d8-d10}
 8019a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a6c:	4b81      	ldr	r3, [pc, #516]	; (8019c74 <__ieee754_pow+0x254>)
 8019a6e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8019a72:	429c      	cmp	r4, r3
 8019a74:	ee10 aa10 	vmov	sl, s0
 8019a78:	463d      	mov	r5, r7
 8019a7a:	dc06      	bgt.n	8019a8a <__ieee754_pow+0x6a>
 8019a7c:	d101      	bne.n	8019a82 <__ieee754_pow+0x62>
 8019a7e:	2e00      	cmp	r6, #0
 8019a80:	d1e7      	bne.n	8019a52 <__ieee754_pow+0x32>
 8019a82:	4598      	cmp	r8, r3
 8019a84:	dc01      	bgt.n	8019a8a <__ieee754_pow+0x6a>
 8019a86:	d10f      	bne.n	8019aa8 <__ieee754_pow+0x88>
 8019a88:	b172      	cbz	r2, 8019aa8 <__ieee754_pow+0x88>
 8019a8a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8019a8e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8019a92:	ea55 050a 	orrs.w	r5, r5, sl
 8019a96:	d1dc      	bne.n	8019a52 <__ieee754_pow+0x32>
 8019a98:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019a9c:	18db      	adds	r3, r3, r3
 8019a9e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8019aa2:	4152      	adcs	r2, r2
 8019aa4:	429d      	cmp	r5, r3
 8019aa6:	e7d0      	b.n	8019a4a <__ieee754_pow+0x2a>
 8019aa8:	2d00      	cmp	r5, #0
 8019aaa:	da3b      	bge.n	8019b24 <__ieee754_pow+0x104>
 8019aac:	4b72      	ldr	r3, [pc, #456]	; (8019c78 <__ieee754_pow+0x258>)
 8019aae:	4598      	cmp	r8, r3
 8019ab0:	dc51      	bgt.n	8019b56 <__ieee754_pow+0x136>
 8019ab2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8019ab6:	4598      	cmp	r8, r3
 8019ab8:	f340 84ac 	ble.w	801a414 <__ieee754_pow+0x9f4>
 8019abc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019ac0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019ac4:	2b14      	cmp	r3, #20
 8019ac6:	dd0f      	ble.n	8019ae8 <__ieee754_pow+0xc8>
 8019ac8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8019acc:	fa22 f103 	lsr.w	r1, r2, r3
 8019ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8019ad4:	4293      	cmp	r3, r2
 8019ad6:	f040 849d 	bne.w	801a414 <__ieee754_pow+0x9f4>
 8019ada:	f001 0101 	and.w	r1, r1, #1
 8019ade:	f1c1 0302 	rsb	r3, r1, #2
 8019ae2:	9304      	str	r3, [sp, #16]
 8019ae4:	b182      	cbz	r2, 8019b08 <__ieee754_pow+0xe8>
 8019ae6:	e05f      	b.n	8019ba8 <__ieee754_pow+0x188>
 8019ae8:	2a00      	cmp	r2, #0
 8019aea:	d15b      	bne.n	8019ba4 <__ieee754_pow+0x184>
 8019aec:	f1c3 0314 	rsb	r3, r3, #20
 8019af0:	fa48 f103 	asr.w	r1, r8, r3
 8019af4:	fa01 f303 	lsl.w	r3, r1, r3
 8019af8:	4543      	cmp	r3, r8
 8019afa:	f040 8488 	bne.w	801a40e <__ieee754_pow+0x9ee>
 8019afe:	f001 0101 	and.w	r1, r1, #1
 8019b02:	f1c1 0302 	rsb	r3, r1, #2
 8019b06:	9304      	str	r3, [sp, #16]
 8019b08:	4b5c      	ldr	r3, [pc, #368]	; (8019c7c <__ieee754_pow+0x25c>)
 8019b0a:	4598      	cmp	r8, r3
 8019b0c:	d132      	bne.n	8019b74 <__ieee754_pow+0x154>
 8019b0e:	f1b9 0f00 	cmp.w	r9, #0
 8019b12:	f280 8478 	bge.w	801a406 <__ieee754_pow+0x9e6>
 8019b16:	4959      	ldr	r1, [pc, #356]	; (8019c7c <__ieee754_pow+0x25c>)
 8019b18:	4632      	mov	r2, r6
 8019b1a:	463b      	mov	r3, r7
 8019b1c:	2000      	movs	r0, #0
 8019b1e:	f7e6 fe9f 	bl	8000860 <__aeabi_ddiv>
 8019b22:	e79c      	b.n	8019a5e <__ieee754_pow+0x3e>
 8019b24:	2300      	movs	r3, #0
 8019b26:	9304      	str	r3, [sp, #16]
 8019b28:	2a00      	cmp	r2, #0
 8019b2a:	d13d      	bne.n	8019ba8 <__ieee754_pow+0x188>
 8019b2c:	4b51      	ldr	r3, [pc, #324]	; (8019c74 <__ieee754_pow+0x254>)
 8019b2e:	4598      	cmp	r8, r3
 8019b30:	d1ea      	bne.n	8019b08 <__ieee754_pow+0xe8>
 8019b32:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8019b36:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8019b3a:	ea53 030a 	orrs.w	r3, r3, sl
 8019b3e:	f000 845a 	beq.w	801a3f6 <__ieee754_pow+0x9d6>
 8019b42:	4b4f      	ldr	r3, [pc, #316]	; (8019c80 <__ieee754_pow+0x260>)
 8019b44:	429c      	cmp	r4, r3
 8019b46:	dd08      	ble.n	8019b5a <__ieee754_pow+0x13a>
 8019b48:	f1b9 0f00 	cmp.w	r9, #0
 8019b4c:	f2c0 8457 	blt.w	801a3fe <__ieee754_pow+0x9de>
 8019b50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019b54:	e783      	b.n	8019a5e <__ieee754_pow+0x3e>
 8019b56:	2302      	movs	r3, #2
 8019b58:	e7e5      	b.n	8019b26 <__ieee754_pow+0x106>
 8019b5a:	f1b9 0f00 	cmp.w	r9, #0
 8019b5e:	f04f 0000 	mov.w	r0, #0
 8019b62:	f04f 0100 	mov.w	r1, #0
 8019b66:	f6bf af7a 	bge.w	8019a5e <__ieee754_pow+0x3e>
 8019b6a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8019b6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019b72:	e774      	b.n	8019a5e <__ieee754_pow+0x3e>
 8019b74:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8019b78:	d106      	bne.n	8019b88 <__ieee754_pow+0x168>
 8019b7a:	4632      	mov	r2, r6
 8019b7c:	463b      	mov	r3, r7
 8019b7e:	4630      	mov	r0, r6
 8019b80:	4639      	mov	r1, r7
 8019b82:	f7e6 fd43 	bl	800060c <__aeabi_dmul>
 8019b86:	e76a      	b.n	8019a5e <__ieee754_pow+0x3e>
 8019b88:	4b3e      	ldr	r3, [pc, #248]	; (8019c84 <__ieee754_pow+0x264>)
 8019b8a:	4599      	cmp	r9, r3
 8019b8c:	d10c      	bne.n	8019ba8 <__ieee754_pow+0x188>
 8019b8e:	2d00      	cmp	r5, #0
 8019b90:	db0a      	blt.n	8019ba8 <__ieee754_pow+0x188>
 8019b92:	ec47 6b10 	vmov	d0, r6, r7
 8019b96:	b009      	add	sp, #36	; 0x24
 8019b98:	ecbd 8b06 	vpop	{d8-d10}
 8019b9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ba0:	f000 bc6c 	b.w	801a47c <__ieee754_sqrt>
 8019ba4:	2300      	movs	r3, #0
 8019ba6:	9304      	str	r3, [sp, #16]
 8019ba8:	ec47 6b10 	vmov	d0, r6, r7
 8019bac:	f000 ff84 	bl	801aab8 <fabs>
 8019bb0:	ec51 0b10 	vmov	r0, r1, d0
 8019bb4:	f1ba 0f00 	cmp.w	sl, #0
 8019bb8:	d129      	bne.n	8019c0e <__ieee754_pow+0x1ee>
 8019bba:	b124      	cbz	r4, 8019bc6 <__ieee754_pow+0x1a6>
 8019bbc:	4b2f      	ldr	r3, [pc, #188]	; (8019c7c <__ieee754_pow+0x25c>)
 8019bbe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8019bc2:	429a      	cmp	r2, r3
 8019bc4:	d123      	bne.n	8019c0e <__ieee754_pow+0x1ee>
 8019bc6:	f1b9 0f00 	cmp.w	r9, #0
 8019bca:	da05      	bge.n	8019bd8 <__ieee754_pow+0x1b8>
 8019bcc:	4602      	mov	r2, r0
 8019bce:	460b      	mov	r3, r1
 8019bd0:	2000      	movs	r0, #0
 8019bd2:	492a      	ldr	r1, [pc, #168]	; (8019c7c <__ieee754_pow+0x25c>)
 8019bd4:	f7e6 fe44 	bl	8000860 <__aeabi_ddiv>
 8019bd8:	2d00      	cmp	r5, #0
 8019bda:	f6bf af40 	bge.w	8019a5e <__ieee754_pow+0x3e>
 8019bde:	9b04      	ldr	r3, [sp, #16]
 8019be0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8019be4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019be8:	4323      	orrs	r3, r4
 8019bea:	d108      	bne.n	8019bfe <__ieee754_pow+0x1de>
 8019bec:	4602      	mov	r2, r0
 8019bee:	460b      	mov	r3, r1
 8019bf0:	4610      	mov	r0, r2
 8019bf2:	4619      	mov	r1, r3
 8019bf4:	f7e6 fb52 	bl	800029c <__aeabi_dsub>
 8019bf8:	4602      	mov	r2, r0
 8019bfa:	460b      	mov	r3, r1
 8019bfc:	e78f      	b.n	8019b1e <__ieee754_pow+0xfe>
 8019bfe:	9b04      	ldr	r3, [sp, #16]
 8019c00:	2b01      	cmp	r3, #1
 8019c02:	f47f af2c 	bne.w	8019a5e <__ieee754_pow+0x3e>
 8019c06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019c0a:	4619      	mov	r1, r3
 8019c0c:	e727      	b.n	8019a5e <__ieee754_pow+0x3e>
 8019c0e:	0feb      	lsrs	r3, r5, #31
 8019c10:	3b01      	subs	r3, #1
 8019c12:	9306      	str	r3, [sp, #24]
 8019c14:	9a06      	ldr	r2, [sp, #24]
 8019c16:	9b04      	ldr	r3, [sp, #16]
 8019c18:	4313      	orrs	r3, r2
 8019c1a:	d102      	bne.n	8019c22 <__ieee754_pow+0x202>
 8019c1c:	4632      	mov	r2, r6
 8019c1e:	463b      	mov	r3, r7
 8019c20:	e7e6      	b.n	8019bf0 <__ieee754_pow+0x1d0>
 8019c22:	4b19      	ldr	r3, [pc, #100]	; (8019c88 <__ieee754_pow+0x268>)
 8019c24:	4598      	cmp	r8, r3
 8019c26:	f340 80fb 	ble.w	8019e20 <__ieee754_pow+0x400>
 8019c2a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8019c2e:	4598      	cmp	r8, r3
 8019c30:	4b13      	ldr	r3, [pc, #76]	; (8019c80 <__ieee754_pow+0x260>)
 8019c32:	dd0c      	ble.n	8019c4e <__ieee754_pow+0x22e>
 8019c34:	429c      	cmp	r4, r3
 8019c36:	dc0f      	bgt.n	8019c58 <__ieee754_pow+0x238>
 8019c38:	f1b9 0f00 	cmp.w	r9, #0
 8019c3c:	da0f      	bge.n	8019c5e <__ieee754_pow+0x23e>
 8019c3e:	2000      	movs	r0, #0
 8019c40:	b009      	add	sp, #36	; 0x24
 8019c42:	ecbd 8b06 	vpop	{d8-d10}
 8019c46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c4a:	f000 bf09 	b.w	801aa60 <__math_oflow>
 8019c4e:	429c      	cmp	r4, r3
 8019c50:	dbf2      	blt.n	8019c38 <__ieee754_pow+0x218>
 8019c52:	4b0a      	ldr	r3, [pc, #40]	; (8019c7c <__ieee754_pow+0x25c>)
 8019c54:	429c      	cmp	r4, r3
 8019c56:	dd19      	ble.n	8019c8c <__ieee754_pow+0x26c>
 8019c58:	f1b9 0f00 	cmp.w	r9, #0
 8019c5c:	dcef      	bgt.n	8019c3e <__ieee754_pow+0x21e>
 8019c5e:	2000      	movs	r0, #0
 8019c60:	b009      	add	sp, #36	; 0x24
 8019c62:	ecbd 8b06 	vpop	{d8-d10}
 8019c66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c6a:	f000 bef0 	b.w	801aa4e <__math_uflow>
 8019c6e:	bf00      	nop
 8019c70:	fff00000 	.word	0xfff00000
 8019c74:	7ff00000 	.word	0x7ff00000
 8019c78:	433fffff 	.word	0x433fffff
 8019c7c:	3ff00000 	.word	0x3ff00000
 8019c80:	3fefffff 	.word	0x3fefffff
 8019c84:	3fe00000 	.word	0x3fe00000
 8019c88:	41e00000 	.word	0x41e00000
 8019c8c:	4b60      	ldr	r3, [pc, #384]	; (8019e10 <__ieee754_pow+0x3f0>)
 8019c8e:	2200      	movs	r2, #0
 8019c90:	f7e6 fb04 	bl	800029c <__aeabi_dsub>
 8019c94:	a354      	add	r3, pc, #336	; (adr r3, 8019de8 <__ieee754_pow+0x3c8>)
 8019c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c9a:	4604      	mov	r4, r0
 8019c9c:	460d      	mov	r5, r1
 8019c9e:	f7e6 fcb5 	bl	800060c <__aeabi_dmul>
 8019ca2:	a353      	add	r3, pc, #332	; (adr r3, 8019df0 <__ieee754_pow+0x3d0>)
 8019ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ca8:	4606      	mov	r6, r0
 8019caa:	460f      	mov	r7, r1
 8019cac:	4620      	mov	r0, r4
 8019cae:	4629      	mov	r1, r5
 8019cb0:	f7e6 fcac 	bl	800060c <__aeabi_dmul>
 8019cb4:	4b57      	ldr	r3, [pc, #348]	; (8019e14 <__ieee754_pow+0x3f4>)
 8019cb6:	4682      	mov	sl, r0
 8019cb8:	468b      	mov	fp, r1
 8019cba:	2200      	movs	r2, #0
 8019cbc:	4620      	mov	r0, r4
 8019cbe:	4629      	mov	r1, r5
 8019cc0:	f7e6 fca4 	bl	800060c <__aeabi_dmul>
 8019cc4:	4602      	mov	r2, r0
 8019cc6:	460b      	mov	r3, r1
 8019cc8:	a14b      	add	r1, pc, #300	; (adr r1, 8019df8 <__ieee754_pow+0x3d8>)
 8019cca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cce:	f7e6 fae5 	bl	800029c <__aeabi_dsub>
 8019cd2:	4622      	mov	r2, r4
 8019cd4:	462b      	mov	r3, r5
 8019cd6:	f7e6 fc99 	bl	800060c <__aeabi_dmul>
 8019cda:	4602      	mov	r2, r0
 8019cdc:	460b      	mov	r3, r1
 8019cde:	2000      	movs	r0, #0
 8019ce0:	494d      	ldr	r1, [pc, #308]	; (8019e18 <__ieee754_pow+0x3f8>)
 8019ce2:	f7e6 fadb 	bl	800029c <__aeabi_dsub>
 8019ce6:	4622      	mov	r2, r4
 8019ce8:	4680      	mov	r8, r0
 8019cea:	4689      	mov	r9, r1
 8019cec:	462b      	mov	r3, r5
 8019cee:	4620      	mov	r0, r4
 8019cf0:	4629      	mov	r1, r5
 8019cf2:	f7e6 fc8b 	bl	800060c <__aeabi_dmul>
 8019cf6:	4602      	mov	r2, r0
 8019cf8:	460b      	mov	r3, r1
 8019cfa:	4640      	mov	r0, r8
 8019cfc:	4649      	mov	r1, r9
 8019cfe:	f7e6 fc85 	bl	800060c <__aeabi_dmul>
 8019d02:	a33f      	add	r3, pc, #252	; (adr r3, 8019e00 <__ieee754_pow+0x3e0>)
 8019d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d08:	f7e6 fc80 	bl	800060c <__aeabi_dmul>
 8019d0c:	4602      	mov	r2, r0
 8019d0e:	460b      	mov	r3, r1
 8019d10:	4650      	mov	r0, sl
 8019d12:	4659      	mov	r1, fp
 8019d14:	f7e6 fac2 	bl	800029c <__aeabi_dsub>
 8019d18:	4602      	mov	r2, r0
 8019d1a:	460b      	mov	r3, r1
 8019d1c:	4680      	mov	r8, r0
 8019d1e:	4689      	mov	r9, r1
 8019d20:	4630      	mov	r0, r6
 8019d22:	4639      	mov	r1, r7
 8019d24:	f7e6 fabc 	bl	80002a0 <__adddf3>
 8019d28:	2000      	movs	r0, #0
 8019d2a:	4632      	mov	r2, r6
 8019d2c:	463b      	mov	r3, r7
 8019d2e:	4604      	mov	r4, r0
 8019d30:	460d      	mov	r5, r1
 8019d32:	f7e6 fab3 	bl	800029c <__aeabi_dsub>
 8019d36:	4602      	mov	r2, r0
 8019d38:	460b      	mov	r3, r1
 8019d3a:	4640      	mov	r0, r8
 8019d3c:	4649      	mov	r1, r9
 8019d3e:	f7e6 faad 	bl	800029c <__aeabi_dsub>
 8019d42:	9b04      	ldr	r3, [sp, #16]
 8019d44:	9a06      	ldr	r2, [sp, #24]
 8019d46:	3b01      	subs	r3, #1
 8019d48:	4313      	orrs	r3, r2
 8019d4a:	4682      	mov	sl, r0
 8019d4c:	468b      	mov	fp, r1
 8019d4e:	f040 81e7 	bne.w	801a120 <__ieee754_pow+0x700>
 8019d52:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8019e08 <__ieee754_pow+0x3e8>
 8019d56:	eeb0 8a47 	vmov.f32	s16, s14
 8019d5a:	eef0 8a67 	vmov.f32	s17, s15
 8019d5e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8019d62:	2600      	movs	r6, #0
 8019d64:	4632      	mov	r2, r6
 8019d66:	463b      	mov	r3, r7
 8019d68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019d6c:	f7e6 fa96 	bl	800029c <__aeabi_dsub>
 8019d70:	4622      	mov	r2, r4
 8019d72:	462b      	mov	r3, r5
 8019d74:	f7e6 fc4a 	bl	800060c <__aeabi_dmul>
 8019d78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019d7c:	4680      	mov	r8, r0
 8019d7e:	4689      	mov	r9, r1
 8019d80:	4650      	mov	r0, sl
 8019d82:	4659      	mov	r1, fp
 8019d84:	f7e6 fc42 	bl	800060c <__aeabi_dmul>
 8019d88:	4602      	mov	r2, r0
 8019d8a:	460b      	mov	r3, r1
 8019d8c:	4640      	mov	r0, r8
 8019d8e:	4649      	mov	r1, r9
 8019d90:	f7e6 fa86 	bl	80002a0 <__adddf3>
 8019d94:	4632      	mov	r2, r6
 8019d96:	463b      	mov	r3, r7
 8019d98:	4680      	mov	r8, r0
 8019d9a:	4689      	mov	r9, r1
 8019d9c:	4620      	mov	r0, r4
 8019d9e:	4629      	mov	r1, r5
 8019da0:	f7e6 fc34 	bl	800060c <__aeabi_dmul>
 8019da4:	460b      	mov	r3, r1
 8019da6:	4604      	mov	r4, r0
 8019da8:	460d      	mov	r5, r1
 8019daa:	4602      	mov	r2, r0
 8019dac:	4649      	mov	r1, r9
 8019dae:	4640      	mov	r0, r8
 8019db0:	f7e6 fa76 	bl	80002a0 <__adddf3>
 8019db4:	4b19      	ldr	r3, [pc, #100]	; (8019e1c <__ieee754_pow+0x3fc>)
 8019db6:	4299      	cmp	r1, r3
 8019db8:	ec45 4b19 	vmov	d9, r4, r5
 8019dbc:	4606      	mov	r6, r0
 8019dbe:	460f      	mov	r7, r1
 8019dc0:	468b      	mov	fp, r1
 8019dc2:	f340 82f1 	ble.w	801a3a8 <__ieee754_pow+0x988>
 8019dc6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8019dca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8019dce:	4303      	orrs	r3, r0
 8019dd0:	f000 81e4 	beq.w	801a19c <__ieee754_pow+0x77c>
 8019dd4:	ec51 0b18 	vmov	r0, r1, d8
 8019dd8:	2200      	movs	r2, #0
 8019dda:	2300      	movs	r3, #0
 8019ddc:	f7e6 fe88 	bl	8000af0 <__aeabi_dcmplt>
 8019de0:	3800      	subs	r0, #0
 8019de2:	bf18      	it	ne
 8019de4:	2001      	movne	r0, #1
 8019de6:	e72b      	b.n	8019c40 <__ieee754_pow+0x220>
 8019de8:	60000000 	.word	0x60000000
 8019dec:	3ff71547 	.word	0x3ff71547
 8019df0:	f85ddf44 	.word	0xf85ddf44
 8019df4:	3e54ae0b 	.word	0x3e54ae0b
 8019df8:	55555555 	.word	0x55555555
 8019dfc:	3fd55555 	.word	0x3fd55555
 8019e00:	652b82fe 	.word	0x652b82fe
 8019e04:	3ff71547 	.word	0x3ff71547
 8019e08:	00000000 	.word	0x00000000
 8019e0c:	bff00000 	.word	0xbff00000
 8019e10:	3ff00000 	.word	0x3ff00000
 8019e14:	3fd00000 	.word	0x3fd00000
 8019e18:	3fe00000 	.word	0x3fe00000
 8019e1c:	408fffff 	.word	0x408fffff
 8019e20:	4bd5      	ldr	r3, [pc, #852]	; (801a178 <__ieee754_pow+0x758>)
 8019e22:	402b      	ands	r3, r5
 8019e24:	2200      	movs	r2, #0
 8019e26:	b92b      	cbnz	r3, 8019e34 <__ieee754_pow+0x414>
 8019e28:	4bd4      	ldr	r3, [pc, #848]	; (801a17c <__ieee754_pow+0x75c>)
 8019e2a:	f7e6 fbef 	bl	800060c <__aeabi_dmul>
 8019e2e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8019e32:	460c      	mov	r4, r1
 8019e34:	1523      	asrs	r3, r4, #20
 8019e36:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019e3a:	4413      	add	r3, r2
 8019e3c:	9305      	str	r3, [sp, #20]
 8019e3e:	4bd0      	ldr	r3, [pc, #832]	; (801a180 <__ieee754_pow+0x760>)
 8019e40:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8019e44:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8019e48:	429c      	cmp	r4, r3
 8019e4a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019e4e:	dd08      	ble.n	8019e62 <__ieee754_pow+0x442>
 8019e50:	4bcc      	ldr	r3, [pc, #816]	; (801a184 <__ieee754_pow+0x764>)
 8019e52:	429c      	cmp	r4, r3
 8019e54:	f340 8162 	ble.w	801a11c <__ieee754_pow+0x6fc>
 8019e58:	9b05      	ldr	r3, [sp, #20]
 8019e5a:	3301      	adds	r3, #1
 8019e5c:	9305      	str	r3, [sp, #20]
 8019e5e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8019e62:	2400      	movs	r4, #0
 8019e64:	00e3      	lsls	r3, r4, #3
 8019e66:	9307      	str	r3, [sp, #28]
 8019e68:	4bc7      	ldr	r3, [pc, #796]	; (801a188 <__ieee754_pow+0x768>)
 8019e6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019e6e:	ed93 7b00 	vldr	d7, [r3]
 8019e72:	4629      	mov	r1, r5
 8019e74:	ec53 2b17 	vmov	r2, r3, d7
 8019e78:	eeb0 9a47 	vmov.f32	s18, s14
 8019e7c:	eef0 9a67 	vmov.f32	s19, s15
 8019e80:	4682      	mov	sl, r0
 8019e82:	f7e6 fa0b 	bl	800029c <__aeabi_dsub>
 8019e86:	4652      	mov	r2, sl
 8019e88:	4606      	mov	r6, r0
 8019e8a:	460f      	mov	r7, r1
 8019e8c:	462b      	mov	r3, r5
 8019e8e:	ec51 0b19 	vmov	r0, r1, d9
 8019e92:	f7e6 fa05 	bl	80002a0 <__adddf3>
 8019e96:	4602      	mov	r2, r0
 8019e98:	460b      	mov	r3, r1
 8019e9a:	2000      	movs	r0, #0
 8019e9c:	49bb      	ldr	r1, [pc, #748]	; (801a18c <__ieee754_pow+0x76c>)
 8019e9e:	f7e6 fcdf 	bl	8000860 <__aeabi_ddiv>
 8019ea2:	ec41 0b1a 	vmov	d10, r0, r1
 8019ea6:	4602      	mov	r2, r0
 8019ea8:	460b      	mov	r3, r1
 8019eaa:	4630      	mov	r0, r6
 8019eac:	4639      	mov	r1, r7
 8019eae:	f7e6 fbad 	bl	800060c <__aeabi_dmul>
 8019eb2:	2300      	movs	r3, #0
 8019eb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019eb8:	9302      	str	r3, [sp, #8]
 8019eba:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8019ebe:	46ab      	mov	fp, r5
 8019ec0:	106d      	asrs	r5, r5, #1
 8019ec2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8019ec6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8019eca:	ec41 0b18 	vmov	d8, r0, r1
 8019ece:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8019ed2:	2200      	movs	r2, #0
 8019ed4:	4640      	mov	r0, r8
 8019ed6:	4649      	mov	r1, r9
 8019ed8:	4614      	mov	r4, r2
 8019eda:	461d      	mov	r5, r3
 8019edc:	f7e6 fb96 	bl	800060c <__aeabi_dmul>
 8019ee0:	4602      	mov	r2, r0
 8019ee2:	460b      	mov	r3, r1
 8019ee4:	4630      	mov	r0, r6
 8019ee6:	4639      	mov	r1, r7
 8019ee8:	f7e6 f9d8 	bl	800029c <__aeabi_dsub>
 8019eec:	ec53 2b19 	vmov	r2, r3, d9
 8019ef0:	4606      	mov	r6, r0
 8019ef2:	460f      	mov	r7, r1
 8019ef4:	4620      	mov	r0, r4
 8019ef6:	4629      	mov	r1, r5
 8019ef8:	f7e6 f9d0 	bl	800029c <__aeabi_dsub>
 8019efc:	4602      	mov	r2, r0
 8019efe:	460b      	mov	r3, r1
 8019f00:	4650      	mov	r0, sl
 8019f02:	4659      	mov	r1, fp
 8019f04:	f7e6 f9ca 	bl	800029c <__aeabi_dsub>
 8019f08:	4642      	mov	r2, r8
 8019f0a:	464b      	mov	r3, r9
 8019f0c:	f7e6 fb7e 	bl	800060c <__aeabi_dmul>
 8019f10:	4602      	mov	r2, r0
 8019f12:	460b      	mov	r3, r1
 8019f14:	4630      	mov	r0, r6
 8019f16:	4639      	mov	r1, r7
 8019f18:	f7e6 f9c0 	bl	800029c <__aeabi_dsub>
 8019f1c:	ec53 2b1a 	vmov	r2, r3, d10
 8019f20:	f7e6 fb74 	bl	800060c <__aeabi_dmul>
 8019f24:	ec53 2b18 	vmov	r2, r3, d8
 8019f28:	ec41 0b19 	vmov	d9, r0, r1
 8019f2c:	ec51 0b18 	vmov	r0, r1, d8
 8019f30:	f7e6 fb6c 	bl	800060c <__aeabi_dmul>
 8019f34:	a37c      	add	r3, pc, #496	; (adr r3, 801a128 <__ieee754_pow+0x708>)
 8019f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f3a:	4604      	mov	r4, r0
 8019f3c:	460d      	mov	r5, r1
 8019f3e:	f7e6 fb65 	bl	800060c <__aeabi_dmul>
 8019f42:	a37b      	add	r3, pc, #492	; (adr r3, 801a130 <__ieee754_pow+0x710>)
 8019f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f48:	f7e6 f9aa 	bl	80002a0 <__adddf3>
 8019f4c:	4622      	mov	r2, r4
 8019f4e:	462b      	mov	r3, r5
 8019f50:	f7e6 fb5c 	bl	800060c <__aeabi_dmul>
 8019f54:	a378      	add	r3, pc, #480	; (adr r3, 801a138 <__ieee754_pow+0x718>)
 8019f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f5a:	f7e6 f9a1 	bl	80002a0 <__adddf3>
 8019f5e:	4622      	mov	r2, r4
 8019f60:	462b      	mov	r3, r5
 8019f62:	f7e6 fb53 	bl	800060c <__aeabi_dmul>
 8019f66:	a376      	add	r3, pc, #472	; (adr r3, 801a140 <__ieee754_pow+0x720>)
 8019f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f6c:	f7e6 f998 	bl	80002a0 <__adddf3>
 8019f70:	4622      	mov	r2, r4
 8019f72:	462b      	mov	r3, r5
 8019f74:	f7e6 fb4a 	bl	800060c <__aeabi_dmul>
 8019f78:	a373      	add	r3, pc, #460	; (adr r3, 801a148 <__ieee754_pow+0x728>)
 8019f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f7e:	f7e6 f98f 	bl	80002a0 <__adddf3>
 8019f82:	4622      	mov	r2, r4
 8019f84:	462b      	mov	r3, r5
 8019f86:	f7e6 fb41 	bl	800060c <__aeabi_dmul>
 8019f8a:	a371      	add	r3, pc, #452	; (adr r3, 801a150 <__ieee754_pow+0x730>)
 8019f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f90:	f7e6 f986 	bl	80002a0 <__adddf3>
 8019f94:	4622      	mov	r2, r4
 8019f96:	4606      	mov	r6, r0
 8019f98:	460f      	mov	r7, r1
 8019f9a:	462b      	mov	r3, r5
 8019f9c:	4620      	mov	r0, r4
 8019f9e:	4629      	mov	r1, r5
 8019fa0:	f7e6 fb34 	bl	800060c <__aeabi_dmul>
 8019fa4:	4602      	mov	r2, r0
 8019fa6:	460b      	mov	r3, r1
 8019fa8:	4630      	mov	r0, r6
 8019faa:	4639      	mov	r1, r7
 8019fac:	f7e6 fb2e 	bl	800060c <__aeabi_dmul>
 8019fb0:	4642      	mov	r2, r8
 8019fb2:	4604      	mov	r4, r0
 8019fb4:	460d      	mov	r5, r1
 8019fb6:	464b      	mov	r3, r9
 8019fb8:	ec51 0b18 	vmov	r0, r1, d8
 8019fbc:	f7e6 f970 	bl	80002a0 <__adddf3>
 8019fc0:	ec53 2b19 	vmov	r2, r3, d9
 8019fc4:	f7e6 fb22 	bl	800060c <__aeabi_dmul>
 8019fc8:	4622      	mov	r2, r4
 8019fca:	462b      	mov	r3, r5
 8019fcc:	f7e6 f968 	bl	80002a0 <__adddf3>
 8019fd0:	4642      	mov	r2, r8
 8019fd2:	4682      	mov	sl, r0
 8019fd4:	468b      	mov	fp, r1
 8019fd6:	464b      	mov	r3, r9
 8019fd8:	4640      	mov	r0, r8
 8019fda:	4649      	mov	r1, r9
 8019fdc:	f7e6 fb16 	bl	800060c <__aeabi_dmul>
 8019fe0:	4b6b      	ldr	r3, [pc, #428]	; (801a190 <__ieee754_pow+0x770>)
 8019fe2:	2200      	movs	r2, #0
 8019fe4:	4606      	mov	r6, r0
 8019fe6:	460f      	mov	r7, r1
 8019fe8:	f7e6 f95a 	bl	80002a0 <__adddf3>
 8019fec:	4652      	mov	r2, sl
 8019fee:	465b      	mov	r3, fp
 8019ff0:	f7e6 f956 	bl	80002a0 <__adddf3>
 8019ff4:	2000      	movs	r0, #0
 8019ff6:	4604      	mov	r4, r0
 8019ff8:	460d      	mov	r5, r1
 8019ffa:	4602      	mov	r2, r0
 8019ffc:	460b      	mov	r3, r1
 8019ffe:	4640      	mov	r0, r8
 801a000:	4649      	mov	r1, r9
 801a002:	f7e6 fb03 	bl	800060c <__aeabi_dmul>
 801a006:	4b62      	ldr	r3, [pc, #392]	; (801a190 <__ieee754_pow+0x770>)
 801a008:	4680      	mov	r8, r0
 801a00a:	4689      	mov	r9, r1
 801a00c:	2200      	movs	r2, #0
 801a00e:	4620      	mov	r0, r4
 801a010:	4629      	mov	r1, r5
 801a012:	f7e6 f943 	bl	800029c <__aeabi_dsub>
 801a016:	4632      	mov	r2, r6
 801a018:	463b      	mov	r3, r7
 801a01a:	f7e6 f93f 	bl	800029c <__aeabi_dsub>
 801a01e:	4602      	mov	r2, r0
 801a020:	460b      	mov	r3, r1
 801a022:	4650      	mov	r0, sl
 801a024:	4659      	mov	r1, fp
 801a026:	f7e6 f939 	bl	800029c <__aeabi_dsub>
 801a02a:	ec53 2b18 	vmov	r2, r3, d8
 801a02e:	f7e6 faed 	bl	800060c <__aeabi_dmul>
 801a032:	4622      	mov	r2, r4
 801a034:	4606      	mov	r6, r0
 801a036:	460f      	mov	r7, r1
 801a038:	462b      	mov	r3, r5
 801a03a:	ec51 0b19 	vmov	r0, r1, d9
 801a03e:	f7e6 fae5 	bl	800060c <__aeabi_dmul>
 801a042:	4602      	mov	r2, r0
 801a044:	460b      	mov	r3, r1
 801a046:	4630      	mov	r0, r6
 801a048:	4639      	mov	r1, r7
 801a04a:	f7e6 f929 	bl	80002a0 <__adddf3>
 801a04e:	4606      	mov	r6, r0
 801a050:	460f      	mov	r7, r1
 801a052:	4602      	mov	r2, r0
 801a054:	460b      	mov	r3, r1
 801a056:	4640      	mov	r0, r8
 801a058:	4649      	mov	r1, r9
 801a05a:	f7e6 f921 	bl	80002a0 <__adddf3>
 801a05e:	a33e      	add	r3, pc, #248	; (adr r3, 801a158 <__ieee754_pow+0x738>)
 801a060:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a064:	2000      	movs	r0, #0
 801a066:	4604      	mov	r4, r0
 801a068:	460d      	mov	r5, r1
 801a06a:	f7e6 facf 	bl	800060c <__aeabi_dmul>
 801a06e:	4642      	mov	r2, r8
 801a070:	ec41 0b18 	vmov	d8, r0, r1
 801a074:	464b      	mov	r3, r9
 801a076:	4620      	mov	r0, r4
 801a078:	4629      	mov	r1, r5
 801a07a:	f7e6 f90f 	bl	800029c <__aeabi_dsub>
 801a07e:	4602      	mov	r2, r0
 801a080:	460b      	mov	r3, r1
 801a082:	4630      	mov	r0, r6
 801a084:	4639      	mov	r1, r7
 801a086:	f7e6 f909 	bl	800029c <__aeabi_dsub>
 801a08a:	a335      	add	r3, pc, #212	; (adr r3, 801a160 <__ieee754_pow+0x740>)
 801a08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a090:	f7e6 fabc 	bl	800060c <__aeabi_dmul>
 801a094:	a334      	add	r3, pc, #208	; (adr r3, 801a168 <__ieee754_pow+0x748>)
 801a096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a09a:	4606      	mov	r6, r0
 801a09c:	460f      	mov	r7, r1
 801a09e:	4620      	mov	r0, r4
 801a0a0:	4629      	mov	r1, r5
 801a0a2:	f7e6 fab3 	bl	800060c <__aeabi_dmul>
 801a0a6:	4602      	mov	r2, r0
 801a0a8:	460b      	mov	r3, r1
 801a0aa:	4630      	mov	r0, r6
 801a0ac:	4639      	mov	r1, r7
 801a0ae:	f7e6 f8f7 	bl	80002a0 <__adddf3>
 801a0b2:	9a07      	ldr	r2, [sp, #28]
 801a0b4:	4b37      	ldr	r3, [pc, #220]	; (801a194 <__ieee754_pow+0x774>)
 801a0b6:	4413      	add	r3, r2
 801a0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0bc:	f7e6 f8f0 	bl	80002a0 <__adddf3>
 801a0c0:	4682      	mov	sl, r0
 801a0c2:	9805      	ldr	r0, [sp, #20]
 801a0c4:	468b      	mov	fp, r1
 801a0c6:	f7e6 fa37 	bl	8000538 <__aeabi_i2d>
 801a0ca:	9a07      	ldr	r2, [sp, #28]
 801a0cc:	4b32      	ldr	r3, [pc, #200]	; (801a198 <__ieee754_pow+0x778>)
 801a0ce:	4413      	add	r3, r2
 801a0d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a0d4:	4606      	mov	r6, r0
 801a0d6:	460f      	mov	r7, r1
 801a0d8:	4652      	mov	r2, sl
 801a0da:	465b      	mov	r3, fp
 801a0dc:	ec51 0b18 	vmov	r0, r1, d8
 801a0e0:	f7e6 f8de 	bl	80002a0 <__adddf3>
 801a0e4:	4642      	mov	r2, r8
 801a0e6:	464b      	mov	r3, r9
 801a0e8:	f7e6 f8da 	bl	80002a0 <__adddf3>
 801a0ec:	4632      	mov	r2, r6
 801a0ee:	463b      	mov	r3, r7
 801a0f0:	f7e6 f8d6 	bl	80002a0 <__adddf3>
 801a0f4:	2000      	movs	r0, #0
 801a0f6:	4632      	mov	r2, r6
 801a0f8:	463b      	mov	r3, r7
 801a0fa:	4604      	mov	r4, r0
 801a0fc:	460d      	mov	r5, r1
 801a0fe:	f7e6 f8cd 	bl	800029c <__aeabi_dsub>
 801a102:	4642      	mov	r2, r8
 801a104:	464b      	mov	r3, r9
 801a106:	f7e6 f8c9 	bl	800029c <__aeabi_dsub>
 801a10a:	ec53 2b18 	vmov	r2, r3, d8
 801a10e:	f7e6 f8c5 	bl	800029c <__aeabi_dsub>
 801a112:	4602      	mov	r2, r0
 801a114:	460b      	mov	r3, r1
 801a116:	4650      	mov	r0, sl
 801a118:	4659      	mov	r1, fp
 801a11a:	e610      	b.n	8019d3e <__ieee754_pow+0x31e>
 801a11c:	2401      	movs	r4, #1
 801a11e:	e6a1      	b.n	8019e64 <__ieee754_pow+0x444>
 801a120:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801a170 <__ieee754_pow+0x750>
 801a124:	e617      	b.n	8019d56 <__ieee754_pow+0x336>
 801a126:	bf00      	nop
 801a128:	4a454eef 	.word	0x4a454eef
 801a12c:	3fca7e28 	.word	0x3fca7e28
 801a130:	93c9db65 	.word	0x93c9db65
 801a134:	3fcd864a 	.word	0x3fcd864a
 801a138:	a91d4101 	.word	0xa91d4101
 801a13c:	3fd17460 	.word	0x3fd17460
 801a140:	518f264d 	.word	0x518f264d
 801a144:	3fd55555 	.word	0x3fd55555
 801a148:	db6fabff 	.word	0xdb6fabff
 801a14c:	3fdb6db6 	.word	0x3fdb6db6
 801a150:	33333303 	.word	0x33333303
 801a154:	3fe33333 	.word	0x3fe33333
 801a158:	e0000000 	.word	0xe0000000
 801a15c:	3feec709 	.word	0x3feec709
 801a160:	dc3a03fd 	.word	0xdc3a03fd
 801a164:	3feec709 	.word	0x3feec709
 801a168:	145b01f5 	.word	0x145b01f5
 801a16c:	be3e2fe0 	.word	0xbe3e2fe0
 801a170:	00000000 	.word	0x00000000
 801a174:	3ff00000 	.word	0x3ff00000
 801a178:	7ff00000 	.word	0x7ff00000
 801a17c:	43400000 	.word	0x43400000
 801a180:	0003988e 	.word	0x0003988e
 801a184:	000bb679 	.word	0x000bb679
 801a188:	0801efc0 	.word	0x0801efc0
 801a18c:	3ff00000 	.word	0x3ff00000
 801a190:	40080000 	.word	0x40080000
 801a194:	0801efe0 	.word	0x0801efe0
 801a198:	0801efd0 	.word	0x0801efd0
 801a19c:	a3b5      	add	r3, pc, #724	; (adr r3, 801a474 <__ieee754_pow+0xa54>)
 801a19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1a2:	4640      	mov	r0, r8
 801a1a4:	4649      	mov	r1, r9
 801a1a6:	f7e6 f87b 	bl	80002a0 <__adddf3>
 801a1aa:	4622      	mov	r2, r4
 801a1ac:	ec41 0b1a 	vmov	d10, r0, r1
 801a1b0:	462b      	mov	r3, r5
 801a1b2:	4630      	mov	r0, r6
 801a1b4:	4639      	mov	r1, r7
 801a1b6:	f7e6 f871 	bl	800029c <__aeabi_dsub>
 801a1ba:	4602      	mov	r2, r0
 801a1bc:	460b      	mov	r3, r1
 801a1be:	ec51 0b1a 	vmov	r0, r1, d10
 801a1c2:	f7e6 fcb3 	bl	8000b2c <__aeabi_dcmpgt>
 801a1c6:	2800      	cmp	r0, #0
 801a1c8:	f47f ae04 	bne.w	8019dd4 <__ieee754_pow+0x3b4>
 801a1cc:	4aa4      	ldr	r2, [pc, #656]	; (801a460 <__ieee754_pow+0xa40>)
 801a1ce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a1d2:	4293      	cmp	r3, r2
 801a1d4:	f340 8108 	ble.w	801a3e8 <__ieee754_pow+0x9c8>
 801a1d8:	151b      	asrs	r3, r3, #20
 801a1da:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801a1de:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801a1e2:	fa4a f303 	asr.w	r3, sl, r3
 801a1e6:	445b      	add	r3, fp
 801a1e8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801a1ec:	4e9d      	ldr	r6, [pc, #628]	; (801a464 <__ieee754_pow+0xa44>)
 801a1ee:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801a1f2:	4116      	asrs	r6, r2
 801a1f4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801a1f8:	2000      	movs	r0, #0
 801a1fa:	ea23 0106 	bic.w	r1, r3, r6
 801a1fe:	f1c2 0214 	rsb	r2, r2, #20
 801a202:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801a206:	fa4a fa02 	asr.w	sl, sl, r2
 801a20a:	f1bb 0f00 	cmp.w	fp, #0
 801a20e:	4602      	mov	r2, r0
 801a210:	460b      	mov	r3, r1
 801a212:	4620      	mov	r0, r4
 801a214:	4629      	mov	r1, r5
 801a216:	bfb8      	it	lt
 801a218:	f1ca 0a00 	rsblt	sl, sl, #0
 801a21c:	f7e6 f83e 	bl	800029c <__aeabi_dsub>
 801a220:	ec41 0b19 	vmov	d9, r0, r1
 801a224:	4642      	mov	r2, r8
 801a226:	464b      	mov	r3, r9
 801a228:	ec51 0b19 	vmov	r0, r1, d9
 801a22c:	f7e6 f838 	bl	80002a0 <__adddf3>
 801a230:	a37b      	add	r3, pc, #492	; (adr r3, 801a420 <__ieee754_pow+0xa00>)
 801a232:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a236:	2000      	movs	r0, #0
 801a238:	4604      	mov	r4, r0
 801a23a:	460d      	mov	r5, r1
 801a23c:	f7e6 f9e6 	bl	800060c <__aeabi_dmul>
 801a240:	ec53 2b19 	vmov	r2, r3, d9
 801a244:	4606      	mov	r6, r0
 801a246:	460f      	mov	r7, r1
 801a248:	4620      	mov	r0, r4
 801a24a:	4629      	mov	r1, r5
 801a24c:	f7e6 f826 	bl	800029c <__aeabi_dsub>
 801a250:	4602      	mov	r2, r0
 801a252:	460b      	mov	r3, r1
 801a254:	4640      	mov	r0, r8
 801a256:	4649      	mov	r1, r9
 801a258:	f7e6 f820 	bl	800029c <__aeabi_dsub>
 801a25c:	a372      	add	r3, pc, #456	; (adr r3, 801a428 <__ieee754_pow+0xa08>)
 801a25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a262:	f7e6 f9d3 	bl	800060c <__aeabi_dmul>
 801a266:	a372      	add	r3, pc, #456	; (adr r3, 801a430 <__ieee754_pow+0xa10>)
 801a268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a26c:	4680      	mov	r8, r0
 801a26e:	4689      	mov	r9, r1
 801a270:	4620      	mov	r0, r4
 801a272:	4629      	mov	r1, r5
 801a274:	f7e6 f9ca 	bl	800060c <__aeabi_dmul>
 801a278:	4602      	mov	r2, r0
 801a27a:	460b      	mov	r3, r1
 801a27c:	4640      	mov	r0, r8
 801a27e:	4649      	mov	r1, r9
 801a280:	f7e6 f80e 	bl	80002a0 <__adddf3>
 801a284:	4604      	mov	r4, r0
 801a286:	460d      	mov	r5, r1
 801a288:	4602      	mov	r2, r0
 801a28a:	460b      	mov	r3, r1
 801a28c:	4630      	mov	r0, r6
 801a28e:	4639      	mov	r1, r7
 801a290:	f7e6 f806 	bl	80002a0 <__adddf3>
 801a294:	4632      	mov	r2, r6
 801a296:	463b      	mov	r3, r7
 801a298:	4680      	mov	r8, r0
 801a29a:	4689      	mov	r9, r1
 801a29c:	f7e5 fffe 	bl	800029c <__aeabi_dsub>
 801a2a0:	4602      	mov	r2, r0
 801a2a2:	460b      	mov	r3, r1
 801a2a4:	4620      	mov	r0, r4
 801a2a6:	4629      	mov	r1, r5
 801a2a8:	f7e5 fff8 	bl	800029c <__aeabi_dsub>
 801a2ac:	4642      	mov	r2, r8
 801a2ae:	4606      	mov	r6, r0
 801a2b0:	460f      	mov	r7, r1
 801a2b2:	464b      	mov	r3, r9
 801a2b4:	4640      	mov	r0, r8
 801a2b6:	4649      	mov	r1, r9
 801a2b8:	f7e6 f9a8 	bl	800060c <__aeabi_dmul>
 801a2bc:	a35e      	add	r3, pc, #376	; (adr r3, 801a438 <__ieee754_pow+0xa18>)
 801a2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2c2:	4604      	mov	r4, r0
 801a2c4:	460d      	mov	r5, r1
 801a2c6:	f7e6 f9a1 	bl	800060c <__aeabi_dmul>
 801a2ca:	a35d      	add	r3, pc, #372	; (adr r3, 801a440 <__ieee754_pow+0xa20>)
 801a2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2d0:	f7e5 ffe4 	bl	800029c <__aeabi_dsub>
 801a2d4:	4622      	mov	r2, r4
 801a2d6:	462b      	mov	r3, r5
 801a2d8:	f7e6 f998 	bl	800060c <__aeabi_dmul>
 801a2dc:	a35a      	add	r3, pc, #360	; (adr r3, 801a448 <__ieee754_pow+0xa28>)
 801a2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2e2:	f7e5 ffdd 	bl	80002a0 <__adddf3>
 801a2e6:	4622      	mov	r2, r4
 801a2e8:	462b      	mov	r3, r5
 801a2ea:	f7e6 f98f 	bl	800060c <__aeabi_dmul>
 801a2ee:	a358      	add	r3, pc, #352	; (adr r3, 801a450 <__ieee754_pow+0xa30>)
 801a2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2f4:	f7e5 ffd2 	bl	800029c <__aeabi_dsub>
 801a2f8:	4622      	mov	r2, r4
 801a2fa:	462b      	mov	r3, r5
 801a2fc:	f7e6 f986 	bl	800060c <__aeabi_dmul>
 801a300:	a355      	add	r3, pc, #340	; (adr r3, 801a458 <__ieee754_pow+0xa38>)
 801a302:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a306:	f7e5 ffcb 	bl	80002a0 <__adddf3>
 801a30a:	4622      	mov	r2, r4
 801a30c:	462b      	mov	r3, r5
 801a30e:	f7e6 f97d 	bl	800060c <__aeabi_dmul>
 801a312:	4602      	mov	r2, r0
 801a314:	460b      	mov	r3, r1
 801a316:	4640      	mov	r0, r8
 801a318:	4649      	mov	r1, r9
 801a31a:	f7e5 ffbf 	bl	800029c <__aeabi_dsub>
 801a31e:	4604      	mov	r4, r0
 801a320:	460d      	mov	r5, r1
 801a322:	4602      	mov	r2, r0
 801a324:	460b      	mov	r3, r1
 801a326:	4640      	mov	r0, r8
 801a328:	4649      	mov	r1, r9
 801a32a:	f7e6 f96f 	bl	800060c <__aeabi_dmul>
 801a32e:	2200      	movs	r2, #0
 801a330:	ec41 0b19 	vmov	d9, r0, r1
 801a334:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a338:	4620      	mov	r0, r4
 801a33a:	4629      	mov	r1, r5
 801a33c:	f7e5 ffae 	bl	800029c <__aeabi_dsub>
 801a340:	4602      	mov	r2, r0
 801a342:	460b      	mov	r3, r1
 801a344:	ec51 0b19 	vmov	r0, r1, d9
 801a348:	f7e6 fa8a 	bl	8000860 <__aeabi_ddiv>
 801a34c:	4632      	mov	r2, r6
 801a34e:	4604      	mov	r4, r0
 801a350:	460d      	mov	r5, r1
 801a352:	463b      	mov	r3, r7
 801a354:	4640      	mov	r0, r8
 801a356:	4649      	mov	r1, r9
 801a358:	f7e6 f958 	bl	800060c <__aeabi_dmul>
 801a35c:	4632      	mov	r2, r6
 801a35e:	463b      	mov	r3, r7
 801a360:	f7e5 ff9e 	bl	80002a0 <__adddf3>
 801a364:	4602      	mov	r2, r0
 801a366:	460b      	mov	r3, r1
 801a368:	4620      	mov	r0, r4
 801a36a:	4629      	mov	r1, r5
 801a36c:	f7e5 ff96 	bl	800029c <__aeabi_dsub>
 801a370:	4642      	mov	r2, r8
 801a372:	464b      	mov	r3, r9
 801a374:	f7e5 ff92 	bl	800029c <__aeabi_dsub>
 801a378:	460b      	mov	r3, r1
 801a37a:	4602      	mov	r2, r0
 801a37c:	493a      	ldr	r1, [pc, #232]	; (801a468 <__ieee754_pow+0xa48>)
 801a37e:	2000      	movs	r0, #0
 801a380:	f7e5 ff8c 	bl	800029c <__aeabi_dsub>
 801a384:	ec41 0b10 	vmov	d0, r0, r1
 801a388:	ee10 3a90 	vmov	r3, s1
 801a38c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801a390:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a394:	da2b      	bge.n	801a3ee <__ieee754_pow+0x9ce>
 801a396:	4650      	mov	r0, sl
 801a398:	f000 fba2 	bl	801aae0 <scalbn>
 801a39c:	ec51 0b10 	vmov	r0, r1, d0
 801a3a0:	ec53 2b18 	vmov	r2, r3, d8
 801a3a4:	f7ff bbed 	b.w	8019b82 <__ieee754_pow+0x162>
 801a3a8:	4b30      	ldr	r3, [pc, #192]	; (801a46c <__ieee754_pow+0xa4c>)
 801a3aa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801a3ae:	429e      	cmp	r6, r3
 801a3b0:	f77f af0c 	ble.w	801a1cc <__ieee754_pow+0x7ac>
 801a3b4:	4b2e      	ldr	r3, [pc, #184]	; (801a470 <__ieee754_pow+0xa50>)
 801a3b6:	440b      	add	r3, r1
 801a3b8:	4303      	orrs	r3, r0
 801a3ba:	d009      	beq.n	801a3d0 <__ieee754_pow+0x9b0>
 801a3bc:	ec51 0b18 	vmov	r0, r1, d8
 801a3c0:	2200      	movs	r2, #0
 801a3c2:	2300      	movs	r3, #0
 801a3c4:	f7e6 fb94 	bl	8000af0 <__aeabi_dcmplt>
 801a3c8:	3800      	subs	r0, #0
 801a3ca:	bf18      	it	ne
 801a3cc:	2001      	movne	r0, #1
 801a3ce:	e447      	b.n	8019c60 <__ieee754_pow+0x240>
 801a3d0:	4622      	mov	r2, r4
 801a3d2:	462b      	mov	r3, r5
 801a3d4:	f7e5 ff62 	bl	800029c <__aeabi_dsub>
 801a3d8:	4642      	mov	r2, r8
 801a3da:	464b      	mov	r3, r9
 801a3dc:	f7e6 fb9c 	bl	8000b18 <__aeabi_dcmpge>
 801a3e0:	2800      	cmp	r0, #0
 801a3e2:	f43f aef3 	beq.w	801a1cc <__ieee754_pow+0x7ac>
 801a3e6:	e7e9      	b.n	801a3bc <__ieee754_pow+0x99c>
 801a3e8:	f04f 0a00 	mov.w	sl, #0
 801a3ec:	e71a      	b.n	801a224 <__ieee754_pow+0x804>
 801a3ee:	ec51 0b10 	vmov	r0, r1, d0
 801a3f2:	4619      	mov	r1, r3
 801a3f4:	e7d4      	b.n	801a3a0 <__ieee754_pow+0x980>
 801a3f6:	491c      	ldr	r1, [pc, #112]	; (801a468 <__ieee754_pow+0xa48>)
 801a3f8:	2000      	movs	r0, #0
 801a3fa:	f7ff bb30 	b.w	8019a5e <__ieee754_pow+0x3e>
 801a3fe:	2000      	movs	r0, #0
 801a400:	2100      	movs	r1, #0
 801a402:	f7ff bb2c 	b.w	8019a5e <__ieee754_pow+0x3e>
 801a406:	4630      	mov	r0, r6
 801a408:	4639      	mov	r1, r7
 801a40a:	f7ff bb28 	b.w	8019a5e <__ieee754_pow+0x3e>
 801a40e:	9204      	str	r2, [sp, #16]
 801a410:	f7ff bb7a 	b.w	8019b08 <__ieee754_pow+0xe8>
 801a414:	2300      	movs	r3, #0
 801a416:	f7ff bb64 	b.w	8019ae2 <__ieee754_pow+0xc2>
 801a41a:	bf00      	nop
 801a41c:	f3af 8000 	nop.w
 801a420:	00000000 	.word	0x00000000
 801a424:	3fe62e43 	.word	0x3fe62e43
 801a428:	fefa39ef 	.word	0xfefa39ef
 801a42c:	3fe62e42 	.word	0x3fe62e42
 801a430:	0ca86c39 	.word	0x0ca86c39
 801a434:	be205c61 	.word	0xbe205c61
 801a438:	72bea4d0 	.word	0x72bea4d0
 801a43c:	3e663769 	.word	0x3e663769
 801a440:	c5d26bf1 	.word	0xc5d26bf1
 801a444:	3ebbbd41 	.word	0x3ebbbd41
 801a448:	af25de2c 	.word	0xaf25de2c
 801a44c:	3f11566a 	.word	0x3f11566a
 801a450:	16bebd93 	.word	0x16bebd93
 801a454:	3f66c16c 	.word	0x3f66c16c
 801a458:	5555553e 	.word	0x5555553e
 801a45c:	3fc55555 	.word	0x3fc55555
 801a460:	3fe00000 	.word	0x3fe00000
 801a464:	000fffff 	.word	0x000fffff
 801a468:	3ff00000 	.word	0x3ff00000
 801a46c:	4090cbff 	.word	0x4090cbff
 801a470:	3f6f3400 	.word	0x3f6f3400
 801a474:	652b82fe 	.word	0x652b82fe
 801a478:	3c971547 	.word	0x3c971547

0801a47c <__ieee754_sqrt>:
 801a47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a480:	ec55 4b10 	vmov	r4, r5, d0
 801a484:	4e55      	ldr	r6, [pc, #340]	; (801a5dc <__ieee754_sqrt+0x160>)
 801a486:	43ae      	bics	r6, r5
 801a488:	ee10 0a10 	vmov	r0, s0
 801a48c:	ee10 3a10 	vmov	r3, s0
 801a490:	462a      	mov	r2, r5
 801a492:	4629      	mov	r1, r5
 801a494:	d110      	bne.n	801a4b8 <__ieee754_sqrt+0x3c>
 801a496:	ee10 2a10 	vmov	r2, s0
 801a49a:	462b      	mov	r3, r5
 801a49c:	f7e6 f8b6 	bl	800060c <__aeabi_dmul>
 801a4a0:	4602      	mov	r2, r0
 801a4a2:	460b      	mov	r3, r1
 801a4a4:	4620      	mov	r0, r4
 801a4a6:	4629      	mov	r1, r5
 801a4a8:	f7e5 fefa 	bl	80002a0 <__adddf3>
 801a4ac:	4604      	mov	r4, r0
 801a4ae:	460d      	mov	r5, r1
 801a4b0:	ec45 4b10 	vmov	d0, r4, r5
 801a4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a4b8:	2d00      	cmp	r5, #0
 801a4ba:	dc10      	bgt.n	801a4de <__ieee754_sqrt+0x62>
 801a4bc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a4c0:	4330      	orrs	r0, r6
 801a4c2:	d0f5      	beq.n	801a4b0 <__ieee754_sqrt+0x34>
 801a4c4:	b15d      	cbz	r5, 801a4de <__ieee754_sqrt+0x62>
 801a4c6:	ee10 2a10 	vmov	r2, s0
 801a4ca:	462b      	mov	r3, r5
 801a4cc:	ee10 0a10 	vmov	r0, s0
 801a4d0:	f7e5 fee4 	bl	800029c <__aeabi_dsub>
 801a4d4:	4602      	mov	r2, r0
 801a4d6:	460b      	mov	r3, r1
 801a4d8:	f7e6 f9c2 	bl	8000860 <__aeabi_ddiv>
 801a4dc:	e7e6      	b.n	801a4ac <__ieee754_sqrt+0x30>
 801a4de:	1512      	asrs	r2, r2, #20
 801a4e0:	d074      	beq.n	801a5cc <__ieee754_sqrt+0x150>
 801a4e2:	07d4      	lsls	r4, r2, #31
 801a4e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801a4e8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801a4ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801a4f0:	bf5e      	ittt	pl
 801a4f2:	0fda      	lsrpl	r2, r3, #31
 801a4f4:	005b      	lslpl	r3, r3, #1
 801a4f6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801a4fa:	2400      	movs	r4, #0
 801a4fc:	0fda      	lsrs	r2, r3, #31
 801a4fe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801a502:	107f      	asrs	r7, r7, #1
 801a504:	005b      	lsls	r3, r3, #1
 801a506:	2516      	movs	r5, #22
 801a508:	4620      	mov	r0, r4
 801a50a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801a50e:	1886      	adds	r6, r0, r2
 801a510:	428e      	cmp	r6, r1
 801a512:	bfde      	ittt	le
 801a514:	1b89      	suble	r1, r1, r6
 801a516:	18b0      	addle	r0, r6, r2
 801a518:	18a4      	addle	r4, r4, r2
 801a51a:	0049      	lsls	r1, r1, #1
 801a51c:	3d01      	subs	r5, #1
 801a51e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801a522:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801a526:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a52a:	d1f0      	bne.n	801a50e <__ieee754_sqrt+0x92>
 801a52c:	462a      	mov	r2, r5
 801a52e:	f04f 0e20 	mov.w	lr, #32
 801a532:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801a536:	4281      	cmp	r1, r0
 801a538:	eb06 0c05 	add.w	ip, r6, r5
 801a53c:	dc02      	bgt.n	801a544 <__ieee754_sqrt+0xc8>
 801a53e:	d113      	bne.n	801a568 <__ieee754_sqrt+0xec>
 801a540:	459c      	cmp	ip, r3
 801a542:	d811      	bhi.n	801a568 <__ieee754_sqrt+0xec>
 801a544:	f1bc 0f00 	cmp.w	ip, #0
 801a548:	eb0c 0506 	add.w	r5, ip, r6
 801a54c:	da43      	bge.n	801a5d6 <__ieee754_sqrt+0x15a>
 801a54e:	2d00      	cmp	r5, #0
 801a550:	db41      	blt.n	801a5d6 <__ieee754_sqrt+0x15a>
 801a552:	f100 0801 	add.w	r8, r0, #1
 801a556:	1a09      	subs	r1, r1, r0
 801a558:	459c      	cmp	ip, r3
 801a55a:	bf88      	it	hi
 801a55c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801a560:	eba3 030c 	sub.w	r3, r3, ip
 801a564:	4432      	add	r2, r6
 801a566:	4640      	mov	r0, r8
 801a568:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801a56c:	f1be 0e01 	subs.w	lr, lr, #1
 801a570:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801a574:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a578:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801a57c:	d1db      	bne.n	801a536 <__ieee754_sqrt+0xba>
 801a57e:	430b      	orrs	r3, r1
 801a580:	d006      	beq.n	801a590 <__ieee754_sqrt+0x114>
 801a582:	1c50      	adds	r0, r2, #1
 801a584:	bf13      	iteet	ne
 801a586:	3201      	addne	r2, #1
 801a588:	3401      	addeq	r4, #1
 801a58a:	4672      	moveq	r2, lr
 801a58c:	f022 0201 	bicne.w	r2, r2, #1
 801a590:	1063      	asrs	r3, r4, #1
 801a592:	0852      	lsrs	r2, r2, #1
 801a594:	07e1      	lsls	r1, r4, #31
 801a596:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801a59a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801a59e:	bf48      	it	mi
 801a5a0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801a5a4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801a5a8:	4614      	mov	r4, r2
 801a5aa:	e781      	b.n	801a4b0 <__ieee754_sqrt+0x34>
 801a5ac:	0ad9      	lsrs	r1, r3, #11
 801a5ae:	3815      	subs	r0, #21
 801a5b0:	055b      	lsls	r3, r3, #21
 801a5b2:	2900      	cmp	r1, #0
 801a5b4:	d0fa      	beq.n	801a5ac <__ieee754_sqrt+0x130>
 801a5b6:	02cd      	lsls	r5, r1, #11
 801a5b8:	d50a      	bpl.n	801a5d0 <__ieee754_sqrt+0x154>
 801a5ba:	f1c2 0420 	rsb	r4, r2, #32
 801a5be:	fa23 f404 	lsr.w	r4, r3, r4
 801a5c2:	1e55      	subs	r5, r2, #1
 801a5c4:	4093      	lsls	r3, r2
 801a5c6:	4321      	orrs	r1, r4
 801a5c8:	1b42      	subs	r2, r0, r5
 801a5ca:	e78a      	b.n	801a4e2 <__ieee754_sqrt+0x66>
 801a5cc:	4610      	mov	r0, r2
 801a5ce:	e7f0      	b.n	801a5b2 <__ieee754_sqrt+0x136>
 801a5d0:	0049      	lsls	r1, r1, #1
 801a5d2:	3201      	adds	r2, #1
 801a5d4:	e7ef      	b.n	801a5b6 <__ieee754_sqrt+0x13a>
 801a5d6:	4680      	mov	r8, r0
 801a5d8:	e7bd      	b.n	801a556 <__ieee754_sqrt+0xda>
 801a5da:	bf00      	nop
 801a5dc:	7ff00000 	.word	0x7ff00000

0801a5e0 <__ieee754_expf>:
 801a5e0:	ee10 2a10 	vmov	r2, s0
 801a5e4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801a5e8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801a5ec:	d902      	bls.n	801a5f4 <__ieee754_expf+0x14>
 801a5ee:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a5f2:	4770      	bx	lr
 801a5f4:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 801a5f8:	d106      	bne.n	801a608 <__ieee754_expf+0x28>
 801a5fa:	eddf 7a4e 	vldr	s15, [pc, #312]	; 801a734 <__ieee754_expf+0x154>
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	bf18      	it	ne
 801a602:	eeb0 0a67 	vmovne.f32	s0, s15
 801a606:	4770      	bx	lr
 801a608:	484b      	ldr	r0, [pc, #300]	; (801a738 <__ieee754_expf+0x158>)
 801a60a:	4282      	cmp	r2, r0
 801a60c:	dd02      	ble.n	801a614 <__ieee754_expf+0x34>
 801a60e:	2000      	movs	r0, #0
 801a610:	f000 ba4c 	b.w	801aaac <__math_oflowf>
 801a614:	2a00      	cmp	r2, #0
 801a616:	da05      	bge.n	801a624 <__ieee754_expf+0x44>
 801a618:	4a48      	ldr	r2, [pc, #288]	; (801a73c <__ieee754_expf+0x15c>)
 801a61a:	4291      	cmp	r1, r2
 801a61c:	d902      	bls.n	801a624 <__ieee754_expf+0x44>
 801a61e:	2000      	movs	r0, #0
 801a620:	f000 ba3e 	b.w	801aaa0 <__math_uflowf>
 801a624:	4a46      	ldr	r2, [pc, #280]	; (801a740 <__ieee754_expf+0x160>)
 801a626:	4291      	cmp	r1, r2
 801a628:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801a62c:	d952      	bls.n	801a6d4 <__ieee754_expf+0xf4>
 801a62e:	4a45      	ldr	r2, [pc, #276]	; (801a744 <__ieee754_expf+0x164>)
 801a630:	4291      	cmp	r1, r2
 801a632:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801a636:	d834      	bhi.n	801a6a2 <__ieee754_expf+0xc2>
 801a638:	4943      	ldr	r1, [pc, #268]	; (801a748 <__ieee754_expf+0x168>)
 801a63a:	4411      	add	r1, r2
 801a63c:	ed91 7a00 	vldr	s14, [r1]
 801a640:	4942      	ldr	r1, [pc, #264]	; (801a74c <__ieee754_expf+0x16c>)
 801a642:	440a      	add	r2, r1
 801a644:	edd2 7a00 	vldr	s15, [r2]
 801a648:	ee30 7a47 	vsub.f32	s14, s0, s14
 801a64c:	f1c3 0201 	rsb	r2, r3, #1
 801a650:	1ad2      	subs	r2, r2, r3
 801a652:	ee37 0a67 	vsub.f32	s0, s14, s15
 801a656:	ee20 6a00 	vmul.f32	s12, s0, s0
 801a65a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801a750 <__ieee754_expf+0x170>
 801a65e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801a754 <__ieee754_expf+0x174>
 801a662:	eee6 6a05 	vfma.f32	s13, s12, s10
 801a666:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801a758 <__ieee754_expf+0x178>
 801a66a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801a66e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801a75c <__ieee754_expf+0x17c>
 801a672:	eee5 6a06 	vfma.f32	s13, s10, s12
 801a676:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801a760 <__ieee754_expf+0x180>
 801a67a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801a67e:	eef0 6a40 	vmov.f32	s13, s0
 801a682:	eee5 6a46 	vfms.f32	s13, s10, s12
 801a686:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801a68a:	ee20 5a26 	vmul.f32	s10, s0, s13
 801a68e:	bb92      	cbnz	r2, 801a6f6 <__ieee754_expf+0x116>
 801a690:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801a694:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801a698:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801a69c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801a6a0:	4770      	bx	lr
 801a6a2:	4b30      	ldr	r3, [pc, #192]	; (801a764 <__ieee754_expf+0x184>)
 801a6a4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801a768 <__ieee754_expf+0x188>
 801a6a8:	eddf 6a30 	vldr	s13, [pc, #192]	; 801a76c <__ieee754_expf+0x18c>
 801a6ac:	4413      	add	r3, r2
 801a6ae:	edd3 7a00 	vldr	s15, [r3]
 801a6b2:	eee0 7a07 	vfma.f32	s15, s0, s14
 801a6b6:	eeb0 7a40 	vmov.f32	s14, s0
 801a6ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a6be:	ee17 2a90 	vmov	r2, s15
 801a6c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a6c6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801a6ca:	eddf 6a29 	vldr	s13, [pc, #164]	; 801a770 <__ieee754_expf+0x190>
 801a6ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a6d2:	e7be      	b.n	801a652 <__ieee754_expf+0x72>
 801a6d4:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 801a6d8:	d20b      	bcs.n	801a6f2 <__ieee754_expf+0x112>
 801a6da:	eddf 6a26 	vldr	s13, [pc, #152]	; 801a774 <__ieee754_expf+0x194>
 801a6de:	ee70 6a26 	vadd.f32	s13, s0, s13
 801a6e2:	eef4 6ae5 	vcmpe.f32	s13, s11
 801a6e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6ea:	dd02      	ble.n	801a6f2 <__ieee754_expf+0x112>
 801a6ec:	ee30 0a25 	vadd.f32	s0, s0, s11
 801a6f0:	4770      	bx	lr
 801a6f2:	2200      	movs	r2, #0
 801a6f4:	e7af      	b.n	801a656 <__ieee754_expf+0x76>
 801a6f6:	ee76 6a66 	vsub.f32	s13, s12, s13
 801a6fa:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801a6fe:	ee85 0a26 	vdiv.f32	s0, s10, s13
 801a702:	bfb8      	it	lt
 801a704:	3264      	addlt	r2, #100	; 0x64
 801a706:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a70a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801a70e:	ee75 7ac0 	vsub.f32	s15, s11, s0
 801a712:	ee17 3a90 	vmov	r3, s15
 801a716:	bfab      	itete	ge
 801a718:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801a71c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801a720:	ee00 3a10 	vmovge	s0, r3
 801a724:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 801a778 <__ieee754_expf+0x198>
 801a728:	bfbc      	itt	lt
 801a72a:	ee00 3a10 	vmovlt	s0, r3
 801a72e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801a732:	4770      	bx	lr
 801a734:	00000000 	.word	0x00000000
 801a738:	42b17217 	.word	0x42b17217
 801a73c:	42cff1b5 	.word	0x42cff1b5
 801a740:	3eb17218 	.word	0x3eb17218
 801a744:	3f851591 	.word	0x3f851591
 801a748:	0801eff8 	.word	0x0801eff8
 801a74c:	0801f000 	.word	0x0801f000
 801a750:	3331bb4c 	.word	0x3331bb4c
 801a754:	b5ddea0e 	.word	0xb5ddea0e
 801a758:	388ab355 	.word	0x388ab355
 801a75c:	bb360b61 	.word	0xbb360b61
 801a760:	3e2aaaab 	.word	0x3e2aaaab
 801a764:	0801eff0 	.word	0x0801eff0
 801a768:	3fb8aa3b 	.word	0x3fb8aa3b
 801a76c:	3f317180 	.word	0x3f317180
 801a770:	3717f7d1 	.word	0x3717f7d1
 801a774:	7149f2ca 	.word	0x7149f2ca
 801a778:	0d800000 	.word	0x0d800000

0801a77c <__ieee754_logf>:
 801a77c:	ee10 3a10 	vmov	r3, s0
 801a780:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801a784:	d106      	bne.n	801a794 <__ieee754_logf+0x18>
 801a786:	ed9f 7a65 	vldr	s14, [pc, #404]	; 801a91c <__ieee754_logf+0x1a0>
 801a78a:	eddf 7a65 	vldr	s15, [pc, #404]	; 801a920 <__ieee754_logf+0x1a4>
 801a78e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801a792:	4770      	bx	lr
 801a794:	2b00      	cmp	r3, #0
 801a796:	da02      	bge.n	801a79e <__ieee754_logf+0x22>
 801a798:	ee30 7a40 	vsub.f32	s14, s0, s0
 801a79c:	e7f5      	b.n	801a78a <__ieee754_logf+0xe>
 801a79e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a7a2:	db02      	blt.n	801a7aa <__ieee754_logf+0x2e>
 801a7a4:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a7a8:	4770      	bx	lr
 801a7aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801a7ae:	bfb8      	it	lt
 801a7b0:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 801a924 <__ieee754_logf+0x1a8>
 801a7b4:	485c      	ldr	r0, [pc, #368]	; (801a928 <__ieee754_logf+0x1ac>)
 801a7b6:	bfbe      	ittt	lt
 801a7b8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801a7bc:	f06f 0118 	mvnlt.w	r1, #24
 801a7c0:	ee17 3a90 	vmovlt	r3, s15
 801a7c4:	ea4f 52e3 	mov.w	r2, r3, asr #23
 801a7c8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801a7cc:	4418      	add	r0, r3
 801a7ce:	bfa8      	it	ge
 801a7d0:	2100      	movge	r1, #0
 801a7d2:	3a7f      	subs	r2, #127	; 0x7f
 801a7d4:	440a      	add	r2, r1
 801a7d6:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 801a7da:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 801a7de:	4319      	orrs	r1, r3
 801a7e0:	ee00 1a10 	vmov	s0, r1
 801a7e4:	4951      	ldr	r1, [pc, #324]	; (801a92c <__ieee754_logf+0x1b0>)
 801a7e6:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 801a7ea:	f103 000f 	add.w	r0, r3, #15
 801a7ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a7f2:	4001      	ands	r1, r0
 801a7f4:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a7f8:	bb89      	cbnz	r1, 801a85e <__ieee754_logf+0xe2>
 801a7fa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801a7fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a802:	d10f      	bne.n	801a824 <__ieee754_logf+0xa8>
 801a804:	2a00      	cmp	r2, #0
 801a806:	f000 8085 	beq.w	801a914 <__ieee754_logf+0x198>
 801a80a:	ee07 2a90 	vmov	s15, r2
 801a80e:	ed9f 0a48 	vldr	s0, [pc, #288]	; 801a930 <__ieee754_logf+0x1b4>
 801a812:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801a934 <__ieee754_logf+0x1b8>
 801a816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a81a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a81e:	eea7 0a87 	vfma.f32	s0, s15, s14
 801a822:	4770      	bx	lr
 801a824:	eddf 6a44 	vldr	s13, [pc, #272]	; 801a938 <__ieee754_logf+0x1bc>
 801a828:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a82c:	eee0 7a66 	vfms.f32	s15, s0, s13
 801a830:	ee20 7a00 	vmul.f32	s14, s0, s0
 801a834:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a838:	b912      	cbnz	r2, 801a840 <__ieee754_logf+0xc4>
 801a83a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a83e:	4770      	bx	lr
 801a840:	ee07 2a90 	vmov	s15, r2
 801a844:	eddf 6a3a 	vldr	s13, [pc, #232]	; 801a930 <__ieee754_logf+0x1b4>
 801a848:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a84c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801a850:	ee37 0a40 	vsub.f32	s0, s14, s0
 801a854:	ed9f 7a37 	vldr	s14, [pc, #220]	; 801a934 <__ieee754_logf+0x1b8>
 801a858:	ee97 0a87 	vfnms.f32	s0, s15, s14
 801a85c:	4770      	bx	lr
 801a85e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801a862:	ee70 7a27 	vadd.f32	s15, s0, s15
 801a866:	eddf 5a35 	vldr	s11, [pc, #212]	; 801a93c <__ieee754_logf+0x1c0>
 801a86a:	eddf 4a35 	vldr	s9, [pc, #212]	; 801a940 <__ieee754_logf+0x1c4>
 801a86e:	4935      	ldr	r1, [pc, #212]	; (801a944 <__ieee754_logf+0x1c8>)
 801a870:	ee80 6a27 	vdiv.f32	s12, s0, s15
 801a874:	4419      	add	r1, r3
 801a876:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 801a87a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801a87e:	430b      	orrs	r3, r1
 801a880:	2b00      	cmp	r3, #0
 801a882:	ee07 2a90 	vmov	s15, r2
 801a886:	ee26 5a06 	vmul.f32	s10, s12, s12
 801a88a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801a88e:	ee25 7a05 	vmul.f32	s14, s10, s10
 801a892:	eddf 7a2d 	vldr	s15, [pc, #180]	; 801a948 <__ieee754_logf+0x1cc>
 801a896:	eee7 7a25 	vfma.f32	s15, s14, s11
 801a89a:	eddf 5a2c 	vldr	s11, [pc, #176]	; 801a94c <__ieee754_logf+0x1d0>
 801a89e:	eee7 5a87 	vfma.f32	s11, s15, s14
 801a8a2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801a950 <__ieee754_logf+0x1d4>
 801a8a6:	eee7 7a24 	vfma.f32	s15, s14, s9
 801a8aa:	eddf 4a2a 	vldr	s9, [pc, #168]	; 801a954 <__ieee754_logf+0x1d8>
 801a8ae:	eee7 4a87 	vfma.f32	s9, s15, s14
 801a8b2:	eddf 7a29 	vldr	s15, [pc, #164]	; 801a958 <__ieee754_logf+0x1dc>
 801a8b6:	eee4 7a87 	vfma.f32	s15, s9, s14
 801a8ba:	ee67 7a85 	vmul.f32	s15, s15, s10
 801a8be:	eee5 7a87 	vfma.f32	s15, s11, s14
 801a8c2:	dd1c      	ble.n	801a8fe <__ieee754_logf+0x182>
 801a8c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801a8c8:	ee20 7a07 	vmul.f32	s14, s0, s14
 801a8cc:	ee27 7a00 	vmul.f32	s14, s14, s0
 801a8d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a8d4:	ee67 7a86 	vmul.f32	s15, s15, s12
 801a8d8:	b922      	cbnz	r2, 801a8e4 <__ieee754_logf+0x168>
 801a8da:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a8de:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a8e2:	4770      	bx	lr
 801a8e4:	ed9f 6a12 	vldr	s12, [pc, #72]	; 801a930 <__ieee754_logf+0x1b4>
 801a8e8:	eee6 7a86 	vfma.f32	s15, s13, s12
 801a8ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a8f0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801a8f4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801a934 <__ieee754_logf+0x1b8>
 801a8f8:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 801a8fc:	4770      	bx	lr
 801a8fe:	ee70 7a67 	vsub.f32	s15, s0, s15
 801a902:	ee67 7a86 	vmul.f32	s15, s15, s12
 801a906:	2a00      	cmp	r2, #0
 801a908:	d0e9      	beq.n	801a8de <__ieee754_logf+0x162>
 801a90a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801a930 <__ieee754_logf+0x1b4>
 801a90e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801a912:	e7ed      	b.n	801a8f0 <__ieee754_logf+0x174>
 801a914:	ed9f 0a02 	vldr	s0, [pc, #8]	; 801a920 <__ieee754_logf+0x1a4>
 801a918:	4770      	bx	lr
 801a91a:	bf00      	nop
 801a91c:	cc000000 	.word	0xcc000000
 801a920:	00000000 	.word	0x00000000
 801a924:	4c000000 	.word	0x4c000000
 801a928:	004afb20 	.word	0x004afb20
 801a92c:	007ffff0 	.word	0x007ffff0
 801a930:	3717f7d1 	.word	0x3717f7d1
 801a934:	3f317180 	.word	0x3f317180
 801a938:	3eaaaaab 	.word	0x3eaaaaab
 801a93c:	3e1cd04f 	.word	0x3e1cd04f
 801a940:	3e178897 	.word	0x3e178897
 801a944:	ffcf5c30 	.word	0xffcf5c30
 801a948:	3e638e29 	.word	0x3e638e29
 801a94c:	3ecccccd 	.word	0x3ecccccd
 801a950:	3e3a3325 	.word	0x3e3a3325
 801a954:	3e924925 	.word	0x3e924925
 801a958:	3f2aaaab 	.word	0x3f2aaaab

0801a95c <__ieee754_log10f>:
 801a95c:	b508      	push	{r3, lr}
 801a95e:	ee10 2a10 	vmov	r2, s0
 801a962:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801a966:	ed2d 8b02 	vpush	{d8}
 801a96a:	d108      	bne.n	801a97e <__ieee754_log10f+0x22>
 801a96c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 801a9f4 <__ieee754_log10f+0x98>
 801a970:	eddf 7a21 	vldr	s15, [pc, #132]	; 801a9f8 <__ieee754_log10f+0x9c>
 801a974:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801a978:	ecbd 8b02 	vpop	{d8}
 801a97c:	bd08      	pop	{r3, pc}
 801a97e:	2a00      	cmp	r2, #0
 801a980:	da02      	bge.n	801a988 <__ieee754_log10f+0x2c>
 801a982:	ee30 7a40 	vsub.f32	s14, s0, s0
 801a986:	e7f3      	b.n	801a970 <__ieee754_log10f+0x14>
 801a988:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801a98c:	db02      	blt.n	801a994 <__ieee754_log10f+0x38>
 801a98e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a992:	e7f1      	b.n	801a978 <__ieee754_log10f+0x1c>
 801a994:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 801a998:	bfbf      	itttt	lt
 801a99a:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 801a9fc <__ieee754_log10f+0xa0>
 801a99e:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801a9a2:	f06f 0118 	mvnlt.w	r1, #24
 801a9a6:	ee17 2a90 	vmovlt	r2, s15
 801a9aa:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801a9ae:	bfa8      	it	ge
 801a9b0:	2100      	movge	r1, #0
 801a9b2:	3b7f      	subs	r3, #127	; 0x7f
 801a9b4:	440b      	add	r3, r1
 801a9b6:	0fd9      	lsrs	r1, r3, #31
 801a9b8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801a9bc:	ee07 3a90 	vmov	s15, r3
 801a9c0:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801a9c4:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 801a9c8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801a9cc:	ee00 3a10 	vmov	s0, r3
 801a9d0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801a9d4:	f7ff fed2 	bl	801a77c <__ieee754_logf>
 801a9d8:	eddf 7a09 	vldr	s15, [pc, #36]	; 801aa00 <__ieee754_log10f+0xa4>
 801a9dc:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a9e0:	eddf 7a08 	vldr	s15, [pc, #32]	; 801aa04 <__ieee754_log10f+0xa8>
 801a9e4:	eea8 0a27 	vfma.f32	s0, s16, s15
 801a9e8:	eddf 7a07 	vldr	s15, [pc, #28]	; 801aa08 <__ieee754_log10f+0xac>
 801a9ec:	eea8 0a27 	vfma.f32	s0, s16, s15
 801a9f0:	e7c2      	b.n	801a978 <__ieee754_log10f+0x1c>
 801a9f2:	bf00      	nop
 801a9f4:	cc000000 	.word	0xcc000000
 801a9f8:	00000000 	.word	0x00000000
 801a9fc:	4c000000 	.word	0x4c000000
 801aa00:	3ede5bd9 	.word	0x3ede5bd9
 801aa04:	355427db 	.word	0x355427db
 801aa08:	3e9a2080 	.word	0x3e9a2080

0801aa0c <__ieee754_sqrtf>:
 801aa0c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801aa10:	4770      	bx	lr

0801aa12 <with_errno>:
 801aa12:	b570      	push	{r4, r5, r6, lr}
 801aa14:	4604      	mov	r4, r0
 801aa16:	460d      	mov	r5, r1
 801aa18:	4616      	mov	r6, r2
 801aa1a:	f000 f929 	bl	801ac70 <__errno>
 801aa1e:	4629      	mov	r1, r5
 801aa20:	6006      	str	r6, [r0, #0]
 801aa22:	4620      	mov	r0, r4
 801aa24:	bd70      	pop	{r4, r5, r6, pc}

0801aa26 <xflow>:
 801aa26:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801aa28:	4614      	mov	r4, r2
 801aa2a:	461d      	mov	r5, r3
 801aa2c:	b108      	cbz	r0, 801aa32 <xflow+0xc>
 801aa2e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801aa32:	e9cd 2300 	strd	r2, r3, [sp]
 801aa36:	e9dd 2300 	ldrd	r2, r3, [sp]
 801aa3a:	4620      	mov	r0, r4
 801aa3c:	4629      	mov	r1, r5
 801aa3e:	f7e5 fde5 	bl	800060c <__aeabi_dmul>
 801aa42:	2222      	movs	r2, #34	; 0x22
 801aa44:	b003      	add	sp, #12
 801aa46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801aa4a:	f7ff bfe2 	b.w	801aa12 <with_errno>

0801aa4e <__math_uflow>:
 801aa4e:	b508      	push	{r3, lr}
 801aa50:	2200      	movs	r2, #0
 801aa52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801aa56:	f7ff ffe6 	bl	801aa26 <xflow>
 801aa5a:	ec41 0b10 	vmov	d0, r0, r1
 801aa5e:	bd08      	pop	{r3, pc}

0801aa60 <__math_oflow>:
 801aa60:	b508      	push	{r3, lr}
 801aa62:	2200      	movs	r2, #0
 801aa64:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801aa68:	f7ff ffdd 	bl	801aa26 <xflow>
 801aa6c:	ec41 0b10 	vmov	d0, r0, r1
 801aa70:	bd08      	pop	{r3, pc}

0801aa72 <with_errnof>:
 801aa72:	b513      	push	{r0, r1, r4, lr}
 801aa74:	4604      	mov	r4, r0
 801aa76:	ed8d 0a01 	vstr	s0, [sp, #4]
 801aa7a:	f000 f8f9 	bl	801ac70 <__errno>
 801aa7e:	ed9d 0a01 	vldr	s0, [sp, #4]
 801aa82:	6004      	str	r4, [r0, #0]
 801aa84:	b002      	add	sp, #8
 801aa86:	bd10      	pop	{r4, pc}

0801aa88 <xflowf>:
 801aa88:	b130      	cbz	r0, 801aa98 <xflowf+0x10>
 801aa8a:	eef1 7a40 	vneg.f32	s15, s0
 801aa8e:	ee27 0a80 	vmul.f32	s0, s15, s0
 801aa92:	2022      	movs	r0, #34	; 0x22
 801aa94:	f7ff bfed 	b.w	801aa72 <with_errnof>
 801aa98:	eef0 7a40 	vmov.f32	s15, s0
 801aa9c:	e7f7      	b.n	801aa8e <xflowf+0x6>
	...

0801aaa0 <__math_uflowf>:
 801aaa0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801aaa8 <__math_uflowf+0x8>
 801aaa4:	f7ff bff0 	b.w	801aa88 <xflowf>
 801aaa8:	10000000 	.word	0x10000000

0801aaac <__math_oflowf>:
 801aaac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801aab4 <__math_oflowf+0x8>
 801aab0:	f7ff bfea 	b.w	801aa88 <xflowf>
 801aab4:	70000000 	.word	0x70000000

0801aab8 <fabs>:
 801aab8:	ec51 0b10 	vmov	r0, r1, d0
 801aabc:	ee10 2a10 	vmov	r2, s0
 801aac0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801aac4:	ec43 2b10 	vmov	d0, r2, r3
 801aac8:	4770      	bx	lr

0801aaca <finite>:
 801aaca:	b082      	sub	sp, #8
 801aacc:	ed8d 0b00 	vstr	d0, [sp]
 801aad0:	9801      	ldr	r0, [sp, #4]
 801aad2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801aad6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801aada:	0fc0      	lsrs	r0, r0, #31
 801aadc:	b002      	add	sp, #8
 801aade:	4770      	bx	lr

0801aae0 <scalbn>:
 801aae0:	b570      	push	{r4, r5, r6, lr}
 801aae2:	ec55 4b10 	vmov	r4, r5, d0
 801aae6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801aaea:	4606      	mov	r6, r0
 801aaec:	462b      	mov	r3, r5
 801aaee:	b99a      	cbnz	r2, 801ab18 <scalbn+0x38>
 801aaf0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801aaf4:	4323      	orrs	r3, r4
 801aaf6:	d036      	beq.n	801ab66 <scalbn+0x86>
 801aaf8:	4b39      	ldr	r3, [pc, #228]	; (801abe0 <scalbn+0x100>)
 801aafa:	4629      	mov	r1, r5
 801aafc:	ee10 0a10 	vmov	r0, s0
 801ab00:	2200      	movs	r2, #0
 801ab02:	f7e5 fd83 	bl	800060c <__aeabi_dmul>
 801ab06:	4b37      	ldr	r3, [pc, #220]	; (801abe4 <scalbn+0x104>)
 801ab08:	429e      	cmp	r6, r3
 801ab0a:	4604      	mov	r4, r0
 801ab0c:	460d      	mov	r5, r1
 801ab0e:	da10      	bge.n	801ab32 <scalbn+0x52>
 801ab10:	a32b      	add	r3, pc, #172	; (adr r3, 801abc0 <scalbn+0xe0>)
 801ab12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab16:	e03a      	b.n	801ab8e <scalbn+0xae>
 801ab18:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801ab1c:	428a      	cmp	r2, r1
 801ab1e:	d10c      	bne.n	801ab3a <scalbn+0x5a>
 801ab20:	ee10 2a10 	vmov	r2, s0
 801ab24:	4620      	mov	r0, r4
 801ab26:	4629      	mov	r1, r5
 801ab28:	f7e5 fbba 	bl	80002a0 <__adddf3>
 801ab2c:	4604      	mov	r4, r0
 801ab2e:	460d      	mov	r5, r1
 801ab30:	e019      	b.n	801ab66 <scalbn+0x86>
 801ab32:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801ab36:	460b      	mov	r3, r1
 801ab38:	3a36      	subs	r2, #54	; 0x36
 801ab3a:	4432      	add	r2, r6
 801ab3c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801ab40:	428a      	cmp	r2, r1
 801ab42:	dd08      	ble.n	801ab56 <scalbn+0x76>
 801ab44:	2d00      	cmp	r5, #0
 801ab46:	a120      	add	r1, pc, #128	; (adr r1, 801abc8 <scalbn+0xe8>)
 801ab48:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab4c:	da1c      	bge.n	801ab88 <scalbn+0xa8>
 801ab4e:	a120      	add	r1, pc, #128	; (adr r1, 801abd0 <scalbn+0xf0>)
 801ab50:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab54:	e018      	b.n	801ab88 <scalbn+0xa8>
 801ab56:	2a00      	cmp	r2, #0
 801ab58:	dd08      	ble.n	801ab6c <scalbn+0x8c>
 801ab5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ab5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ab62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ab66:	ec45 4b10 	vmov	d0, r4, r5
 801ab6a:	bd70      	pop	{r4, r5, r6, pc}
 801ab6c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801ab70:	da19      	bge.n	801aba6 <scalbn+0xc6>
 801ab72:	f24c 3350 	movw	r3, #50000	; 0xc350
 801ab76:	429e      	cmp	r6, r3
 801ab78:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801ab7c:	dd0a      	ble.n	801ab94 <scalbn+0xb4>
 801ab7e:	a112      	add	r1, pc, #72	; (adr r1, 801abc8 <scalbn+0xe8>)
 801ab80:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab84:	2b00      	cmp	r3, #0
 801ab86:	d1e2      	bne.n	801ab4e <scalbn+0x6e>
 801ab88:	a30f      	add	r3, pc, #60	; (adr r3, 801abc8 <scalbn+0xe8>)
 801ab8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab8e:	f7e5 fd3d 	bl	800060c <__aeabi_dmul>
 801ab92:	e7cb      	b.n	801ab2c <scalbn+0x4c>
 801ab94:	a10a      	add	r1, pc, #40	; (adr r1, 801abc0 <scalbn+0xe0>)
 801ab96:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	d0b8      	beq.n	801ab10 <scalbn+0x30>
 801ab9e:	a10e      	add	r1, pc, #56	; (adr r1, 801abd8 <scalbn+0xf8>)
 801aba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aba4:	e7b4      	b.n	801ab10 <scalbn+0x30>
 801aba6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801abaa:	3236      	adds	r2, #54	; 0x36
 801abac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801abb0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801abb4:	4620      	mov	r0, r4
 801abb6:	4b0c      	ldr	r3, [pc, #48]	; (801abe8 <scalbn+0x108>)
 801abb8:	2200      	movs	r2, #0
 801abba:	e7e8      	b.n	801ab8e <scalbn+0xae>
 801abbc:	f3af 8000 	nop.w
 801abc0:	c2f8f359 	.word	0xc2f8f359
 801abc4:	01a56e1f 	.word	0x01a56e1f
 801abc8:	8800759c 	.word	0x8800759c
 801abcc:	7e37e43c 	.word	0x7e37e43c
 801abd0:	8800759c 	.word	0x8800759c
 801abd4:	fe37e43c 	.word	0xfe37e43c
 801abd8:	c2f8f359 	.word	0xc2f8f359
 801abdc:	81a56e1f 	.word	0x81a56e1f
 801abe0:	43500000 	.word	0x43500000
 801abe4:	ffff3cb0 	.word	0xffff3cb0
 801abe8:	3c900000 	.word	0x3c900000

0801abec <finitef>:
 801abec:	b082      	sub	sp, #8
 801abee:	ed8d 0a01 	vstr	s0, [sp, #4]
 801abf2:	9801      	ldr	r0, [sp, #4]
 801abf4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801abf8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801abfc:	bfac      	ite	ge
 801abfe:	2000      	movge	r0, #0
 801ac00:	2001      	movlt	r0, #1
 801ac02:	b002      	add	sp, #8
 801ac04:	4770      	bx	lr
	...

0801ac08 <nanf>:
 801ac08:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801ac10 <nanf+0x8>
 801ac0c:	4770      	bx	lr
 801ac0e:	bf00      	nop
 801ac10:	7fc00000 	.word	0x7fc00000

0801ac14 <abort>:
 801ac14:	b508      	push	{r3, lr}
 801ac16:	2006      	movs	r0, #6
 801ac18:	f000 fd54 	bl	801b6c4 <raise>
 801ac1c:	2001      	movs	r0, #1
 801ac1e:	f7e9 f8fd 	bl	8003e1c <_exit>
	...

0801ac24 <__assert_func>:
 801ac24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ac26:	4614      	mov	r4, r2
 801ac28:	461a      	mov	r2, r3
 801ac2a:	4b09      	ldr	r3, [pc, #36]	; (801ac50 <__assert_func+0x2c>)
 801ac2c:	681b      	ldr	r3, [r3, #0]
 801ac2e:	4605      	mov	r5, r0
 801ac30:	68d8      	ldr	r0, [r3, #12]
 801ac32:	b14c      	cbz	r4, 801ac48 <__assert_func+0x24>
 801ac34:	4b07      	ldr	r3, [pc, #28]	; (801ac54 <__assert_func+0x30>)
 801ac36:	9100      	str	r1, [sp, #0]
 801ac38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ac3c:	4906      	ldr	r1, [pc, #24]	; (801ac58 <__assert_func+0x34>)
 801ac3e:	462b      	mov	r3, r5
 801ac40:	f000 f81c 	bl	801ac7c <fiprintf>
 801ac44:	f7ff ffe6 	bl	801ac14 <abort>
 801ac48:	4b04      	ldr	r3, [pc, #16]	; (801ac5c <__assert_func+0x38>)
 801ac4a:	461c      	mov	r4, r3
 801ac4c:	e7f3      	b.n	801ac36 <__assert_func+0x12>
 801ac4e:	bf00      	nop
 801ac50:	20000268 	.word	0x20000268
 801ac54:	0801f008 	.word	0x0801f008
 801ac58:	0801f015 	.word	0x0801f015
 801ac5c:	0801f043 	.word	0x0801f043

0801ac60 <calloc>:
 801ac60:	4b02      	ldr	r3, [pc, #8]	; (801ac6c <calloc+0xc>)
 801ac62:	460a      	mov	r2, r1
 801ac64:	4601      	mov	r1, r0
 801ac66:	6818      	ldr	r0, [r3, #0]
 801ac68:	f000 b882 	b.w	801ad70 <_calloc_r>
 801ac6c:	20000268 	.word	0x20000268

0801ac70 <__errno>:
 801ac70:	4b01      	ldr	r3, [pc, #4]	; (801ac78 <__errno+0x8>)
 801ac72:	6818      	ldr	r0, [r3, #0]
 801ac74:	4770      	bx	lr
 801ac76:	bf00      	nop
 801ac78:	20000268 	.word	0x20000268

0801ac7c <fiprintf>:
 801ac7c:	b40e      	push	{r1, r2, r3}
 801ac7e:	b503      	push	{r0, r1, lr}
 801ac80:	4601      	mov	r1, r0
 801ac82:	ab03      	add	r3, sp, #12
 801ac84:	4805      	ldr	r0, [pc, #20]	; (801ac9c <fiprintf+0x20>)
 801ac86:	f853 2b04 	ldr.w	r2, [r3], #4
 801ac8a:	6800      	ldr	r0, [r0, #0]
 801ac8c:	9301      	str	r3, [sp, #4]
 801ac8e:	f000 f98f 	bl	801afb0 <_vfiprintf_r>
 801ac92:	b002      	add	sp, #8
 801ac94:	f85d eb04 	ldr.w	lr, [sp], #4
 801ac98:	b003      	add	sp, #12
 801ac9a:	4770      	bx	lr
 801ac9c:	20000268 	.word	0x20000268

0801aca0 <__libc_init_array>:
 801aca0:	b570      	push	{r4, r5, r6, lr}
 801aca2:	4d0d      	ldr	r5, [pc, #52]	; (801acd8 <__libc_init_array+0x38>)
 801aca4:	4c0d      	ldr	r4, [pc, #52]	; (801acdc <__libc_init_array+0x3c>)
 801aca6:	1b64      	subs	r4, r4, r5
 801aca8:	10a4      	asrs	r4, r4, #2
 801acaa:	2600      	movs	r6, #0
 801acac:	42a6      	cmp	r6, r4
 801acae:	d109      	bne.n	801acc4 <__libc_init_array+0x24>
 801acb0:	4d0b      	ldr	r5, [pc, #44]	; (801ace0 <__libc_init_array+0x40>)
 801acb2:	4c0c      	ldr	r4, [pc, #48]	; (801ace4 <__libc_init_array+0x44>)
 801acb4:	f001 fa68 	bl	801c188 <_init>
 801acb8:	1b64      	subs	r4, r4, r5
 801acba:	10a4      	asrs	r4, r4, #2
 801acbc:	2600      	movs	r6, #0
 801acbe:	42a6      	cmp	r6, r4
 801acc0:	d105      	bne.n	801acce <__libc_init_array+0x2e>
 801acc2:	bd70      	pop	{r4, r5, r6, pc}
 801acc4:	f855 3b04 	ldr.w	r3, [r5], #4
 801acc8:	4798      	blx	r3
 801acca:	3601      	adds	r6, #1
 801accc:	e7ee      	b.n	801acac <__libc_init_array+0xc>
 801acce:	f855 3b04 	ldr.w	r3, [r5], #4
 801acd2:	4798      	blx	r3
 801acd4:	3601      	adds	r6, #1
 801acd6:	e7f2      	b.n	801acbe <__libc_init_array+0x1e>
 801acd8:	0801f0e4 	.word	0x0801f0e4
 801acdc:	0801f0e4 	.word	0x0801f0e4
 801ace0:	0801f0e4 	.word	0x0801f0e4
 801ace4:	0801f0f0 	.word	0x0801f0f0

0801ace8 <__retarget_lock_init_recursive>:
 801ace8:	4770      	bx	lr

0801acea <__retarget_lock_acquire_recursive>:
 801acea:	4770      	bx	lr

0801acec <__retarget_lock_release_recursive>:
 801acec:	4770      	bx	lr
	...

0801acf0 <malloc>:
 801acf0:	4b02      	ldr	r3, [pc, #8]	; (801acfc <malloc+0xc>)
 801acf2:	4601      	mov	r1, r0
 801acf4:	6818      	ldr	r0, [r3, #0]
 801acf6:	f000 b8bd 	b.w	801ae74 <_malloc_r>
 801acfa:	bf00      	nop
 801acfc:	20000268 	.word	0x20000268

0801ad00 <free>:
 801ad00:	4b02      	ldr	r3, [pc, #8]	; (801ad0c <free+0xc>)
 801ad02:	4601      	mov	r1, r0
 801ad04:	6818      	ldr	r0, [r3, #0]
 801ad06:	f000 b849 	b.w	801ad9c <_free_r>
 801ad0a:	bf00      	nop
 801ad0c:	20000268 	.word	0x20000268

0801ad10 <memcpy>:
 801ad10:	440a      	add	r2, r1
 801ad12:	4291      	cmp	r1, r2
 801ad14:	f100 33ff 	add.w	r3, r0, #4294967295
 801ad18:	d100      	bne.n	801ad1c <memcpy+0xc>
 801ad1a:	4770      	bx	lr
 801ad1c:	b510      	push	{r4, lr}
 801ad1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ad22:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ad26:	4291      	cmp	r1, r2
 801ad28:	d1f9      	bne.n	801ad1e <memcpy+0xe>
 801ad2a:	bd10      	pop	{r4, pc}

0801ad2c <memmove>:
 801ad2c:	4288      	cmp	r0, r1
 801ad2e:	b510      	push	{r4, lr}
 801ad30:	eb01 0402 	add.w	r4, r1, r2
 801ad34:	d902      	bls.n	801ad3c <memmove+0x10>
 801ad36:	4284      	cmp	r4, r0
 801ad38:	4623      	mov	r3, r4
 801ad3a:	d807      	bhi.n	801ad4c <memmove+0x20>
 801ad3c:	1e43      	subs	r3, r0, #1
 801ad3e:	42a1      	cmp	r1, r4
 801ad40:	d008      	beq.n	801ad54 <memmove+0x28>
 801ad42:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ad46:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ad4a:	e7f8      	b.n	801ad3e <memmove+0x12>
 801ad4c:	4402      	add	r2, r0
 801ad4e:	4601      	mov	r1, r0
 801ad50:	428a      	cmp	r2, r1
 801ad52:	d100      	bne.n	801ad56 <memmove+0x2a>
 801ad54:	bd10      	pop	{r4, pc}
 801ad56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ad5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ad5e:	e7f7      	b.n	801ad50 <memmove+0x24>

0801ad60 <memset>:
 801ad60:	4402      	add	r2, r0
 801ad62:	4603      	mov	r3, r0
 801ad64:	4293      	cmp	r3, r2
 801ad66:	d100      	bne.n	801ad6a <memset+0xa>
 801ad68:	4770      	bx	lr
 801ad6a:	f803 1b01 	strb.w	r1, [r3], #1
 801ad6e:	e7f9      	b.n	801ad64 <memset+0x4>

0801ad70 <_calloc_r>:
 801ad70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ad72:	fba1 2402 	umull	r2, r4, r1, r2
 801ad76:	b94c      	cbnz	r4, 801ad8c <_calloc_r+0x1c>
 801ad78:	4611      	mov	r1, r2
 801ad7a:	9201      	str	r2, [sp, #4]
 801ad7c:	f000 f87a 	bl	801ae74 <_malloc_r>
 801ad80:	9a01      	ldr	r2, [sp, #4]
 801ad82:	4605      	mov	r5, r0
 801ad84:	b930      	cbnz	r0, 801ad94 <_calloc_r+0x24>
 801ad86:	4628      	mov	r0, r5
 801ad88:	b003      	add	sp, #12
 801ad8a:	bd30      	pop	{r4, r5, pc}
 801ad8c:	220c      	movs	r2, #12
 801ad8e:	6002      	str	r2, [r0, #0]
 801ad90:	2500      	movs	r5, #0
 801ad92:	e7f8      	b.n	801ad86 <_calloc_r+0x16>
 801ad94:	4621      	mov	r1, r4
 801ad96:	f7ff ffe3 	bl	801ad60 <memset>
 801ad9a:	e7f4      	b.n	801ad86 <_calloc_r+0x16>

0801ad9c <_free_r>:
 801ad9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ad9e:	2900      	cmp	r1, #0
 801ada0:	d044      	beq.n	801ae2c <_free_r+0x90>
 801ada2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ada6:	9001      	str	r0, [sp, #4]
 801ada8:	2b00      	cmp	r3, #0
 801adaa:	f1a1 0404 	sub.w	r4, r1, #4
 801adae:	bfb8      	it	lt
 801adb0:	18e4      	addlt	r4, r4, r3
 801adb2:	f000 ff9f 	bl	801bcf4 <__malloc_lock>
 801adb6:	4a1e      	ldr	r2, [pc, #120]	; (801ae30 <_free_r+0x94>)
 801adb8:	9801      	ldr	r0, [sp, #4]
 801adba:	6813      	ldr	r3, [r2, #0]
 801adbc:	b933      	cbnz	r3, 801adcc <_free_r+0x30>
 801adbe:	6063      	str	r3, [r4, #4]
 801adc0:	6014      	str	r4, [r2, #0]
 801adc2:	b003      	add	sp, #12
 801adc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801adc8:	f000 bf9a 	b.w	801bd00 <__malloc_unlock>
 801adcc:	42a3      	cmp	r3, r4
 801adce:	d908      	bls.n	801ade2 <_free_r+0x46>
 801add0:	6825      	ldr	r5, [r4, #0]
 801add2:	1961      	adds	r1, r4, r5
 801add4:	428b      	cmp	r3, r1
 801add6:	bf01      	itttt	eq
 801add8:	6819      	ldreq	r1, [r3, #0]
 801adda:	685b      	ldreq	r3, [r3, #4]
 801addc:	1949      	addeq	r1, r1, r5
 801adde:	6021      	streq	r1, [r4, #0]
 801ade0:	e7ed      	b.n	801adbe <_free_r+0x22>
 801ade2:	461a      	mov	r2, r3
 801ade4:	685b      	ldr	r3, [r3, #4]
 801ade6:	b10b      	cbz	r3, 801adec <_free_r+0x50>
 801ade8:	42a3      	cmp	r3, r4
 801adea:	d9fa      	bls.n	801ade2 <_free_r+0x46>
 801adec:	6811      	ldr	r1, [r2, #0]
 801adee:	1855      	adds	r5, r2, r1
 801adf0:	42a5      	cmp	r5, r4
 801adf2:	d10b      	bne.n	801ae0c <_free_r+0x70>
 801adf4:	6824      	ldr	r4, [r4, #0]
 801adf6:	4421      	add	r1, r4
 801adf8:	1854      	adds	r4, r2, r1
 801adfa:	42a3      	cmp	r3, r4
 801adfc:	6011      	str	r1, [r2, #0]
 801adfe:	d1e0      	bne.n	801adc2 <_free_r+0x26>
 801ae00:	681c      	ldr	r4, [r3, #0]
 801ae02:	685b      	ldr	r3, [r3, #4]
 801ae04:	6053      	str	r3, [r2, #4]
 801ae06:	4421      	add	r1, r4
 801ae08:	6011      	str	r1, [r2, #0]
 801ae0a:	e7da      	b.n	801adc2 <_free_r+0x26>
 801ae0c:	d902      	bls.n	801ae14 <_free_r+0x78>
 801ae0e:	230c      	movs	r3, #12
 801ae10:	6003      	str	r3, [r0, #0]
 801ae12:	e7d6      	b.n	801adc2 <_free_r+0x26>
 801ae14:	6825      	ldr	r5, [r4, #0]
 801ae16:	1961      	adds	r1, r4, r5
 801ae18:	428b      	cmp	r3, r1
 801ae1a:	bf04      	itt	eq
 801ae1c:	6819      	ldreq	r1, [r3, #0]
 801ae1e:	685b      	ldreq	r3, [r3, #4]
 801ae20:	6063      	str	r3, [r4, #4]
 801ae22:	bf04      	itt	eq
 801ae24:	1949      	addeq	r1, r1, r5
 801ae26:	6021      	streq	r1, [r4, #0]
 801ae28:	6054      	str	r4, [r2, #4]
 801ae2a:	e7ca      	b.n	801adc2 <_free_r+0x26>
 801ae2c:	b003      	add	sp, #12
 801ae2e:	bd30      	pop	{r4, r5, pc}
 801ae30:	200029c4 	.word	0x200029c4

0801ae34 <sbrk_aligned>:
 801ae34:	b570      	push	{r4, r5, r6, lr}
 801ae36:	4e0e      	ldr	r6, [pc, #56]	; (801ae70 <sbrk_aligned+0x3c>)
 801ae38:	460c      	mov	r4, r1
 801ae3a:	6831      	ldr	r1, [r6, #0]
 801ae3c:	4605      	mov	r5, r0
 801ae3e:	b911      	cbnz	r1, 801ae46 <sbrk_aligned+0x12>
 801ae40:	f000 fc08 	bl	801b654 <_sbrk_r>
 801ae44:	6030      	str	r0, [r6, #0]
 801ae46:	4621      	mov	r1, r4
 801ae48:	4628      	mov	r0, r5
 801ae4a:	f000 fc03 	bl	801b654 <_sbrk_r>
 801ae4e:	1c43      	adds	r3, r0, #1
 801ae50:	d00a      	beq.n	801ae68 <sbrk_aligned+0x34>
 801ae52:	1cc4      	adds	r4, r0, #3
 801ae54:	f024 0403 	bic.w	r4, r4, #3
 801ae58:	42a0      	cmp	r0, r4
 801ae5a:	d007      	beq.n	801ae6c <sbrk_aligned+0x38>
 801ae5c:	1a21      	subs	r1, r4, r0
 801ae5e:	4628      	mov	r0, r5
 801ae60:	f000 fbf8 	bl	801b654 <_sbrk_r>
 801ae64:	3001      	adds	r0, #1
 801ae66:	d101      	bne.n	801ae6c <sbrk_aligned+0x38>
 801ae68:	f04f 34ff 	mov.w	r4, #4294967295
 801ae6c:	4620      	mov	r0, r4
 801ae6e:	bd70      	pop	{r4, r5, r6, pc}
 801ae70:	200029c8 	.word	0x200029c8

0801ae74 <_malloc_r>:
 801ae74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae78:	1ccd      	adds	r5, r1, #3
 801ae7a:	f025 0503 	bic.w	r5, r5, #3
 801ae7e:	3508      	adds	r5, #8
 801ae80:	2d0c      	cmp	r5, #12
 801ae82:	bf38      	it	cc
 801ae84:	250c      	movcc	r5, #12
 801ae86:	2d00      	cmp	r5, #0
 801ae88:	4607      	mov	r7, r0
 801ae8a:	db01      	blt.n	801ae90 <_malloc_r+0x1c>
 801ae8c:	42a9      	cmp	r1, r5
 801ae8e:	d905      	bls.n	801ae9c <_malloc_r+0x28>
 801ae90:	230c      	movs	r3, #12
 801ae92:	603b      	str	r3, [r7, #0]
 801ae94:	2600      	movs	r6, #0
 801ae96:	4630      	mov	r0, r6
 801ae98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae9c:	4e2e      	ldr	r6, [pc, #184]	; (801af58 <_malloc_r+0xe4>)
 801ae9e:	f000 ff29 	bl	801bcf4 <__malloc_lock>
 801aea2:	6833      	ldr	r3, [r6, #0]
 801aea4:	461c      	mov	r4, r3
 801aea6:	bb34      	cbnz	r4, 801aef6 <_malloc_r+0x82>
 801aea8:	4629      	mov	r1, r5
 801aeaa:	4638      	mov	r0, r7
 801aeac:	f7ff ffc2 	bl	801ae34 <sbrk_aligned>
 801aeb0:	1c43      	adds	r3, r0, #1
 801aeb2:	4604      	mov	r4, r0
 801aeb4:	d14d      	bne.n	801af52 <_malloc_r+0xde>
 801aeb6:	6834      	ldr	r4, [r6, #0]
 801aeb8:	4626      	mov	r6, r4
 801aeba:	2e00      	cmp	r6, #0
 801aebc:	d140      	bne.n	801af40 <_malloc_r+0xcc>
 801aebe:	6823      	ldr	r3, [r4, #0]
 801aec0:	4631      	mov	r1, r6
 801aec2:	4638      	mov	r0, r7
 801aec4:	eb04 0803 	add.w	r8, r4, r3
 801aec8:	f000 fbc4 	bl	801b654 <_sbrk_r>
 801aecc:	4580      	cmp	r8, r0
 801aece:	d13a      	bne.n	801af46 <_malloc_r+0xd2>
 801aed0:	6821      	ldr	r1, [r4, #0]
 801aed2:	3503      	adds	r5, #3
 801aed4:	1a6d      	subs	r5, r5, r1
 801aed6:	f025 0503 	bic.w	r5, r5, #3
 801aeda:	3508      	adds	r5, #8
 801aedc:	2d0c      	cmp	r5, #12
 801aede:	bf38      	it	cc
 801aee0:	250c      	movcc	r5, #12
 801aee2:	4629      	mov	r1, r5
 801aee4:	4638      	mov	r0, r7
 801aee6:	f7ff ffa5 	bl	801ae34 <sbrk_aligned>
 801aeea:	3001      	adds	r0, #1
 801aeec:	d02b      	beq.n	801af46 <_malloc_r+0xd2>
 801aeee:	6823      	ldr	r3, [r4, #0]
 801aef0:	442b      	add	r3, r5
 801aef2:	6023      	str	r3, [r4, #0]
 801aef4:	e00e      	b.n	801af14 <_malloc_r+0xa0>
 801aef6:	6822      	ldr	r2, [r4, #0]
 801aef8:	1b52      	subs	r2, r2, r5
 801aefa:	d41e      	bmi.n	801af3a <_malloc_r+0xc6>
 801aefc:	2a0b      	cmp	r2, #11
 801aefe:	d916      	bls.n	801af2e <_malloc_r+0xba>
 801af00:	1961      	adds	r1, r4, r5
 801af02:	42a3      	cmp	r3, r4
 801af04:	6025      	str	r5, [r4, #0]
 801af06:	bf18      	it	ne
 801af08:	6059      	strne	r1, [r3, #4]
 801af0a:	6863      	ldr	r3, [r4, #4]
 801af0c:	bf08      	it	eq
 801af0e:	6031      	streq	r1, [r6, #0]
 801af10:	5162      	str	r2, [r4, r5]
 801af12:	604b      	str	r3, [r1, #4]
 801af14:	4638      	mov	r0, r7
 801af16:	f104 060b 	add.w	r6, r4, #11
 801af1a:	f000 fef1 	bl	801bd00 <__malloc_unlock>
 801af1e:	f026 0607 	bic.w	r6, r6, #7
 801af22:	1d23      	adds	r3, r4, #4
 801af24:	1af2      	subs	r2, r6, r3
 801af26:	d0b6      	beq.n	801ae96 <_malloc_r+0x22>
 801af28:	1b9b      	subs	r3, r3, r6
 801af2a:	50a3      	str	r3, [r4, r2]
 801af2c:	e7b3      	b.n	801ae96 <_malloc_r+0x22>
 801af2e:	6862      	ldr	r2, [r4, #4]
 801af30:	42a3      	cmp	r3, r4
 801af32:	bf0c      	ite	eq
 801af34:	6032      	streq	r2, [r6, #0]
 801af36:	605a      	strne	r2, [r3, #4]
 801af38:	e7ec      	b.n	801af14 <_malloc_r+0xa0>
 801af3a:	4623      	mov	r3, r4
 801af3c:	6864      	ldr	r4, [r4, #4]
 801af3e:	e7b2      	b.n	801aea6 <_malloc_r+0x32>
 801af40:	4634      	mov	r4, r6
 801af42:	6876      	ldr	r6, [r6, #4]
 801af44:	e7b9      	b.n	801aeba <_malloc_r+0x46>
 801af46:	230c      	movs	r3, #12
 801af48:	603b      	str	r3, [r7, #0]
 801af4a:	4638      	mov	r0, r7
 801af4c:	f000 fed8 	bl	801bd00 <__malloc_unlock>
 801af50:	e7a1      	b.n	801ae96 <_malloc_r+0x22>
 801af52:	6025      	str	r5, [r4, #0]
 801af54:	e7de      	b.n	801af14 <_malloc_r+0xa0>
 801af56:	bf00      	nop
 801af58:	200029c4 	.word	0x200029c4

0801af5c <__sfputc_r>:
 801af5c:	6893      	ldr	r3, [r2, #8]
 801af5e:	3b01      	subs	r3, #1
 801af60:	2b00      	cmp	r3, #0
 801af62:	b410      	push	{r4}
 801af64:	6093      	str	r3, [r2, #8]
 801af66:	da08      	bge.n	801af7a <__sfputc_r+0x1e>
 801af68:	6994      	ldr	r4, [r2, #24]
 801af6a:	42a3      	cmp	r3, r4
 801af6c:	db01      	blt.n	801af72 <__sfputc_r+0x16>
 801af6e:	290a      	cmp	r1, #10
 801af70:	d103      	bne.n	801af7a <__sfputc_r+0x1e>
 801af72:	f85d 4b04 	ldr.w	r4, [sp], #4
 801af76:	f000 bbe1 	b.w	801b73c <__swbuf_r>
 801af7a:	6813      	ldr	r3, [r2, #0]
 801af7c:	1c58      	adds	r0, r3, #1
 801af7e:	6010      	str	r0, [r2, #0]
 801af80:	7019      	strb	r1, [r3, #0]
 801af82:	4608      	mov	r0, r1
 801af84:	f85d 4b04 	ldr.w	r4, [sp], #4
 801af88:	4770      	bx	lr

0801af8a <__sfputs_r>:
 801af8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af8c:	4606      	mov	r6, r0
 801af8e:	460f      	mov	r7, r1
 801af90:	4614      	mov	r4, r2
 801af92:	18d5      	adds	r5, r2, r3
 801af94:	42ac      	cmp	r4, r5
 801af96:	d101      	bne.n	801af9c <__sfputs_r+0x12>
 801af98:	2000      	movs	r0, #0
 801af9a:	e007      	b.n	801afac <__sfputs_r+0x22>
 801af9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801afa0:	463a      	mov	r2, r7
 801afa2:	4630      	mov	r0, r6
 801afa4:	f7ff ffda 	bl	801af5c <__sfputc_r>
 801afa8:	1c43      	adds	r3, r0, #1
 801afaa:	d1f3      	bne.n	801af94 <__sfputs_r+0xa>
 801afac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801afb0 <_vfiprintf_r>:
 801afb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afb4:	460d      	mov	r5, r1
 801afb6:	b09d      	sub	sp, #116	; 0x74
 801afb8:	4614      	mov	r4, r2
 801afba:	4698      	mov	r8, r3
 801afbc:	4606      	mov	r6, r0
 801afbe:	b118      	cbz	r0, 801afc8 <_vfiprintf_r+0x18>
 801afc0:	6983      	ldr	r3, [r0, #24]
 801afc2:	b90b      	cbnz	r3, 801afc8 <_vfiprintf_r+0x18>
 801afc4:	f000 fd94 	bl	801baf0 <__sinit>
 801afc8:	4b89      	ldr	r3, [pc, #548]	; (801b1f0 <_vfiprintf_r+0x240>)
 801afca:	429d      	cmp	r5, r3
 801afcc:	d11b      	bne.n	801b006 <_vfiprintf_r+0x56>
 801afce:	6875      	ldr	r5, [r6, #4]
 801afd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801afd2:	07d9      	lsls	r1, r3, #31
 801afd4:	d405      	bmi.n	801afe2 <_vfiprintf_r+0x32>
 801afd6:	89ab      	ldrh	r3, [r5, #12]
 801afd8:	059a      	lsls	r2, r3, #22
 801afda:	d402      	bmi.n	801afe2 <_vfiprintf_r+0x32>
 801afdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801afde:	f7ff fe84 	bl	801acea <__retarget_lock_acquire_recursive>
 801afe2:	89ab      	ldrh	r3, [r5, #12]
 801afe4:	071b      	lsls	r3, r3, #28
 801afe6:	d501      	bpl.n	801afec <_vfiprintf_r+0x3c>
 801afe8:	692b      	ldr	r3, [r5, #16]
 801afea:	b9eb      	cbnz	r3, 801b028 <_vfiprintf_r+0x78>
 801afec:	4629      	mov	r1, r5
 801afee:	4630      	mov	r0, r6
 801aff0:	f000 fbf6 	bl	801b7e0 <__swsetup_r>
 801aff4:	b1c0      	cbz	r0, 801b028 <_vfiprintf_r+0x78>
 801aff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801aff8:	07dc      	lsls	r4, r3, #31
 801affa:	d50e      	bpl.n	801b01a <_vfiprintf_r+0x6a>
 801affc:	f04f 30ff 	mov.w	r0, #4294967295
 801b000:	b01d      	add	sp, #116	; 0x74
 801b002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b006:	4b7b      	ldr	r3, [pc, #492]	; (801b1f4 <_vfiprintf_r+0x244>)
 801b008:	429d      	cmp	r5, r3
 801b00a:	d101      	bne.n	801b010 <_vfiprintf_r+0x60>
 801b00c:	68b5      	ldr	r5, [r6, #8]
 801b00e:	e7df      	b.n	801afd0 <_vfiprintf_r+0x20>
 801b010:	4b79      	ldr	r3, [pc, #484]	; (801b1f8 <_vfiprintf_r+0x248>)
 801b012:	429d      	cmp	r5, r3
 801b014:	bf08      	it	eq
 801b016:	68f5      	ldreq	r5, [r6, #12]
 801b018:	e7da      	b.n	801afd0 <_vfiprintf_r+0x20>
 801b01a:	89ab      	ldrh	r3, [r5, #12]
 801b01c:	0598      	lsls	r0, r3, #22
 801b01e:	d4ed      	bmi.n	801affc <_vfiprintf_r+0x4c>
 801b020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b022:	f7ff fe63 	bl	801acec <__retarget_lock_release_recursive>
 801b026:	e7e9      	b.n	801affc <_vfiprintf_r+0x4c>
 801b028:	2300      	movs	r3, #0
 801b02a:	9309      	str	r3, [sp, #36]	; 0x24
 801b02c:	2320      	movs	r3, #32
 801b02e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b032:	f8cd 800c 	str.w	r8, [sp, #12]
 801b036:	2330      	movs	r3, #48	; 0x30
 801b038:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b1fc <_vfiprintf_r+0x24c>
 801b03c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b040:	f04f 0901 	mov.w	r9, #1
 801b044:	4623      	mov	r3, r4
 801b046:	469a      	mov	sl, r3
 801b048:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b04c:	b10a      	cbz	r2, 801b052 <_vfiprintf_r+0xa2>
 801b04e:	2a25      	cmp	r2, #37	; 0x25
 801b050:	d1f9      	bne.n	801b046 <_vfiprintf_r+0x96>
 801b052:	ebba 0b04 	subs.w	fp, sl, r4
 801b056:	d00b      	beq.n	801b070 <_vfiprintf_r+0xc0>
 801b058:	465b      	mov	r3, fp
 801b05a:	4622      	mov	r2, r4
 801b05c:	4629      	mov	r1, r5
 801b05e:	4630      	mov	r0, r6
 801b060:	f7ff ff93 	bl	801af8a <__sfputs_r>
 801b064:	3001      	adds	r0, #1
 801b066:	f000 80aa 	beq.w	801b1be <_vfiprintf_r+0x20e>
 801b06a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b06c:	445a      	add	r2, fp
 801b06e:	9209      	str	r2, [sp, #36]	; 0x24
 801b070:	f89a 3000 	ldrb.w	r3, [sl]
 801b074:	2b00      	cmp	r3, #0
 801b076:	f000 80a2 	beq.w	801b1be <_vfiprintf_r+0x20e>
 801b07a:	2300      	movs	r3, #0
 801b07c:	f04f 32ff 	mov.w	r2, #4294967295
 801b080:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b084:	f10a 0a01 	add.w	sl, sl, #1
 801b088:	9304      	str	r3, [sp, #16]
 801b08a:	9307      	str	r3, [sp, #28]
 801b08c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b090:	931a      	str	r3, [sp, #104]	; 0x68
 801b092:	4654      	mov	r4, sl
 801b094:	2205      	movs	r2, #5
 801b096:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b09a:	4858      	ldr	r0, [pc, #352]	; (801b1fc <_vfiprintf_r+0x24c>)
 801b09c:	f7e5 f898 	bl	80001d0 <memchr>
 801b0a0:	9a04      	ldr	r2, [sp, #16]
 801b0a2:	b9d8      	cbnz	r0, 801b0dc <_vfiprintf_r+0x12c>
 801b0a4:	06d1      	lsls	r1, r2, #27
 801b0a6:	bf44      	itt	mi
 801b0a8:	2320      	movmi	r3, #32
 801b0aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b0ae:	0713      	lsls	r3, r2, #28
 801b0b0:	bf44      	itt	mi
 801b0b2:	232b      	movmi	r3, #43	; 0x2b
 801b0b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b0b8:	f89a 3000 	ldrb.w	r3, [sl]
 801b0bc:	2b2a      	cmp	r3, #42	; 0x2a
 801b0be:	d015      	beq.n	801b0ec <_vfiprintf_r+0x13c>
 801b0c0:	9a07      	ldr	r2, [sp, #28]
 801b0c2:	4654      	mov	r4, sl
 801b0c4:	2000      	movs	r0, #0
 801b0c6:	f04f 0c0a 	mov.w	ip, #10
 801b0ca:	4621      	mov	r1, r4
 801b0cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b0d0:	3b30      	subs	r3, #48	; 0x30
 801b0d2:	2b09      	cmp	r3, #9
 801b0d4:	d94e      	bls.n	801b174 <_vfiprintf_r+0x1c4>
 801b0d6:	b1b0      	cbz	r0, 801b106 <_vfiprintf_r+0x156>
 801b0d8:	9207      	str	r2, [sp, #28]
 801b0da:	e014      	b.n	801b106 <_vfiprintf_r+0x156>
 801b0dc:	eba0 0308 	sub.w	r3, r0, r8
 801b0e0:	fa09 f303 	lsl.w	r3, r9, r3
 801b0e4:	4313      	orrs	r3, r2
 801b0e6:	9304      	str	r3, [sp, #16]
 801b0e8:	46a2      	mov	sl, r4
 801b0ea:	e7d2      	b.n	801b092 <_vfiprintf_r+0xe2>
 801b0ec:	9b03      	ldr	r3, [sp, #12]
 801b0ee:	1d19      	adds	r1, r3, #4
 801b0f0:	681b      	ldr	r3, [r3, #0]
 801b0f2:	9103      	str	r1, [sp, #12]
 801b0f4:	2b00      	cmp	r3, #0
 801b0f6:	bfbb      	ittet	lt
 801b0f8:	425b      	neglt	r3, r3
 801b0fa:	f042 0202 	orrlt.w	r2, r2, #2
 801b0fe:	9307      	strge	r3, [sp, #28]
 801b100:	9307      	strlt	r3, [sp, #28]
 801b102:	bfb8      	it	lt
 801b104:	9204      	strlt	r2, [sp, #16]
 801b106:	7823      	ldrb	r3, [r4, #0]
 801b108:	2b2e      	cmp	r3, #46	; 0x2e
 801b10a:	d10c      	bne.n	801b126 <_vfiprintf_r+0x176>
 801b10c:	7863      	ldrb	r3, [r4, #1]
 801b10e:	2b2a      	cmp	r3, #42	; 0x2a
 801b110:	d135      	bne.n	801b17e <_vfiprintf_r+0x1ce>
 801b112:	9b03      	ldr	r3, [sp, #12]
 801b114:	1d1a      	adds	r2, r3, #4
 801b116:	681b      	ldr	r3, [r3, #0]
 801b118:	9203      	str	r2, [sp, #12]
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	bfb8      	it	lt
 801b11e:	f04f 33ff 	movlt.w	r3, #4294967295
 801b122:	3402      	adds	r4, #2
 801b124:	9305      	str	r3, [sp, #20]
 801b126:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b20c <_vfiprintf_r+0x25c>
 801b12a:	7821      	ldrb	r1, [r4, #0]
 801b12c:	2203      	movs	r2, #3
 801b12e:	4650      	mov	r0, sl
 801b130:	f7e5 f84e 	bl	80001d0 <memchr>
 801b134:	b140      	cbz	r0, 801b148 <_vfiprintf_r+0x198>
 801b136:	2340      	movs	r3, #64	; 0x40
 801b138:	eba0 000a 	sub.w	r0, r0, sl
 801b13c:	fa03 f000 	lsl.w	r0, r3, r0
 801b140:	9b04      	ldr	r3, [sp, #16]
 801b142:	4303      	orrs	r3, r0
 801b144:	3401      	adds	r4, #1
 801b146:	9304      	str	r3, [sp, #16]
 801b148:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b14c:	482c      	ldr	r0, [pc, #176]	; (801b200 <_vfiprintf_r+0x250>)
 801b14e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b152:	2206      	movs	r2, #6
 801b154:	f7e5 f83c 	bl	80001d0 <memchr>
 801b158:	2800      	cmp	r0, #0
 801b15a:	d03f      	beq.n	801b1dc <_vfiprintf_r+0x22c>
 801b15c:	4b29      	ldr	r3, [pc, #164]	; (801b204 <_vfiprintf_r+0x254>)
 801b15e:	bb1b      	cbnz	r3, 801b1a8 <_vfiprintf_r+0x1f8>
 801b160:	9b03      	ldr	r3, [sp, #12]
 801b162:	3307      	adds	r3, #7
 801b164:	f023 0307 	bic.w	r3, r3, #7
 801b168:	3308      	adds	r3, #8
 801b16a:	9303      	str	r3, [sp, #12]
 801b16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b16e:	443b      	add	r3, r7
 801b170:	9309      	str	r3, [sp, #36]	; 0x24
 801b172:	e767      	b.n	801b044 <_vfiprintf_r+0x94>
 801b174:	fb0c 3202 	mla	r2, ip, r2, r3
 801b178:	460c      	mov	r4, r1
 801b17a:	2001      	movs	r0, #1
 801b17c:	e7a5      	b.n	801b0ca <_vfiprintf_r+0x11a>
 801b17e:	2300      	movs	r3, #0
 801b180:	3401      	adds	r4, #1
 801b182:	9305      	str	r3, [sp, #20]
 801b184:	4619      	mov	r1, r3
 801b186:	f04f 0c0a 	mov.w	ip, #10
 801b18a:	4620      	mov	r0, r4
 801b18c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b190:	3a30      	subs	r2, #48	; 0x30
 801b192:	2a09      	cmp	r2, #9
 801b194:	d903      	bls.n	801b19e <_vfiprintf_r+0x1ee>
 801b196:	2b00      	cmp	r3, #0
 801b198:	d0c5      	beq.n	801b126 <_vfiprintf_r+0x176>
 801b19a:	9105      	str	r1, [sp, #20]
 801b19c:	e7c3      	b.n	801b126 <_vfiprintf_r+0x176>
 801b19e:	fb0c 2101 	mla	r1, ip, r1, r2
 801b1a2:	4604      	mov	r4, r0
 801b1a4:	2301      	movs	r3, #1
 801b1a6:	e7f0      	b.n	801b18a <_vfiprintf_r+0x1da>
 801b1a8:	ab03      	add	r3, sp, #12
 801b1aa:	9300      	str	r3, [sp, #0]
 801b1ac:	462a      	mov	r2, r5
 801b1ae:	4b16      	ldr	r3, [pc, #88]	; (801b208 <_vfiprintf_r+0x258>)
 801b1b0:	a904      	add	r1, sp, #16
 801b1b2:	4630      	mov	r0, r6
 801b1b4:	f3af 8000 	nop.w
 801b1b8:	4607      	mov	r7, r0
 801b1ba:	1c78      	adds	r0, r7, #1
 801b1bc:	d1d6      	bne.n	801b16c <_vfiprintf_r+0x1bc>
 801b1be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b1c0:	07d9      	lsls	r1, r3, #31
 801b1c2:	d405      	bmi.n	801b1d0 <_vfiprintf_r+0x220>
 801b1c4:	89ab      	ldrh	r3, [r5, #12]
 801b1c6:	059a      	lsls	r2, r3, #22
 801b1c8:	d402      	bmi.n	801b1d0 <_vfiprintf_r+0x220>
 801b1ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b1cc:	f7ff fd8e 	bl	801acec <__retarget_lock_release_recursive>
 801b1d0:	89ab      	ldrh	r3, [r5, #12]
 801b1d2:	065b      	lsls	r3, r3, #25
 801b1d4:	f53f af12 	bmi.w	801affc <_vfiprintf_r+0x4c>
 801b1d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b1da:	e711      	b.n	801b000 <_vfiprintf_r+0x50>
 801b1dc:	ab03      	add	r3, sp, #12
 801b1de:	9300      	str	r3, [sp, #0]
 801b1e0:	462a      	mov	r2, r5
 801b1e2:	4b09      	ldr	r3, [pc, #36]	; (801b208 <_vfiprintf_r+0x258>)
 801b1e4:	a904      	add	r1, sp, #16
 801b1e6:	4630      	mov	r0, r6
 801b1e8:	f000 f880 	bl	801b2ec <_printf_i>
 801b1ec:	e7e4      	b.n	801b1b8 <_vfiprintf_r+0x208>
 801b1ee:	bf00      	nop
 801b1f0:	0801f09c 	.word	0x0801f09c
 801b1f4:	0801f0bc 	.word	0x0801f0bc
 801b1f8:	0801f07c 	.word	0x0801f07c
 801b1fc:	0801f048 	.word	0x0801f048
 801b200:	0801f052 	.word	0x0801f052
 801b204:	00000000 	.word	0x00000000
 801b208:	0801af8b 	.word	0x0801af8b
 801b20c:	0801f04e 	.word	0x0801f04e

0801b210 <_printf_common>:
 801b210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b214:	4616      	mov	r6, r2
 801b216:	4699      	mov	r9, r3
 801b218:	688a      	ldr	r2, [r1, #8]
 801b21a:	690b      	ldr	r3, [r1, #16]
 801b21c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b220:	4293      	cmp	r3, r2
 801b222:	bfb8      	it	lt
 801b224:	4613      	movlt	r3, r2
 801b226:	6033      	str	r3, [r6, #0]
 801b228:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b22c:	4607      	mov	r7, r0
 801b22e:	460c      	mov	r4, r1
 801b230:	b10a      	cbz	r2, 801b236 <_printf_common+0x26>
 801b232:	3301      	adds	r3, #1
 801b234:	6033      	str	r3, [r6, #0]
 801b236:	6823      	ldr	r3, [r4, #0]
 801b238:	0699      	lsls	r1, r3, #26
 801b23a:	bf42      	ittt	mi
 801b23c:	6833      	ldrmi	r3, [r6, #0]
 801b23e:	3302      	addmi	r3, #2
 801b240:	6033      	strmi	r3, [r6, #0]
 801b242:	6825      	ldr	r5, [r4, #0]
 801b244:	f015 0506 	ands.w	r5, r5, #6
 801b248:	d106      	bne.n	801b258 <_printf_common+0x48>
 801b24a:	f104 0a19 	add.w	sl, r4, #25
 801b24e:	68e3      	ldr	r3, [r4, #12]
 801b250:	6832      	ldr	r2, [r6, #0]
 801b252:	1a9b      	subs	r3, r3, r2
 801b254:	42ab      	cmp	r3, r5
 801b256:	dc26      	bgt.n	801b2a6 <_printf_common+0x96>
 801b258:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b25c:	1e13      	subs	r3, r2, #0
 801b25e:	6822      	ldr	r2, [r4, #0]
 801b260:	bf18      	it	ne
 801b262:	2301      	movne	r3, #1
 801b264:	0692      	lsls	r2, r2, #26
 801b266:	d42b      	bmi.n	801b2c0 <_printf_common+0xb0>
 801b268:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b26c:	4649      	mov	r1, r9
 801b26e:	4638      	mov	r0, r7
 801b270:	47c0      	blx	r8
 801b272:	3001      	adds	r0, #1
 801b274:	d01e      	beq.n	801b2b4 <_printf_common+0xa4>
 801b276:	6823      	ldr	r3, [r4, #0]
 801b278:	68e5      	ldr	r5, [r4, #12]
 801b27a:	6832      	ldr	r2, [r6, #0]
 801b27c:	f003 0306 	and.w	r3, r3, #6
 801b280:	2b04      	cmp	r3, #4
 801b282:	bf08      	it	eq
 801b284:	1aad      	subeq	r5, r5, r2
 801b286:	68a3      	ldr	r3, [r4, #8]
 801b288:	6922      	ldr	r2, [r4, #16]
 801b28a:	bf0c      	ite	eq
 801b28c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b290:	2500      	movne	r5, #0
 801b292:	4293      	cmp	r3, r2
 801b294:	bfc4      	itt	gt
 801b296:	1a9b      	subgt	r3, r3, r2
 801b298:	18ed      	addgt	r5, r5, r3
 801b29a:	2600      	movs	r6, #0
 801b29c:	341a      	adds	r4, #26
 801b29e:	42b5      	cmp	r5, r6
 801b2a0:	d11a      	bne.n	801b2d8 <_printf_common+0xc8>
 801b2a2:	2000      	movs	r0, #0
 801b2a4:	e008      	b.n	801b2b8 <_printf_common+0xa8>
 801b2a6:	2301      	movs	r3, #1
 801b2a8:	4652      	mov	r2, sl
 801b2aa:	4649      	mov	r1, r9
 801b2ac:	4638      	mov	r0, r7
 801b2ae:	47c0      	blx	r8
 801b2b0:	3001      	adds	r0, #1
 801b2b2:	d103      	bne.n	801b2bc <_printf_common+0xac>
 801b2b4:	f04f 30ff 	mov.w	r0, #4294967295
 801b2b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b2bc:	3501      	adds	r5, #1
 801b2be:	e7c6      	b.n	801b24e <_printf_common+0x3e>
 801b2c0:	18e1      	adds	r1, r4, r3
 801b2c2:	1c5a      	adds	r2, r3, #1
 801b2c4:	2030      	movs	r0, #48	; 0x30
 801b2c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b2ca:	4422      	add	r2, r4
 801b2cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b2d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b2d4:	3302      	adds	r3, #2
 801b2d6:	e7c7      	b.n	801b268 <_printf_common+0x58>
 801b2d8:	2301      	movs	r3, #1
 801b2da:	4622      	mov	r2, r4
 801b2dc:	4649      	mov	r1, r9
 801b2de:	4638      	mov	r0, r7
 801b2e0:	47c0      	blx	r8
 801b2e2:	3001      	adds	r0, #1
 801b2e4:	d0e6      	beq.n	801b2b4 <_printf_common+0xa4>
 801b2e6:	3601      	adds	r6, #1
 801b2e8:	e7d9      	b.n	801b29e <_printf_common+0x8e>
	...

0801b2ec <_printf_i>:
 801b2ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b2f0:	7e0f      	ldrb	r7, [r1, #24]
 801b2f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b2f4:	2f78      	cmp	r7, #120	; 0x78
 801b2f6:	4691      	mov	r9, r2
 801b2f8:	4680      	mov	r8, r0
 801b2fa:	460c      	mov	r4, r1
 801b2fc:	469a      	mov	sl, r3
 801b2fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b302:	d807      	bhi.n	801b314 <_printf_i+0x28>
 801b304:	2f62      	cmp	r7, #98	; 0x62
 801b306:	d80a      	bhi.n	801b31e <_printf_i+0x32>
 801b308:	2f00      	cmp	r7, #0
 801b30a:	f000 80d8 	beq.w	801b4be <_printf_i+0x1d2>
 801b30e:	2f58      	cmp	r7, #88	; 0x58
 801b310:	f000 80a3 	beq.w	801b45a <_printf_i+0x16e>
 801b314:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b318:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b31c:	e03a      	b.n	801b394 <_printf_i+0xa8>
 801b31e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b322:	2b15      	cmp	r3, #21
 801b324:	d8f6      	bhi.n	801b314 <_printf_i+0x28>
 801b326:	a101      	add	r1, pc, #4	; (adr r1, 801b32c <_printf_i+0x40>)
 801b328:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b32c:	0801b385 	.word	0x0801b385
 801b330:	0801b399 	.word	0x0801b399
 801b334:	0801b315 	.word	0x0801b315
 801b338:	0801b315 	.word	0x0801b315
 801b33c:	0801b315 	.word	0x0801b315
 801b340:	0801b315 	.word	0x0801b315
 801b344:	0801b399 	.word	0x0801b399
 801b348:	0801b315 	.word	0x0801b315
 801b34c:	0801b315 	.word	0x0801b315
 801b350:	0801b315 	.word	0x0801b315
 801b354:	0801b315 	.word	0x0801b315
 801b358:	0801b4a5 	.word	0x0801b4a5
 801b35c:	0801b3c9 	.word	0x0801b3c9
 801b360:	0801b487 	.word	0x0801b487
 801b364:	0801b315 	.word	0x0801b315
 801b368:	0801b315 	.word	0x0801b315
 801b36c:	0801b4c7 	.word	0x0801b4c7
 801b370:	0801b315 	.word	0x0801b315
 801b374:	0801b3c9 	.word	0x0801b3c9
 801b378:	0801b315 	.word	0x0801b315
 801b37c:	0801b315 	.word	0x0801b315
 801b380:	0801b48f 	.word	0x0801b48f
 801b384:	682b      	ldr	r3, [r5, #0]
 801b386:	1d1a      	adds	r2, r3, #4
 801b388:	681b      	ldr	r3, [r3, #0]
 801b38a:	602a      	str	r2, [r5, #0]
 801b38c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b390:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b394:	2301      	movs	r3, #1
 801b396:	e0a3      	b.n	801b4e0 <_printf_i+0x1f4>
 801b398:	6820      	ldr	r0, [r4, #0]
 801b39a:	6829      	ldr	r1, [r5, #0]
 801b39c:	0606      	lsls	r6, r0, #24
 801b39e:	f101 0304 	add.w	r3, r1, #4
 801b3a2:	d50a      	bpl.n	801b3ba <_printf_i+0xce>
 801b3a4:	680e      	ldr	r6, [r1, #0]
 801b3a6:	602b      	str	r3, [r5, #0]
 801b3a8:	2e00      	cmp	r6, #0
 801b3aa:	da03      	bge.n	801b3b4 <_printf_i+0xc8>
 801b3ac:	232d      	movs	r3, #45	; 0x2d
 801b3ae:	4276      	negs	r6, r6
 801b3b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b3b4:	485e      	ldr	r0, [pc, #376]	; (801b530 <_printf_i+0x244>)
 801b3b6:	230a      	movs	r3, #10
 801b3b8:	e019      	b.n	801b3ee <_printf_i+0x102>
 801b3ba:	680e      	ldr	r6, [r1, #0]
 801b3bc:	602b      	str	r3, [r5, #0]
 801b3be:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b3c2:	bf18      	it	ne
 801b3c4:	b236      	sxthne	r6, r6
 801b3c6:	e7ef      	b.n	801b3a8 <_printf_i+0xbc>
 801b3c8:	682b      	ldr	r3, [r5, #0]
 801b3ca:	6820      	ldr	r0, [r4, #0]
 801b3cc:	1d19      	adds	r1, r3, #4
 801b3ce:	6029      	str	r1, [r5, #0]
 801b3d0:	0601      	lsls	r1, r0, #24
 801b3d2:	d501      	bpl.n	801b3d8 <_printf_i+0xec>
 801b3d4:	681e      	ldr	r6, [r3, #0]
 801b3d6:	e002      	b.n	801b3de <_printf_i+0xf2>
 801b3d8:	0646      	lsls	r6, r0, #25
 801b3da:	d5fb      	bpl.n	801b3d4 <_printf_i+0xe8>
 801b3dc:	881e      	ldrh	r6, [r3, #0]
 801b3de:	4854      	ldr	r0, [pc, #336]	; (801b530 <_printf_i+0x244>)
 801b3e0:	2f6f      	cmp	r7, #111	; 0x6f
 801b3e2:	bf0c      	ite	eq
 801b3e4:	2308      	moveq	r3, #8
 801b3e6:	230a      	movne	r3, #10
 801b3e8:	2100      	movs	r1, #0
 801b3ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b3ee:	6865      	ldr	r5, [r4, #4]
 801b3f0:	60a5      	str	r5, [r4, #8]
 801b3f2:	2d00      	cmp	r5, #0
 801b3f4:	bfa2      	ittt	ge
 801b3f6:	6821      	ldrge	r1, [r4, #0]
 801b3f8:	f021 0104 	bicge.w	r1, r1, #4
 801b3fc:	6021      	strge	r1, [r4, #0]
 801b3fe:	b90e      	cbnz	r6, 801b404 <_printf_i+0x118>
 801b400:	2d00      	cmp	r5, #0
 801b402:	d04d      	beq.n	801b4a0 <_printf_i+0x1b4>
 801b404:	4615      	mov	r5, r2
 801b406:	fbb6 f1f3 	udiv	r1, r6, r3
 801b40a:	fb03 6711 	mls	r7, r3, r1, r6
 801b40e:	5dc7      	ldrb	r7, [r0, r7]
 801b410:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b414:	4637      	mov	r7, r6
 801b416:	42bb      	cmp	r3, r7
 801b418:	460e      	mov	r6, r1
 801b41a:	d9f4      	bls.n	801b406 <_printf_i+0x11a>
 801b41c:	2b08      	cmp	r3, #8
 801b41e:	d10b      	bne.n	801b438 <_printf_i+0x14c>
 801b420:	6823      	ldr	r3, [r4, #0]
 801b422:	07de      	lsls	r6, r3, #31
 801b424:	d508      	bpl.n	801b438 <_printf_i+0x14c>
 801b426:	6923      	ldr	r3, [r4, #16]
 801b428:	6861      	ldr	r1, [r4, #4]
 801b42a:	4299      	cmp	r1, r3
 801b42c:	bfde      	ittt	le
 801b42e:	2330      	movle	r3, #48	; 0x30
 801b430:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b434:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b438:	1b52      	subs	r2, r2, r5
 801b43a:	6122      	str	r2, [r4, #16]
 801b43c:	f8cd a000 	str.w	sl, [sp]
 801b440:	464b      	mov	r3, r9
 801b442:	aa03      	add	r2, sp, #12
 801b444:	4621      	mov	r1, r4
 801b446:	4640      	mov	r0, r8
 801b448:	f7ff fee2 	bl	801b210 <_printf_common>
 801b44c:	3001      	adds	r0, #1
 801b44e:	d14c      	bne.n	801b4ea <_printf_i+0x1fe>
 801b450:	f04f 30ff 	mov.w	r0, #4294967295
 801b454:	b004      	add	sp, #16
 801b456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b45a:	4835      	ldr	r0, [pc, #212]	; (801b530 <_printf_i+0x244>)
 801b45c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801b460:	6829      	ldr	r1, [r5, #0]
 801b462:	6823      	ldr	r3, [r4, #0]
 801b464:	f851 6b04 	ldr.w	r6, [r1], #4
 801b468:	6029      	str	r1, [r5, #0]
 801b46a:	061d      	lsls	r5, r3, #24
 801b46c:	d514      	bpl.n	801b498 <_printf_i+0x1ac>
 801b46e:	07df      	lsls	r7, r3, #31
 801b470:	bf44      	itt	mi
 801b472:	f043 0320 	orrmi.w	r3, r3, #32
 801b476:	6023      	strmi	r3, [r4, #0]
 801b478:	b91e      	cbnz	r6, 801b482 <_printf_i+0x196>
 801b47a:	6823      	ldr	r3, [r4, #0]
 801b47c:	f023 0320 	bic.w	r3, r3, #32
 801b480:	6023      	str	r3, [r4, #0]
 801b482:	2310      	movs	r3, #16
 801b484:	e7b0      	b.n	801b3e8 <_printf_i+0xfc>
 801b486:	6823      	ldr	r3, [r4, #0]
 801b488:	f043 0320 	orr.w	r3, r3, #32
 801b48c:	6023      	str	r3, [r4, #0]
 801b48e:	2378      	movs	r3, #120	; 0x78
 801b490:	4828      	ldr	r0, [pc, #160]	; (801b534 <_printf_i+0x248>)
 801b492:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b496:	e7e3      	b.n	801b460 <_printf_i+0x174>
 801b498:	0659      	lsls	r1, r3, #25
 801b49a:	bf48      	it	mi
 801b49c:	b2b6      	uxthmi	r6, r6
 801b49e:	e7e6      	b.n	801b46e <_printf_i+0x182>
 801b4a0:	4615      	mov	r5, r2
 801b4a2:	e7bb      	b.n	801b41c <_printf_i+0x130>
 801b4a4:	682b      	ldr	r3, [r5, #0]
 801b4a6:	6826      	ldr	r6, [r4, #0]
 801b4a8:	6961      	ldr	r1, [r4, #20]
 801b4aa:	1d18      	adds	r0, r3, #4
 801b4ac:	6028      	str	r0, [r5, #0]
 801b4ae:	0635      	lsls	r5, r6, #24
 801b4b0:	681b      	ldr	r3, [r3, #0]
 801b4b2:	d501      	bpl.n	801b4b8 <_printf_i+0x1cc>
 801b4b4:	6019      	str	r1, [r3, #0]
 801b4b6:	e002      	b.n	801b4be <_printf_i+0x1d2>
 801b4b8:	0670      	lsls	r0, r6, #25
 801b4ba:	d5fb      	bpl.n	801b4b4 <_printf_i+0x1c8>
 801b4bc:	8019      	strh	r1, [r3, #0]
 801b4be:	2300      	movs	r3, #0
 801b4c0:	6123      	str	r3, [r4, #16]
 801b4c2:	4615      	mov	r5, r2
 801b4c4:	e7ba      	b.n	801b43c <_printf_i+0x150>
 801b4c6:	682b      	ldr	r3, [r5, #0]
 801b4c8:	1d1a      	adds	r2, r3, #4
 801b4ca:	602a      	str	r2, [r5, #0]
 801b4cc:	681d      	ldr	r5, [r3, #0]
 801b4ce:	6862      	ldr	r2, [r4, #4]
 801b4d0:	2100      	movs	r1, #0
 801b4d2:	4628      	mov	r0, r5
 801b4d4:	f7e4 fe7c 	bl	80001d0 <memchr>
 801b4d8:	b108      	cbz	r0, 801b4de <_printf_i+0x1f2>
 801b4da:	1b40      	subs	r0, r0, r5
 801b4dc:	6060      	str	r0, [r4, #4]
 801b4de:	6863      	ldr	r3, [r4, #4]
 801b4e0:	6123      	str	r3, [r4, #16]
 801b4e2:	2300      	movs	r3, #0
 801b4e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b4e8:	e7a8      	b.n	801b43c <_printf_i+0x150>
 801b4ea:	6923      	ldr	r3, [r4, #16]
 801b4ec:	462a      	mov	r2, r5
 801b4ee:	4649      	mov	r1, r9
 801b4f0:	4640      	mov	r0, r8
 801b4f2:	47d0      	blx	sl
 801b4f4:	3001      	adds	r0, #1
 801b4f6:	d0ab      	beq.n	801b450 <_printf_i+0x164>
 801b4f8:	6823      	ldr	r3, [r4, #0]
 801b4fa:	079b      	lsls	r3, r3, #30
 801b4fc:	d413      	bmi.n	801b526 <_printf_i+0x23a>
 801b4fe:	68e0      	ldr	r0, [r4, #12]
 801b500:	9b03      	ldr	r3, [sp, #12]
 801b502:	4298      	cmp	r0, r3
 801b504:	bfb8      	it	lt
 801b506:	4618      	movlt	r0, r3
 801b508:	e7a4      	b.n	801b454 <_printf_i+0x168>
 801b50a:	2301      	movs	r3, #1
 801b50c:	4632      	mov	r2, r6
 801b50e:	4649      	mov	r1, r9
 801b510:	4640      	mov	r0, r8
 801b512:	47d0      	blx	sl
 801b514:	3001      	adds	r0, #1
 801b516:	d09b      	beq.n	801b450 <_printf_i+0x164>
 801b518:	3501      	adds	r5, #1
 801b51a:	68e3      	ldr	r3, [r4, #12]
 801b51c:	9903      	ldr	r1, [sp, #12]
 801b51e:	1a5b      	subs	r3, r3, r1
 801b520:	42ab      	cmp	r3, r5
 801b522:	dcf2      	bgt.n	801b50a <_printf_i+0x21e>
 801b524:	e7eb      	b.n	801b4fe <_printf_i+0x212>
 801b526:	2500      	movs	r5, #0
 801b528:	f104 0619 	add.w	r6, r4, #25
 801b52c:	e7f5      	b.n	801b51a <_printf_i+0x22e>
 801b52e:	bf00      	nop
 801b530:	0801f059 	.word	0x0801f059
 801b534:	0801f06a 	.word	0x0801f06a

0801b538 <iprintf>:
 801b538:	b40f      	push	{r0, r1, r2, r3}
 801b53a:	4b0a      	ldr	r3, [pc, #40]	; (801b564 <iprintf+0x2c>)
 801b53c:	b513      	push	{r0, r1, r4, lr}
 801b53e:	681c      	ldr	r4, [r3, #0]
 801b540:	b124      	cbz	r4, 801b54c <iprintf+0x14>
 801b542:	69a3      	ldr	r3, [r4, #24]
 801b544:	b913      	cbnz	r3, 801b54c <iprintf+0x14>
 801b546:	4620      	mov	r0, r4
 801b548:	f000 fad2 	bl	801baf0 <__sinit>
 801b54c:	ab05      	add	r3, sp, #20
 801b54e:	9a04      	ldr	r2, [sp, #16]
 801b550:	68a1      	ldr	r1, [r4, #8]
 801b552:	9301      	str	r3, [sp, #4]
 801b554:	4620      	mov	r0, r4
 801b556:	f7ff fd2b 	bl	801afb0 <_vfiprintf_r>
 801b55a:	b002      	add	sp, #8
 801b55c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b560:	b004      	add	sp, #16
 801b562:	4770      	bx	lr
 801b564:	20000268 	.word	0x20000268

0801b568 <_puts_r>:
 801b568:	b570      	push	{r4, r5, r6, lr}
 801b56a:	460e      	mov	r6, r1
 801b56c:	4605      	mov	r5, r0
 801b56e:	b118      	cbz	r0, 801b578 <_puts_r+0x10>
 801b570:	6983      	ldr	r3, [r0, #24]
 801b572:	b90b      	cbnz	r3, 801b578 <_puts_r+0x10>
 801b574:	f000 fabc 	bl	801baf0 <__sinit>
 801b578:	69ab      	ldr	r3, [r5, #24]
 801b57a:	68ac      	ldr	r4, [r5, #8]
 801b57c:	b913      	cbnz	r3, 801b584 <_puts_r+0x1c>
 801b57e:	4628      	mov	r0, r5
 801b580:	f000 fab6 	bl	801baf0 <__sinit>
 801b584:	4b2c      	ldr	r3, [pc, #176]	; (801b638 <_puts_r+0xd0>)
 801b586:	429c      	cmp	r4, r3
 801b588:	d120      	bne.n	801b5cc <_puts_r+0x64>
 801b58a:	686c      	ldr	r4, [r5, #4]
 801b58c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b58e:	07db      	lsls	r3, r3, #31
 801b590:	d405      	bmi.n	801b59e <_puts_r+0x36>
 801b592:	89a3      	ldrh	r3, [r4, #12]
 801b594:	0598      	lsls	r0, r3, #22
 801b596:	d402      	bmi.n	801b59e <_puts_r+0x36>
 801b598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b59a:	f7ff fba6 	bl	801acea <__retarget_lock_acquire_recursive>
 801b59e:	89a3      	ldrh	r3, [r4, #12]
 801b5a0:	0719      	lsls	r1, r3, #28
 801b5a2:	d51d      	bpl.n	801b5e0 <_puts_r+0x78>
 801b5a4:	6923      	ldr	r3, [r4, #16]
 801b5a6:	b1db      	cbz	r3, 801b5e0 <_puts_r+0x78>
 801b5a8:	3e01      	subs	r6, #1
 801b5aa:	68a3      	ldr	r3, [r4, #8]
 801b5ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b5b0:	3b01      	subs	r3, #1
 801b5b2:	60a3      	str	r3, [r4, #8]
 801b5b4:	bb39      	cbnz	r1, 801b606 <_puts_r+0x9e>
 801b5b6:	2b00      	cmp	r3, #0
 801b5b8:	da38      	bge.n	801b62c <_puts_r+0xc4>
 801b5ba:	4622      	mov	r2, r4
 801b5bc:	210a      	movs	r1, #10
 801b5be:	4628      	mov	r0, r5
 801b5c0:	f000 f8bc 	bl	801b73c <__swbuf_r>
 801b5c4:	3001      	adds	r0, #1
 801b5c6:	d011      	beq.n	801b5ec <_puts_r+0x84>
 801b5c8:	250a      	movs	r5, #10
 801b5ca:	e011      	b.n	801b5f0 <_puts_r+0x88>
 801b5cc:	4b1b      	ldr	r3, [pc, #108]	; (801b63c <_puts_r+0xd4>)
 801b5ce:	429c      	cmp	r4, r3
 801b5d0:	d101      	bne.n	801b5d6 <_puts_r+0x6e>
 801b5d2:	68ac      	ldr	r4, [r5, #8]
 801b5d4:	e7da      	b.n	801b58c <_puts_r+0x24>
 801b5d6:	4b1a      	ldr	r3, [pc, #104]	; (801b640 <_puts_r+0xd8>)
 801b5d8:	429c      	cmp	r4, r3
 801b5da:	bf08      	it	eq
 801b5dc:	68ec      	ldreq	r4, [r5, #12]
 801b5de:	e7d5      	b.n	801b58c <_puts_r+0x24>
 801b5e0:	4621      	mov	r1, r4
 801b5e2:	4628      	mov	r0, r5
 801b5e4:	f000 f8fc 	bl	801b7e0 <__swsetup_r>
 801b5e8:	2800      	cmp	r0, #0
 801b5ea:	d0dd      	beq.n	801b5a8 <_puts_r+0x40>
 801b5ec:	f04f 35ff 	mov.w	r5, #4294967295
 801b5f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b5f2:	07da      	lsls	r2, r3, #31
 801b5f4:	d405      	bmi.n	801b602 <_puts_r+0x9a>
 801b5f6:	89a3      	ldrh	r3, [r4, #12]
 801b5f8:	059b      	lsls	r3, r3, #22
 801b5fa:	d402      	bmi.n	801b602 <_puts_r+0x9a>
 801b5fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b5fe:	f7ff fb75 	bl	801acec <__retarget_lock_release_recursive>
 801b602:	4628      	mov	r0, r5
 801b604:	bd70      	pop	{r4, r5, r6, pc}
 801b606:	2b00      	cmp	r3, #0
 801b608:	da04      	bge.n	801b614 <_puts_r+0xac>
 801b60a:	69a2      	ldr	r2, [r4, #24]
 801b60c:	429a      	cmp	r2, r3
 801b60e:	dc06      	bgt.n	801b61e <_puts_r+0xb6>
 801b610:	290a      	cmp	r1, #10
 801b612:	d004      	beq.n	801b61e <_puts_r+0xb6>
 801b614:	6823      	ldr	r3, [r4, #0]
 801b616:	1c5a      	adds	r2, r3, #1
 801b618:	6022      	str	r2, [r4, #0]
 801b61a:	7019      	strb	r1, [r3, #0]
 801b61c:	e7c5      	b.n	801b5aa <_puts_r+0x42>
 801b61e:	4622      	mov	r2, r4
 801b620:	4628      	mov	r0, r5
 801b622:	f000 f88b 	bl	801b73c <__swbuf_r>
 801b626:	3001      	adds	r0, #1
 801b628:	d1bf      	bne.n	801b5aa <_puts_r+0x42>
 801b62a:	e7df      	b.n	801b5ec <_puts_r+0x84>
 801b62c:	6823      	ldr	r3, [r4, #0]
 801b62e:	250a      	movs	r5, #10
 801b630:	1c5a      	adds	r2, r3, #1
 801b632:	6022      	str	r2, [r4, #0]
 801b634:	701d      	strb	r5, [r3, #0]
 801b636:	e7db      	b.n	801b5f0 <_puts_r+0x88>
 801b638:	0801f09c 	.word	0x0801f09c
 801b63c:	0801f0bc 	.word	0x0801f0bc
 801b640:	0801f07c 	.word	0x0801f07c

0801b644 <puts>:
 801b644:	4b02      	ldr	r3, [pc, #8]	; (801b650 <puts+0xc>)
 801b646:	4601      	mov	r1, r0
 801b648:	6818      	ldr	r0, [r3, #0]
 801b64a:	f7ff bf8d 	b.w	801b568 <_puts_r>
 801b64e:	bf00      	nop
 801b650:	20000268 	.word	0x20000268

0801b654 <_sbrk_r>:
 801b654:	b538      	push	{r3, r4, r5, lr}
 801b656:	4d06      	ldr	r5, [pc, #24]	; (801b670 <_sbrk_r+0x1c>)
 801b658:	2300      	movs	r3, #0
 801b65a:	4604      	mov	r4, r0
 801b65c:	4608      	mov	r0, r1
 801b65e:	602b      	str	r3, [r5, #0]
 801b660:	f7e8 fc54 	bl	8003f0c <_sbrk>
 801b664:	1c43      	adds	r3, r0, #1
 801b666:	d102      	bne.n	801b66e <_sbrk_r+0x1a>
 801b668:	682b      	ldr	r3, [r5, #0]
 801b66a:	b103      	cbz	r3, 801b66e <_sbrk_r+0x1a>
 801b66c:	6023      	str	r3, [r4, #0]
 801b66e:	bd38      	pop	{r3, r4, r5, pc}
 801b670:	200029cc 	.word	0x200029cc

0801b674 <_raise_r>:
 801b674:	291f      	cmp	r1, #31
 801b676:	b538      	push	{r3, r4, r5, lr}
 801b678:	4604      	mov	r4, r0
 801b67a:	460d      	mov	r5, r1
 801b67c:	d904      	bls.n	801b688 <_raise_r+0x14>
 801b67e:	2316      	movs	r3, #22
 801b680:	6003      	str	r3, [r0, #0]
 801b682:	f04f 30ff 	mov.w	r0, #4294967295
 801b686:	bd38      	pop	{r3, r4, r5, pc}
 801b688:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b68a:	b112      	cbz	r2, 801b692 <_raise_r+0x1e>
 801b68c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b690:	b94b      	cbnz	r3, 801b6a6 <_raise_r+0x32>
 801b692:	4620      	mov	r0, r4
 801b694:	f000 f830 	bl	801b6f8 <_getpid_r>
 801b698:	462a      	mov	r2, r5
 801b69a:	4601      	mov	r1, r0
 801b69c:	4620      	mov	r0, r4
 801b69e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b6a2:	f000 b817 	b.w	801b6d4 <_kill_r>
 801b6a6:	2b01      	cmp	r3, #1
 801b6a8:	d00a      	beq.n	801b6c0 <_raise_r+0x4c>
 801b6aa:	1c59      	adds	r1, r3, #1
 801b6ac:	d103      	bne.n	801b6b6 <_raise_r+0x42>
 801b6ae:	2316      	movs	r3, #22
 801b6b0:	6003      	str	r3, [r0, #0]
 801b6b2:	2001      	movs	r0, #1
 801b6b4:	e7e7      	b.n	801b686 <_raise_r+0x12>
 801b6b6:	2400      	movs	r4, #0
 801b6b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b6bc:	4628      	mov	r0, r5
 801b6be:	4798      	blx	r3
 801b6c0:	2000      	movs	r0, #0
 801b6c2:	e7e0      	b.n	801b686 <_raise_r+0x12>

0801b6c4 <raise>:
 801b6c4:	4b02      	ldr	r3, [pc, #8]	; (801b6d0 <raise+0xc>)
 801b6c6:	4601      	mov	r1, r0
 801b6c8:	6818      	ldr	r0, [r3, #0]
 801b6ca:	f7ff bfd3 	b.w	801b674 <_raise_r>
 801b6ce:	bf00      	nop
 801b6d0:	20000268 	.word	0x20000268

0801b6d4 <_kill_r>:
 801b6d4:	b538      	push	{r3, r4, r5, lr}
 801b6d6:	4d07      	ldr	r5, [pc, #28]	; (801b6f4 <_kill_r+0x20>)
 801b6d8:	2300      	movs	r3, #0
 801b6da:	4604      	mov	r4, r0
 801b6dc:	4608      	mov	r0, r1
 801b6de:	4611      	mov	r1, r2
 801b6e0:	602b      	str	r3, [r5, #0]
 801b6e2:	f7e8 fb8b 	bl	8003dfc <_kill>
 801b6e6:	1c43      	adds	r3, r0, #1
 801b6e8:	d102      	bne.n	801b6f0 <_kill_r+0x1c>
 801b6ea:	682b      	ldr	r3, [r5, #0]
 801b6ec:	b103      	cbz	r3, 801b6f0 <_kill_r+0x1c>
 801b6ee:	6023      	str	r3, [r4, #0]
 801b6f0:	bd38      	pop	{r3, r4, r5, pc}
 801b6f2:	bf00      	nop
 801b6f4:	200029cc 	.word	0x200029cc

0801b6f8 <_getpid_r>:
 801b6f8:	f7e8 bb78 	b.w	8003dec <_getpid>

0801b6fc <_vsiprintf_r>:
 801b6fc:	b500      	push	{lr}
 801b6fe:	b09b      	sub	sp, #108	; 0x6c
 801b700:	9100      	str	r1, [sp, #0]
 801b702:	9104      	str	r1, [sp, #16]
 801b704:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b708:	9105      	str	r1, [sp, #20]
 801b70a:	9102      	str	r1, [sp, #8]
 801b70c:	4905      	ldr	r1, [pc, #20]	; (801b724 <_vsiprintf_r+0x28>)
 801b70e:	9103      	str	r1, [sp, #12]
 801b710:	4669      	mov	r1, sp
 801b712:	f000 fb85 	bl	801be20 <_svfiprintf_r>
 801b716:	9b00      	ldr	r3, [sp, #0]
 801b718:	2200      	movs	r2, #0
 801b71a:	701a      	strb	r2, [r3, #0]
 801b71c:	b01b      	add	sp, #108	; 0x6c
 801b71e:	f85d fb04 	ldr.w	pc, [sp], #4
 801b722:	bf00      	nop
 801b724:	ffff0208 	.word	0xffff0208

0801b728 <vsiprintf>:
 801b728:	4613      	mov	r3, r2
 801b72a:	460a      	mov	r2, r1
 801b72c:	4601      	mov	r1, r0
 801b72e:	4802      	ldr	r0, [pc, #8]	; (801b738 <vsiprintf+0x10>)
 801b730:	6800      	ldr	r0, [r0, #0]
 801b732:	f7ff bfe3 	b.w	801b6fc <_vsiprintf_r>
 801b736:	bf00      	nop
 801b738:	20000268 	.word	0x20000268

0801b73c <__swbuf_r>:
 801b73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b73e:	460e      	mov	r6, r1
 801b740:	4614      	mov	r4, r2
 801b742:	4605      	mov	r5, r0
 801b744:	b118      	cbz	r0, 801b74e <__swbuf_r+0x12>
 801b746:	6983      	ldr	r3, [r0, #24]
 801b748:	b90b      	cbnz	r3, 801b74e <__swbuf_r+0x12>
 801b74a:	f000 f9d1 	bl	801baf0 <__sinit>
 801b74e:	4b21      	ldr	r3, [pc, #132]	; (801b7d4 <__swbuf_r+0x98>)
 801b750:	429c      	cmp	r4, r3
 801b752:	d12b      	bne.n	801b7ac <__swbuf_r+0x70>
 801b754:	686c      	ldr	r4, [r5, #4]
 801b756:	69a3      	ldr	r3, [r4, #24]
 801b758:	60a3      	str	r3, [r4, #8]
 801b75a:	89a3      	ldrh	r3, [r4, #12]
 801b75c:	071a      	lsls	r2, r3, #28
 801b75e:	d52f      	bpl.n	801b7c0 <__swbuf_r+0x84>
 801b760:	6923      	ldr	r3, [r4, #16]
 801b762:	b36b      	cbz	r3, 801b7c0 <__swbuf_r+0x84>
 801b764:	6923      	ldr	r3, [r4, #16]
 801b766:	6820      	ldr	r0, [r4, #0]
 801b768:	1ac0      	subs	r0, r0, r3
 801b76a:	6963      	ldr	r3, [r4, #20]
 801b76c:	b2f6      	uxtb	r6, r6
 801b76e:	4283      	cmp	r3, r0
 801b770:	4637      	mov	r7, r6
 801b772:	dc04      	bgt.n	801b77e <__swbuf_r+0x42>
 801b774:	4621      	mov	r1, r4
 801b776:	4628      	mov	r0, r5
 801b778:	f000 f926 	bl	801b9c8 <_fflush_r>
 801b77c:	bb30      	cbnz	r0, 801b7cc <__swbuf_r+0x90>
 801b77e:	68a3      	ldr	r3, [r4, #8]
 801b780:	3b01      	subs	r3, #1
 801b782:	60a3      	str	r3, [r4, #8]
 801b784:	6823      	ldr	r3, [r4, #0]
 801b786:	1c5a      	adds	r2, r3, #1
 801b788:	6022      	str	r2, [r4, #0]
 801b78a:	701e      	strb	r6, [r3, #0]
 801b78c:	6963      	ldr	r3, [r4, #20]
 801b78e:	3001      	adds	r0, #1
 801b790:	4283      	cmp	r3, r0
 801b792:	d004      	beq.n	801b79e <__swbuf_r+0x62>
 801b794:	89a3      	ldrh	r3, [r4, #12]
 801b796:	07db      	lsls	r3, r3, #31
 801b798:	d506      	bpl.n	801b7a8 <__swbuf_r+0x6c>
 801b79a:	2e0a      	cmp	r6, #10
 801b79c:	d104      	bne.n	801b7a8 <__swbuf_r+0x6c>
 801b79e:	4621      	mov	r1, r4
 801b7a0:	4628      	mov	r0, r5
 801b7a2:	f000 f911 	bl	801b9c8 <_fflush_r>
 801b7a6:	b988      	cbnz	r0, 801b7cc <__swbuf_r+0x90>
 801b7a8:	4638      	mov	r0, r7
 801b7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b7ac:	4b0a      	ldr	r3, [pc, #40]	; (801b7d8 <__swbuf_r+0x9c>)
 801b7ae:	429c      	cmp	r4, r3
 801b7b0:	d101      	bne.n	801b7b6 <__swbuf_r+0x7a>
 801b7b2:	68ac      	ldr	r4, [r5, #8]
 801b7b4:	e7cf      	b.n	801b756 <__swbuf_r+0x1a>
 801b7b6:	4b09      	ldr	r3, [pc, #36]	; (801b7dc <__swbuf_r+0xa0>)
 801b7b8:	429c      	cmp	r4, r3
 801b7ba:	bf08      	it	eq
 801b7bc:	68ec      	ldreq	r4, [r5, #12]
 801b7be:	e7ca      	b.n	801b756 <__swbuf_r+0x1a>
 801b7c0:	4621      	mov	r1, r4
 801b7c2:	4628      	mov	r0, r5
 801b7c4:	f000 f80c 	bl	801b7e0 <__swsetup_r>
 801b7c8:	2800      	cmp	r0, #0
 801b7ca:	d0cb      	beq.n	801b764 <__swbuf_r+0x28>
 801b7cc:	f04f 37ff 	mov.w	r7, #4294967295
 801b7d0:	e7ea      	b.n	801b7a8 <__swbuf_r+0x6c>
 801b7d2:	bf00      	nop
 801b7d4:	0801f09c 	.word	0x0801f09c
 801b7d8:	0801f0bc 	.word	0x0801f0bc
 801b7dc:	0801f07c 	.word	0x0801f07c

0801b7e0 <__swsetup_r>:
 801b7e0:	4b32      	ldr	r3, [pc, #200]	; (801b8ac <__swsetup_r+0xcc>)
 801b7e2:	b570      	push	{r4, r5, r6, lr}
 801b7e4:	681d      	ldr	r5, [r3, #0]
 801b7e6:	4606      	mov	r6, r0
 801b7e8:	460c      	mov	r4, r1
 801b7ea:	b125      	cbz	r5, 801b7f6 <__swsetup_r+0x16>
 801b7ec:	69ab      	ldr	r3, [r5, #24]
 801b7ee:	b913      	cbnz	r3, 801b7f6 <__swsetup_r+0x16>
 801b7f0:	4628      	mov	r0, r5
 801b7f2:	f000 f97d 	bl	801baf0 <__sinit>
 801b7f6:	4b2e      	ldr	r3, [pc, #184]	; (801b8b0 <__swsetup_r+0xd0>)
 801b7f8:	429c      	cmp	r4, r3
 801b7fa:	d10f      	bne.n	801b81c <__swsetup_r+0x3c>
 801b7fc:	686c      	ldr	r4, [r5, #4]
 801b7fe:	89a3      	ldrh	r3, [r4, #12]
 801b800:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b804:	0719      	lsls	r1, r3, #28
 801b806:	d42c      	bmi.n	801b862 <__swsetup_r+0x82>
 801b808:	06dd      	lsls	r5, r3, #27
 801b80a:	d411      	bmi.n	801b830 <__swsetup_r+0x50>
 801b80c:	2309      	movs	r3, #9
 801b80e:	6033      	str	r3, [r6, #0]
 801b810:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b814:	81a3      	strh	r3, [r4, #12]
 801b816:	f04f 30ff 	mov.w	r0, #4294967295
 801b81a:	e03e      	b.n	801b89a <__swsetup_r+0xba>
 801b81c:	4b25      	ldr	r3, [pc, #148]	; (801b8b4 <__swsetup_r+0xd4>)
 801b81e:	429c      	cmp	r4, r3
 801b820:	d101      	bne.n	801b826 <__swsetup_r+0x46>
 801b822:	68ac      	ldr	r4, [r5, #8]
 801b824:	e7eb      	b.n	801b7fe <__swsetup_r+0x1e>
 801b826:	4b24      	ldr	r3, [pc, #144]	; (801b8b8 <__swsetup_r+0xd8>)
 801b828:	429c      	cmp	r4, r3
 801b82a:	bf08      	it	eq
 801b82c:	68ec      	ldreq	r4, [r5, #12]
 801b82e:	e7e6      	b.n	801b7fe <__swsetup_r+0x1e>
 801b830:	0758      	lsls	r0, r3, #29
 801b832:	d512      	bpl.n	801b85a <__swsetup_r+0x7a>
 801b834:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b836:	b141      	cbz	r1, 801b84a <__swsetup_r+0x6a>
 801b838:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b83c:	4299      	cmp	r1, r3
 801b83e:	d002      	beq.n	801b846 <__swsetup_r+0x66>
 801b840:	4630      	mov	r0, r6
 801b842:	f7ff faab 	bl	801ad9c <_free_r>
 801b846:	2300      	movs	r3, #0
 801b848:	6363      	str	r3, [r4, #52]	; 0x34
 801b84a:	89a3      	ldrh	r3, [r4, #12]
 801b84c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b850:	81a3      	strh	r3, [r4, #12]
 801b852:	2300      	movs	r3, #0
 801b854:	6063      	str	r3, [r4, #4]
 801b856:	6923      	ldr	r3, [r4, #16]
 801b858:	6023      	str	r3, [r4, #0]
 801b85a:	89a3      	ldrh	r3, [r4, #12]
 801b85c:	f043 0308 	orr.w	r3, r3, #8
 801b860:	81a3      	strh	r3, [r4, #12]
 801b862:	6923      	ldr	r3, [r4, #16]
 801b864:	b94b      	cbnz	r3, 801b87a <__swsetup_r+0x9a>
 801b866:	89a3      	ldrh	r3, [r4, #12]
 801b868:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b86c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b870:	d003      	beq.n	801b87a <__swsetup_r+0x9a>
 801b872:	4621      	mov	r1, r4
 801b874:	4630      	mov	r0, r6
 801b876:	f000 f9fd 	bl	801bc74 <__smakebuf_r>
 801b87a:	89a0      	ldrh	r0, [r4, #12]
 801b87c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b880:	f010 0301 	ands.w	r3, r0, #1
 801b884:	d00a      	beq.n	801b89c <__swsetup_r+0xbc>
 801b886:	2300      	movs	r3, #0
 801b888:	60a3      	str	r3, [r4, #8]
 801b88a:	6963      	ldr	r3, [r4, #20]
 801b88c:	425b      	negs	r3, r3
 801b88e:	61a3      	str	r3, [r4, #24]
 801b890:	6923      	ldr	r3, [r4, #16]
 801b892:	b943      	cbnz	r3, 801b8a6 <__swsetup_r+0xc6>
 801b894:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b898:	d1ba      	bne.n	801b810 <__swsetup_r+0x30>
 801b89a:	bd70      	pop	{r4, r5, r6, pc}
 801b89c:	0781      	lsls	r1, r0, #30
 801b89e:	bf58      	it	pl
 801b8a0:	6963      	ldrpl	r3, [r4, #20]
 801b8a2:	60a3      	str	r3, [r4, #8]
 801b8a4:	e7f4      	b.n	801b890 <__swsetup_r+0xb0>
 801b8a6:	2000      	movs	r0, #0
 801b8a8:	e7f7      	b.n	801b89a <__swsetup_r+0xba>
 801b8aa:	bf00      	nop
 801b8ac:	20000268 	.word	0x20000268
 801b8b0:	0801f09c 	.word	0x0801f09c
 801b8b4:	0801f0bc 	.word	0x0801f0bc
 801b8b8:	0801f07c 	.word	0x0801f07c

0801b8bc <__sflush_r>:
 801b8bc:	898a      	ldrh	r2, [r1, #12]
 801b8be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b8c2:	4605      	mov	r5, r0
 801b8c4:	0710      	lsls	r0, r2, #28
 801b8c6:	460c      	mov	r4, r1
 801b8c8:	d458      	bmi.n	801b97c <__sflush_r+0xc0>
 801b8ca:	684b      	ldr	r3, [r1, #4]
 801b8cc:	2b00      	cmp	r3, #0
 801b8ce:	dc05      	bgt.n	801b8dc <__sflush_r+0x20>
 801b8d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b8d2:	2b00      	cmp	r3, #0
 801b8d4:	dc02      	bgt.n	801b8dc <__sflush_r+0x20>
 801b8d6:	2000      	movs	r0, #0
 801b8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b8dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b8de:	2e00      	cmp	r6, #0
 801b8e0:	d0f9      	beq.n	801b8d6 <__sflush_r+0x1a>
 801b8e2:	2300      	movs	r3, #0
 801b8e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b8e8:	682f      	ldr	r7, [r5, #0]
 801b8ea:	602b      	str	r3, [r5, #0]
 801b8ec:	d032      	beq.n	801b954 <__sflush_r+0x98>
 801b8ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b8f0:	89a3      	ldrh	r3, [r4, #12]
 801b8f2:	075a      	lsls	r2, r3, #29
 801b8f4:	d505      	bpl.n	801b902 <__sflush_r+0x46>
 801b8f6:	6863      	ldr	r3, [r4, #4]
 801b8f8:	1ac0      	subs	r0, r0, r3
 801b8fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b8fc:	b10b      	cbz	r3, 801b902 <__sflush_r+0x46>
 801b8fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b900:	1ac0      	subs	r0, r0, r3
 801b902:	2300      	movs	r3, #0
 801b904:	4602      	mov	r2, r0
 801b906:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b908:	6a21      	ldr	r1, [r4, #32]
 801b90a:	4628      	mov	r0, r5
 801b90c:	47b0      	blx	r6
 801b90e:	1c43      	adds	r3, r0, #1
 801b910:	89a3      	ldrh	r3, [r4, #12]
 801b912:	d106      	bne.n	801b922 <__sflush_r+0x66>
 801b914:	6829      	ldr	r1, [r5, #0]
 801b916:	291d      	cmp	r1, #29
 801b918:	d82c      	bhi.n	801b974 <__sflush_r+0xb8>
 801b91a:	4a2a      	ldr	r2, [pc, #168]	; (801b9c4 <__sflush_r+0x108>)
 801b91c:	40ca      	lsrs	r2, r1
 801b91e:	07d6      	lsls	r6, r2, #31
 801b920:	d528      	bpl.n	801b974 <__sflush_r+0xb8>
 801b922:	2200      	movs	r2, #0
 801b924:	6062      	str	r2, [r4, #4]
 801b926:	04d9      	lsls	r1, r3, #19
 801b928:	6922      	ldr	r2, [r4, #16]
 801b92a:	6022      	str	r2, [r4, #0]
 801b92c:	d504      	bpl.n	801b938 <__sflush_r+0x7c>
 801b92e:	1c42      	adds	r2, r0, #1
 801b930:	d101      	bne.n	801b936 <__sflush_r+0x7a>
 801b932:	682b      	ldr	r3, [r5, #0]
 801b934:	b903      	cbnz	r3, 801b938 <__sflush_r+0x7c>
 801b936:	6560      	str	r0, [r4, #84]	; 0x54
 801b938:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b93a:	602f      	str	r7, [r5, #0]
 801b93c:	2900      	cmp	r1, #0
 801b93e:	d0ca      	beq.n	801b8d6 <__sflush_r+0x1a>
 801b940:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b944:	4299      	cmp	r1, r3
 801b946:	d002      	beq.n	801b94e <__sflush_r+0x92>
 801b948:	4628      	mov	r0, r5
 801b94a:	f7ff fa27 	bl	801ad9c <_free_r>
 801b94e:	2000      	movs	r0, #0
 801b950:	6360      	str	r0, [r4, #52]	; 0x34
 801b952:	e7c1      	b.n	801b8d8 <__sflush_r+0x1c>
 801b954:	6a21      	ldr	r1, [r4, #32]
 801b956:	2301      	movs	r3, #1
 801b958:	4628      	mov	r0, r5
 801b95a:	47b0      	blx	r6
 801b95c:	1c41      	adds	r1, r0, #1
 801b95e:	d1c7      	bne.n	801b8f0 <__sflush_r+0x34>
 801b960:	682b      	ldr	r3, [r5, #0]
 801b962:	2b00      	cmp	r3, #0
 801b964:	d0c4      	beq.n	801b8f0 <__sflush_r+0x34>
 801b966:	2b1d      	cmp	r3, #29
 801b968:	d001      	beq.n	801b96e <__sflush_r+0xb2>
 801b96a:	2b16      	cmp	r3, #22
 801b96c:	d101      	bne.n	801b972 <__sflush_r+0xb6>
 801b96e:	602f      	str	r7, [r5, #0]
 801b970:	e7b1      	b.n	801b8d6 <__sflush_r+0x1a>
 801b972:	89a3      	ldrh	r3, [r4, #12]
 801b974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b978:	81a3      	strh	r3, [r4, #12]
 801b97a:	e7ad      	b.n	801b8d8 <__sflush_r+0x1c>
 801b97c:	690f      	ldr	r7, [r1, #16]
 801b97e:	2f00      	cmp	r7, #0
 801b980:	d0a9      	beq.n	801b8d6 <__sflush_r+0x1a>
 801b982:	0793      	lsls	r3, r2, #30
 801b984:	680e      	ldr	r6, [r1, #0]
 801b986:	bf08      	it	eq
 801b988:	694b      	ldreq	r3, [r1, #20]
 801b98a:	600f      	str	r7, [r1, #0]
 801b98c:	bf18      	it	ne
 801b98e:	2300      	movne	r3, #0
 801b990:	eba6 0807 	sub.w	r8, r6, r7
 801b994:	608b      	str	r3, [r1, #8]
 801b996:	f1b8 0f00 	cmp.w	r8, #0
 801b99a:	dd9c      	ble.n	801b8d6 <__sflush_r+0x1a>
 801b99c:	6a21      	ldr	r1, [r4, #32]
 801b99e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b9a0:	4643      	mov	r3, r8
 801b9a2:	463a      	mov	r2, r7
 801b9a4:	4628      	mov	r0, r5
 801b9a6:	47b0      	blx	r6
 801b9a8:	2800      	cmp	r0, #0
 801b9aa:	dc06      	bgt.n	801b9ba <__sflush_r+0xfe>
 801b9ac:	89a3      	ldrh	r3, [r4, #12]
 801b9ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b9b2:	81a3      	strh	r3, [r4, #12]
 801b9b4:	f04f 30ff 	mov.w	r0, #4294967295
 801b9b8:	e78e      	b.n	801b8d8 <__sflush_r+0x1c>
 801b9ba:	4407      	add	r7, r0
 801b9bc:	eba8 0800 	sub.w	r8, r8, r0
 801b9c0:	e7e9      	b.n	801b996 <__sflush_r+0xda>
 801b9c2:	bf00      	nop
 801b9c4:	20400001 	.word	0x20400001

0801b9c8 <_fflush_r>:
 801b9c8:	b538      	push	{r3, r4, r5, lr}
 801b9ca:	690b      	ldr	r3, [r1, #16]
 801b9cc:	4605      	mov	r5, r0
 801b9ce:	460c      	mov	r4, r1
 801b9d0:	b913      	cbnz	r3, 801b9d8 <_fflush_r+0x10>
 801b9d2:	2500      	movs	r5, #0
 801b9d4:	4628      	mov	r0, r5
 801b9d6:	bd38      	pop	{r3, r4, r5, pc}
 801b9d8:	b118      	cbz	r0, 801b9e2 <_fflush_r+0x1a>
 801b9da:	6983      	ldr	r3, [r0, #24]
 801b9dc:	b90b      	cbnz	r3, 801b9e2 <_fflush_r+0x1a>
 801b9de:	f000 f887 	bl	801baf0 <__sinit>
 801b9e2:	4b14      	ldr	r3, [pc, #80]	; (801ba34 <_fflush_r+0x6c>)
 801b9e4:	429c      	cmp	r4, r3
 801b9e6:	d11b      	bne.n	801ba20 <_fflush_r+0x58>
 801b9e8:	686c      	ldr	r4, [r5, #4]
 801b9ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b9ee:	2b00      	cmp	r3, #0
 801b9f0:	d0ef      	beq.n	801b9d2 <_fflush_r+0xa>
 801b9f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b9f4:	07d0      	lsls	r0, r2, #31
 801b9f6:	d404      	bmi.n	801ba02 <_fflush_r+0x3a>
 801b9f8:	0599      	lsls	r1, r3, #22
 801b9fa:	d402      	bmi.n	801ba02 <_fflush_r+0x3a>
 801b9fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b9fe:	f7ff f974 	bl	801acea <__retarget_lock_acquire_recursive>
 801ba02:	4628      	mov	r0, r5
 801ba04:	4621      	mov	r1, r4
 801ba06:	f7ff ff59 	bl	801b8bc <__sflush_r>
 801ba0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ba0c:	07da      	lsls	r2, r3, #31
 801ba0e:	4605      	mov	r5, r0
 801ba10:	d4e0      	bmi.n	801b9d4 <_fflush_r+0xc>
 801ba12:	89a3      	ldrh	r3, [r4, #12]
 801ba14:	059b      	lsls	r3, r3, #22
 801ba16:	d4dd      	bmi.n	801b9d4 <_fflush_r+0xc>
 801ba18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ba1a:	f7ff f967 	bl	801acec <__retarget_lock_release_recursive>
 801ba1e:	e7d9      	b.n	801b9d4 <_fflush_r+0xc>
 801ba20:	4b05      	ldr	r3, [pc, #20]	; (801ba38 <_fflush_r+0x70>)
 801ba22:	429c      	cmp	r4, r3
 801ba24:	d101      	bne.n	801ba2a <_fflush_r+0x62>
 801ba26:	68ac      	ldr	r4, [r5, #8]
 801ba28:	e7df      	b.n	801b9ea <_fflush_r+0x22>
 801ba2a:	4b04      	ldr	r3, [pc, #16]	; (801ba3c <_fflush_r+0x74>)
 801ba2c:	429c      	cmp	r4, r3
 801ba2e:	bf08      	it	eq
 801ba30:	68ec      	ldreq	r4, [r5, #12]
 801ba32:	e7da      	b.n	801b9ea <_fflush_r+0x22>
 801ba34:	0801f09c 	.word	0x0801f09c
 801ba38:	0801f0bc 	.word	0x0801f0bc
 801ba3c:	0801f07c 	.word	0x0801f07c

0801ba40 <std>:
 801ba40:	2300      	movs	r3, #0
 801ba42:	b510      	push	{r4, lr}
 801ba44:	4604      	mov	r4, r0
 801ba46:	e9c0 3300 	strd	r3, r3, [r0]
 801ba4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ba4e:	6083      	str	r3, [r0, #8]
 801ba50:	8181      	strh	r1, [r0, #12]
 801ba52:	6643      	str	r3, [r0, #100]	; 0x64
 801ba54:	81c2      	strh	r2, [r0, #14]
 801ba56:	6183      	str	r3, [r0, #24]
 801ba58:	4619      	mov	r1, r3
 801ba5a:	2208      	movs	r2, #8
 801ba5c:	305c      	adds	r0, #92	; 0x5c
 801ba5e:	f7ff f97f 	bl	801ad60 <memset>
 801ba62:	4b05      	ldr	r3, [pc, #20]	; (801ba78 <std+0x38>)
 801ba64:	6263      	str	r3, [r4, #36]	; 0x24
 801ba66:	4b05      	ldr	r3, [pc, #20]	; (801ba7c <std+0x3c>)
 801ba68:	62a3      	str	r3, [r4, #40]	; 0x28
 801ba6a:	4b05      	ldr	r3, [pc, #20]	; (801ba80 <std+0x40>)
 801ba6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ba6e:	4b05      	ldr	r3, [pc, #20]	; (801ba84 <std+0x44>)
 801ba70:	6224      	str	r4, [r4, #32]
 801ba72:	6323      	str	r3, [r4, #48]	; 0x30
 801ba74:	bd10      	pop	{r4, pc}
 801ba76:	bf00      	nop
 801ba78:	0801c021 	.word	0x0801c021
 801ba7c:	0801c043 	.word	0x0801c043
 801ba80:	0801c07b 	.word	0x0801c07b
 801ba84:	0801c09f 	.word	0x0801c09f

0801ba88 <_cleanup_r>:
 801ba88:	4901      	ldr	r1, [pc, #4]	; (801ba90 <_cleanup_r+0x8>)
 801ba8a:	f000 b8af 	b.w	801bbec <_fwalk_reent>
 801ba8e:	bf00      	nop
 801ba90:	0801b9c9 	.word	0x0801b9c9

0801ba94 <__sfmoreglue>:
 801ba94:	b570      	push	{r4, r5, r6, lr}
 801ba96:	2268      	movs	r2, #104	; 0x68
 801ba98:	1e4d      	subs	r5, r1, #1
 801ba9a:	4355      	muls	r5, r2
 801ba9c:	460e      	mov	r6, r1
 801ba9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801baa2:	f7ff f9e7 	bl	801ae74 <_malloc_r>
 801baa6:	4604      	mov	r4, r0
 801baa8:	b140      	cbz	r0, 801babc <__sfmoreglue+0x28>
 801baaa:	2100      	movs	r1, #0
 801baac:	e9c0 1600 	strd	r1, r6, [r0]
 801bab0:	300c      	adds	r0, #12
 801bab2:	60a0      	str	r0, [r4, #8]
 801bab4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801bab8:	f7ff f952 	bl	801ad60 <memset>
 801babc:	4620      	mov	r0, r4
 801babe:	bd70      	pop	{r4, r5, r6, pc}

0801bac0 <__sfp_lock_acquire>:
 801bac0:	4801      	ldr	r0, [pc, #4]	; (801bac8 <__sfp_lock_acquire+0x8>)
 801bac2:	f7ff b912 	b.w	801acea <__retarget_lock_acquire_recursive>
 801bac6:	bf00      	nop
 801bac8:	200029c1 	.word	0x200029c1

0801bacc <__sfp_lock_release>:
 801bacc:	4801      	ldr	r0, [pc, #4]	; (801bad4 <__sfp_lock_release+0x8>)
 801bace:	f7ff b90d 	b.w	801acec <__retarget_lock_release_recursive>
 801bad2:	bf00      	nop
 801bad4:	200029c1 	.word	0x200029c1

0801bad8 <__sinit_lock_acquire>:
 801bad8:	4801      	ldr	r0, [pc, #4]	; (801bae0 <__sinit_lock_acquire+0x8>)
 801bada:	f7ff b906 	b.w	801acea <__retarget_lock_acquire_recursive>
 801bade:	bf00      	nop
 801bae0:	200029c2 	.word	0x200029c2

0801bae4 <__sinit_lock_release>:
 801bae4:	4801      	ldr	r0, [pc, #4]	; (801baec <__sinit_lock_release+0x8>)
 801bae6:	f7ff b901 	b.w	801acec <__retarget_lock_release_recursive>
 801baea:	bf00      	nop
 801baec:	200029c2 	.word	0x200029c2

0801baf0 <__sinit>:
 801baf0:	b510      	push	{r4, lr}
 801baf2:	4604      	mov	r4, r0
 801baf4:	f7ff fff0 	bl	801bad8 <__sinit_lock_acquire>
 801baf8:	69a3      	ldr	r3, [r4, #24]
 801bafa:	b11b      	cbz	r3, 801bb04 <__sinit+0x14>
 801bafc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bb00:	f7ff bff0 	b.w	801bae4 <__sinit_lock_release>
 801bb04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801bb08:	6523      	str	r3, [r4, #80]	; 0x50
 801bb0a:	4b13      	ldr	r3, [pc, #76]	; (801bb58 <__sinit+0x68>)
 801bb0c:	4a13      	ldr	r2, [pc, #76]	; (801bb5c <__sinit+0x6c>)
 801bb0e:	681b      	ldr	r3, [r3, #0]
 801bb10:	62a2      	str	r2, [r4, #40]	; 0x28
 801bb12:	42a3      	cmp	r3, r4
 801bb14:	bf04      	itt	eq
 801bb16:	2301      	moveq	r3, #1
 801bb18:	61a3      	streq	r3, [r4, #24]
 801bb1a:	4620      	mov	r0, r4
 801bb1c:	f000 f820 	bl	801bb60 <__sfp>
 801bb20:	6060      	str	r0, [r4, #4]
 801bb22:	4620      	mov	r0, r4
 801bb24:	f000 f81c 	bl	801bb60 <__sfp>
 801bb28:	60a0      	str	r0, [r4, #8]
 801bb2a:	4620      	mov	r0, r4
 801bb2c:	f000 f818 	bl	801bb60 <__sfp>
 801bb30:	2200      	movs	r2, #0
 801bb32:	60e0      	str	r0, [r4, #12]
 801bb34:	2104      	movs	r1, #4
 801bb36:	6860      	ldr	r0, [r4, #4]
 801bb38:	f7ff ff82 	bl	801ba40 <std>
 801bb3c:	68a0      	ldr	r0, [r4, #8]
 801bb3e:	2201      	movs	r2, #1
 801bb40:	2109      	movs	r1, #9
 801bb42:	f7ff ff7d 	bl	801ba40 <std>
 801bb46:	68e0      	ldr	r0, [r4, #12]
 801bb48:	2202      	movs	r2, #2
 801bb4a:	2112      	movs	r1, #18
 801bb4c:	f7ff ff78 	bl	801ba40 <std>
 801bb50:	2301      	movs	r3, #1
 801bb52:	61a3      	str	r3, [r4, #24]
 801bb54:	e7d2      	b.n	801bafc <__sinit+0xc>
 801bb56:	bf00      	nop
 801bb58:	0801f044 	.word	0x0801f044
 801bb5c:	0801ba89 	.word	0x0801ba89

0801bb60 <__sfp>:
 801bb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb62:	4607      	mov	r7, r0
 801bb64:	f7ff ffac 	bl	801bac0 <__sfp_lock_acquire>
 801bb68:	4b1e      	ldr	r3, [pc, #120]	; (801bbe4 <__sfp+0x84>)
 801bb6a:	681e      	ldr	r6, [r3, #0]
 801bb6c:	69b3      	ldr	r3, [r6, #24]
 801bb6e:	b913      	cbnz	r3, 801bb76 <__sfp+0x16>
 801bb70:	4630      	mov	r0, r6
 801bb72:	f7ff ffbd 	bl	801baf0 <__sinit>
 801bb76:	3648      	adds	r6, #72	; 0x48
 801bb78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801bb7c:	3b01      	subs	r3, #1
 801bb7e:	d503      	bpl.n	801bb88 <__sfp+0x28>
 801bb80:	6833      	ldr	r3, [r6, #0]
 801bb82:	b30b      	cbz	r3, 801bbc8 <__sfp+0x68>
 801bb84:	6836      	ldr	r6, [r6, #0]
 801bb86:	e7f7      	b.n	801bb78 <__sfp+0x18>
 801bb88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801bb8c:	b9d5      	cbnz	r5, 801bbc4 <__sfp+0x64>
 801bb8e:	4b16      	ldr	r3, [pc, #88]	; (801bbe8 <__sfp+0x88>)
 801bb90:	60e3      	str	r3, [r4, #12]
 801bb92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801bb96:	6665      	str	r5, [r4, #100]	; 0x64
 801bb98:	f7ff f8a6 	bl	801ace8 <__retarget_lock_init_recursive>
 801bb9c:	f7ff ff96 	bl	801bacc <__sfp_lock_release>
 801bba0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801bba4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801bba8:	6025      	str	r5, [r4, #0]
 801bbaa:	61a5      	str	r5, [r4, #24]
 801bbac:	2208      	movs	r2, #8
 801bbae:	4629      	mov	r1, r5
 801bbb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801bbb4:	f7ff f8d4 	bl	801ad60 <memset>
 801bbb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801bbbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801bbc0:	4620      	mov	r0, r4
 801bbc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bbc4:	3468      	adds	r4, #104	; 0x68
 801bbc6:	e7d9      	b.n	801bb7c <__sfp+0x1c>
 801bbc8:	2104      	movs	r1, #4
 801bbca:	4638      	mov	r0, r7
 801bbcc:	f7ff ff62 	bl	801ba94 <__sfmoreglue>
 801bbd0:	4604      	mov	r4, r0
 801bbd2:	6030      	str	r0, [r6, #0]
 801bbd4:	2800      	cmp	r0, #0
 801bbd6:	d1d5      	bne.n	801bb84 <__sfp+0x24>
 801bbd8:	f7ff ff78 	bl	801bacc <__sfp_lock_release>
 801bbdc:	230c      	movs	r3, #12
 801bbde:	603b      	str	r3, [r7, #0]
 801bbe0:	e7ee      	b.n	801bbc0 <__sfp+0x60>
 801bbe2:	bf00      	nop
 801bbe4:	0801f044 	.word	0x0801f044
 801bbe8:	ffff0001 	.word	0xffff0001

0801bbec <_fwalk_reent>:
 801bbec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bbf0:	4606      	mov	r6, r0
 801bbf2:	4688      	mov	r8, r1
 801bbf4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801bbf8:	2700      	movs	r7, #0
 801bbfa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801bbfe:	f1b9 0901 	subs.w	r9, r9, #1
 801bc02:	d505      	bpl.n	801bc10 <_fwalk_reent+0x24>
 801bc04:	6824      	ldr	r4, [r4, #0]
 801bc06:	2c00      	cmp	r4, #0
 801bc08:	d1f7      	bne.n	801bbfa <_fwalk_reent+0xe>
 801bc0a:	4638      	mov	r0, r7
 801bc0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bc10:	89ab      	ldrh	r3, [r5, #12]
 801bc12:	2b01      	cmp	r3, #1
 801bc14:	d907      	bls.n	801bc26 <_fwalk_reent+0x3a>
 801bc16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801bc1a:	3301      	adds	r3, #1
 801bc1c:	d003      	beq.n	801bc26 <_fwalk_reent+0x3a>
 801bc1e:	4629      	mov	r1, r5
 801bc20:	4630      	mov	r0, r6
 801bc22:	47c0      	blx	r8
 801bc24:	4307      	orrs	r7, r0
 801bc26:	3568      	adds	r5, #104	; 0x68
 801bc28:	e7e9      	b.n	801bbfe <_fwalk_reent+0x12>

0801bc2a <__swhatbuf_r>:
 801bc2a:	b570      	push	{r4, r5, r6, lr}
 801bc2c:	460e      	mov	r6, r1
 801bc2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bc32:	2900      	cmp	r1, #0
 801bc34:	b096      	sub	sp, #88	; 0x58
 801bc36:	4614      	mov	r4, r2
 801bc38:	461d      	mov	r5, r3
 801bc3a:	da08      	bge.n	801bc4e <__swhatbuf_r+0x24>
 801bc3c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801bc40:	2200      	movs	r2, #0
 801bc42:	602a      	str	r2, [r5, #0]
 801bc44:	061a      	lsls	r2, r3, #24
 801bc46:	d410      	bmi.n	801bc6a <__swhatbuf_r+0x40>
 801bc48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bc4c:	e00e      	b.n	801bc6c <__swhatbuf_r+0x42>
 801bc4e:	466a      	mov	r2, sp
 801bc50:	f000 fa4c 	bl	801c0ec <_fstat_r>
 801bc54:	2800      	cmp	r0, #0
 801bc56:	dbf1      	blt.n	801bc3c <__swhatbuf_r+0x12>
 801bc58:	9a01      	ldr	r2, [sp, #4]
 801bc5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801bc5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801bc62:	425a      	negs	r2, r3
 801bc64:	415a      	adcs	r2, r3
 801bc66:	602a      	str	r2, [r5, #0]
 801bc68:	e7ee      	b.n	801bc48 <__swhatbuf_r+0x1e>
 801bc6a:	2340      	movs	r3, #64	; 0x40
 801bc6c:	2000      	movs	r0, #0
 801bc6e:	6023      	str	r3, [r4, #0]
 801bc70:	b016      	add	sp, #88	; 0x58
 801bc72:	bd70      	pop	{r4, r5, r6, pc}

0801bc74 <__smakebuf_r>:
 801bc74:	898b      	ldrh	r3, [r1, #12]
 801bc76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bc78:	079d      	lsls	r5, r3, #30
 801bc7a:	4606      	mov	r6, r0
 801bc7c:	460c      	mov	r4, r1
 801bc7e:	d507      	bpl.n	801bc90 <__smakebuf_r+0x1c>
 801bc80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bc84:	6023      	str	r3, [r4, #0]
 801bc86:	6123      	str	r3, [r4, #16]
 801bc88:	2301      	movs	r3, #1
 801bc8a:	6163      	str	r3, [r4, #20]
 801bc8c:	b002      	add	sp, #8
 801bc8e:	bd70      	pop	{r4, r5, r6, pc}
 801bc90:	ab01      	add	r3, sp, #4
 801bc92:	466a      	mov	r2, sp
 801bc94:	f7ff ffc9 	bl	801bc2a <__swhatbuf_r>
 801bc98:	9900      	ldr	r1, [sp, #0]
 801bc9a:	4605      	mov	r5, r0
 801bc9c:	4630      	mov	r0, r6
 801bc9e:	f7ff f8e9 	bl	801ae74 <_malloc_r>
 801bca2:	b948      	cbnz	r0, 801bcb8 <__smakebuf_r+0x44>
 801bca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bca8:	059a      	lsls	r2, r3, #22
 801bcaa:	d4ef      	bmi.n	801bc8c <__smakebuf_r+0x18>
 801bcac:	f023 0303 	bic.w	r3, r3, #3
 801bcb0:	f043 0302 	orr.w	r3, r3, #2
 801bcb4:	81a3      	strh	r3, [r4, #12]
 801bcb6:	e7e3      	b.n	801bc80 <__smakebuf_r+0xc>
 801bcb8:	4b0d      	ldr	r3, [pc, #52]	; (801bcf0 <__smakebuf_r+0x7c>)
 801bcba:	62b3      	str	r3, [r6, #40]	; 0x28
 801bcbc:	89a3      	ldrh	r3, [r4, #12]
 801bcbe:	6020      	str	r0, [r4, #0]
 801bcc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bcc4:	81a3      	strh	r3, [r4, #12]
 801bcc6:	9b00      	ldr	r3, [sp, #0]
 801bcc8:	6163      	str	r3, [r4, #20]
 801bcca:	9b01      	ldr	r3, [sp, #4]
 801bccc:	6120      	str	r0, [r4, #16]
 801bcce:	b15b      	cbz	r3, 801bce8 <__smakebuf_r+0x74>
 801bcd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bcd4:	4630      	mov	r0, r6
 801bcd6:	f000 fa1b 	bl	801c110 <_isatty_r>
 801bcda:	b128      	cbz	r0, 801bce8 <__smakebuf_r+0x74>
 801bcdc:	89a3      	ldrh	r3, [r4, #12]
 801bcde:	f023 0303 	bic.w	r3, r3, #3
 801bce2:	f043 0301 	orr.w	r3, r3, #1
 801bce6:	81a3      	strh	r3, [r4, #12]
 801bce8:	89a0      	ldrh	r0, [r4, #12]
 801bcea:	4305      	orrs	r5, r0
 801bcec:	81a5      	strh	r5, [r4, #12]
 801bcee:	e7cd      	b.n	801bc8c <__smakebuf_r+0x18>
 801bcf0:	0801ba89 	.word	0x0801ba89

0801bcf4 <__malloc_lock>:
 801bcf4:	4801      	ldr	r0, [pc, #4]	; (801bcfc <__malloc_lock+0x8>)
 801bcf6:	f7fe bff8 	b.w	801acea <__retarget_lock_acquire_recursive>
 801bcfa:	bf00      	nop
 801bcfc:	200029c0 	.word	0x200029c0

0801bd00 <__malloc_unlock>:
 801bd00:	4801      	ldr	r0, [pc, #4]	; (801bd08 <__malloc_unlock+0x8>)
 801bd02:	f7fe bff3 	b.w	801acec <__retarget_lock_release_recursive>
 801bd06:	bf00      	nop
 801bd08:	200029c0 	.word	0x200029c0

0801bd0c <_realloc_r>:
 801bd0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd10:	4680      	mov	r8, r0
 801bd12:	4614      	mov	r4, r2
 801bd14:	460e      	mov	r6, r1
 801bd16:	b921      	cbnz	r1, 801bd22 <_realloc_r+0x16>
 801bd18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bd1c:	4611      	mov	r1, r2
 801bd1e:	f7ff b8a9 	b.w	801ae74 <_malloc_r>
 801bd22:	b92a      	cbnz	r2, 801bd30 <_realloc_r+0x24>
 801bd24:	f7ff f83a 	bl	801ad9c <_free_r>
 801bd28:	4625      	mov	r5, r4
 801bd2a:	4628      	mov	r0, r5
 801bd2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd30:	f000 fa10 	bl	801c154 <_malloc_usable_size_r>
 801bd34:	4284      	cmp	r4, r0
 801bd36:	4607      	mov	r7, r0
 801bd38:	d802      	bhi.n	801bd40 <_realloc_r+0x34>
 801bd3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801bd3e:	d812      	bhi.n	801bd66 <_realloc_r+0x5a>
 801bd40:	4621      	mov	r1, r4
 801bd42:	4640      	mov	r0, r8
 801bd44:	f7ff f896 	bl	801ae74 <_malloc_r>
 801bd48:	4605      	mov	r5, r0
 801bd4a:	2800      	cmp	r0, #0
 801bd4c:	d0ed      	beq.n	801bd2a <_realloc_r+0x1e>
 801bd4e:	42bc      	cmp	r4, r7
 801bd50:	4622      	mov	r2, r4
 801bd52:	4631      	mov	r1, r6
 801bd54:	bf28      	it	cs
 801bd56:	463a      	movcs	r2, r7
 801bd58:	f7fe ffda 	bl	801ad10 <memcpy>
 801bd5c:	4631      	mov	r1, r6
 801bd5e:	4640      	mov	r0, r8
 801bd60:	f7ff f81c 	bl	801ad9c <_free_r>
 801bd64:	e7e1      	b.n	801bd2a <_realloc_r+0x1e>
 801bd66:	4635      	mov	r5, r6
 801bd68:	e7df      	b.n	801bd2a <_realloc_r+0x1e>

0801bd6a <__ssputs_r>:
 801bd6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bd6e:	688e      	ldr	r6, [r1, #8]
 801bd70:	429e      	cmp	r6, r3
 801bd72:	4682      	mov	sl, r0
 801bd74:	460c      	mov	r4, r1
 801bd76:	4690      	mov	r8, r2
 801bd78:	461f      	mov	r7, r3
 801bd7a:	d838      	bhi.n	801bdee <__ssputs_r+0x84>
 801bd7c:	898a      	ldrh	r2, [r1, #12]
 801bd7e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801bd82:	d032      	beq.n	801bdea <__ssputs_r+0x80>
 801bd84:	6825      	ldr	r5, [r4, #0]
 801bd86:	6909      	ldr	r1, [r1, #16]
 801bd88:	eba5 0901 	sub.w	r9, r5, r1
 801bd8c:	6965      	ldr	r5, [r4, #20]
 801bd8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bd92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801bd96:	3301      	adds	r3, #1
 801bd98:	444b      	add	r3, r9
 801bd9a:	106d      	asrs	r5, r5, #1
 801bd9c:	429d      	cmp	r5, r3
 801bd9e:	bf38      	it	cc
 801bda0:	461d      	movcc	r5, r3
 801bda2:	0553      	lsls	r3, r2, #21
 801bda4:	d531      	bpl.n	801be0a <__ssputs_r+0xa0>
 801bda6:	4629      	mov	r1, r5
 801bda8:	f7ff f864 	bl	801ae74 <_malloc_r>
 801bdac:	4606      	mov	r6, r0
 801bdae:	b950      	cbnz	r0, 801bdc6 <__ssputs_r+0x5c>
 801bdb0:	230c      	movs	r3, #12
 801bdb2:	f8ca 3000 	str.w	r3, [sl]
 801bdb6:	89a3      	ldrh	r3, [r4, #12]
 801bdb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bdbc:	81a3      	strh	r3, [r4, #12]
 801bdbe:	f04f 30ff 	mov.w	r0, #4294967295
 801bdc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bdc6:	6921      	ldr	r1, [r4, #16]
 801bdc8:	464a      	mov	r2, r9
 801bdca:	f7fe ffa1 	bl	801ad10 <memcpy>
 801bdce:	89a3      	ldrh	r3, [r4, #12]
 801bdd0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801bdd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bdd8:	81a3      	strh	r3, [r4, #12]
 801bdda:	6126      	str	r6, [r4, #16]
 801bddc:	6165      	str	r5, [r4, #20]
 801bdde:	444e      	add	r6, r9
 801bde0:	eba5 0509 	sub.w	r5, r5, r9
 801bde4:	6026      	str	r6, [r4, #0]
 801bde6:	60a5      	str	r5, [r4, #8]
 801bde8:	463e      	mov	r6, r7
 801bdea:	42be      	cmp	r6, r7
 801bdec:	d900      	bls.n	801bdf0 <__ssputs_r+0x86>
 801bdee:	463e      	mov	r6, r7
 801bdf0:	6820      	ldr	r0, [r4, #0]
 801bdf2:	4632      	mov	r2, r6
 801bdf4:	4641      	mov	r1, r8
 801bdf6:	f7fe ff99 	bl	801ad2c <memmove>
 801bdfa:	68a3      	ldr	r3, [r4, #8]
 801bdfc:	1b9b      	subs	r3, r3, r6
 801bdfe:	60a3      	str	r3, [r4, #8]
 801be00:	6823      	ldr	r3, [r4, #0]
 801be02:	4433      	add	r3, r6
 801be04:	6023      	str	r3, [r4, #0]
 801be06:	2000      	movs	r0, #0
 801be08:	e7db      	b.n	801bdc2 <__ssputs_r+0x58>
 801be0a:	462a      	mov	r2, r5
 801be0c:	f7ff ff7e 	bl	801bd0c <_realloc_r>
 801be10:	4606      	mov	r6, r0
 801be12:	2800      	cmp	r0, #0
 801be14:	d1e1      	bne.n	801bdda <__ssputs_r+0x70>
 801be16:	6921      	ldr	r1, [r4, #16]
 801be18:	4650      	mov	r0, sl
 801be1a:	f7fe ffbf 	bl	801ad9c <_free_r>
 801be1e:	e7c7      	b.n	801bdb0 <__ssputs_r+0x46>

0801be20 <_svfiprintf_r>:
 801be20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be24:	4698      	mov	r8, r3
 801be26:	898b      	ldrh	r3, [r1, #12]
 801be28:	061b      	lsls	r3, r3, #24
 801be2a:	b09d      	sub	sp, #116	; 0x74
 801be2c:	4607      	mov	r7, r0
 801be2e:	460d      	mov	r5, r1
 801be30:	4614      	mov	r4, r2
 801be32:	d50e      	bpl.n	801be52 <_svfiprintf_r+0x32>
 801be34:	690b      	ldr	r3, [r1, #16]
 801be36:	b963      	cbnz	r3, 801be52 <_svfiprintf_r+0x32>
 801be38:	2140      	movs	r1, #64	; 0x40
 801be3a:	f7ff f81b 	bl	801ae74 <_malloc_r>
 801be3e:	6028      	str	r0, [r5, #0]
 801be40:	6128      	str	r0, [r5, #16]
 801be42:	b920      	cbnz	r0, 801be4e <_svfiprintf_r+0x2e>
 801be44:	230c      	movs	r3, #12
 801be46:	603b      	str	r3, [r7, #0]
 801be48:	f04f 30ff 	mov.w	r0, #4294967295
 801be4c:	e0d1      	b.n	801bff2 <_svfiprintf_r+0x1d2>
 801be4e:	2340      	movs	r3, #64	; 0x40
 801be50:	616b      	str	r3, [r5, #20]
 801be52:	2300      	movs	r3, #0
 801be54:	9309      	str	r3, [sp, #36]	; 0x24
 801be56:	2320      	movs	r3, #32
 801be58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801be5c:	f8cd 800c 	str.w	r8, [sp, #12]
 801be60:	2330      	movs	r3, #48	; 0x30
 801be62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801c00c <_svfiprintf_r+0x1ec>
 801be66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801be6a:	f04f 0901 	mov.w	r9, #1
 801be6e:	4623      	mov	r3, r4
 801be70:	469a      	mov	sl, r3
 801be72:	f813 2b01 	ldrb.w	r2, [r3], #1
 801be76:	b10a      	cbz	r2, 801be7c <_svfiprintf_r+0x5c>
 801be78:	2a25      	cmp	r2, #37	; 0x25
 801be7a:	d1f9      	bne.n	801be70 <_svfiprintf_r+0x50>
 801be7c:	ebba 0b04 	subs.w	fp, sl, r4
 801be80:	d00b      	beq.n	801be9a <_svfiprintf_r+0x7a>
 801be82:	465b      	mov	r3, fp
 801be84:	4622      	mov	r2, r4
 801be86:	4629      	mov	r1, r5
 801be88:	4638      	mov	r0, r7
 801be8a:	f7ff ff6e 	bl	801bd6a <__ssputs_r>
 801be8e:	3001      	adds	r0, #1
 801be90:	f000 80aa 	beq.w	801bfe8 <_svfiprintf_r+0x1c8>
 801be94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801be96:	445a      	add	r2, fp
 801be98:	9209      	str	r2, [sp, #36]	; 0x24
 801be9a:	f89a 3000 	ldrb.w	r3, [sl]
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	f000 80a2 	beq.w	801bfe8 <_svfiprintf_r+0x1c8>
 801bea4:	2300      	movs	r3, #0
 801bea6:	f04f 32ff 	mov.w	r2, #4294967295
 801beaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801beae:	f10a 0a01 	add.w	sl, sl, #1
 801beb2:	9304      	str	r3, [sp, #16]
 801beb4:	9307      	str	r3, [sp, #28]
 801beb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801beba:	931a      	str	r3, [sp, #104]	; 0x68
 801bebc:	4654      	mov	r4, sl
 801bebe:	2205      	movs	r2, #5
 801bec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bec4:	4851      	ldr	r0, [pc, #324]	; (801c00c <_svfiprintf_r+0x1ec>)
 801bec6:	f7e4 f983 	bl	80001d0 <memchr>
 801beca:	9a04      	ldr	r2, [sp, #16]
 801becc:	b9d8      	cbnz	r0, 801bf06 <_svfiprintf_r+0xe6>
 801bece:	06d0      	lsls	r0, r2, #27
 801bed0:	bf44      	itt	mi
 801bed2:	2320      	movmi	r3, #32
 801bed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bed8:	0711      	lsls	r1, r2, #28
 801beda:	bf44      	itt	mi
 801bedc:	232b      	movmi	r3, #43	; 0x2b
 801bede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bee2:	f89a 3000 	ldrb.w	r3, [sl]
 801bee6:	2b2a      	cmp	r3, #42	; 0x2a
 801bee8:	d015      	beq.n	801bf16 <_svfiprintf_r+0xf6>
 801beea:	9a07      	ldr	r2, [sp, #28]
 801beec:	4654      	mov	r4, sl
 801beee:	2000      	movs	r0, #0
 801bef0:	f04f 0c0a 	mov.w	ip, #10
 801bef4:	4621      	mov	r1, r4
 801bef6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801befa:	3b30      	subs	r3, #48	; 0x30
 801befc:	2b09      	cmp	r3, #9
 801befe:	d94e      	bls.n	801bf9e <_svfiprintf_r+0x17e>
 801bf00:	b1b0      	cbz	r0, 801bf30 <_svfiprintf_r+0x110>
 801bf02:	9207      	str	r2, [sp, #28]
 801bf04:	e014      	b.n	801bf30 <_svfiprintf_r+0x110>
 801bf06:	eba0 0308 	sub.w	r3, r0, r8
 801bf0a:	fa09 f303 	lsl.w	r3, r9, r3
 801bf0e:	4313      	orrs	r3, r2
 801bf10:	9304      	str	r3, [sp, #16]
 801bf12:	46a2      	mov	sl, r4
 801bf14:	e7d2      	b.n	801bebc <_svfiprintf_r+0x9c>
 801bf16:	9b03      	ldr	r3, [sp, #12]
 801bf18:	1d19      	adds	r1, r3, #4
 801bf1a:	681b      	ldr	r3, [r3, #0]
 801bf1c:	9103      	str	r1, [sp, #12]
 801bf1e:	2b00      	cmp	r3, #0
 801bf20:	bfbb      	ittet	lt
 801bf22:	425b      	neglt	r3, r3
 801bf24:	f042 0202 	orrlt.w	r2, r2, #2
 801bf28:	9307      	strge	r3, [sp, #28]
 801bf2a:	9307      	strlt	r3, [sp, #28]
 801bf2c:	bfb8      	it	lt
 801bf2e:	9204      	strlt	r2, [sp, #16]
 801bf30:	7823      	ldrb	r3, [r4, #0]
 801bf32:	2b2e      	cmp	r3, #46	; 0x2e
 801bf34:	d10c      	bne.n	801bf50 <_svfiprintf_r+0x130>
 801bf36:	7863      	ldrb	r3, [r4, #1]
 801bf38:	2b2a      	cmp	r3, #42	; 0x2a
 801bf3a:	d135      	bne.n	801bfa8 <_svfiprintf_r+0x188>
 801bf3c:	9b03      	ldr	r3, [sp, #12]
 801bf3e:	1d1a      	adds	r2, r3, #4
 801bf40:	681b      	ldr	r3, [r3, #0]
 801bf42:	9203      	str	r2, [sp, #12]
 801bf44:	2b00      	cmp	r3, #0
 801bf46:	bfb8      	it	lt
 801bf48:	f04f 33ff 	movlt.w	r3, #4294967295
 801bf4c:	3402      	adds	r4, #2
 801bf4e:	9305      	str	r3, [sp, #20]
 801bf50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801c01c <_svfiprintf_r+0x1fc>
 801bf54:	7821      	ldrb	r1, [r4, #0]
 801bf56:	2203      	movs	r2, #3
 801bf58:	4650      	mov	r0, sl
 801bf5a:	f7e4 f939 	bl	80001d0 <memchr>
 801bf5e:	b140      	cbz	r0, 801bf72 <_svfiprintf_r+0x152>
 801bf60:	2340      	movs	r3, #64	; 0x40
 801bf62:	eba0 000a 	sub.w	r0, r0, sl
 801bf66:	fa03 f000 	lsl.w	r0, r3, r0
 801bf6a:	9b04      	ldr	r3, [sp, #16]
 801bf6c:	4303      	orrs	r3, r0
 801bf6e:	3401      	adds	r4, #1
 801bf70:	9304      	str	r3, [sp, #16]
 801bf72:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bf76:	4826      	ldr	r0, [pc, #152]	; (801c010 <_svfiprintf_r+0x1f0>)
 801bf78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bf7c:	2206      	movs	r2, #6
 801bf7e:	f7e4 f927 	bl	80001d0 <memchr>
 801bf82:	2800      	cmp	r0, #0
 801bf84:	d038      	beq.n	801bff8 <_svfiprintf_r+0x1d8>
 801bf86:	4b23      	ldr	r3, [pc, #140]	; (801c014 <_svfiprintf_r+0x1f4>)
 801bf88:	bb1b      	cbnz	r3, 801bfd2 <_svfiprintf_r+0x1b2>
 801bf8a:	9b03      	ldr	r3, [sp, #12]
 801bf8c:	3307      	adds	r3, #7
 801bf8e:	f023 0307 	bic.w	r3, r3, #7
 801bf92:	3308      	adds	r3, #8
 801bf94:	9303      	str	r3, [sp, #12]
 801bf96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf98:	4433      	add	r3, r6
 801bf9a:	9309      	str	r3, [sp, #36]	; 0x24
 801bf9c:	e767      	b.n	801be6e <_svfiprintf_r+0x4e>
 801bf9e:	fb0c 3202 	mla	r2, ip, r2, r3
 801bfa2:	460c      	mov	r4, r1
 801bfa4:	2001      	movs	r0, #1
 801bfa6:	e7a5      	b.n	801bef4 <_svfiprintf_r+0xd4>
 801bfa8:	2300      	movs	r3, #0
 801bfaa:	3401      	adds	r4, #1
 801bfac:	9305      	str	r3, [sp, #20]
 801bfae:	4619      	mov	r1, r3
 801bfb0:	f04f 0c0a 	mov.w	ip, #10
 801bfb4:	4620      	mov	r0, r4
 801bfb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bfba:	3a30      	subs	r2, #48	; 0x30
 801bfbc:	2a09      	cmp	r2, #9
 801bfbe:	d903      	bls.n	801bfc8 <_svfiprintf_r+0x1a8>
 801bfc0:	2b00      	cmp	r3, #0
 801bfc2:	d0c5      	beq.n	801bf50 <_svfiprintf_r+0x130>
 801bfc4:	9105      	str	r1, [sp, #20]
 801bfc6:	e7c3      	b.n	801bf50 <_svfiprintf_r+0x130>
 801bfc8:	fb0c 2101 	mla	r1, ip, r1, r2
 801bfcc:	4604      	mov	r4, r0
 801bfce:	2301      	movs	r3, #1
 801bfd0:	e7f0      	b.n	801bfb4 <_svfiprintf_r+0x194>
 801bfd2:	ab03      	add	r3, sp, #12
 801bfd4:	9300      	str	r3, [sp, #0]
 801bfd6:	462a      	mov	r2, r5
 801bfd8:	4b0f      	ldr	r3, [pc, #60]	; (801c018 <_svfiprintf_r+0x1f8>)
 801bfda:	a904      	add	r1, sp, #16
 801bfdc:	4638      	mov	r0, r7
 801bfde:	f3af 8000 	nop.w
 801bfe2:	1c42      	adds	r2, r0, #1
 801bfe4:	4606      	mov	r6, r0
 801bfe6:	d1d6      	bne.n	801bf96 <_svfiprintf_r+0x176>
 801bfe8:	89ab      	ldrh	r3, [r5, #12]
 801bfea:	065b      	lsls	r3, r3, #25
 801bfec:	f53f af2c 	bmi.w	801be48 <_svfiprintf_r+0x28>
 801bff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bff2:	b01d      	add	sp, #116	; 0x74
 801bff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bff8:	ab03      	add	r3, sp, #12
 801bffa:	9300      	str	r3, [sp, #0]
 801bffc:	462a      	mov	r2, r5
 801bffe:	4b06      	ldr	r3, [pc, #24]	; (801c018 <_svfiprintf_r+0x1f8>)
 801c000:	a904      	add	r1, sp, #16
 801c002:	4638      	mov	r0, r7
 801c004:	f7ff f972 	bl	801b2ec <_printf_i>
 801c008:	e7eb      	b.n	801bfe2 <_svfiprintf_r+0x1c2>
 801c00a:	bf00      	nop
 801c00c:	0801f048 	.word	0x0801f048
 801c010:	0801f052 	.word	0x0801f052
 801c014:	00000000 	.word	0x00000000
 801c018:	0801bd6b 	.word	0x0801bd6b
 801c01c:	0801f04e 	.word	0x0801f04e

0801c020 <__sread>:
 801c020:	b510      	push	{r4, lr}
 801c022:	460c      	mov	r4, r1
 801c024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c028:	f000 f89c 	bl	801c164 <_read_r>
 801c02c:	2800      	cmp	r0, #0
 801c02e:	bfab      	itete	ge
 801c030:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c032:	89a3      	ldrhlt	r3, [r4, #12]
 801c034:	181b      	addge	r3, r3, r0
 801c036:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c03a:	bfac      	ite	ge
 801c03c:	6563      	strge	r3, [r4, #84]	; 0x54
 801c03e:	81a3      	strhlt	r3, [r4, #12]
 801c040:	bd10      	pop	{r4, pc}

0801c042 <__swrite>:
 801c042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c046:	461f      	mov	r7, r3
 801c048:	898b      	ldrh	r3, [r1, #12]
 801c04a:	05db      	lsls	r3, r3, #23
 801c04c:	4605      	mov	r5, r0
 801c04e:	460c      	mov	r4, r1
 801c050:	4616      	mov	r6, r2
 801c052:	d505      	bpl.n	801c060 <__swrite+0x1e>
 801c054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c058:	2302      	movs	r3, #2
 801c05a:	2200      	movs	r2, #0
 801c05c:	f000 f868 	bl	801c130 <_lseek_r>
 801c060:	89a3      	ldrh	r3, [r4, #12]
 801c062:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c066:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c06a:	81a3      	strh	r3, [r4, #12]
 801c06c:	4632      	mov	r2, r6
 801c06e:	463b      	mov	r3, r7
 801c070:	4628      	mov	r0, r5
 801c072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c076:	f000 b817 	b.w	801c0a8 <_write_r>

0801c07a <__sseek>:
 801c07a:	b510      	push	{r4, lr}
 801c07c:	460c      	mov	r4, r1
 801c07e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c082:	f000 f855 	bl	801c130 <_lseek_r>
 801c086:	1c43      	adds	r3, r0, #1
 801c088:	89a3      	ldrh	r3, [r4, #12]
 801c08a:	bf15      	itete	ne
 801c08c:	6560      	strne	r0, [r4, #84]	; 0x54
 801c08e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c092:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c096:	81a3      	strheq	r3, [r4, #12]
 801c098:	bf18      	it	ne
 801c09a:	81a3      	strhne	r3, [r4, #12]
 801c09c:	bd10      	pop	{r4, pc}

0801c09e <__sclose>:
 801c09e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c0a2:	f000 b813 	b.w	801c0cc <_close_r>
	...

0801c0a8 <_write_r>:
 801c0a8:	b538      	push	{r3, r4, r5, lr}
 801c0aa:	4d07      	ldr	r5, [pc, #28]	; (801c0c8 <_write_r+0x20>)
 801c0ac:	4604      	mov	r4, r0
 801c0ae:	4608      	mov	r0, r1
 801c0b0:	4611      	mov	r1, r2
 801c0b2:	2200      	movs	r2, #0
 801c0b4:	602a      	str	r2, [r5, #0]
 801c0b6:	461a      	mov	r2, r3
 801c0b8:	f7e7 fed7 	bl	8003e6a <_write>
 801c0bc:	1c43      	adds	r3, r0, #1
 801c0be:	d102      	bne.n	801c0c6 <_write_r+0x1e>
 801c0c0:	682b      	ldr	r3, [r5, #0]
 801c0c2:	b103      	cbz	r3, 801c0c6 <_write_r+0x1e>
 801c0c4:	6023      	str	r3, [r4, #0]
 801c0c6:	bd38      	pop	{r3, r4, r5, pc}
 801c0c8:	200029cc 	.word	0x200029cc

0801c0cc <_close_r>:
 801c0cc:	b538      	push	{r3, r4, r5, lr}
 801c0ce:	4d06      	ldr	r5, [pc, #24]	; (801c0e8 <_close_r+0x1c>)
 801c0d0:	2300      	movs	r3, #0
 801c0d2:	4604      	mov	r4, r0
 801c0d4:	4608      	mov	r0, r1
 801c0d6:	602b      	str	r3, [r5, #0]
 801c0d8:	f7e7 fee3 	bl	8003ea2 <_close>
 801c0dc:	1c43      	adds	r3, r0, #1
 801c0de:	d102      	bne.n	801c0e6 <_close_r+0x1a>
 801c0e0:	682b      	ldr	r3, [r5, #0]
 801c0e2:	b103      	cbz	r3, 801c0e6 <_close_r+0x1a>
 801c0e4:	6023      	str	r3, [r4, #0]
 801c0e6:	bd38      	pop	{r3, r4, r5, pc}
 801c0e8:	200029cc 	.word	0x200029cc

0801c0ec <_fstat_r>:
 801c0ec:	b538      	push	{r3, r4, r5, lr}
 801c0ee:	4d07      	ldr	r5, [pc, #28]	; (801c10c <_fstat_r+0x20>)
 801c0f0:	2300      	movs	r3, #0
 801c0f2:	4604      	mov	r4, r0
 801c0f4:	4608      	mov	r0, r1
 801c0f6:	4611      	mov	r1, r2
 801c0f8:	602b      	str	r3, [r5, #0]
 801c0fa:	f7e7 fede 	bl	8003eba <_fstat>
 801c0fe:	1c43      	adds	r3, r0, #1
 801c100:	d102      	bne.n	801c108 <_fstat_r+0x1c>
 801c102:	682b      	ldr	r3, [r5, #0]
 801c104:	b103      	cbz	r3, 801c108 <_fstat_r+0x1c>
 801c106:	6023      	str	r3, [r4, #0]
 801c108:	bd38      	pop	{r3, r4, r5, pc}
 801c10a:	bf00      	nop
 801c10c:	200029cc 	.word	0x200029cc

0801c110 <_isatty_r>:
 801c110:	b538      	push	{r3, r4, r5, lr}
 801c112:	4d06      	ldr	r5, [pc, #24]	; (801c12c <_isatty_r+0x1c>)
 801c114:	2300      	movs	r3, #0
 801c116:	4604      	mov	r4, r0
 801c118:	4608      	mov	r0, r1
 801c11a:	602b      	str	r3, [r5, #0]
 801c11c:	f7e7 fedd 	bl	8003eda <_isatty>
 801c120:	1c43      	adds	r3, r0, #1
 801c122:	d102      	bne.n	801c12a <_isatty_r+0x1a>
 801c124:	682b      	ldr	r3, [r5, #0]
 801c126:	b103      	cbz	r3, 801c12a <_isatty_r+0x1a>
 801c128:	6023      	str	r3, [r4, #0]
 801c12a:	bd38      	pop	{r3, r4, r5, pc}
 801c12c:	200029cc 	.word	0x200029cc

0801c130 <_lseek_r>:
 801c130:	b538      	push	{r3, r4, r5, lr}
 801c132:	4d07      	ldr	r5, [pc, #28]	; (801c150 <_lseek_r+0x20>)
 801c134:	4604      	mov	r4, r0
 801c136:	4608      	mov	r0, r1
 801c138:	4611      	mov	r1, r2
 801c13a:	2200      	movs	r2, #0
 801c13c:	602a      	str	r2, [r5, #0]
 801c13e:	461a      	mov	r2, r3
 801c140:	f7e7 fed6 	bl	8003ef0 <_lseek>
 801c144:	1c43      	adds	r3, r0, #1
 801c146:	d102      	bne.n	801c14e <_lseek_r+0x1e>
 801c148:	682b      	ldr	r3, [r5, #0]
 801c14a:	b103      	cbz	r3, 801c14e <_lseek_r+0x1e>
 801c14c:	6023      	str	r3, [r4, #0]
 801c14e:	bd38      	pop	{r3, r4, r5, pc}
 801c150:	200029cc 	.word	0x200029cc

0801c154 <_malloc_usable_size_r>:
 801c154:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c158:	1f18      	subs	r0, r3, #4
 801c15a:	2b00      	cmp	r3, #0
 801c15c:	bfbc      	itt	lt
 801c15e:	580b      	ldrlt	r3, [r1, r0]
 801c160:	18c0      	addlt	r0, r0, r3
 801c162:	4770      	bx	lr

0801c164 <_read_r>:
 801c164:	b538      	push	{r3, r4, r5, lr}
 801c166:	4d07      	ldr	r5, [pc, #28]	; (801c184 <_read_r+0x20>)
 801c168:	4604      	mov	r4, r0
 801c16a:	4608      	mov	r0, r1
 801c16c:	4611      	mov	r1, r2
 801c16e:	2200      	movs	r2, #0
 801c170:	602a      	str	r2, [r5, #0]
 801c172:	461a      	mov	r2, r3
 801c174:	f7e7 fe5c 	bl	8003e30 <_read>
 801c178:	1c43      	adds	r3, r0, #1
 801c17a:	d102      	bne.n	801c182 <_read_r+0x1e>
 801c17c:	682b      	ldr	r3, [r5, #0]
 801c17e:	b103      	cbz	r3, 801c182 <_read_r+0x1e>
 801c180:	6023      	str	r3, [r4, #0]
 801c182:	bd38      	pop	{r3, r4, r5, pc}
 801c184:	200029cc 	.word	0x200029cc

0801c188 <_init>:
 801c188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c18a:	bf00      	nop
 801c18c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c18e:	bc08      	pop	{r3}
 801c190:	469e      	mov	lr, r3
 801c192:	4770      	bx	lr

0801c194 <_fini>:
 801c194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c196:	bf00      	nop
 801c198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c19a:	bc08      	pop	{r3}
 801c19c:	469e      	mov	lr, r3
 801c19e:	4770      	bx	lr
